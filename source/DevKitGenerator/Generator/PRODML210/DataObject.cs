//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 
namespace Energistics.Generator.PRODML210 {
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class PropertyKind : AbstractObject {
        
        private bool isAbstractField;
        
        private Energistics.DataAccess.Timestamp deprecationDateField;
        
        private bool deprecationDateFieldSpecified;
        
        private Energistics.DataAccess.ExtensibleEnum<QuantityClassKind> quantityClassField;
        
        private DataObjectReference parentField;
        
        /// <remarks/>
        /// <summary>This boolean indicates whether the PropertyKind should be used as a real property or not.  If the Is Abstract flag is set, then this entry should be used only as the parent of a real property. For example, the PropertyKind of "force per length" shouldn't be used directly, as it is really just a description of some units of measure. This entry should only be used as the parent of the real physical property "surface tension".</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"This boolean indicates whether the PropertyKind should be used as a real property or not.  If the Is Abstract flag is set, then this entry should be used only as the parent of a real property. For example, the PropertyKind of ""force per length"" shouldn't be used directly, as it is really just a description of some units of measure. This entry should only be used as the parent of the real physical property ""surface tension"".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsAbstract", DataType="boolean")]
        public bool IsAbstract {
            get {
                return this.isAbstractField;
            }
            set {
                this.isAbstractField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date at which this property dictionary entry must no longer be used. Files generated before this date would have used this entry so it is left here for reference.   A null value means the property kind is still valid.</summary>
        [System.ComponentModel.DescriptionAttribute("Date at which this property dictionary entry must no longer be used. Files genera" +
            "ted before this date would have used this entry so it is left here for reference" +
            ".   A null value means the property kind is still valid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DeprecationDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DeprecationDate {
            get {
                return this.deprecationDateField;
            }
            set {
                this.deprecationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DeprecationDateSpecified {
            get {
                return this.deprecationDateFieldSpecified;
            }
            set {
                this.deprecationDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to the name of a quantity class in the Energistics Unit of Measure Dictionary. If there is no match in the Energistics Unit of Measure Dictionary, then this attribute is purely for human information.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A reference to the name of a quantity class in the Energistics Unit of Measure Di" +
            "ctionary. If there is no match in the Energistics Unit of Measure Dictionary, th" +
            "en this attribute is purely for human information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("QuantityClass", DataType="QuantityClassKindExt")]
        public Energistics.DataAccess.ExtensibleEnum<QuantityClassKind> QuantityClass {
            get {
                return this.quantityClassField;
            }
            set {
                this.quantityClassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates the parent of this property kind. BUSINESS RULE : Only the top root abstract property kind has not to define a parent property kind.</summary>
        [System.ComponentModel.DescriptionAttribute("Indicates the parent of this property kind. BUSINESS RULE : Only the top root abs" +
            "tract property kind has not to define a parent property kind.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parent", DataType="DataObjectReference")]
        public DataObjectReference Parent {
            get {
                return this.parentField;
            }
            set {
                this.parentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class DataObjectReference {
        
        private string contentTypeField;
        
        private string titleField;
        
        private string uuidField;
        
        private string uuidAuthorityField;
        
        private string uriField;
        
        private string objectVersionField;
        
        /// <remarks/>
        /// <summary>The content type of the referenced element.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The content type of the referenced element.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContentType", DataType="String2000")]
        public string ContentType {
            get {
                return this.contentTypeField;
            }
            set {
                this.contentTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The Title of the referenced object. The Title of a top level element would be inherited from AbstractObject and must be present on any referenced object.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The Title of the referenced object. The Title of a top level element would be inh" +
            "erited from AbstractObject and must be present on any referenced object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Title", DataType="String2000")]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to an object using its global UID.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [System.ComponentModel.DescriptionAttribute("Reference to an object using its global UID.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Uuid", DataType="UuidString")]
        public string Uuid {
            get {
                return this.uuidField;
            }
            set {
                this.uuidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The authority that issued and maintains the uuid of the referenced object. Used mainly in alias context.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The authority that issued and maintains the uuid of the referenced object. Used m" +
            "ainly in alias context.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UuidAuthority", DataType="String64")]
        public string UuidAuthority {
            get {
                return this.uuidAuthorityField;
            }
            set {
                this.uuidAuthorityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This is the URI of a referenced object.   Do not use this to store the path and file names of an external object - that is done through the External Dataset machinery.  This element is intended for use with the Energistics Transfer Protocol.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        [System.ComponentModel.DescriptionAttribute("This is the URI of a referenced object.   Do not use this to store the path and f" +
            "ile names of an external object - that is done through the External Dataset mach" +
            "inery.  This element is intended for use with the Energistics Transfer Protocol." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Uri", DataType="anyURI")]
        public string Uri {
            get {
                return this.uriField;
            }
            set {
                this.uriField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates the version of the object which is referenced. This must be identical to the objectVersion (inherited from AbstractObject) attribute of the object.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Indicates the version of the object which is referenced. This must be identical t" +
            "o the objectVersion (inherited from AbstractObject) attribute of the object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ObjectVersion", DataType="String64")]
        public string ObjectVersion {
            get {
                return this.objectVersionField;
            }
            set {
                this.objectVersionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WellTestValidationOperation {
        
        private ValidationOperation kindField;
        
        private ValidationResult resultField;
        
        private System.DateTime dateField;
        
        private bool dateFieldSpecified;
        
        private string toolField;
        
        private string methodField;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The kind of validation operation. See enum ValidationOperation.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The kind of validation operation. See enum ValidationOperation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="ValidationOperation")]
        public ValidationOperation Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The result of the validation operation. See enum ValidationResult.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The result of the validation operation. See enum ValidationResult.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Result", DataType="ValidationResult")]
        public ValidationResult Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date of the validation operation.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date of the validation operation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Date", DataType="date")]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateSpecified {
            get {
                return this.dateFieldSpecified;
            }
            set {
                this.dateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The tool used for the validation operation.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The tool used for the validation operation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tool", DataType="String64")]
        public string Tool {
            get {
                return this.toolField;
            }
            set {
                this.toolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The method used for the validation operation..</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The method used for the validation operation..")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Method", DataType="String64")]
        public string Method {
            get {
                return this.methodField;
            }
            set {
                this.methodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A comment about the operation.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A comment about the operation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ValidationOperation {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acquisition validation")]
        acquisitionvalidation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("allocation validation")]
        allocationvalidation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("external quality assurance")]
        externalqualityassurance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("site validation")]
        sitevalidation,
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("validation result")]
        validationresult,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well model validation")]
        wellmodelvalidation,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ValidationResult {
        
        /// <remarks/>
        failed,
        
        /// <remarks/>
        passed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("passed with changes")]
        passedwithchanges,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WellTestSeparatorData {
        
        private AbstractPressureValue separatorPressureField;
        
        private ThermodynamicTemperatureMeasure separatorTemperatureField;
        
        /// <remarks/>
        /// <summary>The pressure measured at the separator during the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure measured at the separator during the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeparatorPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue SeparatorPressure {
            get {
                return this.separatorPressureField;
            }
            set {
                this.separatorPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature measured at the separator during the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature measured at the separator during the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeparatorTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure SeparatorTemperature {
            get {
                return this.separatorTemperatureField;
            }
            set {
                this.separatorTemperatureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelativePressure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GaugePressure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbsolutePressure))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractPressureValue {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class RelativePressure : AbstractPressureValue {
        
        private PressureMeasure relativePressure1Field;
        
        private ReferencePressure referencePressureField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("RelativePressure")]
        public PressureMeasure RelativePressure1 {
            get {
                return this.relativePressure1Field;
            }
            set {
                this.relativePressure1Field = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferencePressure", DataType="ReferencePressure")]
        public ReferencePressure ReferencePressure {
            get {
                return this.referencePressureField;
            }
            set {
                this.referencePressureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class PressureMeasure {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="PressureUomWithLegacy")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ReferencePressure {
        
        private PressureUom uomField;
        
        private ReferencePressureKind referencePressureKindField;
        
        private bool referencePressureKindFieldSpecified;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="PressureUom")]
        public PressureUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("referencePressureKind", DataType="ReferencePressureKind")]
        public ReferencePressureKind referencePressureKind {
            get {
                return this.referencePressureKindField;
            }
            set {
                this.referencePressureKindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool referencePressureKindSpecified {
            get {
                return this.referencePressureKindFieldSpecified;
            }
            set {
                this.referencePressureKindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbf/ft2")]
        Item001lbfft2,
        
        /// <remarks/>
        at,
        
        /// <remarks/>
        atm,
        
        /// <remarks/>
        bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cmH2O[4degC]")]
        cmH2O4degC,
        
        /// <remarks/>
        cPa,
        
        /// <remarks/>
        dPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne/cm2")]
        dynecm2,
        
        /// <remarks/>
        EPa,
        
        /// <remarks/>
        fPa,
        
        /// <remarks/>
        GPa,
        
        /// <remarks/>
        hbar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inH2O[39degF]")]
        inH2O39degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inH2O[60degF]")]
        inH2O60degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inHg[32degF]")]
        inHg32degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inHg[60degF]")]
        inHg60degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/cm2")]
        kgfcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/m2")]
        kgfm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/mm2")]
        kgfmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN/m2")]
        kNm2,
        
        /// <remarks/>
        kPa,
        
        /// <remarks/>
        kpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft2")]
        lbfft2,
        
        /// <remarks/>
        mbar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mmHg[0degC]")]
        mmHg0degC,
        
        /// <remarks/>
        mPa,
        
        /// <remarks/>
        MPa,
        
        /// <remarks/>
        Mpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m2")]
        Nm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/mm2")]
        Nmm2,
        
        /// <remarks/>
        nPa,
        
        /// <remarks/>
        Pa,
        
        /// <remarks/>
        pPa,
        
        /// <remarks/>
        psi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]/ft2")]
        tonfUKft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/ft2")]
        tonfUSft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/in2")]
        tonfUSin2,
        
        /// <remarks/>
        torr,
        
        /// <remarks/>
        TPa,
        
        /// <remarks/>
        ubar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("umHg[0degC]")]
        umHg0degC,
        
        /// <remarks/>
        uPa,
        
        /// <remarks/>
        upsi,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReferencePressureKind {
        
        /// <remarks/>
        absolute,
        
        /// <remarks/>
        ambient,
        
        /// <remarks/>
        legal,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class GaugePressure : AbstractPressureValue {
        
        private PressureMeasureExt gaugePressure1Field;
        
        private ReferencePressure referencePressureField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("GaugePressure")]
        public PressureMeasureExt GaugePressure1 {
            get {
                return this.gaugePressure1Field;
            }
            set {
                this.gaugePressure1Field = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferencePressure", DataType="ReferencePressure")]
        public ReferencePressure ReferencePressure {
            get {
                return this.referencePressureField;
            }
            set {
                this.referencePressureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SaturationPressure))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class PressureMeasureExt {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="PressureUomExt")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class SaturationPressure : PressureMeasureExt {
        
        private SaturationPointKind kindField;
        
        /// <remarks/>
        /// <summary>The kind of saturation point whose pressure is being measured. Enum. See saturationpointkind.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The kind of saturation point whose pressure is being measured. Enum. See saturati" +
            "onpointkind.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("kind", DataType="SaturationPointKind")]
        public SaturationPointKind kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum SaturationPointKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bubble point")]
        bubblepoint,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dew point")]
        dewpoint,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("retrograde dew point")]
        retrogradedewpoint,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("critical point")]
        criticalpoint,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class AbsolutePressure : AbstractPressureValue {
        
        private PressureMeasureExt absolutePressure1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("AbsolutePressure")]
        public PressureMeasureExt AbsolutePressure1 {
            get {
                return this.absolutePressure1Field;
            }
            set {
                this.absolutePressure1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SaturationTemperature))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ThermodynamicTemperatureMeasure {
        
        private ThermodynamicTemperatureUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ThermodynamicTemperatureUom")]
        public ThermodynamicTemperatureUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermodynamicTemperatureUom {
        
        /// <remarks/>
        degC,
        
        /// <remarks/>
        degF,
        
        /// <remarks/>
        degR,
        
        /// <remarks/>
        K,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class SaturationTemperature : ThermodynamicTemperatureMeasure {
        
        private SaturationPointKind kindField;
        
        /// <remarks/>
        /// <summary>The kind of saturation point whose temperature is being measured. Enum. See saturationpointkind.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The kind of saturation point whose temperature is being measured. Enum. See satur" +
            "ationpointkind.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("kind", DataType="SaturationPointKind")]
        public SaturationPointKind kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WellTestWellheadData {
        
        private ThermodynamicTemperatureMeasure temperatureField;
        
        private AbstractPressureValue flowingPressureField;
        
        private AbstractPressureValue shutInPressureField;
        
        private AbstractPressureValue flowLinePressureField;
        
        private LengthMeasure chokeOrificeSizeField;
        
        private AbstractPressureValue gasLiftPresField;
        
        private ThermodynamicTemperatureMeasure gasLiftTempField;
        
        private LengthMeasure gasLiftchokeOrificeSizeField;
        
        private WellTestTestVolume gasLiftVolumeField;
        
        private WellTestFluidRate gasLiftRateField;
        
        /// <remarks/>
        /// <summary>The temperature measured at the wellhead during the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature measured at the wellhead during the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Temperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure Temperature {
            get {
                return this.temperatureField;
            }
            set {
                this.temperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The flowing pressure measured at the wellhead during the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("The flowing pressure measured at the wellhead during the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowingPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue FlowingPressure {
            get {
                return this.flowingPressureField;
            }
            set {
                this.flowingPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The shut-in pressure measured at the wellhead during the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("The shut-in pressure measured at the wellhead during the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShutInPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue ShutInPressure {
            get {
                return this.shutInPressureField;
            }
            set {
                this.shutInPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure measured at the flow line connected to the wellhead during this well test.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure measured at the flow line connected to the wellhead during this well" +
            " test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowLinePressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue FlowLinePressure {
            get {
                return this.flowLinePressureField;
            }
            set {
                this.flowLinePressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The size of the choke opening at the wellhead.</summary>
        [System.ComponentModel.DescriptionAttribute("The size of the choke opening at the wellhead.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChokeOrificeSize", DataType="LengthMeasure")]
        public LengthMeasure ChokeOrificeSize {
            get {
                return this.chokeOrificeSizeField;
            }
            set {
                this.chokeOrificeSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure of the lift gas at the wellhead.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure of the lift gas at the wellhead.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasLiftPres", DataType="AbstractPressureValue")]
        public AbstractPressureValue GasLiftPres {
            get {
                return this.gasLiftPresField;
            }
            set {
                this.gasLiftPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature of the lift gas at the wellhead.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature of the lift gas at the wellhead.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasLiftTemp", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure GasLiftTemp {
            get {
                return this.gasLiftTempField;
            }
            set {
                this.gasLiftTempField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The size of the gas lift choke opening.</summary>
        [System.ComponentModel.DescriptionAttribute("The size of the gas lift choke opening.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasLiftchokeOrificeSize", DataType="LengthMeasure")]
        public LengthMeasure GasLiftchokeOrificeSize {
            get {
                return this.gasLiftchokeOrificeSizeField;
            }
            set {
                this.gasLiftchokeOrificeSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Lift gas volumes injected during the well test at the wellhead.</summary>
        [System.ComponentModel.DescriptionAttribute("Lift gas volumes injected during the well test at the wellhead.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasLiftVolume", DataType="WellTestTestVolume")]
        public WellTestTestVolume GasLiftVolume {
            get {
                return this.gasLiftVolumeField;
            }
            set {
                this.gasLiftVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Lift gas rates injected during the well test at the wellhead.</summary>
        [System.ComponentModel.DescriptionAttribute("Lift gas rates injected during the well test at the wellhead.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasLiftRate", DataType="WellTestFluidRate")]
        public WellTestFluidRate GasLiftRate {
            get {
                return this.gasLiftRateField;
            }
            set {
                this.gasLiftRateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class LengthMeasure {
        
        private LengthUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthUom")]
        public LengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 ft")]
        Item01ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 ft[US]")]
        Item01ftUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 in")]
        Item01in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 yd")]
        Item01yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/16 in")]
        Item116in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/2 ft")]
        Item12ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/32 in")]
        Item132in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/64 in")]
        Item164in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 ft")]
        Item10ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 in")]
        Item10in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 km")]
        Item10km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 ft")]
        Item100ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 km")]
        Item100km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft")]
        Item1000ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("30 ft")]
        Item30ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("30 m")]
        Item30m,
        
        /// <remarks/>
        angstrom,
        
        /// <remarks/>
        chain,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[BnA]")]
        chainBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[BnB]")]
        chainBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Cla]")]
        chainCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Ind37]")]
        chainInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Se]")]
        chainSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[SeT]")]
        chainSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[US]")]
        chainUS,
        
        /// <remarks/>
        cm,
        
        /// <remarks/>
        dam,
        
        /// <remarks/>
        dm,
        
        /// <remarks/>
        Em,
        
        /// <remarks/>
        fathom,
        
        /// <remarks/>
        fm,
        
        /// <remarks/>
        ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[BnA]")]
        ftBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[BnB]")]
        ftBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Br36]")]
        ftBr36,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Br65]")]
        ftBr65,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Cla]")]
        ftCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[GC]")]
        ftGC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind]")]
        ftInd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind37]")]
        ftInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind62]")]
        ftInd62,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind75]")]
        ftInd75,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Se]")]
        ftSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[SeT]")]
        ftSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[US]")]
        ftUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fur[US]")]
        furUS,
        
        /// <remarks/>
        Gm,
        
        /// <remarks/>
        hm,
        
        /// <remarks/>
        @in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in[US]")]
        inUS,
        
        /// <remarks/>
        km,
        
        /// <remarks/>
        link,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[BnA]")]
        linkBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[BnB]")]
        linkBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[Cla]")]
        linkCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[Se]")]
        linkSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[SeT]")]
        linkSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[US]")]
        linkUS,
        
        /// <remarks/>
        m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m[Ger]")]
        mGer,
        
        /// <remarks/>
        mi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[naut]")]
        minaut,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[nautUK]")]
        minautUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[US]")]
        miUS,
        
        /// <remarks/>
        mil,
        
        /// <remarks/>
        mm,
        
        /// <remarks/>
        Mm,
        
        /// <remarks/>
        nm,
        
        /// <remarks/>
        pm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rod[US]")]
        rodUS,
        
        /// <remarks/>
        Tm,
        
        /// <remarks/>
        um,
        
        /// <remarks/>
        yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[BnA]")]
        ydBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[BnB]")]
        ydBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Cla]")]
        ydCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind]")]
        ydInd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind37]")]
        ydInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind62]")]
        ydInd62,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind75]")]
        ydInd75,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Se]")]
        ydSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[SeT]")]
        ydSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[US]")]
        ydUS,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WellTestTestVolume {
        
        private VolumeMeasure volumeStdTempPresField;
        
        private VolumeMeasure volumeField;
        
        private MassPerVolumeMeasure densityStdTempPresField;
        
        private MassPerVolumeMeasure densityField;
        
        private string gasClassField;
        
        /// <remarks/>
        /// <summary>The volume is the fluid, corrected to standard conditions of temperature and pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("The volume is the fluid, corrected to standard conditions of temperature and pres" +
            "sure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeStdTempPres", DataType="VolumeMeasure")]
        public VolumeMeasure VolumeStdTempPres {
            get {
                return this.volumeStdTempPresField;
            }
            set {
                this.volumeStdTempPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volume, uncorrected. This volume is generally reported at reservoir conditions.</summary>
        [System.ComponentModel.DescriptionAttribute("The volume, uncorrected. This volume is generally reported at reservoir condition" +
            "s.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Volume", DataType="VolumeMeasure")]
        public VolumeMeasure Volume {
            get {
                return this.volumeField;
            }
            set {
                this.volumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the fluid, corrected to standard conditions of temperature and pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the fluid, corrected to standard conditions of temperature and pre" +
            "ssure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensityStdTempPres", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensityStdTempPres {
            get {
                return this.densityStdTempPresField;
            }
            set {
                this.densityStdTempPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the fluid, uncorrected.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the fluid, uncorrected.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Density", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Density {
            get {
                return this.densityField;
            }
            set {
                this.densityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Class for natural gas. This is not valid for oil or water.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Class for natural gas. This is not valid for oil or water.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasClass", DataType="String64")]
        public string GasClass {
            get {
                return this.gasClassField;
            }
            set {
                this.gasClassField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LostVolumeAndReason))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VolumeMeasure {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="VolumeUomWithLegacy")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class LostVolumeAndReason : VolumeMeasure {
        
        private ReasonLost reasonLostField;
        
        /// <remarks/>
        /// <summary>Defines why the volume was lost.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Defines why the volume was lost.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("reasonLost", DataType="ReasonLost")]
        public ReasonLost reasonLost {
            get {
                return this.reasonLostField;
            }
            set {
                this.reasonLostField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ReasonLost {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3rd party processing")]
        Item3rdpartyprocessing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("daily total loss of prod")]
        dailytotallossofprod,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("extended maint turnaround")]
        extendedmaintturnaround,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("extended maint turnaround export")]
        extendedmaintturnaroundexport,
        
        /// <remarks/>
        hse,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("marked gas")]
        markedgas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("marked oil")]
        markedoil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("modification project")]
        modificationproject,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("operation mistakes")]
        operationmistakes,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("planned maint turnaround")]
        plannedmaintturnaround,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("preventive maint topside")]
        preventivemainttopside,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("process and operation problem")]
        processandoperationproblem,
        
        /// <remarks/>
        production,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("regulatory reference")]
        regulatoryreference,
        
        /// <remarks/>
        reservoir,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("strike/lock-out")]
        strikelockout,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("testing and logging")]
        testingandlogging,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("topside equipment failure-maint")]
        topsideequipmentfailuremaint,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("unavailable tanker storage")]
        unavailabletankerstorage,
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("weather problem")]
        weatherproblem,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well equipment failure-maint")]
        wellequipmentfailuremaint,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well planned operations")]
        wellplannedoperations,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well preventive maint")]
        wellpreventivemaint,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well problems")]
        wellproblems,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class MassPerVolumeMeasure {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="MassPerVolumeUomWithLegacy")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WellTestFluidRate {
        
        private VolumePerTimeMeasure fluidRateField;
        
        private VolumePerTimeMeasure fluidRateStdTempPresField;
        
        private string gasClassField;
        
        /// <remarks/>
        /// <summary>The fluid flow rate.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid flow rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FluidRate {
            get {
                return this.fluidRateField;
            }
            set {
                this.fluidRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fluid flow rate that has been corrected to standard temperature and pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid flow rate that has been corrected to standard temperature and pressure." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidRateStdTempPres", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FluidRateStdTempPres {
            get {
                return this.fluidRateStdTempPresField;
            }
            set {
                this.fluidRateStdTempPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Class for natural gas. This is not valid for oil or water.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Class for natural gas. This is not valid for oil or water.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasClass", DataType="String64")]
        public string GasClass {
            get {
                return this.gasClassField;
            }
            set {
                this.gasClassField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VolumePerTimeMeasure {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="VolumePerTimeUomWithLegacy")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VolumePerTimePerPressureMeasure {
        
        private VolumePerTimePerPressureUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="VolumePerTimePerPressureUom")]
        public VolumePerTimePerPressureUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/(psi.d)")]
        Item1000ft3psid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(kPa.d)")]
        bblkPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(psi.d)")]
        bblpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/(bar.min)")]
        Lbarmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.d)")]
        m3bard,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.h)")]
        m3barh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.min)")]
        m3barmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kPa.d)")]
        m3kPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kPa.h)")]
        m3kPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(Pa.s)")]
        m3Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(psi.d)")]
        m3psid,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WellTestProductionTestResults {
        
        private VolumePerVolumeMeasure gasOilRatioField;
        
        private VolumePerVolumeMeasure waterCutField;
        
        private MassPerVolumeMeasure densityField;
        
        private AngularVelocityMeasure fluidVelocityField;
        
        private VolumePerVolumeMeasure condensateYieldField;
        
        private VolumePerVolumeMeasure basicSedimentAndWaterField;
        
        private VolumePerTimeMeasure oilPotentialField;
        
        private VolumePerTimeMeasure gasPotentialField;
        
        private VolumeMeasure sandVolumeField;
        
        private bool allocatedSplitField;
        
        private bool allocatedSplitFieldSpecified;
        
        private VolumePerVolumeMeasure oilSplitFactorField;
        
        private VolumePerVolumeMeasure gasSplitFactorField;
        
        private VolumePerVolumeMeasure waterSplitFactorField;
        
        private VolumePerVolumeMeasure condensateSplitFactorField;
        
        private VolumePerTimePerPressureMeasure productivityIndexField;
        
        private VolumePerTimePerPressureMeasure productivityIndexStdTempPresField;
        
        private WellTestTestVolume waterVolumeField;
        
        private WellTestTestVolume condensateVolumeField;
        
        private WellTestTestVolume oilVolumeField;
        
        private WellTestTestVolume gasVolumeField;
        
        private WellTestFluidRate oilRateField;
        
        private WellTestFluidRate waterRateField;
        
        private WellTestFluidRate gasRateField;
        
        private WellTestFluidRate condensateRateField;
        
        /// <remarks/>
        /// <summary>The ratio of the volume of gas and the volume of oil that was produced.</summary>
        [System.ComponentModel.DescriptionAttribute("The ratio of the volume of gas and the volume of oil that was produced.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasOilRatio", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure GasOilRatio {
            get {
                return this.gasOilRatioField;
            }
            set {
                this.gasOilRatioField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ratio of water produced compared to the volume of total liquids produced.</summary>
        [System.ComponentModel.DescriptionAttribute("The ratio of water produced compared to the volume of total liquids produced.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterCut", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure WaterCut {
            get {
                return this.waterCutField;
            }
            set {
                this.waterCutField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the fluid mixture.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the fluid mixture.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Density", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Density {
            get {
                return this.densityField;
            }
            set {
                this.densityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The velocity of the overall fluid mixture.</summary>
        [System.ComponentModel.DescriptionAttribute("The velocity of the overall fluid mixture.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidVelocity", DataType="AngularVelocityMeasure")]
        public AngularVelocityMeasure FluidVelocity {
            get {
                return this.fluidVelocityField;
            }
            set {
                this.fluidVelocityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This is the condensate yield, which describes the amount of condensate per unit of natural gas produced</summary>
        [System.ComponentModel.DescriptionAttribute("This is the condensate yield, which describes the amount of condensate per unit o" +
            "f natural gas produced")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondensateYield", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure CondensateYield {
            get {
                return this.condensateYieldField;
            }
            set {
                this.condensateYieldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This is the measured of impurities present in crude oil as it comes from the well. BSandW content is commonly used as a measure for treating performance of hydrocarbon liquids</summary>
        [System.ComponentModel.DescriptionAttribute("This is the measured of impurities present in crude oil as it comes from the well" +
            ". BSandW content is commonly used as a measure for treating performance of hydro" +
            "carbon liquids")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BasicSedimentAndWater", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure BasicSedimentAndWater {
            get {
                return this.basicSedimentAndWaterField;
            }
            set {
                this.basicSedimentAndWaterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This is the potential of the well to produce crude oil. This represents the flow rate that could be achieved under maximum drawdown.</summary>
        [System.ComponentModel.DescriptionAttribute("This is the potential of the well to produce crude oil. This represents the flow " +
            "rate that could be achieved under maximum drawdown.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilPotential", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure OilPotential {
            get {
                return this.oilPotentialField;
            }
            set {
                this.oilPotentialField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This is the potential of the well to produce natural gas. This represents the flow rate that could be achieved under maximum drawdown.</summary>
        [System.ComponentModel.DescriptionAttribute("This is the potential of the well to produce natural gas. This represents the flo" +
            "w rate that could be achieved under maximum drawdown.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasPotential", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure GasPotential {
            get {
                return this.gasPotentialField;
            }
            set {
                this.gasPotentialField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volume of sand that was produced.</summary>
        [System.ComponentModel.DescriptionAttribute("The volume of sand that was produced.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SandVolume", DataType="VolumeMeasure")]
        public VolumeMeasure SandVolume {
            get {
                return this.sandVolumeField;
            }
            set {
                this.sandVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True ("true" or "1") indicates that the split factors are allocated as opposed to measured. False ("false" or "0") or not given indicates otherwise.</summary>
        [System.ComponentModel.DescriptionAttribute("True (\"true\" or \"1\") indicates that the split factors are allocated as opposed to" +
            " measured. False (\"false\" or \"0\") or not given indicates otherwise.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AllocatedSplit", DataType="boolean")]
        public bool AllocatedSplit {
            get {
                return this.allocatedSplitField;
            }
            set {
                this.allocatedSplitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllocatedSplitSpecified {
            get {
                return this.allocatedSplitFieldSpecified;
            }
            set {
                this.allocatedSplitFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The split factor for oil relative to the overall volume of the test.</summary>
        [System.ComponentModel.DescriptionAttribute("The split factor for oil relative to the overall volume of the test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilSplitFactor", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure OilSplitFactor {
            get {
                return this.oilSplitFactorField;
            }
            set {
                this.oilSplitFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The split factor for gas relative to the overall volume of the test.</summary>
        [System.ComponentModel.DescriptionAttribute("The split factor for gas relative to the overall volume of the test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasSplitFactor", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure GasSplitFactor {
            get {
                return this.gasSplitFactorField;
            }
            set {
                this.gasSplitFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The split factor for water relative to the overall volume of the test.</summary>
        [System.ComponentModel.DescriptionAttribute("The split factor for water relative to the overall volume of the test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterSplitFactor", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure WaterSplitFactor {
            get {
                return this.waterSplitFactorField;
            }
            set {
                this.waterSplitFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The split factor for condensate relative to the overall volume of the test.</summary>
        [System.ComponentModel.DescriptionAttribute("The split factor for condensate relative to the overall volume of the test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondensateSplitFactor", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure CondensateSplitFactor {
            get {
                return this.condensateSplitFactorField;
            }
            set {
                this.condensateSplitFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Productivity index (PI) is an expression which defines the pressure drop in the reservoir to produce a unit of oil per day. That is, the energy to produce a unit of oil. The value was defined at ambient temperature and pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Productivity index (PI) is an expression which defines the pressure drop in the r" +
            "eservoir to produce a unit of oil per day. That is, the energy to produce a unit" +
            " of oil. The value was defined at ambient temperature and pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductivityIndex", DataType="VolumePerTimePerPressureMeasure")]
        public VolumePerTimePerPressureMeasure ProductivityIndex {
            get {
                return this.productivityIndexField;
            }
            set {
                this.productivityIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Productivity index (PI) is an expression which defines the pressure drop in the reservoir to produce a unit of oil per day. That is, the energy to produce a unit of oil. The value has been converted to the declared conditions of standard temperature and pressure.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Productivity index (PI) is an expression which defines the pressure drop in the reservoir to produce a unit of oil per day. That is, the energy to produce a unit of oil. The value has been converted to the declared conditions of standard temperature and pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductivityIndexStdTempPres", DataType="VolumePerTimePerPressureMeasure")]
        public VolumePerTimePerPressureMeasure ProductivityIndexStdTempPres {
            get {
                return this.productivityIndexStdTempPresField;
            }
            set {
                this.productivityIndexStdTempPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Water volumes measured during the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("Water volumes measured during the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterVolume", DataType="WellTestTestVolume")]
        public WellTestTestVolume WaterVolume {
            get {
                return this.waterVolumeField;
            }
            set {
                this.waterVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>condensate volumes measured during the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("condensate volumes measured during the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondensateVolume", DataType="WellTestTestVolume")]
        public WellTestTestVolume CondensateVolume {
            get {
                return this.condensateVolumeField;
            }
            set {
                this.condensateVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Oil volumes measured during the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("Oil volumes measured during the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilVolume", DataType="WellTestTestVolume")]
        public WellTestTestVolume OilVolume {
            get {
                return this.oilVolumeField;
            }
            set {
                this.oilVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gas volumes measured during the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("Gas volumes measured during the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasVolume", DataType="WellTestTestVolume")]
        public WellTestTestVolume GasVolume {
            get {
                return this.gasVolumeField;
            }
            set {
                this.gasVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Oil rates measured during the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("Oil rates measured during the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilRate", DataType="WellTestFluidRate")]
        public WellTestFluidRate OilRate {
            get {
                return this.oilRateField;
            }
            set {
                this.oilRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Water rates measured during the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("Water rates measured during the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterRate", DataType="WellTestFluidRate")]
        public WellTestFluidRate WaterRate {
            get {
                return this.waterRateField;
            }
            set {
                this.waterRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gas rates measured during the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("Gas rates measured during the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasRate", DataType="WellTestFluidRate")]
        public WellTestFluidRate GasRate {
            get {
                return this.gasRateField;
            }
            set {
                this.gasRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Condensate rates measured during the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("Condensate rates measured during the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondensateRate", DataType="WellTestFluidRate")]
        public WellTestFluidRate CondensateRate {
            get {
                return this.condensateRateField;
            }
            set {
                this.condensateRateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelativeVolumeRatio))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VolumePerVolumeMeasure {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="VolumePerVolumeUomWithLegacy")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class RelativeVolumeRatio : VolumePerVolumeMeasure {
        
        private string fluidVolumeReferenceField;
        
        /// <remarks/>
        /// <summary>Reference to a fluid volume.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to a fluid volume.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("fluidVolumeReference", DataType="String64")]
        public string fluidVolumeReference {
            get {
                return this.fluidVolumeReferenceField;
            }
            set {
                this.fluidVolumeReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class AngularVelocityMeasure {
        
        private AngularVelocityUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="AngularVelocityUom")]
        public AngularVelocityUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AngularVelocityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/h")]
        degah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/min")]
        degamin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/s")]
        degas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/s")]
        rads,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/s")]
        revs,
        
        /// <remarks/>
        rpm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ElectricCurrentMeasure {
        
        private ElectricCurrentUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ElectricCurrentUom")]
        public ElectricCurrentUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricCurrentUom {
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        cA,
        
        /// <remarks/>
        dA,
        
        /// <remarks/>
        EA,
        
        /// <remarks/>
        fA,
        
        /// <remarks/>
        GA,
        
        /// <remarks/>
        kA,
        
        /// <remarks/>
        MA,
        
        /// <remarks/>
        mA,
        
        /// <remarks/>
        nA,
        
        /// <remarks/>
        pA,
        
        /// <remarks/>
        TA,
        
        /// <remarks/>
        uA,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WellTestElectricSubmersiblePumpData {
        
        private ElectricCurrentMeasure electricCurrentField;
        
        private FrequencyMeasure frequencyField;
        
        /// <remarks/>
        /// <summary>The average electric current of the ESP during the test. The presumption is that only one pump per well is operational during each test.</summary>
        [System.ComponentModel.DescriptionAttribute("The average electric current of the ESP during the test. The presumption is that " +
            "only one pump per well is operational during each test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ElectricCurrent", DataType="ElectricCurrentMeasure")]
        public ElectricCurrentMeasure ElectricCurrent {
            get {
                return this.electricCurrentField;
            }
            set {
                this.electricCurrentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average frequency of the ESP during the test. The presumption is that only one pump per well is operational during each test.</summary>
        [System.ComponentModel.DescriptionAttribute("The average frequency of the ESP during the test. The presumption is that only on" +
            "e pump per well is operational during each test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Frequency", DataType="FrequencyMeasure")]
        public FrequencyMeasure Frequency {
            get {
                return this.frequencyField;
            }
            set {
                this.frequencyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class FrequencyMeasure {
        
        private FrequencyUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="FrequencyUom")]
        public FrequencyUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum FrequencyUom {
        
        /// <remarks/>
        cHz,
        
        /// <remarks/>
        dHz,
        
        /// <remarks/>
        EHz,
        
        /// <remarks/>
        fHz,
        
        /// <remarks/>
        GHz,
        
        /// <remarks/>
        Hz,
        
        /// <remarks/>
        kHz,
        
        /// <remarks/>
        mHz,
        
        /// <remarks/>
        MHz,
        
        /// <remarks/>
        nHz,
        
        /// <remarks/>
        pHz,
        
        /// <remarks/>
        THz,
        
        /// <remarks/>
        uHz,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WellTestPointData {
        
        private PressureMeasure presField;
        
        private ThermodynamicTemperatureMeasure tempField;
        
        private PressureMeasure pOverZField;
        
        private MeasuredDepthCoord mdField;
        
        private DataObjectReference wellboreReferenceField;
        
        private bool bottomholeField;
        
        private bool bottomholeFieldSpecified;
        
        private bool staticField;
        
        private bool staticFieldSpecified;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The pressure at the point.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure at the point.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pres", DataType="PressureMeasure")]
        public PressureMeasure Pres {
            get {
                return this.presField;
            }
            set {
                this.presField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature at the point.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature at the point.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Temp", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure Temp {
            get {
                return this.tempField;
            }
            set {
                this.tempField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The P/Z value at the point. This is P/Z, pressure over gas compressibility factor (z). Note that the UOM is units of pressure., because Z is dimensionless.</summary>
        [System.ComponentModel.DescriptionAttribute("The P/Z value at the point. This is P/Z, pressure over gas compressibility factor" +
            " (z). Note that the UOM is units of pressure., because Z is dimensionless.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("POverZ", DataType="PressureMeasure")]
        public PressureMeasure POverZ {
            get {
                return this.pOverZField;
            }
            set {
                this.pOverZField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth of the point being tested.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth of the point being tested.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Md", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord Md {
            get {
                return this.mdField;
            }
            set {
                this.mdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the wellbore (sidetract) represented by the measured depth. This must be given when the well has multiple wellbores and the measured depth value is deeper than the first kickoff point. It is recommended that it always be given.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines the wellbore (sidetract) represented by the measured depth. This must be " +
            "given when the well has multiple wellbores and the measured depth value is deepe" +
            "r than the first kickoff point. It is recommended that it always be given.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreReference", DataType="DataObjectReference")]
        public DataObjectReference WellboreReference {
            get {
                return this.wellboreReferenceField;
            }
            set {
                this.wellboreReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A value of true (1 or "true") indicates that the point is at the bottomhole. A value of false (0 or "false") or not given indicates otherwise.</summary>
        [System.ComponentModel.DescriptionAttribute("A value of true (1 or \"true\") indicates that the point is at the bottomhole. A va" +
            "lue of false (0 or \"false\") or not given indicates otherwise.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Bottomhole", DataType="boolean")]
        public bool Bottomhole {
            get {
                return this.bottomholeField;
            }
            set {
                this.bottomholeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BottomholeSpecified {
            get {
                return this.bottomholeFieldSpecified;
            }
            set {
                this.bottomholeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A value of true (1 or "true") indicates a static (non-flowing) pressure. A value of false (0 or "false") or not given indicates otherwise. The pressure may be measured (e.g., shut-in well) or calculated.</summary>
        [System.ComponentModel.DescriptionAttribute("A value of true (1 or \"true\") indicates a static (non-flowing) pressure. A value " +
            "of false (0 or \"false\") or not given indicates otherwise. The pressure may be me" +
            "asured (e.g., shut-in well) or calculated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Static", DataType="boolean")]
        public bool Static {
            get {
                return this.staticField;
            }
            set {
                this.staticField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaticSpecified {
            get {
                return this.staticFieldSpecified;
            }
            set {
                this.staticFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class MeasuredDepthCoord {
        
        private VerticalCoordinateUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        /// <summary>The unit of measure of the measured depth coordinate.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The unit of measure of the measured depth coordinate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="VerticalCoordinateUom")]
        public VerticalCoordinateUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VerticalCoordinateUom {
        
        /// <remarks/>
        m,
        
        /// <remarks/>
        ft,
        
        /// <remarks/>
        ftUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ftBr(65)")]
        ftBr65,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WellTestBottomholeData {
        
        private PressureMeasure bottomholePresField;
        
        private ThermodynamicTemperatureMeasure bottomholeTempField;
        
        private PressureMeasure bottomholePOverZField;
        
        private MeasuredDepthCoord bottomholeMDField;
        
        private DataObjectReference wellboreReferenceField;
        
        /// <remarks/>
        /// <summary>The pressure at the bottomhole of the well.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure at the bottomhole of the well.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomholePres", DataType="PressureMeasure")]
        public PressureMeasure BottomholePres {
            get {
                return this.bottomholePresField;
            }
            set {
                this.bottomholePresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature at the bottomhole of the well.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature at the bottomhole of the well.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomholeTemp", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure BottomholeTemp {
            get {
                return this.bottomholeTempField;
            }
            set {
                this.bottomholeTempField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The P/Z value at the bottomhole. This is P/Z, pressure over gas compressibility factor (z), at the bottomhole of the well. Note that the UOM is units of pressure,  because Z is dimensionless.</summary>
        [System.ComponentModel.DescriptionAttribute("The P/Z value at the bottomhole. This is P/Z, pressure over gas compressibility f" +
            "actor (z), at the bottomhole of the well. Note that the UOM is units of pressure" +
            ",  because Z is dimensionless.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomholePOverZ", DataType="PressureMeasure")]
        public PressureMeasure BottomholePOverZ {
            get {
                return this.bottomholePOverZField;
            }
            set {
                this.bottomholePOverZField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth of the bottomhole.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth of the bottomhole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomholeMD", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord BottomholeMD {
            get {
                return this.bottomholeMDField;
            }
            set {
                this.bottomholeMDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the wellbore (sidetract) represented by the measured depth. This must be given when the well has multiple wellbores and the measured depth value is deeper than the first kickoff point. It is recommended that it always be given.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines the wellbore (sidetract) represented by the measured depth. This must be " +
            "given when the well has multiple wellbores and the measured depth value is deepe" +
            "r than the first kickoff point. It is recommended that it always be given.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreReference", DataType="DataObjectReference")]
        public DataObjectReference WellboreReference {
            get {
                return this.wellboreReferenceField;
            }
            set {
                this.wellboreReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WellTestCumulative {
        
        private VolumeMeasure cumulativeOilField;
        
        private VolumeMeasure cumulativeGasField;
        
        private VolumeMeasure cumulativeWaterField;
        
        /// <remarks/>
        /// <summary>The cumulative amount of oil.</summary>
        [System.ComponentModel.DescriptionAttribute("The cumulative amount of oil.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CumulativeOil", DataType="VolumeMeasure")]
        public VolumeMeasure CumulativeOil {
            get {
                return this.cumulativeOilField;
            }
            set {
                this.cumulativeOilField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The cumulative amount of gas.</summary>
        [System.ComponentModel.DescriptionAttribute("The cumulative amount of gas.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CumulativeGas", DataType="VolumeMeasure")]
        public VolumeMeasure CumulativeGas {
            get {
                return this.cumulativeGasField;
            }
            set {
                this.cumulativeGasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The cumulative amount of water.</summary>
        [System.ComponentModel.DescriptionAttribute("The cumulative amount of water.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CumulativeWater", DataType="VolumeMeasure")]
        public VolumeMeasure CumulativeWater {
            get {
                return this.cumulativeWaterField;
            }
            set {
                this.cumulativeWaterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WellTestInterval {
        
        private MeasuredDepthCoord mdTopField;
        
        private MeasuredDepthCoord mdBaseField;
        
        private DataObjectReference wellboreReferenceField;
        
        private string[] testedFormationField;
        
        private LengthPerLengthMeasure valvePositionField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The measured depth to the top of the interval.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The measured depth to the top of the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdTop", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdTop {
            get {
                return this.mdTopField;
            }
            set {
                this.mdTopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth to the bottom of the interval.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The measured depth to the bottom of the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdBase", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdBase {
            get {
                return this.mdBaseField;
            }
            set {
                this.mdBaseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the wellbore (sidetract) represented by the measured depth. This must be given when the well has multiple wellbores and the measured depth value is deeper than the first kickoff point. It is recommended that it always be given.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines the wellbore (sidetract) represented by the measured depth. This must be " +
            "given when the well has multiple wellbores and the measured depth value is deepe" +
            "r than the first kickoff point. It is recommended that it always be given.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreReference", DataType="DataObjectReference")]
        public DataObjectReference WellboreReference {
            get {
                return this.wellboreReferenceField;
            }
            set {
                this.wellboreReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The formation that was tested.</summary>
        [System.Xml.Serialization.XmlElementAttribute("TestedFormation")]
        [System.ComponentModel.DescriptionAttribute("The formation that was tested.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestedFormation", DataType="String64")]
        public string[] TestedFormation {
            get {
                return this.testedFormationField;
            }
            set {
                this.testedFormationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The relative opening of the downhole control valve for the tested zone. This is for surface controllable valves.</summary>
        [System.ComponentModel.DescriptionAttribute("The relative opening of the downhole control valve for the tested zone. This is f" +
            "or surface controllable valves.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ValvePosition", DataType="LengthPerLengthMeasure")]
        public LengthPerLengthMeasure ValvePosition {
            get {
                return this.valvePositionField;
            }
            set {
                this.valvePositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class LengthPerLengthMeasure {
        
        private LengthPerLengthUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthPerLengthUom")]
        public LengthPerLengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 ft/ft")]
        Item001ftft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 m/m")]
        Item130mm,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ft")]
        ftft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/in")]
        ftin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/m")]
        ftm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/mi")]
        ftmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/cm")]
        kmcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/cm")]
        mcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/km")]
        mkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/m")]
        mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/in")]
        miin,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellTestProductionTestData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellTestInjectionTestData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellTestFluidLevelTest))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractWellTest {
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WellTestProductionTestData : AbstractWellTest {
        
        private TimeMeasure testDurationField;
        
        private string operatingMethodField;
        
        private WellTestBottomholeData bottomholeDataField;
        
        private WellTestPointData[] pointDataField;
        
        private WellTestElectricSubmersiblePumpData espDataField;
        
        private WellTestCumulative wellTestCumulativeField;
        
        private WellTestInterval[] testIntervalField;
        
        private WellTestProductionTestResults productionTestResultsField;
        
        private WellTestWellheadData wellheadDataField;
        
        private WellTestSeparatorData separatorDataField;
        
        /// <remarks/>
        /// <summary>The length of time (with UOM) of the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("The length of time (with UOM) of the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestDuration", DataType="TimeMeasure")]
        public TimeMeasure TestDuration {
            get {
                return this.testDurationField;
            }
            set {
                this.testDurationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The method being used to operate the well. Examples are 'flowing', 'pumping', 'gas lifted'.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The method being used to operate the well. Examples are \'flowing\', \'pumping\', \'ga" +
            "s lifted\'.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OperatingMethod", DataType="String64")]
        public string OperatingMethod {
            get {
                return this.operatingMethodField;
            }
            set {
                this.operatingMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>DEPRECATED - Use pointData instead. This element records measurements made at the bottomhole.</summary>
        [System.ComponentModel.DescriptionAttribute("DEPRECATED - Use pointData instead. This element records measurements made at the" +
            " bottomhole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomholeData", DataType="WellTestBottomholeData")]
        public WellTestBottomholeData BottomholeData {
            get {
                return this.bottomholeDataField;
            }
            set {
                this.bottomholeDataField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This element records temperature and pressure at points in the wellbore.</summary>
        [System.Xml.Serialization.XmlElementAttribute("PointData")]
        [System.ComponentModel.DescriptionAttribute("This element records temperature and pressure at points in the wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PointData", DataType="WellTestPointData")]
        public WellTestPointData[] PointData {
            get {
                return this.pointDataField;
            }
            set {
                this.pointDataField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Frequency and electric current measured during the  well test for electric submersible pump (ESP) wells. The presumption is that only one pump per well is operational during each test.</summary>
        [System.ComponentModel.DescriptionAttribute("Frequency and electric current measured during the  well test for electric submer" +
            "sible pump (ESP) wells. The presumption is that only one pump per well is operat" +
            "ional during each test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EspData", DataType="WellTestElectricSubmersiblePumpData")]
        public WellTestElectricSubmersiblePumpData EspData {
            get {
                return this.espDataField;
            }
            set {
                this.espDataField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The cumulative volumes of fluids at the time of the well test. The fluids are oil, gas, and water.</summary>
        [System.ComponentModel.DescriptionAttribute("The cumulative volumes of fluids at the time of the well test. The fluids are oil" +
            ", gas, and water.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellTestCumulative", DataType="WellTestCumulative")]
        public WellTestCumulative WellTestCumulative {
            get {
                return this.wellTestCumulativeField;
            }
            set {
                this.wellTestCumulativeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The interval tested. This element includes a top and base depth,  and the formation(s) tested. It also includes control data for the tested interval.</summary>
        [System.Xml.Serialization.XmlElementAttribute("TestInterval")]
        [System.ComponentModel.DescriptionAttribute("The interval tested. This element includes a top and base depth,  and the formati" +
            "on(s) tested. It also includes control data for the tested interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestInterval", DataType="WellTestInterval")]
        public WellTestInterval[] TestInterval {
            get {
                return this.testIntervalField;
            }
            set {
                this.testIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The production results of the test.</summary>
        [System.ComponentModel.DescriptionAttribute("The production results of the test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductionTestResults", DataType="WellTestProductionTestResults")]
        public WellTestProductionTestResults ProductionTestResults {
            get {
                return this.productionTestResultsField;
            }
            set {
                this.productionTestResultsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This element records measurements made and settings made at the wellhead.</summary>
        [System.ComponentModel.DescriptionAttribute("This element records measurements made and settings made at the wellhead.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellheadData", DataType="WellTestWellheadData")]
        public WellTestWellheadData WellheadData {
            get {
                return this.wellheadDataField;
            }
            set {
                this.wellheadDataField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This element records the measurements (pressure and temperature) at the separator.</summary>
        [System.ComponentModel.DescriptionAttribute("This element records the measurements (pressure and temperature) at the separator" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeparatorData", DataType="WellTestSeparatorData")]
        public WellTestSeparatorData SeparatorData {
            get {
                return this.separatorDataField;
            }
            set {
                this.separatorDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class TimeMeasure {
        
        private TimeUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="TimeUom")]
        public TimeUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/2 ms")]
        Item12ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 ka[t]")]
        Item100kat,
        
        /// <remarks/>
        a,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("a[t]")]
        at,
        
        /// <remarks/>
        ca,
        
        /// <remarks/>
        cs,
        
        /// <remarks/>
        d,
        
        /// <remarks/>
        ds,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ea[t]")]
        Eat,
        
        /// <remarks/>
        fa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ga[t]")]
        Gat,
        
        /// <remarks/>
        h,
        
        /// <remarks/>
        hs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ka[t]")]
        kat,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ma[t]")]
        Mat,
        
        /// <remarks/>
        min,
        
        /// <remarks/>
        ms,
        
        /// <remarks/>
        na,
        
        /// <remarks/>
        ns,
        
        /// <remarks/>
        ps,
        
        /// <remarks/>
        s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ta[t]")]
        Tat,
        
        /// <remarks/>
        us,
        
        /// <remarks/>
        wk,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WellTestInjectionTestData : AbstractWellTest {
        
        private InjectionFluid injectedFluidField;
        
        private bool injectedFluidFieldSpecified;
        
        private TimeMeasure testDurationField;
        
        private LengthMeasure chokeOrificeSizeField;
        
        private AbstractPressureValue minimumAnnularPressureField;
        
        private AbstractPressureValue maximumAnnularPressureField;
        
        private AbstractPressureValue wellheadFlowingPressureField;
        
        private AbstractPressureValue wellheadMaximumPressureField;
        
        private WellTestInterval testIntervalField;
        
        private WellTestCumulative wellTestCumulativeField;
        
        /// <remarks/>
        /// <summary>The fluid that is being injected.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid that is being injected.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InjectedFluid", DataType="InjectionFluid")]
        public InjectionFluid InjectedFluid {
            get {
                return this.injectedFluidField;
            }
            set {
                this.injectedFluidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InjectedFluidSpecified {
            get {
                return this.injectedFluidFieldSpecified;
            }
            set {
                this.injectedFluidFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The time length (with UOM) of the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("The time length (with UOM) of the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestDuration", DataType="TimeMeasure")]
        public TimeMeasure TestDuration {
            get {
                return this.testDurationField;
            }
            set {
                this.testDurationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The size of the opening in the flow choke at the wellhead.</summary>
        [System.ComponentModel.DescriptionAttribute("The size of the opening in the flow choke at the wellhead.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChokeOrificeSize", DataType="LengthMeasure")]
        public LengthMeasure ChokeOrificeSize {
            get {
                return this.chokeOrificeSizeField;
            }
            set {
                this.chokeOrificeSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The minimum pressure measured at the annulus.</summary>
        [System.ComponentModel.DescriptionAttribute("The minimum pressure measured at the annulus.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MinimumAnnularPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue MinimumAnnularPressure {
            get {
                return this.minimumAnnularPressureField;
            }
            set {
                this.minimumAnnularPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum pressure measured at the annulus.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum pressure measured at the annulus.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaximumAnnularPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue MaximumAnnularPressure {
            get {
                return this.maximumAnnularPressureField;
            }
            set {
                this.maximumAnnularPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The flowing pressure measured at the wellhead during the test.</summary>
        [System.ComponentModel.DescriptionAttribute("The flowing pressure measured at the wellhead during the test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellheadFlowingPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue WellheadFlowingPressure {
            get {
                return this.wellheadFlowingPressureField;
            }
            set {
                this.wellheadFlowingPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum pressure measured at the wellhead during the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum pressure measured at the wellhead during the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellheadMaximumPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue WellheadMaximumPressure {
            get {
                return this.wellheadMaximumPressureField;
            }
            set {
                this.wellheadMaximumPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The interval tested. This element includes a top and base  depth, and the formation tested.</summary>
        [System.ComponentModel.DescriptionAttribute("The interval tested. This element includes a top and base  depth, and the formati" +
            "on tested.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestInterval", DataType="WellTestInterval")]
        public WellTestInterval TestInterval {
            get {
                return this.testIntervalField;
            }
            set {
                this.testIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The cumulative volumes of fluids at the time of the  well test. The fluids are oil, gas, and water.</summary>
        [System.ComponentModel.DescriptionAttribute("The cumulative volumes of fluids at the time of the  well test. The fluids are oi" +
            "l, gas, and water.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellTestCumulative", DataType="WellTestCumulative")]
        public WellTestCumulative WellTestCumulative {
            get {
                return this.wellTestCumulativeField;
            }
            set {
                this.wellTestCumulativeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum InjectionFluid {
        
        /// <remarks/>
        air,
        
        /// <remarks/>
        brine,
        
        /// <remarks/>
        co2,
        
        /// <remarks/>
        condensate,
        
        /// <remarks/>
        dry,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fresh water")]
        freshwater,
        
        /// <remarks/>
        gas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas-water")]
        gaswater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("non HC gas")]
        nonHCgas,
        
        /// <remarks/>
        oil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil-gas")]
        oilgas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil-water")]
        oilwater,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        steam,
        
        /// <remarks/>
        water,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WellTestFluidLevelTest : AbstractWellTest {
        
        private LengthMeasure fluidLevelField;
        
        private LengthMeasure baseUsableWaterField;
        
        private string testedByField;
        
        /// <remarks/>
        /// <summary>The fluid level achieved in the well. The value is given as length units from the top of the well.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The fluid level achieved in the well. The value is given as length units from the" +
            " top of the well.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidLevel", DataType="LengthMeasure")]
        public LengthMeasure FluidLevel {
            get {
                return this.fluidLevelField;
            }
            set {
                this.fluidLevelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The lowest usable water depth as measured from the surface. See TxRRC H-15.</summary>
        [System.ComponentModel.DescriptionAttribute("The lowest usable water depth as measured from the surface. See TxRRC H-15.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BaseUsableWater", DataType="LengthMeasure")]
        public LengthMeasure BaseUsableWater {
            get {
                return this.baseUsableWaterField;
            }
            set {
                this.baseUsableWaterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The business associate that conducted the test. This is generally a person.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The business associate that conducted the test. This is generally a person.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestedBy", DataType="String64")]
        public string TestedBy {
            get {
                return this.testedByField;
            }
            set {
                this.testedByField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class EndpointDateTime {
        
        private EndpointQualifierInterval endpointField;
        
        /// <remarks/>
        /// <summary>Defines the semantics (inclusive or exclusive) of the endpoint within the context of the interval.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Defines the semantics (inclusive or exclusive) of the endpoint within the context" +
            " of the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("endpoint", DataType="EndpointQualifierInterval")]
        public EndpointQualifierInterval endpoint {
            get {
                return this.endpointField;
            }
            set {
                this.endpointField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum EndpointQualifierInterval {
        
        /// <remarks/>
        exclusive,
        
        /// <remarks/>
        inclusive,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class EndpointQuantity {
        
        private EndpointQualifierInterval endpointField;
        
        private double valueField;
        
        /// <remarks/>
        /// <summary>Defines the semantics (inclusive or exclusive) of the endpoint within the context of the interval.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Defines the semantics (inclusive or exclusive) of the endpoint within the context" +
            " of the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("endpoint", DataType="EndpointQualifierInterval")]
        public EndpointQualifierInterval endpoint {
            get {
                return this.endpointField;
            }
            set {
                this.endpointField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class TimeSeriesThreshold {
        
        private EndpointQuantity thresholdMinimumField;
        
        private EndpointQuantity thresholdMaximumField;
        
        private TimeMeasure durationField;
        
        /// <remarks/>
        /// <summary>The lower bound of the threshold for testing whether values are within a specific range.The element "unit" defines the unit of measure of this value. At least one of minimumValue and maximumValue must be specified. The thresholdMinimum must be less than thresholdMaximum. If thresholdMinimum is not specified then the minimum shall be assumed to be minus infinity.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The lower bound of the threshold for testing whether values are within a specific range.The element ""unit"" defines the unit of measure of this value. At least one of minimumValue and maximumValue must be specified. The thresholdMinimum must be less than thresholdMaximum. If thresholdMinimum is not specified then the minimum shall be assumed to be minus infinity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ThresholdMinimum", DataType="EndpointQuantity")]
        public EndpointQuantity ThresholdMinimum {
            get {
                return this.thresholdMinimumField;
            }
            set {
                this.thresholdMinimumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The upper bound of the threshold for testing whether values are within a specific range. Element "unit" defines the unit of measure of this value. At least one of minimumValue and maximumValue must be specified. The thresholdMaximum must be greater than thresholdMinimum. If thresholdMaximum is not specified then the maximum shall be assumed to be plus infinity.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The upper bound of the threshold for testing whether values are within a specific range. Element ""unit"" defines the unit of measure of this value. At least one of minimumValue and maximumValue must be specified. The thresholdMaximum must be greater than thresholdMinimum. If thresholdMaximum is not specified then the maximum shall be assumed to be plus infinity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ThresholdMaximum", DataType="EndpointQuantity")]
        public EndpointQuantity ThresholdMaximum {
            get {
                return this.thresholdMaximumField;
            }
            set {
                this.thresholdMaximumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The sum of the time intervals over the range of dTimMin to dTimMax during which the values were within the specified threshold range.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The sum of the time intervals over the range of dTimMin to dTimMax during which t" +
            "he values were within the specified threshold range.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Duration", DataType="TimeMeasure")]
        public TimeMeasure Duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class TimeSeriesStringSample {
        
        private System.DateTime dTimField;
        
        private bool dTimFieldSpecified;
        
        private string valueField;
        
        /// <remarks/>
        /// <summary>The date and time at which the value applies. If no time is specified then the value is static and only one sample can be defined. Either dTim or value or both must be specified. If the status attribute is absent and the value is not "NaN", the data value can be assumed to be good with no restrictions.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The date and time at which the value applies. If no time is specified then the value is static and only one sample can be defined. Either dTim or value or both must be specified. If the status attribute is absent and the value is not ""NaN"", the data value can be assumed to be good with no restrictions.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("dTim", DataType="dateTime")]
        public System.DateTime dTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dTimSpecified {
            get {
                return this.dTimFieldSpecified;
            }
            set {
                this.dTimFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class TimeSeriesDoubleSample {
        
        private System.DateTime dTimField;
        
        private bool dTimFieldSpecified;
        
        private ValueStatus statusField;
        
        private bool statusFieldSpecified;
        
        private double valueField;
        
        /// <remarks/>
        /// <summary>The date and time at which the value applies. If no time is specified then the value is static and only one sample can be defined. Either dTim or value or both must be specified. If the status attribute is absent and the value is not "NaN", the data value can be assumed to be good with no restrictions.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The date and time at which the value applies. If no time is specified then the value is static and only one sample can be defined. Either dTim or value or both must be specified. If the status attribute is absent and the value is not ""NaN"", the data value can be assumed to be good with no restrictions.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("dTim", DataType="dateTime")]
        public System.DateTime dTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dTimSpecified {
            get {
                return this.dTimFieldSpecified;
            }
            set {
                this.dTimFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An indicator of the quality of the value.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute("An indicator of the quality of the value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("status", DataType="ValueStatus")]
        public ValueStatus status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool statusSpecified {
            get {
                return this.statusFieldSpecified;
            }
            set {
                this.statusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ValueStatus {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("access denied")]
        accessdenied,
        
        /// <remarks/>
        bad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bad calibration")]
        badcalibration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("calculation failure")]
        calculationfailure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("comm failure")]
        commfailure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("device failure")]
        devicefailure,
        
        /// <remarks/>
        frozen,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("not available")]
        notavailable,
        
        /// <remarks/>
        overflow,
        
        /// <remarks/>
        questionable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("range limit")]
        rangelimit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sensor failure")]
        sensorfailure,
        
        /// <remarks/>
        substituted,
        
        /// <remarks/>
        timeout,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleValue))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractValue {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class StringValue : AbstractValue {
        
        private TimeSeriesStringSample stringValue1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("StringValue")]
        public TimeSeriesStringSample StringValue1 {
            get {
                return this.stringValue1Field;
            }
            set {
                this.stringValue1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DoubleValue : AbstractValue {
        
        private TimeSeriesDoubleSample doubleValue1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DoubleValue")]
        public TimeSeriesDoubleSample DoubleValue1 {
            get {
                return this.doubleValue1Field;
            }
            set {
                this.doubleValue1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class KeywordValueStruct {
        
        private TimeSeriesKeyword keywordField;
        
        private string valueField;
        
        /// <remarks/>
        /// <summary>The keyword within which the value is unique. The concept of a keyword is very close to the concept of a classification system.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The keyword within which the value is unique. The concept of a keyword is very cl" +
            "ose to the concept of a classification system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("keyword", DataType="TimeSeriesKeyword")]
        public TimeSeriesKeyword keyword {
            get {
                return this.keywordField;
            }
            set {
                this.keywordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum TimeSeriesKeyword {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("asset identifier")]
        assetidentifier,
        
        /// <remarks/>
        flow,
        
        /// <remarks/>
        product,
        
        /// <remarks/>
        qualifier,
        
        /// <remarks/>
        subqualifier,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class SafetyCount {
        
        private SafetyType typeField;
        
        private bool typeFieldSpecified;
        
        private ReportingDurationKind periodField;
        
        private bool periodFieldSpecified;
        
        private long valueField;
        
        /// <remarks/>
        /// <summary>The type of safety issue for which a count is being defined.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute("The type of safety issue for which a count is being defined.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("type", DataType="SafetyType")]
        public SafetyType type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                this.typeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of period being reported by this count.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute("The type of period being reported by this count.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("period", DataType="ReportingDurationKind")]
        public ReportingDurationKind period {
            get {
                return this.periodField;
            }
            set {
                this.periodField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool periodSpecified {
            get {
                return this.periodFieldSpecified;
            }
            set {
                this.periodFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public long Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum SafetyType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drill or exercise")]
        drillorexercise,
        
        /// <remarks/>
        fire,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("first aid")]
        firstaid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hazard report card")]
        hazardreportcard,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("job observation")]
        jobobservation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lost time accident")]
        losttimeaccident,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lost time incident")]
        losttimeincident,
        
        /// <remarks/>
        miscellaneous,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("near miss")]
        nearmiss,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("permit with SJA")]
        permitwithSJA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("released to air")]
        releasedtoair,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("released to water")]
        releasedtowater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("restricted work")]
        restrictedwork,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("safety meeting")]
        safetymeeting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sent ashore")]
        sentashore,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("severe accident")]
        severeaccident,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sick on board")]
        sickonboard,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("spill or leak")]
        spillorleak,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("total permits")]
        totalpermits,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("traffic accident")]
        trafficaccident,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("year-to-date incidents")]
        yeartodateincidents,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ReportingDurationKind {
        
        /// <remarks/>
        day,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("life to date")]
        lifetodate,
        
        /// <remarks/>
        month,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("month to date")]
        monthtodate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("total cumulative")]
        totalcumulative,
        
        /// <remarks/>
        week,
        
        /// <remarks/>
        year,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("year to date")]
        yeartodate,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductionOperationSafety {
        
        private TimeMeasure meantimeIncidentField;
        
        private SafetyCount[] safetyCountField;
        
        private DatedComment[] commentField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The mean time between safety incidents.</summary>
        [System.ComponentModel.DescriptionAttribute("The mean time between safety incidents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeantimeIncident", DataType="TimeMeasure")]
        public TimeMeasure MeantimeIncident {
            get {
                return this.meantimeIncidentField;
            }
            set {
                this.meantimeIncidentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SafetyCount")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SafetyCount", DataType="SafetyCount")]
        public SafetyCount[] SafetyCount {
            get {
                return this.safetyCountField;
            }
            set {
                this.safetyCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Safety related comment.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Comment")]
        [System.ComponentModel.DescriptionAttribute("Safety related comment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="DatedComment")]
        public DatedComment[] Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DatedComment {
        
        private string whoField;
        
        private string roleField;
        
        private System.DateTime startTimeField;
        
        private bool startTimeFieldSpecified;
        
        private System.DateTime endTimeField;
        
        private bool endTimeFieldSpecified;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name of the person providing the comment.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the person providing the comment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Who", DataType="String64")]
        public string Who {
            get {
                return this.whoField;
            }
            set {
                this.whoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The role of the person providing the comment. This is the role of the person within the context of comment.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The role of the person providing the comment. This is the role of the person with" +
            "in the context of comment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Role", DataType="String64")]
        public string Role {
            get {
                return this.roleField;
            }
            set {
                this.roleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time where the comment begins to be valid.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time where the comment begins to be valid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartTime", DataType="dateTime")]
        public System.DateTime StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StartTimeSpecified {
            get {
                return this.startTimeFieldSpecified;
            }
            set {
                this.startTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time where the comment is no longer valid.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time where the comment is no longer valid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndTime", DataType="dateTime")]
        public System.DateTime EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndTimeSpecified {
            get {
                return this.endTimeFieldSpecified;
            }
            set {
                this.endTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class PlaneAngleMeasure {
        
        private PlaneAngleUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="PlaneAngleUom")]
        public PlaneAngleUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PlaneAngleUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 seca")]
        Item0001seca,
        
        /// <remarks/>
        ccgr,
        
        /// <remarks/>
        cgr,
        
        /// <remarks/>
        dega,
        
        /// <remarks/>
        gon,
        
        /// <remarks/>
        krad,
        
        /// <remarks/>
        mila,
        
        /// <remarks/>
        mina,
        
        /// <remarks/>
        Mrad,
        
        /// <remarks/>
        mrad,
        
        /// <remarks/>
        rad,
        
        /// <remarks/>
        rev,
        
        /// <remarks/>
        seca,
        
        /// <remarks/>
        urad,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductionOperationWeather {
        
        private System.DateTime dTimField;
        
        private string agencyField;
        
        private PressureMeasure barometricPressureField;
        
        private short beaufortScaleNumberField;
        
        private bool beaufortScaleNumberFieldSpecified;
        
        private ThermodynamicTemperatureMeasure tempSurfaceField;
        
        private ThermodynamicTemperatureMeasure tempSurfaceMnField;
        
        private ThermodynamicTemperatureMeasure tempSurfaceMxField;
        
        private ThermodynamicTemperatureMeasure tempWindChillField;
        
        private ThermodynamicTemperatureMeasure tempseaField;
        
        private LengthMeasure visibilityField;
        
        private PlaneAngleMeasure aziWaveField;
        
        private LengthMeasure htWaveField;
        
        private LengthMeasure significantWaveField;
        
        private LengthMeasure maxWaveField;
        
        private TimeMeasure periodWaveField;
        
        private PlaneAngleMeasure aziWindField;
        
        private AngularVelocityMeasure velWindField;
        
        private string typePrecipField;
        
        private LengthMeasure amtPrecipField;
        
        private string coverCloudField;
        
        private LengthMeasure ceilingCloudField;
        
        private AngularVelocityMeasure currentSeaField;
        
        private PlaneAngleMeasure aziCurrentSeaField;
        
        private string commentsField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Date and time the information is related to.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Date and time the information is related to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="dateTime")]
        public System.DateTime DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of company that supplied the data.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of company that supplied the data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Agency", DataType="String64")]
        public string Agency {
            get {
                return this.agencyField;
            }
            set {
                this.agencyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Atmospheric pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Atmospheric pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BarometricPressure", DataType="PressureMeasure")]
        public PressureMeasure BarometricPressure {
            get {
                return this.barometricPressureField;
            }
            set {
                this.barometricPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The Beaufort wind scale is a system used to estimate and report wind speeds when no measuring apparatus is available. It was invented in the early 19th Century by Admiral Sir Francis Beaufort of the British Navy as a way to interpret winds from conditions.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The Beaufort wind scale is a system used to estimate and report wind speeds when no measuring apparatus is available. It was invented in the early 19th Century by Admiral Sir Francis Beaufort of the British Navy as a way to interpret winds from conditions.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BeaufortScaleNumber", DataType="BeaufortScaleIntegerCode")]
        public short BeaufortScaleNumber {
            get {
                return this.beaufortScaleNumberField;
            }
            set {
                this.beaufortScaleNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeaufortScaleNumberSpecified {
            get {
                return this.beaufortScaleNumberFieldSpecified;
            }
            set {
                this.beaufortScaleNumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average temperature above ground for the period. Temperature of the atmosphere.</summary>
        [System.ComponentModel.DescriptionAttribute("Average temperature above ground for the period. Temperature of the atmosphere.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempSurface", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempSurface {
            get {
                return this.tempSurfaceField;
            }
            set {
                this.tempSurfaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum temperature above ground. Temperature of the atmosphere.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum temperature above ground. Temperature of the atmosphere.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempSurfaceMn", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempSurfaceMn {
            get {
                return this.tempSurfaceMnField;
            }
            set {
                this.tempSurfaceMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum temperature above ground.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum temperature above ground.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempSurfaceMx", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempSurfaceMx {
            get {
                return this.tempSurfaceMxField;
            }
            set {
                this.tempSurfaceMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A measure of the combined chilling effect of wind and low temperature on living things, also named chill factor, e.g., according to US Weather Service table, an air temperature of 30 degF with a 10 mph wind corresponds to a wind chill of 22 degF.</summary>
        [System.ComponentModel.DescriptionAttribute("A measure of the combined chilling effect of wind and low temperature on living t" +
            "hings, also named chill factor, e.g., according to US Weather Service table, an " +
            "air temperature of 30 degF with a 10 mph wind corresponds to a wind chill of 22 " +
            "degF.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempWindChill", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempWindChill {
            get {
                return this.tempWindChillField;
            }
            set {
                this.tempWindChillField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Sea temperature.</summary>
        [System.ComponentModel.DescriptionAttribute("Sea temperature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tempsea", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure Tempsea {
            get {
                return this.tempseaField;
            }
            set {
                this.tempseaField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Horizontal visibility.</summary>
        [System.ComponentModel.DescriptionAttribute("Horizontal visibility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Visibility", DataType="LengthMeasure")]
        public LengthMeasure Visibility {
            get {
                return this.visibilityField;
            }
            set {
                this.visibilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The direction from which the waves are coming, measured from true north.</summary>
        [System.ComponentModel.DescriptionAttribute("The direction from which the waves are coming, measured from true north.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AziWave", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure AziWave {
            get {
                return this.aziWaveField;
            }
            set {
                this.aziWaveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average height of the waves.</summary>
        [System.ComponentModel.DescriptionAttribute("Average height of the waves.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HtWave", DataType="LengthMeasure")]
        public LengthMeasure HtWave {
            get {
                return this.htWaveField;
            }
            set {
                this.htWaveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An average of the higher 1/3 of the wave heights passing during a sample period (typically 20 to 30 minutes).</summary>
        [System.ComponentModel.DescriptionAttribute("An average of the higher 1/3 of the wave heights passing during a sample period (" +
            "typically 20 to 30 minutes).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SignificantWave", DataType="LengthMeasure")]
        public LengthMeasure SignificantWave {
            get {
                return this.significantWaveField;
            }
            set {
                this.significantWaveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum wave height.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum wave height.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxWave", DataType="LengthMeasure")]
        public LengthMeasure MaxWave {
            get {
                return this.maxWaveField;
            }
            set {
                this.maxWaveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The elapsed time between the passing of two wave tops.</summary>
        [System.ComponentModel.DescriptionAttribute("The elapsed time between the passing of two wave tops.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PeriodWave", DataType="TimeMeasure")]
        public TimeMeasure PeriodWave {
            get {
                return this.periodWaveField;
            }
            set {
                this.periodWaveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The direction from which the wind is blowing, measured from true north.</summary>
        [System.ComponentModel.DescriptionAttribute("The direction from which the wind is blowing, measured from true north.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AziWind", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure AziWind {
            get {
                return this.aziWindField;
            }
            set {
                this.aziWindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Wind speed.</summary>
        [System.ComponentModel.DescriptionAttribute("Wind speed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VelWind", DataType="AngularVelocityMeasure")]
        public AngularVelocityMeasure VelWind {
            get {
                return this.velWindField;
            }
            set {
                this.velWindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of precipitation.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Type of precipitation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypePrecip", DataType="String64")]
        public string TypePrecip {
            get {
                return this.typePrecipField;
            }
            set {
                this.typePrecipField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Amount of precipitation.</summary>
        [System.ComponentModel.DescriptionAttribute("Amount of precipitation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AmtPrecip", DataType="LengthMeasure")]
        public LengthMeasure AmtPrecip {
            get {
                return this.amtPrecipField;
            }
            set {
                this.amtPrecipField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of cloud cover.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of cloud cover.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CoverCloud", DataType="String64")]
        public string CoverCloud {
            get {
                return this.coverCloudField;
            }
            set {
                this.coverCloudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Height of cloud cover.</summary>
        [System.ComponentModel.DescriptionAttribute("Height of cloud cover.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CeilingCloud", DataType="LengthMeasure")]
        public LengthMeasure CeilingCloud {
            get {
                return this.ceilingCloudField;
            }
            set {
                this.ceilingCloudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Current speed.</summary>
        [System.ComponentModel.DescriptionAttribute("Current speed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CurrentSea", DataType="AngularVelocityMeasure")]
        public AngularVelocityMeasure CurrentSea {
            get {
                return this.currentSeaField;
            }
            set {
                this.currentSeaField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Azimuth of current.</summary>
        [System.ComponentModel.DescriptionAttribute("Azimuth of current.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AziCurrentSea", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure AziCurrentSea {
            get {
                return this.aziCurrentSeaField;
            }
            set {
                this.aziCurrentSeaField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comments and remarks.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comments and remarks.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comments", DataType="String2000")]
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductionOperationHSE {
        
        private string incidentCountField;
        
        private TimeMeasure sinceLostTimeField;
        
        private TimeMeasure sincePreventionExerciseField;
        
        private TimeMeasure sinceDefinedSituationField;
        
        private string medicalTreatmentCountField;
        
        private string alarmCountField;
        
        private string safetyIntroCountField;
        
        private string safetyDescriptionField;
        
        private ProductionOperationWeather[] weatherField;
        
        private ProductionOperationSafety[] safetyField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The number of incidents or accidents and injuries that were reported.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DescriptionAttribute("The number of incidents or accidents and injuries that were reported.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IncidentCount", DataType="nonNegativeInteger")]
        public string IncidentCount {
            get {
                return this.incidentCountField;
            }
            set {
                this.incidentCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of time since the most recent lost-time accident.</summary>
        [System.ComponentModel.DescriptionAttribute("The amount of time since the most recent lost-time accident.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SinceLostTime", DataType="TimeMeasure")]
        public TimeMeasure SinceLostTime {
            get {
                return this.sinceLostTimeField;
            }
            set {
                this.sinceLostTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of time since the most recent accident-prevention exercise.</summary>
        [System.ComponentModel.DescriptionAttribute("The amount of time since the most recent accident-prevention exercise.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SincePreventionExercise", DataType="TimeMeasure")]
        public TimeMeasure SincePreventionExercise {
            get {
                return this.sincePreventionExerciseField;
            }
            set {
                this.sincePreventionExerciseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of time since the most recent defined hazard and accident situation (Norwegian DFU).</summary>
        [System.ComponentModel.DescriptionAttribute("The amount of time since the most recent defined hazard and accident situation (N" +
            "orwegian DFU).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SinceDefinedSituation", DataType="TimeMeasure")]
        public TimeMeasure SinceDefinedSituation {
            get {
                return this.sinceDefinedSituationField;
            }
            set {
                this.sinceDefinedSituationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of medical treatments that have occurred.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DescriptionAttribute("The number of medical treatments that have occurred.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MedicalTreatmentCount", DataType="nonNegativeInteger")]
        public string MedicalTreatmentCount {
            get {
                return this.medicalTreatmentCountField;
            }
            set {
                this.medicalTreatmentCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of system alarms that have occurred.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DescriptionAttribute("The number of system alarms that have occurred.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AlarmCount", DataType="nonNegativeInteger")]
        public string AlarmCount {
            get {
                return this.alarmCountField;
            }
            set {
                this.alarmCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of personnel safety introductions that have occurred.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DescriptionAttribute("The number of personnel safety introductions that have occurred.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SafetyIntroCount", DataType="nonNegativeInteger")]
        public string SafetyIntroCount {
            get {
                return this.safetyIntroCountField;
            }
            set {
                this.safetyIntroCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A textual description of safety considerations.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A textual description of safety considerations.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SafetyDescription", DataType="String2000")]
        public string SafetyDescription {
            get {
                return this.safetyDescriptionField;
            }
            set {
                this.safetyDescriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Information about the weather at a point in time.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Weather")]
        [System.ComponentModel.DescriptionAttribute("Information about the weather at a point in time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Weather", DataType="ProductionOperationWeather")]
        public ProductionOperationWeather[] Weather {
            get {
                return this.weatherField;
            }
            set {
                this.weatherField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Safety information at a specific installatino.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Safety")]
        [System.ComponentModel.DescriptionAttribute("Safety information at a specific installatino.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Safety", DataType="ProductionOperationSafety")]
        public ProductionOperationSafety[] Safety {
            get {
                return this.safetyField;
            }
            set {
                this.safetyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductionOperationThirdPartyProcessing {
        
        private FacilityIdentifierStruct installationField;
        
        private VolumeMeasure oilStdTempPresField;
        
        private VolumeMeasure gasStdTempPresField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name of the installation which performed the processing. The name can be qualified by a naming system. This also defines the kind of facility.</summary>
        [System.ComponentModel.DescriptionAttribute("The name of the installation which performed the processing. The name can be qual" +
            "ified by a naming system. This also defines the kind of facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Installation", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct Installation {
            get {
                return this.installationField;
            }
            set {
                this.installationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The estimated amount of oil lost. This volume has been corrected to standard conditions of temperature and pressure</summary>
        [System.ComponentModel.DescriptionAttribute("The estimated amount of oil lost. This volume has been corrected to standard cond" +
            "itions of temperature and pressure")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilStdTempPres", DataType="VolumeMeasure")]
        public VolumeMeasure OilStdTempPres {
            get {
                return this.oilStdTempPresField;
            }
            set {
                this.oilStdTempPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The estimated amount of gas lost. This volume has been corrected to standard conditions of temperature and pressure</summary>
        [System.ComponentModel.DescriptionAttribute("The estimated amount of gas lost. This volume has been corrected to standard cond" +
            "itions of temperature and pressure")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasStdTempPres", DataType="VolumeMeasure")]
        public VolumeMeasure GasStdTempPres {
            get {
                return this.gasStdTempPresField;
            }
            set {
                this.gasStdTempPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FacilityIdentifierStruct {
        
        private string[] textField;
        
        private ReportingFacility kindField;
        
        private bool kindFieldSpecified;
        
        private string siteKindField;
        
        private string namingSystemField;
        
        private string uidRefField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string[] Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of facility.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute("The kind of facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("kind", DataType="ReportingFacility")]
        public ReportingFacility kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool kindSpecified {
            get {
                return this.kindFieldSpecified;
            }
            set {
                this.kindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A custom sub-categorization of facility kind. This attribute is free-form text and allows implementers to provide a more specific or specialized description of the facility kind.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A custom sub-categorization of facility kind. This attribute is free-form text an" +
            "d allows implementers to provide a more specific or specialized description of t" +
            "he facility kind.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("siteKind", DataType="String64")]
        public string siteKind {
            get {
                return this.siteKindField;
            }
            set {
                this.siteKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The naming system within which the name is unique. For example, API or NPD.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The naming system within which the name is unique. For example, API or NPD.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("namingSystem", DataType="String64")]
        public string namingSystem {
            get {
                return this.namingSystemField;
            }
            set {
                this.namingSystemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The referencing uid.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The referencing uid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uidRef", DataType="String64")]
        public string uidRef {
            get {
                return this.uidRefField;
            }
            set {
                this.uidRefField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ReportingFacility {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("block valve")]
        blockvalve,
        
        /// <remarks/>
        bottomhole,
        
        /// <remarks/>
        casing,
        
        /// <remarks/>
        choke,
        
        /// <remarks/>
        cluster,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("commercial entity")]
        commercialentity,
        
        /// <remarks/>
        company,
        
        /// <remarks/>
        completion,
        
        /// <remarks/>
        compressor,
        
        /// <remarks/>
        controller,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("controller -- lift")]
        controllerlift,
        
        /// <remarks/>
        country,
        
        /// <remarks/>
        county,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("downhole monitoring system")]
        downholemonitoringsystem,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric submersible pump")]
        electricsubmersiblepump,
        
        /// <remarks/>
        field,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("field - area")]
        fieldarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("field - group")]
        fieldgroup,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("field - part")]
        fieldpart,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("flow meter")]
        flowmeter,
        
        /// <remarks/>
        flowline,
        
        /// <remarks/>
        formation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas lift valve mandrel")]
        gasliftvalvemandrel,
        
        /// <remarks/>
        generator,
        
        /// <remarks/>
        installation,
        
        /// <remarks/>
        lease,
        
        /// <remarks/>
        license,
        
        /// <remarks/>
        manifold,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("organizational unit")]
        organizationalunit,
        
        /// <remarks/>
        packer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("perforated interval")]
        perforatedinterval,
        
        /// <remarks/>
        pipeline,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plant - processing")]
        plantprocessing,
        
        /// <remarks/>
        platform,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure meter")]
        pressuremeter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("processing facility")]
        processingfacility,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("production tubing")]
        productiontubing,
        
        /// <remarks/>
        pump,
        
        /// <remarks/>
        rectifier,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("regulating valve")]
        regulatingvalve,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("remote terminal unit")]
        remoteterminalunit,
        
        /// <remarks/>
        reservoir,
        
        /// <remarks/>
        separator,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sleeve valve")]
        sleevevalve,
        
        /// <remarks/>
        state,
        
        /// <remarks/>
        storage,
        
        /// <remarks/>
        tank,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature meter")]
        temperaturemeter,
        
        /// <remarks/>
        template,
        
        /// <remarks/>
        terminal,
        
        /// <remarks/>
        trap,
        
        /// <remarks/>
        trunkline,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tubing head")]
        tubinghead,
        
        /// <remarks/>
        turbine,
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        well,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well group")]
        wellgroup,
        
        /// <remarks/>
        wellbore,
        
        /// <remarks/>
        wellhead,
        
        /// <remarks/>
        zone,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductionOperationLostProduction {
        
        private ProductionOperationThirdPartyProcessing[] thirdPartyProcessingField;
        
        private LostVolumeAndReason[] volumeAndReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ThirdPartyProcessing")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ThirdPartyProcessing", DataType="ProductionOperationThirdPartyProcessing")]
        public ProductionOperationThirdPartyProcessing[] ThirdPartyProcessing {
            get {
                return this.thirdPartyProcessingField;
            }
            set {
                this.thirdPartyProcessingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("VolumeAndReason")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeAndReason", DataType="LostVolumeAndReason")]
        public LostVolumeAndReason[] VolumeAndReason {
            get {
                return this.volumeAndReasonField;
            }
            set {
                this.volumeAndReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductionOperationAlarm {
        
        private System.DateTime dTimField;
        
        private bool dTimFieldSpecified;
        
        private string areaField;
        
        private string typeField;
        
        private string reasonField;
        
        private string commentField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The date and time when the alarms sounded.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time when the alarms sounded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="dateTime")]
        public System.DateTime DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimSpecified {
            get {
                return this.dTimFieldSpecified;
            }
            set {
                this.dTimFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The area where the alarm sounded.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The area where the alarm sounded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Area", DataType="String64")]
        public string Area {
            get {
                return this.areaField;
            }
            set {
                this.areaField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of alarm that sounded.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The type of alarm that sounded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="String64")]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reason the alarm sounded.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The reason the alarm sounded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Reason", DataType="String2000")]
        public string Reason {
            get {
                return this.reasonField;
            }
            set {
                this.reasonField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A general comment about the alarm.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A general comment about the alarm.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductionOperationOperationalComment {
        
        private OperationKind typeField;
        
        private bool typeFieldSpecified;
        
        private System.DateTime dTimStartField;
        
        private bool dTimStartFieldSpecified;
        
        private System.DateTime dTimEndField;
        
        private bool dTimEndFieldSpecified;
        
        private string[] commentField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The kind of operation.</summary>
        [System.ComponentModel.DescriptionAttribute("The kind of operation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="OperationKind")]
        public OperationKind Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                this.typeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The beginning date and time that the comment represents.</summary>
        [System.ComponentModel.DescriptionAttribute("The beginning date and time that the comment represents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="dateTime")]
        public System.DateTime DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimStartSpecified {
            get {
                return this.dTimStartFieldSpecified;
            }
            set {
                this.dTimStartFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ending date and time that the comment represents.</summary>
        [System.ComponentModel.DescriptionAttribute("The ending date and time that the comment represents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="dateTime")]
        public System.DateTime DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimEndSpecified {
            get {
                return this.dTimEndFieldSpecified;
            }
            set {
                this.dTimEndFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A comment about the operation and/or the activities within the operation.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Comment")]
        [System.ComponentModel.DescriptionAttribute("A comment about the operation and/or the activities within the operation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string[] Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum OperationKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("air traffic")]
        airtraffic,
        
        /// <remarks/>
        construction,
        
        /// <remarks/>
        deviations,
        
        /// <remarks/>
        maintenance,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("power station failure")]
        powerstationfailure,
        
        /// <remarks/>
        production,
        
        /// <remarks/>
        well,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductionOperationShutdown {
        
        private FacilityIdentifierStruct installationField;
        
        private string descriptionField;
        
        private System.DateTime dTimStartField;
        
        private bool dTimStartFieldSpecified;
        
        private System.DateTime dTimEndField;
        
        private bool dTimEndFieldSpecified;
        
        private TimeMeasure volumetricDownTimeField;
        
        private VolumeMeasure lossOilStdTempPresField;
        
        private VolumeMeasure lossGasStdTempPresField;
        
        private DatedComment[] activityField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name of the installation which was shut down. The name can be qualified by a naming system. This also defines the kind of facility.</summary>
        [System.ComponentModel.DescriptionAttribute("The name of the installation which was shut down. The name can be qualified by a " +
            "naming system. This also defines the kind of facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Installation", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct Installation {
            get {
                return this.installationField;
            }
            set {
                this.installationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A general description of the shutdown with reason and other relevant information.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A general description of the shutdown with reason and other relevant information." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The time the shutdown started.</summary>
        [System.ComponentModel.DescriptionAttribute("The time the shutdown started.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="dateTime")]
        public System.DateTime DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimStartSpecified {
            get {
                return this.dTimStartFieldSpecified;
            }
            set {
                this.dTimStartFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The time the shutdown ended.</summary>
        [System.ComponentModel.DescriptionAttribute("The time the shutdown ended.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="dateTime")]
        public System.DateTime DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimEndSpecified {
            get {
                return this.dTimEndFieldSpecified;
            }
            set {
                this.dTimEndFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Downtime when the installation is unable to produce 100% of its capability.</summary>
        [System.ComponentModel.DescriptionAttribute("Downtime when the installation is unable to produce 100% of its capability.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumetricDownTime", DataType="TimeMeasure")]
        public TimeMeasure VolumetricDownTime {
            get {
                return this.volumetricDownTimeField;
            }
            set {
                this.volumetricDownTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Estimated loss of oil deliveries because of the shutdown. This volume has been corrected to standard conditions of temperature and pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Estimated loss of oil deliveries because of the shutdown. This volume has been co" +
            "rrected to standard conditions of temperature and pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LossOilStdTempPres", DataType="VolumeMeasure")]
        public VolumeMeasure LossOilStdTempPres {
            get {
                return this.lossOilStdTempPresField;
            }
            set {
                this.lossOilStdTempPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Estimated loss of gas deliveries because of the shutdown. This volume has been corrected to standard conditions of temperature and pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Estimated loss of gas deliveries because of the shutdown. This volume has been co" +
            "rrected to standard conditions of temperature and pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LossGasStdTempPres", DataType="VolumeMeasure")]
        public VolumeMeasure LossGasStdTempPres {
            get {
                return this.lossGasStdTempPresField;
            }
            set {
                this.lossGasStdTempPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A description of main activities from time to time during the shutdown period.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Activity")]
        [System.ComponentModel.DescriptionAttribute("A description of main activities from time to time during the shutdown period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Activity", DataType="DatedComment")]
        public DatedComment[] Activity {
            get {
                return this.activityField;
            }
            set {
                this.activityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductionOperationCargoShipOperation {
        
        private string vesselNameField;
        
        private System.DateTime dTimStartField;
        
        private bool dTimStartFieldSpecified;
        
        private System.DateTime dTimEndField;
        
        private bool dTimEndFieldSpecified;
        
        private string captainField;
        
        private string cargoNumberField;
        
        private string cargoBatchNumberField;
        
        private string cargoField;
        
        private VolumeMeasure oilGrossStdTempPresField;
        
        private VolumeMeasure oilGrossTotalStdTempPresField;
        
        private VolumeMeasure oilNetStdTempPresField;
        
        private VolumeMeasure oilNetMonthToDateStdTempPresField;
        
        private MassPerVolumeMeasure densityStdTempPresField;
        
        private MassPerVolumeMeasure densityField;
        
        private PressureMeasure rvpField;
        
        private VolumePerVolumeMeasure bswField;
        
        private MassPerVolumeMeasure saltField;
        
        private DatedComment[] commentField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Name of the cargo vessel.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the cargo vessel.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VesselName", DataType="String64")]
        public string VesselName {
            get {
                return this.vesselNameField;
            }
            set {
                this.vesselNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time that the vessel arrived.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time that the vessel arrived.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="dateTime")]
        public System.DateTime DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimStartSpecified {
            get {
                return this.dTimStartFieldSpecified;
            }
            set {
                this.dTimStartFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time that the vessel left.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time that the vessel left.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="dateTime")]
        public System.DateTime DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimEndSpecified {
            get {
                return this.dTimEndFieldSpecified;
            }
            set {
                this.dTimEndFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the captain of the vessel.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the captain of the vessel.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Captain", DataType="String64")]
        public string Captain {
            get {
                return this.captainField;
            }
            set {
                this.captainField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The cargo identifier.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The cargo identifier.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CargoNumber", DataType="String64")]
        public string CargoNumber {
            get {
                return this.cargoNumberField;
            }
            set {
                this.cargoNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The cargo batch number. Used if the vessel needs to temporarily disconnect for some reason (e.g., weather).</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DescriptionAttribute("The cargo batch number. Used if the vessel needs to temporarily disconnect for so" +
            "me reason (e.g., weather).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CargoBatchNumber", DataType="nonNegativeInteger")]
        public string CargoBatchNumber {
            get {
                return this.cargoBatchNumberField;
            }
            set {
                this.cargoBatchNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of cargo on the vessel.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Description of cargo on the vessel.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Cargo", DataType="String2000")]
        public string Cargo {
            get {
                return this.cargoField;
            }
            set {
                this.cargoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gross oil loaded to the ship during the report period. Gross oil includes BS and W. This volume has been corrected to standard conditions of temperature and pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Gross oil loaded to the ship during the report period. Gross oil includes BS and " +
            "W. This volume has been corrected to standard conditions of temperature and pres" +
            "sure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilGrossStdTempPres", DataType="VolumeMeasure")]
        public VolumeMeasure OilGrossStdTempPres {
            get {
                return this.oilGrossStdTempPresField;
            }
            set {
                this.oilGrossStdTempPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gross oil loaded to the ship in total during the operation. Gross oil includes BS and W. This volume has been corrected to standard conditions of temperature and pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Gross oil loaded to the ship in total during the operation. Gross oil includes BS" +
            " and W. This volume has been corrected to standard conditions of temperature and" +
            " pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilGrossTotalStdTempPres", DataType="VolumeMeasure")]
        public VolumeMeasure OilGrossTotalStdTempPres {
            get {
                return this.oilGrossTotalStdTempPresField;
            }
            set {
                this.oilGrossTotalStdTempPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Net oil loaded to the ship during the report period. Net oil excludes BS and W, fuel, spills, and leaks. This volume has been corrected to standard conditions of temperature and pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Net oil loaded to the ship during the report period. Net oil excludes BS and W, f" +
            "uel, spills, and leaks. This volume has been corrected to standard conditions of" +
            " temperature and pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilNetStdTempPres", DataType="VolumeMeasure")]
        public VolumeMeasure OilNetStdTempPres {
            get {
                return this.oilNetStdTempPresField;
            }
            set {
                this.oilNetStdTempPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Net oil loaded to the ship from the beginning of the month to the end of the reporting period. Net oil excludes BS and W, fuel, spills, and leaks. This volume has been corrected to standard conditions of temperature and pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Net oil loaded to the ship from the beginning of the month to the end of the repo" +
            "rting period. Net oil excludes BS and W, fuel, spills, and leaks. This volume ha" +
            "s been corrected to standard conditions of temperature and pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilNetMonthToDateStdTempPres", DataType="VolumeMeasure")]
        public VolumeMeasure OilNetMonthToDateStdTempPres {
            get {
                return this.oilNetMonthToDateStdTempPresField;
            }
            set {
                this.oilNetMonthToDateStdTempPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Density of the liquid loaded to the tanker. This density has been corrected to standard conditions of temperature and pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Density of the liquid loaded to the tanker. This density has been corrected to st" +
            "andard conditions of temperature and pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensityStdTempPres", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensityStdTempPres {
            get {
                return this.densityStdTempPresField;
            }
            set {
                this.densityStdTempPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Density of the liquid loaded to the tanker.</summary>
        [System.ComponentModel.DescriptionAttribute("Density of the liquid loaded to the tanker.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Density", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Density {
            get {
                return this.densityField;
            }
            set {
                this.densityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reid vapor pressure of the liquid.</summary>
        [System.ComponentModel.DescriptionAttribute("Reid vapor pressure of the liquid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Rvp", DataType="PressureMeasure")]
        public PressureMeasure Rvp {
            get {
                return this.rvpField;
            }
            set {
                this.rvpField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Basic sediment and water is measured from a liquid sample the production stream. It includes free water, sediment and emulsion and is measured as a volume percentage of the liquid.</summary>
        [System.ComponentModel.DescriptionAttribute("Basic sediment and water is measured from a liquid sample the production stream. " +
            "It includes free water, sediment and emulsion and is measured as a volume percen" +
            "tage of the liquid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Bsw", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Bsw {
            get {
                return this.bswField;
            }
            set {
                this.bswField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Salt content. The product formed by neutralization of an acid and a base. The term is more specifically applied to sodium chloride.</summary>
        [System.ComponentModel.DescriptionAttribute("Salt content. The product formed by neutralization of an acid and a base. The ter" +
            "m is more specifically applied to sodium chloride.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Salt", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Salt {
            get {
                return this.saltField;
            }
            set {
                this.saltField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A commnet about the operation.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Comment")]
        [System.ComponentModel.DescriptionAttribute("A commnet about the operation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="DatedComment")]
        public DatedComment[] Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductionOperationMarineOperation {
        
        private System.DateTime dTimStartField;
        
        private bool dTimStartFieldSpecified;
        
        private System.DateTime dTimEndField;
        
        private bool dTimEndFieldSpecified;
        
        private string generalCommentField;
        
        private string supplyShipField;
        
        private string standbyVesselField;
        
        private DatedComment[] supplyShipCommentField;
        
        private DatedComment[] standbyVesselCommentField;
        
        private DatedComment[] activityField;
        
        private DatedComment[] basketMovementField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The beginning date and time that the comment represents.</summary>
        [System.ComponentModel.DescriptionAttribute("The beginning date and time that the comment represents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="dateTime")]
        public System.DateTime DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimStartSpecified {
            get {
                return this.dTimStartFieldSpecified;
            }
            set {
                this.dTimStartFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ending date and time that the comment represents.</summary>
        [System.ComponentModel.DescriptionAttribute("The ending date and time that the comment represents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="dateTime")]
        public System.DateTime DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimEndSpecified {
            get {
                return this.dTimEndFieldSpecified;
            }
            set {
                this.dTimEndFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A general comment on marine activity in the area.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A general comment on marine activity in the area.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeneralComment", DataType="String2000")]
        public string GeneralComment {
            get {
                return this.generalCommentField;
            }
            set {
                this.generalCommentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the supply vessel for the installation.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the supply vessel for the installation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SupplyShip", DataType="String64")]
        public string SupplyShip {
            get {
                return this.supplyShipField;
            }
            set {
                this.supplyShipField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the standby vessel for the installation.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the standby vessel for the installation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StandbyVessel", DataType="String64")]
        public string StandbyVessel {
            get {
                return this.standbyVesselField;
            }
            set {
                this.standbyVesselField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comment regarding the supply ship.</summary>
        [System.Xml.Serialization.XmlElementAttribute("SupplyShipComment")]
        [System.ComponentModel.DescriptionAttribute("Comment regarding the supply ship.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SupplyShipComment", DataType="DatedComment")]
        public DatedComment[] SupplyShipComment {
            get {
                return this.supplyShipCommentField;
            }
            set {
                this.supplyShipCommentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comment regarding the standby vessel.</summary>
        [System.Xml.Serialization.XmlElementAttribute("StandbyVesselComment")]
        [System.ComponentModel.DescriptionAttribute("Comment regarding the standby vessel.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StandbyVesselComment", DataType="DatedComment")]
        public DatedComment[] StandbyVesselComment {
            get {
                return this.standbyVesselCommentField;
            }
            set {
                this.standbyVesselCommentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A comment on a special event in the marine area.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Activity")]
        [System.ComponentModel.DescriptionAttribute("A comment on a special event in the marine area.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Activity", DataType="DatedComment")]
        public DatedComment[] Activity {
            get {
                return this.activityField;
            }
            set {
                this.activityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Report of any basket movement to and from the installation.</summary>
        [System.Xml.Serialization.XmlElementAttribute("BasketMovement")]
        [System.ComponentModel.DescriptionAttribute("Report of any basket movement to and from the installation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BasketMovement", DataType="DatedComment")]
        public DatedComment[] BasketMovement {
            get {
                return this.basketMovementField;
            }
            set {
                this.basketMovementField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductionOperationWaterCleaningQuality {
        
        private string samplePointField;
        
        private MassPerMassMeasure oilInWaterProducedField;
        
        private MassMeasure amountOfOilField;
        
        private MassPerVolumeMeasure ammoniumField;
        
        private MassPerMassMeasure totalOrganicCarbonField;
        
        private MassPerVolumeMeasure phenolField;
        
        private MassPerVolumeMeasure glycolField;
        
        private DimensionlessMeasure phValueField;
        
        private ThermodynamicTemperatureMeasure waterTemperatureField;
        
        private MassPerMassMeasure residualChlorideField;
        
        private MassPerMassMeasure oxygenField;
        
        private DimensionlessMeasure turbidityField;
        
        private MassPerMassMeasure coulterCounterField;
        
        private DatedComment[] commentField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>An identifier of the point from which the sample was taken. This is an uncontrolled string value, which should be as descriptive as possible.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("An identifier of the point from which the sample was taken. This is an uncontroll" +
            "ed string value, which should be as descriptive as possible.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SamplePoint", DataType="String64")]
        public string SamplePoint {
            get {
                return this.samplePointField;
            }
            set {
                this.samplePointField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total measured oil in the water after the water cleaning process, but before it is discharged from the installation.</summary>
        [System.ComponentModel.DescriptionAttribute("Total measured oil in the water after the water cleaning process, but before it i" +
            "s discharged from the installation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilInWaterProduced", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure OilInWaterProduced {
            get {
                return this.oilInWaterProducedField;
            }
            set {
                this.oilInWaterProducedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total measured oil in the water after the water cleaning process, but before it is discharged from the installation</summary>
        [System.ComponentModel.DescriptionAttribute("Total measured oil in the water after the water cleaning process, but before it i" +
            "s discharged from the installation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AmountOfOil", DataType="MassMeasure")]
        public MassMeasure AmountOfOil {
            get {
                return this.amountOfOilField;
            }
            set {
                this.amountOfOilField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of ammonium found in the water sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The amount of ammonium found in the water sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Ammonium", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Ammonium {
            get {
                return this.ammoniumField;
            }
            set {
                this.ammoniumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of total organic carbon found in the water. The water is under high temperature and the carbon left is measured.</summary>
        [System.ComponentModel.DescriptionAttribute("The amount of total organic carbon found in the water. The water is under high te" +
            "mperature and the carbon left is measured.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalOrganicCarbon", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure TotalOrganicCarbon {
            get {
                return this.totalOrganicCarbonField;
            }
            set {
                this.totalOrganicCarbonField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of phenol found in the water sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The amount of phenol found in the water sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Phenol", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Phenol {
            get {
                return this.phenolField;
            }
            set {
                this.phenolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of glycol found in the water sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The amount of glycol found in the water sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Glycol", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Glycol {
            get {
                return this.glycolField;
            }
            set {
                this.glycolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pH value of the treated water. The pH value is best given as a value, with no unit of measure, since there are no variations from the pH.</summary>
        [System.ComponentModel.DescriptionAttribute("The pH value of the treated water. The pH value is best given as a value, with no" +
            " unit of measure, since there are no variations from the pH.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PhValue", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure PhValue {
            get {
                return this.phValueField;
            }
            set {
                this.phValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature of the water before it is discharged.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature of the water before it is discharged.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure WaterTemperature {
            get {
                return this.waterTemperatureField;
            }
            set {
                this.waterTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total measured residual chlorides in the water after the water cleaning process, but before it is discharged from the installation.</summary>
        [System.ComponentModel.DescriptionAttribute("Total measured residual chlorides in the water after the water cleaning process, " +
            "but before it is discharged from the installation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ResidualChloride", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure ResidualChloride {
            get {
                return this.residualChlorideField;
            }
            set {
                this.residualChlorideField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total measured oxygen in the water after the water cleaning process, but before it is discharged from the installation.</summary>
        [System.ComponentModel.DescriptionAttribute("Total measured oxygen in the water after the water cleaning process, but before i" +
            "t is discharged from the installation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Oxygen", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure Oxygen {
            get {
                return this.oxygenField;
            }
            set {
                this.oxygenField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A measure of the cloudiness of water caused by suspended particles.</summary>
        [System.ComponentModel.DescriptionAttribute("A measure of the cloudiness of water caused by suspended particles.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Turbidity", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure Turbidity {
            get {
                return this.turbidityField;
            }
            set {
                this.turbidityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A measure of the number of particles in water as measured by a coulter counter.</summary>
        [System.ComponentModel.DescriptionAttribute("A measure of the number of particles in water as measured by a coulter counter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CoulterCounter", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure CoulterCounter {
            get {
                return this.coulterCounterField;
            }
            set {
                this.coulterCounterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Any comment that may be useful in describing the water quality.  There can be multiple comments.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Comment")]
        [System.ComponentModel.DescriptionAttribute("Any comment that may be useful in describing the water quality.  There can be mul" +
            "tiple comments.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="DatedComment")]
        public DatedComment[] Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class MassPerMassMeasure {
        
        private MassPerMassUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="MassPerMassUom")]
        public MassPerMassUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[mass]")]
        mass,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/kg")]
        gkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/t")]
        gt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/kg")]
        kgkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/sack[94lbm]")]
        kgsack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/t")]
        kgt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/g")]
        mgg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/kg")]
        mgkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ng/g")]
        ngg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ng/mg")]
        ngmg,
        
        /// <remarks/>
        ppk,
        
        /// <remarks/>
        ppm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[mass]")]
        ppmmass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/g")]
        ugg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/mg")]
        ugmg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class MassMeasure {
        
        private MassUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="MassUom")]
        public MassUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassUom {
        
        /// <remarks/>
        ag,
        
        /// <remarks/>
        cg,
        
        /// <remarks/>
        ct,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cwt[UK]")]
        cwtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cwt[US]")]
        cwtUS,
        
        /// <remarks/>
        Eg,
        
        /// <remarks/>
        fg,
        
        /// <remarks/>
        g,
        
        /// <remarks/>
        Gg,
        
        /// <remarks/>
        grain,
        
        /// <remarks/>
        hg,
        
        /// <remarks/>
        kg,
        
        /// <remarks/>
        klbm,
        
        /// <remarks/>
        lbm,
        
        /// <remarks/>
        mg,
        
        /// <remarks/>
        Mg,
        
        /// <remarks/>
        ng,
        
        /// <remarks/>
        ozm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ozm[troy]")]
        ozmtroy,
        
        /// <remarks/>
        pg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sack[94lbm]")]
        sack94lbm,
        
        /// <remarks/>
        t,
        
        /// <remarks/>
        Tg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]")]
        tonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]")]
        tonUS,
        
        /// <remarks/>
        ug,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class DimensionlessMeasure {
        
        private DimensionlessUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="DimensionlessUom")]
        public DimensionlessUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DimensionlessUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        cEuc,
        
        /// <remarks/>
        dEuc,
        
        /// <remarks/>
        EEuc,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        fEuc,
        
        /// <remarks/>
        GEuc,
        
        /// <remarks/>
        kEuc,
        
        /// <remarks/>
        MEuc,
        
        /// <remarks/>
        mEuc,
        
        /// <remarks/>
        nEuc,
        
        /// <remarks/>
        pEuc,
        
        /// <remarks/>
        ppk,
        
        /// <remarks/>
        ppm,
        
        /// <remarks/>
        TEuc,
        
        /// <remarks/>
        uEuc,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductionOperationActivity {
        
        private ProductionOperationWaterCleaningQuality[] waterCleaningQualityField;
        
        private ProductionOperationMarineOperation[] marineOperationField;
        
        private ProductionOperationCargoShipOperation[] cargoShipOperationField;
        
        private ProductionOperationShutdown[] shutdownField;
        
        private ProductionOperationOperationalComment[] operationalCommentField;
        
        private ProductionOperationAlarm[] alarmField;
        
        private ProductionOperationLostProduction lostProductionField;
        
        private ProductionOperationLostProduction lostInjectionField;
        
        /// <remarks/>
        /// <summary>Information about the contaminants in water, and the general water quality.</summary>
        [System.Xml.Serialization.XmlElementAttribute("WaterCleaningQuality")]
        [System.ComponentModel.DescriptionAttribute("Information about the contaminants in water, and the general water quality.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterCleaningQuality", DataType="ProductionOperationWaterCleaningQuality")]
        public ProductionOperationWaterCleaningQuality[] WaterCleaningQuality {
            get {
                return this.waterCleaningQualityField;
            }
            set {
                this.waterCleaningQualityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Information about a marine operation.</summary>
        [System.Xml.Serialization.XmlElementAttribute("MarineOperation")]
        [System.ComponentModel.DescriptionAttribute("Information about a marine operation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MarineOperation", DataType="ProductionOperationMarineOperation")]
        public ProductionOperationMarineOperation[] MarineOperation {
            get {
                return this.marineOperationField;
            }
            set {
                this.marineOperationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Information about a cargo operation.</summary>
        [System.Xml.Serialization.XmlElementAttribute("CargoShipOperation")]
        [System.ComponentModel.DescriptionAttribute("Information about a cargo operation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CargoShipOperation", DataType="ProductionOperationCargoShipOperation")]
        public ProductionOperationCargoShipOperation[] CargoShipOperation {
            get {
                return this.cargoShipOperationField;
            }
            set {
                this.cargoShipOperationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Infomation about a shutdown event.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Shutdown")]
        [System.ComponentModel.DescriptionAttribute("Infomation about a shutdown event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Shutdown", DataType="ProductionOperationShutdown")]
        public ProductionOperationShutdown[] Shutdown {
            get {
                return this.shutdownField;
            }
            set {
                this.shutdownField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A comment about a kind of operation. The time of the operation can be specified.</summary>
        [System.Xml.Serialization.XmlElementAttribute("OperationalComment")]
        [System.ComponentModel.DescriptionAttribute("A comment about a kind of operation. The time of the operation can be specified.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OperationalComment", DataType="ProductionOperationOperationalComment")]
        public ProductionOperationOperationalComment[] OperationalComment {
            get {
                return this.operationalCommentField;
            }
            set {
                this.operationalCommentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Infomation about an alarm.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Alarm")]
        [System.ComponentModel.DescriptionAttribute("Infomation about an alarm.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Alarm", DataType="ProductionOperationAlarm")]
        public ProductionOperationAlarm[] Alarm {
            get {
                return this.alarmField;
            }
            set {
                this.alarmField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Infomation about a lost production.</summary>
        [System.ComponentModel.DescriptionAttribute("Infomation about a lost production.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LostProduction", DataType="ProductionOperationLostProduction")]
        public ProductionOperationLostProduction LostProduction {
            get {
                return this.lostProductionField;
            }
            set {
                this.lostProductionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Infomation about a lost injection.</summary>
        [System.ComponentModel.DescriptionAttribute("Infomation about a lost injection.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LostInjection", DataType="ProductionOperationLostProduction")]
        public ProductionOperationLostProduction LostInjection {
            get {
                return this.lostInjectionField;
            }
            set {
                this.lostInjectionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class CrewCount {
        
        private CrewType typeField;
        
        private bool typeFieldSpecified;
        
        private string uidField;
        
        private long valueField;
        
        /// <remarks/>
        /// <summary>The type of crew for which a count is being defined.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute("The type of crew for which a count is being defined.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("type", DataType="CrewType")]
        public CrewType type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                this.typeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public long Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum CrewType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("catering crew")]
        cateringcrew,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("contractor crew")]
        contractorcrew,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("day visitors")]
        dayvisitors,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling contract crew")]
        drillingcontractcrew,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("other crew")]
        othercrew,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("own crew")]
        owncrew,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("own other crew")]
        ownothercrew,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("personnel on board")]
        personnelonboard,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductionOperationInstallationReport {
        
        private FacilityIdentifierStruct installationField;
        
        private string bedsAvailableField;
        
        private TimeMeasure workField;
        
        private TimeMeasure workMonthToDateField;
        
        private TimeMeasure workYearToDateField;
        
        private CrewCount[] crewCountField;
        
        private ProductionOperationActivity productionActivityField;
        
        private ProductionOperationHSE[] operationalHSEField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The installation represented by this report.</summary>
        [System.ComponentModel.DescriptionAttribute("The installation represented by this report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Installation", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct Installation {
            get {
                return this.installationField;
            }
            set {
                this.installationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total count of beds available on the installation.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DescriptionAttribute("Total count of beds available on the installation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BedsAvailable", DataType="nonNegativeInteger")]
        public string BedsAvailable {
            get {
                return this.bedsAvailableField;
            }
            set {
                this.bedsAvailableField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total cumulative amount of time worked during the reporting period. Commonly specified in units of hours. Note that a day unit translates to 24 hours worked.</summary>
        [System.ComponentModel.DescriptionAttribute("The total cumulative amount of time worked during the reporting period. Commonly " +
            "specified in units of hours. Note that a day unit translates to 24 hours worked." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Work", DataType="TimeMeasure")]
        public TimeMeasure Work {
            get {
                return this.workField;
            }
            set {
                this.workField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total cumulative amount of time worked from the beginning of the month to the end of reporting period. Commonly specified in units of hours. Note that a day unit translates to 24 hours worked.</summary>
        [System.ComponentModel.DescriptionAttribute("The total cumulative amount of time worked from the beginning of the month to the" +
            " end of reporting period. Commonly specified in units of hours. Note that a day " +
            "unit translates to 24 hours worked.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WorkMonthToDate", DataType="TimeMeasure")]
        public TimeMeasure WorkMonthToDate {
            get {
                return this.workMonthToDateField;
            }
            set {
                this.workMonthToDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total cumulative amount of time worked from the beginning of the year to the end of reporting period. Commonly specified in units of hours. Note that a day unit translates to 24 hours worked.</summary>
        [System.ComponentModel.DescriptionAttribute("The total cumulative amount of time worked from the beginning of the year to the " +
            "end of reporting period. Commonly specified in units of hours. Note that a day u" +
            "nit translates to 24 hours worked.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WorkYearToDate", DataType="TimeMeasure")]
        public TimeMeasure WorkYearToDate {
            get {
                return this.workYearToDateField;
            }
            set {
                this.workYearToDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CrewCount")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CrewCount", DataType="CrewCount")]
        public CrewCount[] CrewCount {
            get {
                return this.crewCountField;
            }
            set {
                this.crewCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Production activities.</summary>
        [System.ComponentModel.DescriptionAttribute("Production activities.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductionActivity", DataType="ProductionOperationActivity")]
        public ProductionOperationActivity ProductionActivity {
            get {
                return this.productionActivityField;
            }
            set {
                this.productionActivityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Health, Safety and Environmenal information.</summary>
        [System.Xml.Serialization.XmlElementAttribute("OperationalHSE")]
        [System.ComponentModel.DescriptionAttribute("Health, Safety and Environmenal information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OperationalHSE", DataType="ProductionOperationHSE")]
        public ProductionOperationHSE[] OperationalHSE {
            get {
                return this.operationalHSEField;
            }
            set {
                this.operationalHSEField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WftTest {
        
        private WftTestKind testKindField;
        
        private System.DateTime dTimStartField;
        
        private bool dTimStartFieldSpecified;
        
        private System.DateTime dTimEndField;
        
        private bool dTimEndFieldSpecified;
        
        private WftTestResult[] resultField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Describes whether the test is associated with a pressure buildup or a drawdown. See enum WftTestKind.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Describes whether the test is associated with a pressure buildup or a drawdown. S" +
            "ee enum WftTestKind.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestKind", DataType="WftTestKind")]
        public WftTestKind TestKind {
            get {
                return this.testKindField;
            }
            set {
                this.testKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time when the data collection started for this test.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time when the data collection started for this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="dateTime")]
        public System.DateTime DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimStartSpecified {
            get {
                return this.dTimStartFieldSpecified;
            }
            set {
                this.dTimStartFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time when the data collection ended for this test.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time when the data collection ended for this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="dateTime")]
        public System.DateTime DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimEndSpecified {
            get {
                return this.dTimEndFieldSpecified;
            }
            set {
                this.dTimEndFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A result of formation tester analysis that applies to this test.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Result")]
        [System.ComponentModel.DescriptionAttribute("A result of formation tester analysis that applies to this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Result", DataType="WftTestResult")]
        public WftTestResult[] Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum WftTestKind {
        
        /// <remarks/>
        buildup,
        
        /// <remarks/>
        drawdown,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WftTestResult {
        
        private WftTestResultKind kindField;
        
        private string methodField;
        
        private MeasuredDepthCoord mdTopField;
        
        private MeasuredDepthCoord mdBottomField;
        
        private WftTestData[] testDataField;
        
        private WftResultReference[] inputResultReferenceField;
        
        private WftInOutParameter[] inputParameterField;
        
        private WftInOutParameter[] outputParameterField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The kind of result represents a combination of test kind and analysis method applied. See enum WftTestKindResult.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The kind of result represents a combination of test kind and analysis method appl" +
            "ied. See enum WftTestKindResult.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="WftTestResultKind")]
        public WftTestResultKind Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of a proprietary, method which generally represents a specialization of a result kind.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of a proprietary, method which generally represents a specialization of " +
            "a result kind.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Method", DataType="String64")]
        public string Method {
            get {
                return this.methodField;
            }
            set {
                this.methodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The top of the interval to which this result applies.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The top of the interval to which this result applies.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdTop", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdTop {
            get {
                return this.mdTopField;
            }
            set {
                this.mdTopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The bottom of the interval to which this result applies.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The bottom of the interval to which this result applies.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdBottom", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdBottom {
            get {
                return this.mdBottomField;
            }
            set {
                this.mdBottomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to the formation tester data used to derive this result.</summary>
        [System.Xml.Serialization.XmlElementAttribute("TestData")]
        [System.ComponentModel.DescriptionAttribute("A reference to the formation tester data used to derive this result.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestData", DataType="WftTestData")]
        public WftTestData[] TestData {
            get {
                return this.testDataField;
            }
            set {
                this.testDataField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to an outputParameter of another result which was used as an input to this result. For a test result, the other result will be in the same test (i.e., ../result). For a station result, the other result will be in the same station (i.e., ../result) or  will be a test result in the same station (../test/result) or  will be an sampleAcquisition in the same station (i.e., ../sampleAcquisition/result). For a wftRun result, the other result will be in the same wftRun (i.e., ../result) or will be a result in a station (i.e., ../station/result) or will be a result in a station's test (i.e., ../station/test/result) or  will be a result in a station's sampleAcquisition (i.e., ../station/sampleAcquisition/result). The "../result" notation means: starting in the parent node, traverse down to the  appropriate child result using the provided pointers.</summary>
        [System.Xml.Serialization.XmlElementAttribute("InputResultReference")]
        [System.ComponentModel.DescriptionAttribute(@"A reference to an outputParameter of another result which was used as an input to this result. For a test result, the other result will be in the same test (i.e., ../result). For a station result, the other result will be in the same station (i.e., ../result) or  will be a test result in the same station (../test/result) or  will be an sampleAcquisition in the same station (i.e., ../sampleAcquisition/result). For a wftRun result, the other result will be in the same wftRun (i.e., ../result) or will be a result in a station (i.e., ../station/result) or will be a result in a station's test (i.e., ../station/test/result) or  will be a result in a station's sampleAcquisition (i.e., ../station/sampleAcquisition/result). The ""../result"" notation means: starting in the parent node, traverse down to the  appropriate child result using the provided pointers.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InputResultReference", DataType="WftResultReference")]
        public WftResultReference[] InputResultReference {
            get {
                return this.inputResultReferenceField;
            }
            set {
                this.inputResultReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An input parameter to the analysis method.</summary>
        [System.Xml.Serialization.XmlElementAttribute("InputParameter")]
        [System.ComponentModel.DescriptionAttribute("An input parameter to the analysis method.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InputParameter", DataType="WftInOutParameter")]
        public WftInOutParameter[] InputParameter {
            get {
                return this.inputParameterField;
            }
            set {
                this.inputParameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An output (result) parameter from the analysis of the test. The aggregate of parameters might represent something like the simulated response  of the test, to compare with actual.</summary>
        [System.Xml.Serialization.XmlElementAttribute("OutputParameter")]
        [System.ComponentModel.DescriptionAttribute("An output (result) parameter from the analysis of the test. The aggregate of para" +
            "meters might represent something like the simulated response  of the test, to co" +
            "mpare with actual.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OutputParameter", DataType="WftInOutParameter")]
        public WftInOutParameter[] OutputParameter {
            get {
                return this.outputParameterField;
            }
            set {
                this.outputParameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum WftTestResultKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("buildup result")]
        buildupresult,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drawdown result")]
        drawdownresult,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WftTestData {
        
        private WftTestDataRole roleField;
        
        private WftCurveSection[] curveSectionField;
        
        private WftInOutParameter[] parameterField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The role of the test data. The role applies either to a curve or to a point parameter. See enum WftTestRoleData.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The role of the test data. The role applies either to a curve or to a point param" +
            "eter. See enum WftTestRoleData.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Role", DataType="WftTestDataRole")]
        public WftTestDataRole Role {
            get {
                return this.roleField;
            }
            set {
                this.roleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to a specific interval of a specific curve in a specific log.</summary>
        [System.Xml.Serialization.XmlElementAttribute("CurveSection")]
        [System.ComponentModel.DescriptionAttribute("A reference to a specific interval of a specific curve in a specific log.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CurveSection", DataType="WftCurveSection")]
        public WftCurveSection[] CurveSection {
            get {
                return this.curveSectionField;
            }
            set {
                this.curveSectionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test parameters used here are either control parameters used to govern  the test or are single value parameters measured by the test (and not by subsequent analysis).</summary>
        [System.Xml.Serialization.XmlElementAttribute("Parameter")]
        [System.ComponentModel.DescriptionAttribute("Test parameters used here are either control parameters used to govern  the test " +
            "or are single value parameters measured by the test (and not by subsequent analy" +
            "sis).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="WftInOutParameter")]
        public WftInOutParameter[] Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum WftTestDataRole {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("flow history")]
        flowhistory,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure stream")]
        pressurestream,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WftCurveSection {
        
        private DataObjectReference channelReferenceField;
        
        private string mnemonicField;
        
        private System.DateTime dTimStartField;
        
        private bool dTimStartFieldSpecified;
        
        private System.DateTime dTimEndField;
        
        private bool dTimEndFieldSpecified;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A pointer to a specific channel that contains the curve.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A pointer to a specific channel that contains the curve.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChannelReference", DataType="DataObjectReference")]
        public DataObjectReference ChannelReference {
            get {
                return this.channelReferenceField;
            }
            set {
                this.channelReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The curve mnemonic name.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The curve mnemonic name.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mnemonic", DataType="String64")]
        public string Mnemonic {
            get {
                return this.mnemonicField;
            }
            set {
                this.mnemonicField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time of the start of the relevant interval. If not specified then the beginning of the curve is assumed.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time of the start of the relevant interval. If not specified then th" +
            "e beginning of the curve is assumed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="dateTime")]
        public System.DateTime DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimStartSpecified {
            get {
                return this.dTimStartFieldSpecified;
            }
            set {
                this.dTimStartFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time of the end of the relevant interval. If not specified then the end of the curve is assumed.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time of the end of the relevant interval. If not specified then the " +
            "end of the curve is assumed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="dateTime")]
        public System.DateTime DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimEndSpecified {
            get {
                return this.dTimEndFieldSpecified;
            }
            set {
                this.dTimEndFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WftInOutParameter {
        
        private string nameField;
        
        private MeasureOrQuantity valueField;
        
        private MeasureClass measureClassField;
        
        private bool measureClassFieldSpecified;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name of the parameter.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the parameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The value of the parameter. If the value represents a measure, then the UOM attribute and the corresponding measureClass must be specified.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The value of the parameter. If the value represents a measure, then the UOM attri" +
            "bute and the corresponding measureClass must be specified.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="MeasureOrQuantity")]
        public MeasureOrQuantity Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of the measure. For example, "length". If the value requires a unit of measure, this must be specified.</summary>
        [System.ComponentModel.DescriptionAttribute("The kind of the measure. For example, \"length\". If the value requires a unit of m" +
            "easure, this must be specified.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasureClass", DataType="MeasureClass")]
        public MeasureClass MeasureClass {
            get {
                return this.measureClassField;
            }
            set {
                this.measureClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MeasureClassSpecified {
            get {
                return this.measureClassFieldSpecified;
            }
            set {
                this.measureClassFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class MeasureOrQuantity {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        /// <summary>The unit of measure for the quantity. This value must conform to the values allowed by a measure class. If the value is a measure, then the UOM must be specified.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(32)]
        [System.ComponentModel.DescriptionAttribute("The unit of measure for the quantity. This value must conform to the values allow" +
            "ed by a measure class. If the value is a measure, then the UOM must be specified" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="UomEnum")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MeasureClass {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("absorbed dose")]
        absorbeddose,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("activity of radioactivity")]
        activityofradioactivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance")]
        amountofsubstance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per amount of substance")]
        amountofsubstanceperamountofsubstance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per area")]
        amountofsubstanceperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per time")]
        amountofsubstancepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per time per area")]
        amountofsubstancepertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per volume")]
        amountofsubstancepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angle per length")]
        angleperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angle per volume")]
        anglepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angular acceleration")]
        angularacceleration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angular velocity")]
        angularvelocity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("api gamma ray")]
        apigammaray,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("api gravity")]
        apigravity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("api neutron")]
        apineutron,
        
        /// <remarks/>
        area,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per amount of substance")]
        areaperamountofsubstance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per area")]
        areaperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per count")]
        areapercount,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per mass")]
        areapermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per time")]
        areapertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per volume")]
        areapervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("attenuation per frequency interval")]
        attenuationperfrequencyinterval,
        
        /// <remarks/>
        capacitance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cation exchange capacity")]
        cationexchangecapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("data transfer speed")]
        datatransferspeed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diffusion coefficient")]
        diffusioncoefficient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diffusive time of flight")]
        diffusivetimeofflight,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("digital storage")]
        digitalstorage,
        
        /// <remarks/>
        dimensionless,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dipole moment")]
        dipolemoment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dose equivalent")]
        doseequivalent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dynamic viscosity")]
        dynamicviscosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge")]
        electriccharge,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge per area")]
        electricchargeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge per mass")]
        electricchargepermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge per volume")]
        electricchargepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric conductance")]
        electricconductance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric conductivity")]
        electricconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric current")]
        electriccurrent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric current density")]
        electriccurrentdensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric field strength")]
        electricfieldstrength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric potential difference")]
        electricpotentialdifference,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric resistance")]
        electricresistance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric resistance per length")]
        electricresistanceperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electrical resistivity")]
        electricalresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electromagnetic moment")]
        electromagneticmoment,
        
        /// <remarks/>
        energy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy length per area")]
        energylengthperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy length per time area temperature")]
        energylengthpertimeareatemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per area")]
        energyperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per length")]
        energyperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per mass")]
        energypermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per mass per time")]
        energypermasspertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per volume")]
        energypervolume,
        
        /// <remarks/>
        force,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force area")]
        forcearea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force length per length")]
        forcelengthperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per force")]
        forceperforce,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per length")]
        forceperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per volume")]
        forcepervolume,
        
        /// <remarks/>
        frequency,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("frequency interval")]
        frequencyinterval,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat capacity")]
        heatcapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat flow rate")]
        heatflowrate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat transfer coefficient")]
        heattransfercoefficient,
        
        /// <remarks/>
        illuminance,
        
        /// <remarks/>
        inductance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("isothermal compressibility")]
        isothermalcompressibility,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kinematic viscosity")]
        kinematicviscosity,
        
        /// <remarks/>
        length,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per length")]
        lengthperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per mass")]
        lengthpermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per pressure")]
        lengthperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per temperature")]
        lengthpertemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per time")]
        lengthpertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per volume")]
        lengthpervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("light exposure")]
        lightexposure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("linear acceleration")]
        linearacceleration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("linear thermal expansion")]
        linearthermalexpansion,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("logarithmic power ratio")]
        logarithmicpowerratio,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("logarithmic power ratio per length")]
        logarithmicpowerratioperlength,
        
        /// <remarks/>
        luminance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous efficacy")]
        luminousefficacy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous flux")]
        luminousflux,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous intensity")]
        luminousintensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic dipole moment")]
        magneticdipolemoment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic field strength")]
        magneticfieldstrength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic flux")]
        magneticflux,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic flux density")]
        magneticfluxdensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic flux density per length")]
        magneticfluxdensityperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic permeability")]
        magneticpermeability,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic vector potential")]
        magneticvectorpotential,
        
        /// <remarks/>
        mass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass length")]
        masslength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per area")]
        massperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per energy")]
        massperenergy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per length")]
        massperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per mass")]
        masspermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per time")]
        masspertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per time per area")]
        masspertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per time per length")]
        masspertimeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume")]
        masspervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume per length")]
        masspervolumeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume per pressure")]
        masspervolumeperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume per temperature")]
        masspervolumepertemperature,
        
        /// <remarks/>
        mobility,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar energy")]
        molarenergy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar heat capacity")]
        molarheatcapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar volume")]
        molarvolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molecular weight")]
        molecularweight,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("moment of force")]
        momentofforce,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("moment of inertia")]
        momentofinertia,
        
        /// <remarks/>
        momentum,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("normalized power")]
        normalizedpower,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("permeability length")]
        permeabilitylength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("permeability rock")]
        permeabilityrock,
        
        /// <remarks/>
        permittivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plane angle")]
        planeangle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("potential difference per power drop")]
        potentialdifferenceperpowerdrop,
        
        /// <remarks/>
        power,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("power per area")]
        powerperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("power per power")]
        powerperpower,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("power per volume")]
        powerpervolume,
        
        /// <remarks/>
        pressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure per pressure")]
        pressureperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure per time")]
        pressurepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure per volume")]
        pressurepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure squared")]
        pressuresquared,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure squared per force time per area")]
        pressuresquaredperforcetimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure time per volume")]
        pressuretimepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("quantity of light")]
        quantityoflight,
        
        /// <remarks/>
        radiance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("radiant intensity")]
        radiantintensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal area")]
        reciprocalarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal electric potential difference")]
        reciprocalelectricpotentialdifference,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal force")]
        reciprocalforce,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal length")]
        reciprocallength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal mass")]
        reciprocalmass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal mass time")]
        reciprocalmasstime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal pressure")]
        reciprocalpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal time")]
        reciprocaltime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal volume")]
        reciprocalvolume,
        
        /// <remarks/>
        reluctance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("second moment of area")]
        secondmomentofarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("signaling event per time")]
        signalingeventpertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("solid angle")]
        solidangle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("specific heat capacity")]
        specificheatcapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature interval")]
        temperatureinterval,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature interval per length")]
        temperatureintervalperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature interval per pressure")]
        temperatureintervalperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature interval per time")]
        temperatureintervalpertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal conductance")]
        thermalconductance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal conductivity")]
        thermalconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal diffusivity")]
        thermaldiffusivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal insulance")]
        thermalinsulance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal resistance")]
        thermalresistance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermodynamic temperature")]
        thermodynamictemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermodynamic temperature per thermodynamic temperature")]
        thermodynamictemperatureperthermodynamictemperature,
        
        /// <remarks/>
        time,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per length")]
        timeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per mass")]
        timepermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per time")]
        timepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per volume")]
        timepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("vertical coordinate")]
        verticalcoordinate,
        
        /// <remarks/>
        volume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume flow rate per volume flow rate")]
        volumeflowratepervolumeflowrate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per area")]
        volumeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per length")]
        volumeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per mass")]
        volumepermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per pressure")]
        volumeperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per rotation")]
        volumeperrotation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time")]
        volumepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time length")]
        volumepertimelength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per area")]
        volumepertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per length")]
        volumepertimeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per pressure")]
        volumepertimeperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per pressure length")]
        volumepertimeperpressurelength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per time")]
        volumepertimepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per volume")]
        volumepertimepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per volume")]
        volumepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volumetric heat transfer coefficient")]
        volumetricheattransfercoefficient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volumetric thermal expansion")]
        volumetricthermalexpansion,
        
        /// <remarks/>
        unitless,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WftResultReference {
        
        private string stationReferenceField;
        
        private string testField;
        
        private string resultReferenceField;
        
        private string outputParameterReferenceField;
        
        private DataObjectReference sampleAcquisitionField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A pointer to the station node containing the specified nodes.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the station node containing the specified nodes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StationReference", DataType="String64")]
        public string StationReference {
            get {
                return this.stationReferenceField;
            }
            set {
                this.stationReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the test node containing the specified nodes.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the test node containing the specified nodes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Test", DataType="String64")]
        public string Test {
            get {
                return this.testField;
            }
            set {
                this.testField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the desired result containing the outputParameter.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the desired result containing the outputParameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ResultReference", DataType="String64")]
        public string ResultReference {
            get {
                return this.resultReferenceField;
            }
            set {
                this.resultReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the desired outputParameter.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the desired outputParameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OutputParameterReference", DataType="String64")]
        public string OutputParameterReference {
            get {
                return this.outputParameterReferenceField;
            }
            set {
                this.outputParameterReferenceField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleAcquisition", DataType="DataObjectReference")]
        public DataObjectReference SampleAcquisition {
            get {
                return this.sampleAcquisitionField;
            }
            set {
                this.sampleAcquisitionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WftEvent {
        
        private WftEventKind kindField;
        
        private System.DateTime dTimField;
        
        private TimeMeasure durationField;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The kind of event. See enum WftEventKind.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The kind of event. See enum WftEventKind.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="WftEventKind")]
        public WftEventKind Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time of the start of the event.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Date and time of the start of the event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="dateTime")]
        public System.DateTime DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The time duration of the event.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The time duration of the event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Duration", DataType="TimeMeasure")]
        public TimeMeasure Duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A comment about the event.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A comment about the event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum WftEventKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tool retract")]
        toolretract,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tool set")]
        toolset,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WftSampleAcquisition {
        
        private DataObjectReference sampleContainerField;
        
        private string sampleNameField;
        
        private string kindField;
        
        private System.DateTime dTimStartField;
        
        private bool dTimStartFieldSpecified;
        
        private System.DateTime dTimEndField;
        
        private bool dTimEndFieldSpecified;
        
        private string fieldCommentField;
        
        private string interpretationCommentField;
        
        private string sampleCarrierSlotNameField;
        
        private string toolSectionNameField;
        
        private string sampleContainerNameField;
        
        private string sampleContainerConfigurationField;
        
        private AbstractPressureValue cushionPressureField;
        
        private string grossFluidKindField;
        
        private string[] testField;
        
        private DataObjectReference sampleReferenceField;
        
        private WftTestData[] testDataField;
        
        private WftTestResult[] resultField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A reference to a Fluid Sample Container object (optional) which can be used as part of the PVT functionality of PRODML to track this sample and its container through the lab analysis process.</summary>
        [System.ComponentModel.DescriptionAttribute("A reference to a Fluid Sample Container object (optional) which can be used as pa" +
            "rt of the PVT functionality of PRODML to track this sample and its container thr" +
            "ough the lab analysis process.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleContainer", DataType="DataObjectReference")]
        public DataObjectReference SampleContainer {
            get {
                return this.sampleContainerField;
            }
            set {
                this.sampleContainerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A name assigned to the sample acquired.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A name assigned to the sample acquired.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleName", DataType="String64")]
        public string SampleName {
            get {
                return this.sampleNameField;
            }
            set {
                this.sampleNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of sample acquisition.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The kind of sample acquisition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="String64")]
        public string Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Sampling start time.</summary>
        [System.ComponentModel.DescriptionAttribute("Sampling start time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="dateTime")]
        public System.DateTime DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimStartSpecified {
            get {
                return this.dTimStartFieldSpecified;
            }
            set {
                this.dTimStartFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Sampling end time.</summary>
        [System.ComponentModel.DescriptionAttribute("Sampling end time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="dateTime")]
        public System.DateTime DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimEndSpecified {
            get {
                return this.dTimEndFieldSpecified;
            }
            set {
                this.dTimEndFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comments created by the field engineers collecting the sample.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comments created by the field engineers collecting the sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FieldComment", DataType="String2000")]
        public string FieldComment {
            get {
                return this.fieldCommentField;
            }
            set {
                this.fieldCommentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comments created by the engineers analyzing the sample.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comments created by the engineers analyzing the sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InterpretationComment", DataType="String2000")]
        public string InterpretationComment {
            get {
                return this.interpretationCommentField;
            }
            set {
                this.interpretationCommentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An name for the slot in the sample carrier where the sample was acquired.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("An name for the slot in the sample carrier where the sample was acquired.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleCarrierSlotName", DataType="String64")]
        public string SampleCarrierSlotName {
            get {
                return this.sampleCarrierSlotNameField;
            }
            set {
                this.sampleCarrierSlotNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An name for the formation tester tool section that acquired the sample.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("An name for the formation tester tool section that acquired the sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ToolSectionName", DataType="String64")]
        public string ToolSectionName {
            get {
                return this.toolSectionNameField;
            }
            set {
                this.toolSectionNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An name for the sample bottle that was used for this acquisition.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("An name for the sample bottle that was used for this acquisition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleContainerName", DataType="String64")]
        public string SampleContainerName {
            get {
                return this.sampleContainerNameField;
            }
            set {
                this.sampleContainerNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A description of the kind of sample container used, for example, whether the container is pressurized with nitrogen or not.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A description of the kind of sample container used, for example, whether the cont" +
            "ainer is pressurized with nitrogen or not.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleContainerConfiguration", DataType="String64")]
        public string SampleContainerConfiguration {
            get {
                return this.sampleContainerConfigurationField;
            }
            set {
                this.sampleContainerConfigurationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure that was used to charge the sample container.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure that was used to charge the sample container.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CushionPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue CushionPressure {
            get {
                return this.cushionPressureField;
            }
            set {
                this.cushionPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The expected kind of the sample, typically oil, water or gas.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The expected kind of the sample, typically oil, water or gas.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GrossFluidKind", DataType="String64")]
        public string GrossFluidKind {
            get {
                return this.grossFluidKindField;
            }
            set {
                this.grossFluidKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to a test (uid) under the current station.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Test")]
        [System.ComponentModel.DescriptionAttribute("A reference to a test (uid) under the current station.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Test", DataType="String64")]
        public string[] Test {
            get {
                return this.testField;
            }
            set {
                this.testField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleReference", DataType="DataObjectReference")]
        public DataObjectReference SampleReference {
            get {
                return this.sampleReferenceField;
            }
            set {
                this.sampleReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to the associated data acquired during this acquisition.</summary>
        [System.Xml.Serialization.XmlElementAttribute("TestData")]
        [System.ComponentModel.DescriptionAttribute("A reference to the associated data acquired during this acquisition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestData", DataType="WftTestData")]
        public WftTestData[] TestData {
            get {
                return this.testDataField;
            }
            set {
                this.testDataField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A result of formation tester analysis that applies to this acquisition.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Result")]
        [System.ComponentModel.DescriptionAttribute("A result of formation tester analysis that applies to this acquisition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Result", DataType="WftTestResult")]
        public WftTestResult[] Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WftStation {
        
        private WftStationKind stationKindField;
        
        private System.DateTime dTimStartField;
        
        private bool dTimStartFieldSpecified;
        
        private System.DateTime dTimEndField;
        
        private bool dTimEndFieldSpecified;
        
        private WftFlowingIntervalKind flowingIntervalKindField;
        
        private MeasuredDepthCoord mdTopField;
        
        private MeasuredDepthCoord mdBottomField;
        
        private LengthMeasure diaProbeField;
        
        private string descriptionField;
        
        private DataObjectReference[] logReferenceField;
        
        private string stationField;
        
        private WftTestResult[] resultField;
        
        private WftSampleAcquisition[] sampleAcquisitionField;
        
        private WftEvent[] eventField;
        
        private WftTest[] testField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The type of the station (such as, conventional, observation).</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The type of the station (such as, conventional, observation).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StationKind", DataType="WftStationKind")]
        public WftStationKind StationKind {
            get {
                return this.stationKindField;
            }
            set {
                this.stationKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time when the data collection started for this station.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time when the data collection started for this station.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="dateTime")]
        public System.DateTime DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimStartSpecified {
            get {
                return this.dTimStartFieldSpecified;
            }
            set {
                this.dTimStartFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time when the data collection completed for this station.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time when the data collection completed for this station.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="dateTime")]
        public System.DateTime DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimEndSpecified {
            get {
                return this.dTimEndFieldSpecified;
            }
            set {
                this.dTimEndFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of flowing interval. See enum WftFlowingIntervalKind.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The type of flowing interval. See enum WftFlowingIntervalKind.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowingIntervalKind", DataType="WftFlowingIntervalKind")]
        public WftFlowingIntervalKind FlowingIntervalKind {
            get {
                return this.flowingIntervalKindField;
            }
            set {
                this.flowingIntervalKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>- If flowingIntervalKind = packed interval, then the top depth of the station.  - If flowingIntervalKind = probe, then the depth of the probe.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("- If flowingIntervalKind = packed interval, then the top depth of the station.  -" +
            " If flowingIntervalKind = probe, then the depth of the probe.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdTop", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdTop {
            get {
                return this.mdTopField;
            }
            set {
                this.mdTopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>- If flowingIntervalKind = packed interval, then the bottom depth of the station. - If flowingIntervalKind = probe, then the depth of the probe.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("- If flowingIntervalKind = packed interval, then the bottom depth of the station." +
            " - If flowingIntervalKind = probe, then the depth of the probe.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdBottom", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdBottom {
            get {
                return this.mdBottomField;
            }
            set {
                this.mdBottomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The diameter of the probe used; only valid if flowingIntervalKind is equal to "probe".</summary>
        [System.ComponentModel.DescriptionAttribute("The diameter of the probe used; only valid if flowingIntervalKind is equal to \"pr" +
            "obe\".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaProbe", DataType="LengthMeasure")]
        public LengthMeasure DiaProbe {
            get {
                return this.diaProbeField;
            }
            set {
                this.diaProbeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A description of the station.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A description of the station.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference a log containing WFT time-series data at this station (may be superset of all the test log references at this station).</summary>
        [System.Xml.Serialization.XmlElementAttribute("LogReference")]
        [System.ComponentModel.DescriptionAttribute("A reference a log containing WFT time-series data at this station (may be superse" +
            "t of all the test log references at this station).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LogReference", DataType="DataObjectReference")]
        public DataObjectReference[] LogReference {
            get {
                return this.logReferenceField;
            }
            set {
                this.logReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>References a station containing the flowing interval in cases where this station is an observation station.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("References a station containing the flowing interval in cases where this station " +
            "is an observation station.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Station", DataType="String64")]
        public string Station {
            get {
                return this.stationField;
            }
            set {
                this.stationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A result of formation tester analysis that applies to this station.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Result")]
        [System.ComponentModel.DescriptionAttribute("A result of formation tester analysis that applies to this station.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Result", DataType="WftTestResult")]
        public WftTestResult[] Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A formation tester sample that is collected as part of this station.</summary>
        [System.Xml.Serialization.XmlElementAttribute("SampleAcquisition")]
        [System.ComponentModel.DescriptionAttribute("A formation tester sample that is collected as part of this station.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleAcquisition", DataType="WftSampleAcquisition")]
        public WftSampleAcquisition[] SampleAcquisition {
            get {
                return this.sampleAcquisitionField;
            }
            set {
                this.sampleAcquisitionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A formation tester event that occurs during this station.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Event")]
        [System.ComponentModel.DescriptionAttribute("A formation tester event that occurs during this station.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Event", DataType="WftEvent")]
        public WftEvent[] Event {
            get {
                return this.eventField;
            }
            set {
                this.eventField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A formation tester test period that is recorded as part of this station.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Test")]
        [System.ComponentModel.DescriptionAttribute("A formation tester test period that is recorded as part of this station.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Test", DataType="WftTest")]
        public WftTest[] Test {
            get {
                return this.testField;
            }
            set {
                this.testField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum WftStationKind {
        
        /// <remarks/>
        conventional,
        
        /// <remarks/>
        observation,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum WftFlowingIntervalKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("packed interval")]
        packedinterval,
        
        /// <remarks/>
        probe,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WftSampleAcquisitionJob))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellheadSampleAcquisition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeparatorSampleAcquisition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FacilitySampleAcquisition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DownholeSampleAcquisition))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidSampleAcquisition {
        
        private System.DateTime dateField;
        
        private AbstractPressureValue acquisitionPressureField;
        
        private ThermodynamicTemperatureMeasure acquisitionTemperatureField;
        
        private VolumeMeasure acquisitionVolumeField;
        
        private VolumePerVolumeMeasure acquisitionGORField;
        
        private PressureMeasure formationPressureField;
        
        private ThermodynamicTemperatureMeasure formationTemperatureField;
        
        private BusinessAssociate serviceCompanyField;
        
        private string remarkField;
        
        private DataObjectReference fluidSampleContainerReferenceField;
        
        private DataObjectReference fluidSampleReferenceField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The date when the sample was taken.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The date when the sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Date", DataType="dateTime")]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The acquisition pressure when this sample was taken.</summary>
        [System.ComponentModel.DescriptionAttribute("The acquisition pressure when this sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AcquisitionPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue AcquisitionPressure {
            get {
                return this.acquisitionPressureField;
            }
            set {
                this.acquisitionPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The acquisition temperature when this sample was taken. .</summary>
        [System.ComponentModel.DescriptionAttribute("The acquisition temperature when this sample was taken. .")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AcquisitionTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure AcquisitionTemperature {
            get {
                return this.acquisitionTemperatureField;
            }
            set {
                this.acquisitionTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The acquisition volume when this sample was taken.</summary>
        [System.ComponentModel.DescriptionAttribute("The acquisition volume when this sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AcquisitionVolume", DataType="VolumeMeasure")]
        public VolumeMeasure AcquisitionVolume {
            get {
                return this.acquisitionVolumeField;
            }
            set {
                this.acquisitionVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The acquisition gas-oil ratio for this fluid sample acquisition.</summary>
        [System.ComponentModel.DescriptionAttribute("The acquisition gas-oil ratio for this fluid sample acquisition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AcquisitionGOR", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure AcquisitionGOR {
            get {
                return this.acquisitionGORField;
            }
            set {
                this.acquisitionGORField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The formation pressure when this sample was taken.</summary>
        [System.ComponentModel.DescriptionAttribute("The formation pressure when this sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FormationPressure", DataType="PressureMeasure")]
        public PressureMeasure FormationPressure {
            get {
                return this.formationPressureField;
            }
            set {
                this.formationPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The formation temperature when this sample was taken.</summary>
        [System.ComponentModel.DescriptionAttribute("The formation temperature when this sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FormationTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure FormationTemperature {
            get {
                return this.formationTemperatureField;
            }
            set {
                this.formationTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The service company who took the fluid sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The service company who took the fluid sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ServiceCompany", DataType="BusinessAssociate")]
        public BusinessAssociate ServiceCompany {
            get {
                return this.serviceCompanyField;
            }
            set {
                this.serviceCompanyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidSampleContainerReference", DataType="DataObjectReference")]
        public DataObjectReference FluidSampleContainerReference {
            get {
                return this.fluidSampleContainerReferenceField;
            }
            set {
                this.fluidSampleContainerReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidSampleReference", DataType="DataObjectReference")]
        public DataObjectReference FluidSampleReference {
            get {
                return this.fluidSampleReferenceField;
            }
            set {
                this.fluidSampleReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class BusinessAssociate {
        
        private string nameField;
        
        private NameStruct[] roleField;
        
        private NameStruct[] aliasField;
        
        private GeneralAddress addressField;
        
        private PhoneNumberStruct[] phoneNumberField;
        
        private EmailQualifierStruct[] emailField;
        
        private string associatedWithField;
        
        private string[] contactField;
        
        private string personnelCountField;
        
        private PersonName personNameField;
        
        /// <remarks/>
        /// <summary>Name of the business associate.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the business associate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The role of the business associate within the context. For example, "driller" or "operator", "lead agency - CEQA compliance" "regulatory contact", "safety contact". A business associate generally has one role but the role may be called different things in different naming systems.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Role")]
        [System.ComponentModel.DescriptionAttribute(@"The role of the business associate within the context. For example, ""driller"" or ""operator"", ""lead agency - CEQA compliance"" ""regulatory contact"", ""safety contact"". A business associate generally has one role but the role may be called different things in different naming systems.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Role", DataType="NameStruct")]
        public NameStruct[] Role {
            get {
                return this.roleField;
            }
            set {
                this.roleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An alternate name of a business associate. It is generally associated with a naming system. An alias is not necessarily unique within the naming system.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Alias")]
        [System.ComponentModel.DescriptionAttribute("An alternate name of a business associate. It is generally associated with a nami" +
            "ng system. An alias is not necessarily unique within the naming system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Alias", DataType="NameStruct")]
        public NameStruct[] Alias {
            get {
                return this.aliasField;
            }
            set {
                this.aliasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The business address.</summary>
        [System.ComponentModel.DescriptionAttribute("The business address.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Address", DataType="GeneralAddress")]
        public GeneralAddress Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Various types of phone numbers may be given. They may be office or home, they may be a number for a cell phone, or for a fax, etc. Attributes of PhoneNumber declare the type of phone number that is being given.</summary>
        [System.Xml.Serialization.XmlElementAttribute("PhoneNumber")]
        [System.ComponentModel.DescriptionAttribute("Various types of phone numbers may be given. They may be office or home, they may" +
            " be a number for a cell phone, or for a fax, etc. Attributes of PhoneNumber decl" +
            "are the type of phone number that is being given.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PhoneNumber", DataType="PhoneNumberStruct")]
        public PhoneNumberStruct[] PhoneNumber {
            get {
                return this.phoneNumberField;
            }
            set {
                this.phoneNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The email address may be home, office, or permanent. More than one may be given.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Email")]
        [System.ComponentModel.DescriptionAttribute("The email address may be home, office, or permanent. More than one may be given.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Email", DataType="EmailQualifierStruct")]
        public EmailQualifierStruct[] Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to another business associate that this business associate is associated with. The most common situation is that of an employee being associated with a company. But it may also be, for example, a work group associated with a university.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to another business associate that this business associate is associate" +
            "d with. The most common situation is that of an employee being associated with a" +
            " company. But it may also be, for example, a work group associated with a univer" +
            "sity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AssociatedWith", DataType="String64")]
        public string AssociatedWith {
            get {
                return this.associatedWithField;
            }
            set {
                this.associatedWithField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to a business associate (generally a person) who serves as a contact for this business associate.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Contact")]
        [System.ComponentModel.DescriptionAttribute("A pointer to a business associate (generally a person) who serves as a contact fo" +
            "r this business associate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Contact", DataType="String64")]
        public string[] Contact {
            get {
                return this.contactField;
            }
            set {
                this.contactField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The count of personnel in a group.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DescriptionAttribute("The count of personnel in a group.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PersonnelCount", DataType="nonNegativeInteger")]
        public string PersonnelCount {
            get {
                return this.personnelCountField;
            }
            set {
                this.personnelCountField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PersonName", DataType="PersonName")]
        public PersonName PersonName {
            get {
                return this.personNameField;
            }
            set {
                this.personNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class NameStruct {
        
        private string authorityField;
        
        private string valueField;
        
        /// <remarks/>
        /// <summary>The authority for the naming system, e.g., a company.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The authority for the naming system, e.g., a company.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("authority", DataType="String64")]
        public string authority {
            get {
                return this.authorityField;
            }
            set {
                this.authorityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class GeneralAddress {
        
        private string nameField;
        
        private string[] streetField;
        
        private string cityField;
        
        private string countryField;
        
        private string countyField;
        
        private string postalCodeField;
        
        private string stateField;
        
        private string provinceField;
        
        private string uidField;
        
        private AddressKindEnum kindField;
        
        private bool kindFieldSpecified;
        
        /// <remarks/>
        /// <summary>The name line of an address. If missing, use the name of the business associate.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name line of an address. If missing, use the name of the business associate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A generic term for the middle lines of an address. They may be a street address, PO box, suite number, or any lines that come between the "name" and "city" lines. This may be repeated for up to four, ordered lines.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Street")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A generic term for the middle lines of an address. They may be a street address, " +
            "PO box, suite number, or any lines that come between the \"name\" and \"city\" lines" +
            ". This may be repeated for up to four, ordered lines.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Street", DataType="String64")]
        public string[] Street {
            get {
                return this.streetField;
            }
            set {
                this.streetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The city for the business associate's address.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The city for the business associate\'s address.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("City", DataType="String64")]
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The country may be included. Although this is optional, it is probably required for most uses.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The country may be included. Although this is optional, it is probably required f" +
            "or most uses.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Country", DataType="String64")]
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The county, if applicable or necessary.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The county, if applicable or necessary.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("County", DataType="String64")]
        public string County {
            get {
                return this.countyField;
            }
            set {
                this.countyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A postal code, if appropriate for the country. In the USA, this would be the five or nine digit zip code.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A postal code, if appropriate for the country. In the USA, this would be the five" +
            " or nine digit zip code.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PostalCode", DataType="String64")]
        public string PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>State.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("State.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("State", DataType="String64")]
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Province.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Province.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Province", DataType="String64")]
        public string Province {
            get {
                return this.provinceField;
            }
            set {
                this.provinceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of address: mailing, physical, or both. See AddressKindEnum.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute("The type of address: mailing, physical, or both. See AddressKindEnum.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("kind", DataType="AddressKindEnum")]
        public AddressKindEnum kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool kindSpecified {
            get {
                return this.kindFieldSpecified;
            }
            set {
                this.kindFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum AddressKindEnum {
        
        /// <remarks/>
        both,
        
        /// <remarks/>
        mailing,
        
        /// <remarks/>
        physical,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class PhoneNumberStruct {
        
        private string[] textField;
        
        private PhoneType typeField;
        
        private AddressQualifier qualifierField;
        
        private bool qualifierFieldSpecified;
        
        private string extensionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string[] Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of phone such as voice or fax.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The kind of phone such as voice or fax.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("type", DataType="PhoneType")]
        public PhoneType type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates whether the number is personal, business or both.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the number is personal, business or both.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("qualifier", DataType="AddressQualifier")]
        public AddressQualifier qualifier {
            get {
                return this.qualifierField;
            }
            set {
                this.qualifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool qualifierSpecified {
            get {
                return this.qualifierFieldSpecified;
            }
            set {
                this.qualifierFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The phone number extension.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The phone number extension.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("extension", DataType="String64")]
        public string extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum PhoneType {
        
        /// <remarks/>
        fax,
        
        /// <remarks/>
        mobile,
        
        /// <remarks/>
        pager,
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        voice,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("voice/fax")]
        voicefax,
        
        /// <remarks/>
        voicemail,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum AddressQualifier {
        
        /// <remarks/>
        permanent,
        
        /// <remarks/>
        personal,
        
        /// <remarks/>
        work,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class EmailQualifierStruct {
        
        private AddressQualifier qualifierField;
        
        private bool qualifierFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("qualifier", DataType="AddressQualifier")]
        public AddressQualifier qualifier {
            get {
                return this.qualifierField;
            }
            set {
                this.qualifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool qualifierSpecified {
            get {
                return this.qualifierFieldSpecified;
            }
            set {
                this.qualifierFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class PersonName {
        
        private string prefixField;
        
        private string firstField;
        
        private string middleField;
        
        private string lastField;
        
        private string[] suffixField;
        
        /// <remarks/>
        /// <summary>A name prefix. Such as, Dr, Ms, Miss, Mr, etc.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A name prefix. Such as, Dr, Ms, Miss, Mr, etc.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Prefix", DataType="String64")]
        public string Prefix {
            get {
                return this.prefixField;
            }
            set {
                this.prefixField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The person's first name, sometimes called their "given name".</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The person\'s first name, sometimes called their \"given name\".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("First", DataType="String64")]
        public string First {
            get {
                return this.firstField;
            }
            set {
                this.firstField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The person's middle name or initial.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The person\'s middle name or initial.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Middle", DataType="String64")]
        public string Middle {
            get {
                return this.middleField;
            }
            set {
                this.middleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The person's last or family name.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The person\'s last or family name.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Last", DataType="String64")]
        public string Last {
            get {
                return this.lastField;
            }
            set {
                this.lastField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A name suffix such as Esq, Phd, etc.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Suffix")]
        [System.ComponentModel.DescriptionAttribute("A name suffix such as Esq, Phd, etc.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Suffix", DataType="String64")]
        public string[] Suffix {
            get {
                return this.suffixField;
            }
            set {
                this.suffixField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WftSampleAcquisitionJob : FluidSampleAcquisition {
        
        private string wftStationField;
        
        private string wftSampleAcquisitionField;
        
        private DataObjectReference wftRunField;
        
        /// <remarks/>
        /// <summary>Reference to the WFT station within the top-level WFT run data object  where this sample was obtained.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to the WFT station within the top-level WFT run data object  where this" +
            " sample was obtained.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WftStation", DataType="String64")]
        public string WftStation {
            get {
                return this.wftStationField;
            }
            set {
                this.wftStationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the WFT sample within the WFT station from where this sample was obtained.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to the WFT sample within the WFT station from where this sample was obt" +
            "ained.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WftSampleAcquisition", DataType="String64")]
        public string WftSampleAcquisition {
            get {
                return this.wftSampleAcquisitionField;
            }
            set {
                this.wftSampleAcquisitionField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WftRun", DataType="DataObjectReference")]
        public DataObjectReference WftRun {
            get {
                return this.wftRunField;
            }
            set {
                this.wftRunField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WellheadSampleAcquisition : FluidSampleAcquisition {
        
        private DataObjectReference wellReferenceField;
        
        private DataObjectReference wellCompletionReferenceField;
        
        private AbstractPressureValue wellheadPressureField;
        
        private ThermodynamicTemperatureMeasure wellheadTemperatureField;
        
        private string samplingPointField;
        
        private DataObjectReference productionWellTestField;
        
        /// <remarks/>
        /// <summary>A reference to the well (WITSML data object) where this sample was taken.</summary>
        [System.ComponentModel.DescriptionAttribute("A reference to the well (WITSML data object) where this sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellReference", DataType="DataObjectReference")]
        public DataObjectReference WellReference {
            get {
                return this.wellReferenceField;
            }
            set {
                this.wellReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to the well completion (WITSML data object) where this sample was taken.</summary>
        [System.ComponentModel.DescriptionAttribute("A reference to the well completion (WITSML data object) where this sample was tak" +
            "en.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellCompletionReference", DataType="DataObjectReference")]
        public DataObjectReference WellCompletionReference {
            get {
                return this.wellCompletionReferenceField;
            }
            set {
                this.wellCompletionReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The wellhead pressure when the sample was taken.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The wellhead pressure when the sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellheadPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue WellheadPressure {
            get {
                return this.wellheadPressureField;
            }
            set {
                this.wellheadPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The wellhead temperature when the sample was taken.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The wellhead temperature when the sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellheadTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure WellheadTemperature {
            get {
                return this.wellheadTemperatureField;
            }
            set {
                this.wellheadTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to the flow port in the facility where this sample was taken.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A reference to the flow port in the facility where this sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SamplingPoint", DataType="String64")]
        public string SamplingPoint {
            get {
                return this.samplingPointField;
            }
            set {
                this.samplingPointField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductionWellTest", DataType="DataObjectReference")]
        public DataObjectReference ProductionWellTest {
            get {
                return this.productionWellTestField;
            }
            set {
                this.productionWellTestField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class SeparatorSampleAcquisition : FluidSampleAcquisition {
        
        private string separatorField;
        
        private DataObjectReference wellCompletionReferenceField;
        
        private AbstractPressureValue separatorPressureField;
        
        private ThermodynamicTemperatureMeasure separatorTemperatureField;
        
        private string samplingPointField;
        
        private VolumePerTimeMeasure correctedOilRateField;
        
        private VolumePerTimeMeasure correctedGasRateField;
        
        private VolumePerTimeMeasure correctedWaterRateField;
        
        private VolumePerTimeMeasure measuredOilRateField;
        
        private VolumePerTimeMeasure measuredGasRateField;
        
        private VolumePerTimeMeasure measuredWaterRateField;
        
        private DataObjectReference productionWellTestField;
        
        /// <remarks/>
        /// <summary>A reference to the separator where this sample was taken.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A reference to the separator where this sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Separator", DataType="String64")]
        public string Separator {
            get {
                return this.separatorField;
            }
            set {
                this.separatorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to a well completion (WITSML data object) where this sample was taken.</summary>
        [System.ComponentModel.DescriptionAttribute("A reference to a well completion (WITSML data object) where this sample was taken" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellCompletionReference", DataType="DataObjectReference")]
        public DataObjectReference WellCompletionReference {
            get {
                return this.wellCompletionReferenceField;
            }
            set {
                this.wellCompletionReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The separator pressure when this sample was taken.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The separator pressure when this sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeparatorPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue SeparatorPressure {
            get {
                return this.separatorPressureField;
            }
            set {
                this.separatorPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The separator temperature when this sample was taken.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The separator temperature when this sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeparatorTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure SeparatorTemperature {
            get {
                return this.separatorTemperatureField;
            }
            set {
                this.separatorTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to the flow port in the facility where this sample was taken.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A reference to the flow port in the facility where this sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SamplingPoint", DataType="String64")]
        public string SamplingPoint {
            get {
                return this.samplingPointField;
            }
            set {
                this.samplingPointField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The corrected oil rate for this separator sample acquisition.</summary>
        [System.ComponentModel.DescriptionAttribute("The corrected oil rate for this separator sample acquisition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CorrectedOilRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure CorrectedOilRate {
            get {
                return this.correctedOilRateField;
            }
            set {
                this.correctedOilRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The corrected gas rate for this separator sample acquisition.</summary>
        [System.ComponentModel.DescriptionAttribute("The corrected gas rate for this separator sample acquisition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CorrectedGasRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure CorrectedGasRate {
            get {
                return this.correctedGasRateField;
            }
            set {
                this.correctedGasRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The corrected water rate for this separator sample acquisition.</summary>
        [System.ComponentModel.DescriptionAttribute("The corrected water rate for this separator sample acquisition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CorrectedWaterRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure CorrectedWaterRate {
            get {
                return this.correctedWaterRateField;
            }
            set {
                this.correctedWaterRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured oil rate for this separator sample acquisition.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured oil rate for this separator sample acquisition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasuredOilRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure MeasuredOilRate {
            get {
                return this.measuredOilRateField;
            }
            set {
                this.measuredOilRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured gas rate for this separator sample acquisition.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured gas rate for this separator sample acquisition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasuredGasRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure MeasuredGasRate {
            get {
                return this.measuredGasRateField;
            }
            set {
                this.measuredGasRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured water rate for this separator sample acquisition.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured water rate for this separator sample acquisition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasuredWaterRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure MeasuredWaterRate {
            get {
                return this.measuredWaterRateField;
            }
            set {
                this.measuredWaterRateField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductionWellTest", DataType="DataObjectReference")]
        public DataObjectReference ProductionWellTest {
            get {
                return this.productionWellTestField;
            }
            set {
                this.productionWellTestField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FacilitySampleAcquisition : FluidSampleAcquisition {
        
        private string samplingPointField;
        
        private AbstractPressureValue facilityPressureField;
        
        private ThermodynamicTemperatureMeasure facilityTemperatureField;
        
        private DataObjectReference facilityField;
        
        /// <remarks/>
        /// <summary>A reference to the flow port in the facility where this sample was taken.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A reference to the flow port in the facility where this sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SamplingPoint", DataType="String64")]
        public string SamplingPoint {
            get {
                return this.samplingPointField;
            }
            set {
                this.samplingPointField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The facility pressure for this facility sample acquisition.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The facility pressure for this facility sample acquisition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue FacilityPressure {
            get {
                return this.facilityPressureField;
            }
            set {
                this.facilityPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The facility temperature when this sample was taken.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The facility temperature when this sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure FacilityTemperature {
            get {
                return this.facilityTemperatureField;
            }
            set {
                this.facilityTemperatureField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Facility", DataType="DataObjectReference")]
        public DataObjectReference Facility {
            get {
                return this.facilityField;
            }
            set {
                this.facilityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DownholeSampleAcquisition : FluidSampleAcquisition {
        
        private LengthMeasure topMDField;
        
        private LengthMeasure baseMDField;
        
        private string toolKindField;
        
        private long samplingRunField;
        
        private DataObjectReference wellboreReferenceField;
        
        private DataObjectReference wellboreCompletionReferenceField;
        
        private DataObjectReference productionWellTestField;
        
        /// <remarks/>
        /// <summary>The top MD for the interval where this downhole sample was taken.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The top MD for the interval where this downhole sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TopMD", DataType="LengthMeasure")]
        public LengthMeasure TopMD {
            get {
                return this.topMDField;
            }
            set {
                this.topMDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The base MD for the interval where this downhole sample was taken.</summary>
        [System.ComponentModel.DescriptionAttribute("The base MD for the interval where this downhole sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BaseMD", DataType="LengthMeasure")]
        public LengthMeasure BaseMD {
            get {
                return this.baseMDField;
            }
            set {
                this.baseMDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of tool used to acquire the downhole sample.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The kind of tool used to acquire the downhole sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ToolKind", DataType="String64")]
        public string ToolKind {
            get {
                return this.toolKindField;
            }
            set {
                this.toolKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The sampling run number for this downhole sample acquisition.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The sampling run number for this downhole sample acquisition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SamplingRun", DataType="NonNegativeLong")]
        public long SamplingRun {
            get {
                return this.samplingRunField;
            }
            set {
                this.samplingRunField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to the wellbore (a WITSML data object) where this downhole sample was taken.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A reference to the wellbore (a WITSML data object) where this downhole sample was" +
            " taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreReference", DataType="DataObjectReference")]
        public DataObjectReference WellboreReference {
            get {
                return this.wellboreReferenceField;
            }
            set {
                this.wellboreReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to the wellbore completion (WITSML data object) where this sample was taken.</summary>
        [System.ComponentModel.DescriptionAttribute("A reference to the wellbore completion (WITSML data object) where this sample was" +
            " taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreCompletionReference", DataType="DataObjectReference")]
        public DataObjectReference WellboreCompletionReference {
            get {
                return this.wellboreCompletionReferenceField;
            }
            set {
                this.wellboreCompletionReferenceField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductionWellTest", DataType="DataObjectReference")]
        public DataObjectReference ProductionWellTest {
            get {
                return this.productionWellTestField;
            }
            set {
                this.productionWellTestField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductionWellPeriod {
        
        private System.DateTime startTimeField;
        
        private TimeMeasure durationField;
        
        private WellStatus wellStatusField;
        
        private bool wellStatusFieldSpecified;
        
        private string remarkField;
        
        private WellFlowingCondition wellFlowingConditionField;
        
        private ProductRate[] productRateField;
        
        /// <remarks/>
        /// <summary>The start time at a given choke setting.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The start time at a given choke setting.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartTime", DataType="dateTime")]
        public System.DateTime StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The duration at the given choke setting.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The duration at the given choke setting.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Duration", DataType="TimeMeasure")]
        public TimeMeasure Duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The status of the well.</summary>
        [System.ComponentModel.DescriptionAttribute("The status of the well.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellStatus", DataType="WellStatus")]
        public WellStatus WellStatus {
            get {
                return this.wellStatusField;
            }
            set {
                this.wellStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WellStatusSpecified {
            get {
                return this.wellStatusFieldSpecified;
            }
            set {
                this.wellStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A descriptive remark relating to any significant events during this period.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A descriptive remark relating to any significant events during this period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellFlowingCondition", DataType="WellFlowingCondition")]
        public WellFlowingCondition WellFlowingCondition {
            get {
                return this.wellFlowingConditionField;
            }
            set {
                this.wellFlowingConditionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ProductRate")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductRate", DataType="ProductRate")]
        public ProductRate[] ProductRate {
            get {
                return this.productRateField;
            }
            set {
                this.productRateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum WellStatus {
        
        /// <remarks/>
        abandoned,
        
        /// <remarks/>
        active,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("active -- injecting")]
        activeinjecting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("active -- producing")]
        activeproducing,
        
        /// <remarks/>
        completed,
        
        /// <remarks/>
        drilling,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("partially plugged")]
        partiallyplugged,
        
        /// <remarks/>
        permitted,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plugged and abandoned")]
        pluggedandabandoned,
        
        /// <remarks/>
        proposed,
        
        /// <remarks/>
        sold,
        
        /// <remarks/>
        suspended,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temporarily abandoned")]
        temporarilyabandoned,
        
        /// <remarks/>
        testing,
        
        /// <remarks/>
        tight,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("working over")]
        workingover,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WellFlowingCondition {
        
        private LengthMeasure chokeOrificeSizeField;
        
        private AbstractPressureValue flowingPressureField;
        
        private LengthMeasure bottomHoleGaugeDepthMDField;
        
        private PressureMeasure bottomHoleFlowingPressureField;
        
        private PressureMeasure bottomHoleStaticPressureField;
        
        private ThermodynamicTemperatureMeasure bottomHoleFlowingTemperatureField;
        
        private PressureMeasure bottomHoleShutInPressureField;
        
        private AbstractPressureValue casingHeadPressureField;
        
        private AbstractPressureValue tubingHeadFlowingPressureField;
        
        private ThermodynamicTemperatureMeasure tubingHeadFlowingTemperatureField;
        
        private AbstractPressureValue tubingHeadShutInPressureField;
        
        /// <remarks/>
        /// <summary>The choke diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("The choke diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChokeOrificeSize", DataType="LengthMeasure")]
        public LengthMeasure ChokeOrificeSize {
            get {
                return this.chokeOrificeSizeField;
            }
            set {
                this.chokeOrificeSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The flowing pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("The flowing pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowingPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue FlowingPressure {
            get {
                return this.flowingPressureField;
            }
            set {
                this.flowingPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measure depth of the bottomhole gauge.</summary>
        [System.ComponentModel.DescriptionAttribute("The measure depth of the bottomhole gauge.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomHoleGaugeDepthMD", DataType="LengthMeasure")]
        public LengthMeasure BottomHoleGaugeDepthMD {
            get {
                return this.bottomHoleGaugeDepthMDField;
            }
            set {
                this.bottomHoleGaugeDepthMDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure at the bottom of the hole.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure at the bottom of the hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomHoleFlowingPressure", DataType="PressureMeasure")]
        public PressureMeasure BottomHoleFlowingPressure {
            get {
                return this.bottomHoleFlowingPressureField;
            }
            set {
                this.bottomHoleFlowingPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The static pressure of the bottom of the hole.</summary>
        [System.ComponentModel.DescriptionAttribute("The static pressure of the bottom of the hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomHoleStaticPressure", DataType="PressureMeasure")]
        public PressureMeasure BottomHoleStaticPressure {
            get {
                return this.bottomHoleStaticPressureField;
            }
            set {
                this.bottomHoleStaticPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature at the bottom of the hole when the well is flowing.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature at the bottom of the hole when the well is flowing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomHoleFlowingTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure BottomHoleFlowingTemperature {
            get {
                return this.bottomHoleFlowingTemperatureField;
            }
            set {
                this.bottomHoleFlowingTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The shut-in pressure of at the bottom of the hole.</summary>
        [System.ComponentModel.DescriptionAttribute("The shut-in pressure of at the bottom of the hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomHoleShutInPressure", DataType="PressureMeasure")]
        public PressureMeasure BottomHoleShutInPressure {
            get {
                return this.bottomHoleShutInPressureField;
            }
            set {
                this.bottomHoleShutInPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure at the casing head.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure at the casing head.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CasingHeadPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue CasingHeadPressure {
            get {
                return this.casingHeadPressureField;
            }
            set {
                this.casingHeadPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure at the tubing head.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure at the tubing head.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TubingHeadFlowingPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue TubingHeadFlowingPressure {
            get {
                return this.tubingHeadFlowingPressureField;
            }
            set {
                this.tubingHeadFlowingPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature at the tubing head when the well is flowing.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature at the tubing head when the well is flowing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TubingHeadFlowingTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TubingHeadFlowingTemperature {
            get {
                return this.tubingHeadFlowingTemperatureField;
            }
            set {
                this.tubingHeadFlowingTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure at the tubing head when the well is shut in.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure at the tubing head when the well is shut in.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TubingHeadShutInPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue TubingHeadShutInPressure {
            get {
                return this.tubingHeadShutInPressureField;
            }
            set {
                this.tubingHeadShutInPressureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductRate {
        
        private string productFluidReferenceField;
        
        private MassPerTimeMeasure massFlowRateField;
        
        private VolumePerTimeMeasure volumeFlowRateField;
        
        private string remarkField;
        
        private Energistics.DataAccess.ExtensibleEnum<ProductFluidKind> productFluidKindField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>String UID pointer to the productFluid in the fluidComponentSet.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("String UID pointer to the productFluid in the fluidComponentSet.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductFluidReference", DataType="String64")]
        public string ProductFluidReference {
            get {
                return this.productFluidReferenceField;
            }
            set {
                this.productFluidReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mass flow rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Mass flow rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassFlowRate", DataType="MassPerTimeMeasure")]
        public MassPerTimeMeasure MassFlowRate {
            get {
                return this.massFlowRateField;
            }
            set {
                this.massFlowRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume flow rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume flow rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeFlowRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure VolumeFlowRate {
            get {
                return this.volumeFlowRateField;
            }
            set {
                this.volumeFlowRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Information about the product that the product quantity represents. See enum ProductFluidKind (in the ProdmlCommon package).</summary>
        [System.ComponentModel.DescriptionAttribute("Information about the product that the product quantity represents. See enum Prod" +
            "uctFluidKind (in the ProdmlCommon package).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductFluidKind", DataType="ProductFluidKindExt")]
        public Energistics.DataAccess.ExtensibleEnum<ProductFluidKind> ProductFluidKind {
            get {
                return this.productFluidKindField;
            }
            set {
                this.productFluidKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class MassPerTimeMeasure {
        
        private MassPerTimeUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="MassPerTimeUom")]
        public MassPerTimeUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 lbm/a")]
        Item1E6lbma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/s")]
        gs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/d")]
        kgd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/h")]
        kgh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/min")]
        kgmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/s")]
        kgs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/d")]
        lbmd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/h")]
        lbmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/min")]
        lbmmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/s")]
        lbms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/a")]
        Mga,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/d")]
        Mgd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/h")]
        Mgh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/min")]
        Mgmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/a")]
        ta,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/d")]
        td,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/h")]
        th,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/min")]
        tmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/a")]
        tonUKa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/d")]
        tonUKd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/h")]
        tonUKh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/min")]
        tonUKmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/a")]
        tonUSa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/d")]
        tonUSd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/h")]
        tonUSh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/min")]
        tonUSmin,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class TestCondition {
        
        private System.DateTime startTimeField;
        
        private TimeMeasure testDurationField;
        
        private string remarkField;
        
        private ProductRate[] productRateField;
        
        private ServiceFluid[] serviceFluidField;
        
        private WellFlowingCondition parametersField;
        
        /// <remarks/>
        /// <summary>The date and time when the test  began.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The date and time when the test  began.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartTime", DataType="dateTime")]
        public System.DateTime StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The duration of the test.</summary>
        [System.ComponentModel.DescriptionAttribute("The duration of the test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestDuration", DataType="TimeMeasure")]
        public TimeMeasure TestDuration {
            get {
                return this.testDurationField;
            }
            set {
                this.testDurationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ProductRate")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductRate", DataType="ProductRate")]
        public ProductRate[] ProductRate {
            get {
                return this.productRateField;
            }
            set {
                this.productRateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ServiceFluid")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ServiceFluid", DataType="ServiceFluid")]
        public ServiceFluid[] ServiceFluid {
            get {
                return this.serviceFluidField;
            }
            set {
                this.serviceFluidField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameters", DataType="WellFlowingCondition")]
        public WellFlowingCondition Parameters {
            get {
                return this.parametersField;
            }
            set {
                this.parametersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ServiceFluid : AbstractProductQuantity {
        
        private Energistics.DataAccess.ExtensibleEnum<ServiceFluidKind> serviceFluidKindField;
        
        private string serviceFluidReferenceField;
        
        /// <remarks/>
        /// <summary>Indicates the kind of service fluid. See enum ServiceFluidKind (in ProdmlCommon).</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Indicates the kind of service fluid. See enum ServiceFluidKind (in ProdmlCommon)." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ServiceFluidKind", DataType="ServiceFluidKindExt")]
        public Energistics.DataAccess.ExtensibleEnum<ServiceFluidKind> ServiceFluidKind {
            get {
                return this.serviceFluidKindField;
            }
            set {
                this.serviceFluidKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>String ID that points to a service fluid in the FluidComponentSet.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("String ID that points to a service fluid in the FluidComponentSet.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("serviceFluidReference", DataType="String64")]
        public string serviceFluidReference {
            get {
                return this.serviceFluidReferenceField;
            }
            set {
                this.serviceFluidReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceFluid))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductFluid))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractProductQuantity {
        
        private VolumeValue volumeField;
        
        private MassMeasure massField;
        
        private AmountOfSubstanceMeasure molesField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The amount of product as a volume measure.</summary>
        [System.ComponentModel.DescriptionAttribute("The amount of product as a volume measure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Volume", DataType="VolumeValue")]
        public VolumeValue Volume {
            get {
                return this.volumeField;
            }
            set {
                this.volumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of product as a mass measure.</summary>
        [System.ComponentModel.DescriptionAttribute("The amount of product as a mass measure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mass", DataType="MassMeasure")]
        public MassMeasure Mass {
            get {
                return this.massField;
            }
            set {
                this.massField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Moles.</summary>
        [System.ComponentModel.DescriptionAttribute("Moles.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Moles", DataType="AmountOfSubstanceMeasure")]
        public AmountOfSubstanceMeasure Moles {
            get {
                return this.molesField;
            }
            set {
                this.molesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VolumeValue {
        
        private VolumeMeasure volumeField;
        
        private AbstractTemperaturePressure measurementPressureTemperatureField;
        
        /// <remarks/>
        /// <summary>The volume of the product. If the 'status' attribute is absent and the value is not "NaN", the data value can be assumed to be good with no restrictions. A value of "NaN" should be interpreted as null and should be not be given unless a status is also specified to explain why it is null.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The volume of the product. If the 'status' attribute is absent and the value is not ""NaN"", the data value can be assumed to be good with no restrictions. A value of ""NaN"" should be interpreted as null and should be not be given unless a status is also specified to explain why it is null.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Volume", DataType="VolumeMeasure")]
        public VolumeMeasure Volume {
            get {
                return this.volumeField;
            }
            set {
                this.volumeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasurementPressureTemperature", DataType="AbstractTemperaturePressure")]
        public AbstractTemperaturePressure MeasurementPressureTemperature {
            get {
                return this.measurementPressureTemperatureField;
            }
            set {
                this.measurementPressureTemperatureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TemperaturePressure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReferenceTemperaturePressure))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractTemperaturePressure {
        
        private object itemField;
        
        /// <remarks/>
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class TemperaturePressure : AbstractTemperaturePressure {
        
        private ThermodynamicTemperatureMeasure temperatureField;
        
        private PressureMeasure pressureField;
        
        /// <remarks/>
        /// <summary>The temperature to which the density has been corrected. If given, then a pressure must also be given. Common standard temperatures are: 0 degC, 15 degC, 60 degF. If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the productVolume root.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The temperature to which the density has been corrected. If given, then a pressure must also be given. Common standard temperatures are: 0 degC, 15 degC, 60 degF. If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the productVolume root.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Temperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure Temperature {
            get {
                return this.temperatureField;
            }
            set {
                this.temperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure to which the density has been corrected. If given, then a temperature must also be given. Common standard pressures are: 1 atm and 14.696 psi (which are equivalent). If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the productVolume root.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The pressure to which the density has been corrected. If given, then a temperature must also be given. Common standard pressures are: 1 atm and 14.696 psi (which are equivalent). If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the productVolume root.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pressure", DataType="PressureMeasure")]
        public PressureMeasure Pressure {
            get {
                return this.pressureField;
            }
            set {
                this.pressureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ReferenceTemperaturePressure : AbstractTemperaturePressure {
        
        private string item1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ReferenceTempPres")]
        public string Item1 {
            get {
                return this.item1Field;
            }
            set {
                this.item1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class AmountOfSubstanceMeasure {
        
        private AmountOfSubstanceUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="AmountOfSubstanceUom")]
        public AmountOfSubstanceUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstanceUom {
        
        /// <remarks/>
        kmol,
        
        /// <remarks/>
        lbmol,
        
        /// <remarks/>
        mmol,
        
        /// <remarks/>
        mol,
        
        /// <remarks/>
        umol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductFluid : AbstractProductQuantity {
        
        private Energistics.DataAccess.ExtensibleEnum<ProductFluidKind> productFluidKindField;
        
        private EnergyMeasure grossEnergyContentField;
        
        private EnergyMeasure netEnergyContentField;
        
        private OverallComposition overallCompositionField;
        
        private string productFluidReferenceField;
        
        /// <remarks/>
        /// <summary>A simple enumeration to provide information about the product that the production quantity represents.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A simple enumeration to provide information about the product that the production" +
            " quantity represents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductFluidKind", DataType="ProductFluidKindExt")]
        public Energistics.DataAccess.ExtensibleEnum<ProductFluidKind> ProductFluidKind {
            get {
                return this.productFluidKindField;
            }
            set {
                this.productFluidKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of heat released during the combustion of the reported amount of this product. This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The amount of heat released during the combustion of the reported amount of this product. This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GrossEnergyContent", DataType="EnergyMeasure")]
        public EnergyMeasure GrossEnergyContent {
            get {
                return this.grossEnergyContentField;
            }
            set {
                this.grossEnergyContentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of heat released during the combustion of the reported amount of this product. This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The amount of heat released during the combustion of the reported amount of this product. This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NetEnergyContent", DataType="EnergyMeasure")]
        public EnergyMeasure NetEnergyContent {
            get {
                return this.netEnergyContentField;
            }
            set {
                this.netEnergyContentField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OverallComposition", DataType="OverallComposition")]
        public OverallComposition OverallComposition {
            get {
                return this.overallCompositionField;
            }
            set {
                this.overallCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>String UID that points to the productFluid in the fluidComponentSet.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("String UID that points to the productFluid in the fluidComponentSet.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("productFluidReference", DataType="String64")]
        public string productFluidReference {
            get {
                return this.productFluidReferenceField;
            }
            set {
                this.productFluidReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class EnergyMeasure {
        
        private EnergyUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="EnergyUom")]
        public EnergyUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 Btu[IT]")]
        Item1E6BtuIT,
        
        /// <remarks/>
        aJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]")]
        BtuIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[th]")]
        Btuth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[UK]")]
        BtuUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[IT]")]
        calIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]")]
        calth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ccal[th]")]
        ccalth,
        
        /// <remarks/>
        ceV,
        
        /// <remarks/>
        cJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dcal[th]")]
        dcalth,
        
        /// <remarks/>
        deV,
        
        /// <remarks/>
        dJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ecal[th]")]
        Ecalth,
        
        /// <remarks/>
        EeV,
        
        /// <remarks/>
        EJ,
        
        /// <remarks/>
        erg,
        
        /// <remarks/>
        eV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fcal[th]")]
        fcalth,
        
        /// <remarks/>
        feV,
        
        /// <remarks/>
        fJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Gcal[th]")]
        Gcalth,
        
        /// <remarks/>
        GeV,
        
        /// <remarks/>
        GJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("GW.h")]
        GWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h")]
        hph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[metric].h")]
        hpmetrich,
        
        /// <remarks/>
        J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]")]
        kcalth,
        
        /// <remarks/>
        keV,
        
        /// <remarks/>
        kJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h")]
        kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mcal[th]")]
        mcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mcal[th]")]
        Mcalth,
        
        /// <remarks/>
        meV,
        
        /// <remarks/>
        MeV,
        
        /// <remarks/>
        MJ,
        
        /// <remarks/>
        mJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h")]
        MWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ncal[th]")]
        ncalth,
        
        /// <remarks/>
        neV,
        
        /// <remarks/>
        nJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pcal[th]")]
        pcalth,
        
        /// <remarks/>
        peV,
        
        /// <remarks/>
        pJ,
        
        /// <remarks/>
        quad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Tcal[th]")]
        Tcalth,
        
        /// <remarks/>
        TeV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[EC]")]
        thermEC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[UK]")]
        thermUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[US]")]
        thermUS,
        
        /// <remarks/>
        TJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TW.h")]
        TWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]")]
        ucalth,
        
        /// <remarks/>
        ueV,
        
        /// <remarks/>
        uJ,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class OverallComposition {
        
        private string remarkField;
        
        private FluidComponent[] fluidComponentField;
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("FluidComponent")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidComponent", DataType="FluidComponent")]
        public FluidComponent[] FluidComponent {
            get {
                return this.fluidComponentField;
            }
            set {
                this.fluidComponentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidComponent {
        
        private MassPerMassMeasure massFractionField;
        
        private AmountOfSubstancePerAmountOfSubstanceMeasure moleFractionField;
        
        private AmountOfSubstancePerAmountOfSubstanceMeasure kValueField;
        
        private string fluidComponentReferenceField;
        
        /// <remarks/>
        /// <summary>The mass fraction for the fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The mass fraction for the fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassFraction", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure MassFraction {
            get {
                return this.massFractionField;
            }
            set {
                this.massFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mole fraction for the fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The mole fraction for the fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MoleFraction", DataType="AmountOfSubstancePerAmountOfSubstanceMeasure")]
        public AmountOfSubstancePerAmountOfSubstanceMeasure MoleFraction {
            get {
                return this.moleFractionField;
            }
            set {
                this.moleFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>K value.</summary>
        [System.ComponentModel.DescriptionAttribute("K value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KValue", DataType="AmountOfSubstancePerAmountOfSubstanceMeasure")]
        public AmountOfSubstancePerAmountOfSubstanceMeasure KValue {
            get {
                return this.kValueField;
            }
            set {
                this.kValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluid component reference.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Fluid component reference.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("fluidComponentReference", DataType="String64")]
        public string fluidComponentReference {
            get {
                return this.fluidComponentReferenceField;
            }
            set {
                this.fluidComponentReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RefInjectedGasAdded))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class AmountOfSubstancePerAmountOfSubstanceMeasure {
        
        private AmountOfSubstancePerAmountOfSubstanceUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="AmountOfSubstancePerAmountOfSubstanceUom")]
        public AmountOfSubstancePerAmountOfSubstanceUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstancePerAmountOfSubstanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[molar]")]
        molar,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/mol")]
        molmol,
        
        /// <remarks/>
        nEuc,
        
        /// <remarks/>
        ppk,
        
        /// <remarks/>
        ppm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class RefInjectedGasAdded : AmountOfSubstancePerAmountOfSubstanceMeasure {
        
        private string injectionGasReferenceField;
        
        /// <remarks/>
        /// <summary>Reference to the injection gas composition.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to the injection gas composition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("injectionGasReference", DataType="String64")]
        public string injectionGasReference {
            get {
                return this.injectionGasReferenceField;
            }
            set {
                this.injectionGasReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DeferredProduction {
        
        private Energistics.DataAccess.ExtensibleEnum<EstimationMethod> estimationMethodField;
        
        private string remarkField;
        
        private AbstractProductQuantity[] deferredProductQuantityField;
        
        /// <remarks/>
        /// <summary>The method used to estimate deferred production. See enum EstimationMethod.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The method used to estimate deferred production. See enum EstimationMethod.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EstimationMethod", DataType="EstimationMethodExt")]
        public Energistics.DataAccess.ExtensibleEnum<EstimationMethod> EstimationMethod {
            get {
                return this.estimationMethodField;
            }
            set {
                this.estimationMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DeferredProductQuantity")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DeferredProductQuantity", DataType="AbstractProductQuantity")]
        public AbstractProductQuantity[] DeferredProductQuantity {
            get {
                return this.deferredProductQuantityField;
            }
            set {
                this.deferredProductQuantityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DowntimeReasonCode {
        
        private string nameField;
        
        private DowntimeReasonCode parentField;
        
        private string authorityField;
        
        private string codeField;
        
        /// <remarks/>
        /// <summary>Name or explanation of the code specified in the code attribute.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name or explanation of the code specified in the code attribute.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parent", DataType="DowntimeReasonCode")]
        public DowntimeReasonCode Parent {
            get {
                return this.parentField;
            }
            set {
                this.parentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The authority (usually a company) that defines the codes.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The authority (usually a company) that defines the codes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("authority", DataType="String64")]
        public string authority {
            get {
                return this.authorityField;
            }
            set {
                this.authorityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The code value.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The code value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("code", DataType="String64")]
        public string code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DeferredProductionEvent {
        
        private System.DateTime startDateField;
        
        private bool startDateFieldSpecified;
        
        private System.DateTime endDateField;
        
        private bool endDateFieldSpecified;
        
        private TimeMeasure durationField;
        
        private DowntimeReasonCode downtimeReasonCodeField;
        
        private DeferredProduction[] deferredProductionField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The start date of the event.</summary>
        [System.ComponentModel.DescriptionAttribute("The start date of the event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartDate", DataType="dateTime")]
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StartDateSpecified {
            get {
                return this.startDateFieldSpecified;
            }
            set {
                this.startDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The end date of the event.</summary>
        [System.ComponentModel.DescriptionAttribute("The end date of the event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndDate", DataType="dateTime")]
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndDateSpecified {
            get {
                return this.endDateFieldSpecified;
            }
            set {
                this.endDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The duration of the event.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The duration of the event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Duration", DataType="TimeMeasure")]
        public TimeMeasure Duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reason code for the downtime event.</summary>
        [System.ComponentModel.DescriptionAttribute("The reason code for the downtime event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DowntimeReasonCode", DataType="DowntimeReasonCode")]
        public DowntimeReasonCode DowntimeReasonCode {
            get {
                return this.downtimeReasonCodeField;
            }
            set {
                this.downtimeReasonCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DeferredProduction")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DeferredProduction", DataType="DeferredProduction")]
        public DeferredProduction[] DeferredProduction {
            get {
                return this.deferredProductionField;
            }
            set {
                this.deferredProductionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class Production {
        
        private Energistics.DataAccess.ExtensibleEnum<QuantityMethod> quantityMethodField;
        
        private string remarkField;
        
        private AbstractProductQuantity[] productionQuantityField;
        
        /// <remarks/>
        /// <summary>The method in which the quantity/volume was determined. See enum QuantityMethod.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The method in which the quantity/volume was determined. See enum QuantityMethod.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("QuantityMethod", DataType="QuantityMethodExt")]
        public Energistics.DataAccess.ExtensibleEnum<QuantityMethod> QuantityMethod {
            get {
                return this.quantityMethodField;
            }
            set {
                this.quantityMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ProductionQuantity")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductionQuantity", DataType="AbstractProductQuantity")]
        public AbstractProductQuantity[] ProductionQuantity {
            get {
                return this.productionQuantityField;
            }
            set {
                this.productionQuantityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransferDisposition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TerminalLiftingDisposition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductDisposition))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractDisposition {
        
        private Energistics.DataAccess.ExtensibleEnum<QuantityMethod> quantityMethodField;
        
        private AuthorityQualifiedName productDispositionCodeField;
        
        private string remarkField;
        
        private AbstractProductQuantity[] dispositionQuantityField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Quantity method.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Quantity method.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("QuantityMethod", DataType="QuantityMethodExt")]
        public Energistics.DataAccess.ExtensibleEnum<QuantityMethod> QuantityMethod {
            get {
                return this.quantityMethodField;
            }
            set {
                this.quantityMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique disposition code associated within a given naming system. This may be a code specified by a regulatory agency.</summary>
        [System.ComponentModel.DescriptionAttribute("A unique disposition code associated within a given naming system. This may be a " +
            "code specified by a regulatory agency.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductDispositionCode", DataType="AuthorityQualifiedName")]
        public AuthorityQualifiedName ProductDispositionCode {
            get {
                return this.productDispositionCodeField;
            }
            set {
                this.productDispositionCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A descriptive remark relating to this disposition.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A descriptive remark relating to this disposition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of product to which this disposition applies.</summary>
        [System.Xml.Serialization.XmlElementAttribute("DispositionQuantity")]
        [System.ComponentModel.DescriptionAttribute("The amount of product to which this disposition applies.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DispositionQuantity", DataType="AbstractProductQuantity")]
        public AbstractProductQuantity[] DispositionQuantity {
            get {
                return this.dispositionQuantityField;
            }
            set {
                this.dispositionQuantityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class AuthorityQualifiedName {
        
        private string authorityField;
        
        private string codeField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("authority", DataType="String64")]
        public string authority {
            get {
                return this.authorityField;
            }
            set {
                this.authorityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("code", DataType="String64")]
        public string code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class TransferDisposition : AbstractDisposition {
        
        private Transfer transferField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Transfer", DataType="Transfer")]
        public Transfer Transfer {
            get {
                return this.transferField;
            }
            set {
                this.transferField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    public partial class Transfer : AbstractSimpleProductVolume {
        
        private TransferKind transferKindField;
        
        private System.DateTime startTimeField;
        
        private bool startTimeFieldSpecified;
        
        private System.DateTime endTimeField;
        
        private bool endTimeFieldSpecified;
        
        private ProductFluid[] productTransferQuantityField;
        
        private DataObjectReference destinationFacilityReferenceField;
        
        private DataObjectReference sourceFacilityReferenceField;
        
        /// <remarks/>
        /// <summary>Specifies the kind of transfer. See enum TransferKind.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Specifies the kind of transfer. See enum TransferKind.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TransferKind", DataType="TransferKind")]
        public TransferKind TransferKind {
            get {
                return this.transferKindField;
            }
            set {
                this.transferKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time when the transfer began.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time when the transfer began.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartTime", DataType="dateTime")]
        public System.DateTime StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StartTimeSpecified {
            get {
                return this.startTimeFieldSpecified;
            }
            set {
                this.startTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time when the transfer ended.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time when the transfer ended.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndTime", DataType="dateTime")]
        public System.DateTime EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndTimeSpecified {
            get {
                return this.endTimeFieldSpecified;
            }
            set {
                this.endTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of product transferred.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ProductTransferQuantity")]
        [System.ComponentModel.DescriptionAttribute("The amount of product transferred.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductTransferQuantity", DataType="ProductFluid")]
        public ProductFluid[] ProductTransferQuantity {
            get {
                return this.productTransferQuantityField;
            }
            set {
                this.productTransferQuantityField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DestinationFacilityReference", DataType="DataObjectReference")]
        public DataObjectReference DestinationFacilityReference {
            get {
                return this.destinationFacilityReferenceField;
            }
            set {
                this.destinationFacilityReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SourceFacilityReference", DataType="DataObjectReference")]
        public DataObjectReference SourceFacilityReference {
            get {
                return this.sourceFacilityReferenceField;
            }
            set {
                this.sourceFacilityReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum TransferKind {
        
        /// <remarks/>
        input,
        
        /// <remarks/>
        output,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellProductionParameters))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductionWellTest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Transfer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TerminalLifting))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AssetProductionVolumes))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public abstract partial class AbstractSimpleProductVolume : AbstractObject {
        
        private AbstractTemperaturePressure standardConditionsField;
        
        private System.DateTime approvalDateField;
        
        private bool approvalDateFieldSpecified;
        
        private GeographicContext geographicContextField;
        
        private FluidComponentCatalog fluidComponentCatalogField;
        
        private BusinessAssociate operatorField;
        
        /// <remarks/>
        /// <summary>The condition-dependant measurements (e.g.,  volumes) in this transfer are taken to be measured at standard conditions.  The element is mandatory in all the SPVR objects.  A choice is available – either to supply the temperature and pressure for all the volumes that follow, or to choose from a list of standards organizations’ reference conditions. Note that the enum list of standard conditions is extensible, allowing for local measurement condition standards to be used</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The condition-dependant measurements (e.g.,  volumes) in this transfer are taken to be measured at standard conditions.  The element is mandatory in all the SPVR objects.  A choice is available – either to supply the temperature and pressure for all the volumes that follow, or to choose from a list of standards organizations’ reference conditions. Note that the enum list of standard conditions is extensible, allowing for local measurement condition standards to be used")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StandardConditions", DataType="AbstractTemperaturePressure")]
        public AbstractTemperaturePressure StandardConditions {
            get {
                return this.standardConditionsField;
            }
            set {
                this.standardConditionsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date on which the report was approved.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date on which the report was approved.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ApprovalDate", DataType="date")]
        public System.DateTime ApprovalDate {
            get {
                return this.approvalDateField;
            }
            set {
                this.approvalDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ApprovalDateSpecified {
            get {
                return this.approvalDateFieldSpecified;
            }
            set {
                this.approvalDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Geographic context for reporting entities.</summary>
        [System.ComponentModel.DescriptionAttribute("Geographic context for reporting entities.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeographicContext", DataType="GeographicContext")]
        public GeographicContext GeographicContext {
            get {
                return this.geographicContextField;
            }
            set {
                this.geographicContextField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidComponentCatalog", DataType="FluidComponentCatalog")]
        public FluidComponentCatalog FluidComponentCatalog {
            get {
                return this.fluidComponentCatalogField;
            }
            set {
                this.fluidComponentCatalogField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Operator", DataType="BusinessAssociate")]
        public BusinessAssociate Operator {
            get {
                return this.operatorField;
            }
            set {
                this.operatorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class GeographicContext {
        
        private string countryField;
        
        private string stateField;
        
        private string countyField;
        
        private NameStruct fieldField;
        
        private string commentField;
        
        private OffshoreLocation offshoreLocationField;
        
        /// <remarks/>
        /// <summary>The name of the country.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the country.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Country", DataType="String64")]
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The state or province within the country.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The state or province within the country.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("State", DataType="String64")]
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of county.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of county.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("County", DataType="String64")]
        public string County {
            get {
                return this.countyField;
            }
            set {
                this.countyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the field within whose context the report exists.</summary>
        [System.ComponentModel.DescriptionAttribute("The name of the field within whose context the report exists.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Field", DataType="NameStruct")]
        public NameStruct Field {
            get {
                return this.fieldField;
            }
            set {
                this.fieldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A general comment that further explains the offshore location.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A general comment that further explains the offshore location.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OffshoreLocation", DataType="OffshoreLocation")]
        public OffshoreLocation OffshoreLocation {
            get {
                return this.offshoreLocationField;
            }
            set {
                this.offshoreLocationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class OffshoreLocation {
        
        private string areaNameField;
        
        private string[] blockIDField;
        
        private string commentField;
        
        private NorthSeaOffshore northSeaOffshoreField;
        
        /// <remarks/>
        /// <summary>A general meaning of area. It may be as general as 'UK North Sea' or 'Viosca Knoll'. The user community must agree on the meaning of this element.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A general meaning of area. It may be as general as \'UK North Sea\' or \'Viosca Knol" +
            "l\'. The user community must agree on the meaning of this element.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AreaName", DataType="String64")]
        public string AreaName {
            get {
                return this.areaNameField;
            }
            set {
                this.areaNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A block ID that can more tightly locate the object. The BlockID should be an identifying name or code. The user community for an area must agree on the exact meaning of this element. An aggregate of increasingly specialized block IDs are sometimes necessary to define the location.</summary>
        [System.Xml.Serialization.XmlElementAttribute("BlockID")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"A block ID that can more tightly locate the object. The BlockID should be an identifying name or code. The user community for an area must agree on the exact meaning of this element. An aggregate of increasingly specialized block IDs are sometimes necessary to define the location.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BlockID", DataType="String64")]
        public string[] BlockID {
            get {
                return this.blockIDField;
            }
            set {
                this.blockIDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An general comment that further explains the offshore location.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("An general comment that further explains the offshore location.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NorthSeaOffshore", DataType="NorthSeaOffshore")]
        public NorthSeaOffshore NorthSeaOffshore {
            get {
                return this.northSeaOffshoreField;
            }
            set {
                this.northSeaOffshoreField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class NorthSeaOffshore {
        
        private string areaNameField;
        
        private string quadrantField;
        
        private string blockSuffixField;
        
        /// <remarks/>
        /// <summary>An optional, uncontrolled value, which may be used to describe the general area of offshore North Sea in which the point is located.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("An optional, uncontrolled value, which may be used to describe the general area o" +
            "f offshore North Sea in which the point is located.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AreaName", DataType="String64")]
        public string AreaName {
            get {
                return this.areaNameField;
            }
            set {
                this.areaNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number or letter of the quadrant in the North Sea.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The number or letter of the quadrant in the North Sea.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Quadrant", DataType="String64")]
        public string Quadrant {
            get {
                return this.quadrantField;
            }
            set {
                this.quadrantField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A lower case letter assigned if a block is subdivided.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A lower case letter assigned if a block is subdivided.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BlockSuffix", DataType="String64")]
        public string BlockSuffix {
            get {
                return this.blockSuffixField;
            }
            set {
                this.blockSuffixField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidComponentCatalog {
        
        private StockTankOil[] stockTankOilField;
        
        private NaturalGas[] naturalGasField;
        
        private FormationWater[] formationWaterField;
        
        private PureFluidComponent[] pureFluidComponentField;
        
        private PseudoFluidComponent[] pseudoFluidComponentField;
        
        private PlusFluidComponent[] plusFluidComponentField;
        
        /// <remarks/>
        /// <summary>Stock tank oil.</summary>
        [System.Xml.Serialization.XmlElementAttribute("StockTankOil")]
        [System.ComponentModel.DescriptionAttribute("Stock tank oil.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StockTankOil", DataType="StockTankOil")]
        public StockTankOil[] StockTankOil {
            get {
                return this.stockTankOilField;
            }
            set {
                this.stockTankOilField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Natural gas.</summary>
        [System.Xml.Serialization.XmlElementAttribute("NaturalGas")]
        [System.ComponentModel.DescriptionAttribute("Natural gas.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NaturalGas", DataType="NaturalGas")]
        public NaturalGas[] NaturalGas {
            get {
                return this.naturalGasField;
            }
            set {
                this.naturalGasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Formation water.</summary>
        [System.Xml.Serialization.XmlElementAttribute("FormationWater")]
        [System.ComponentModel.DescriptionAttribute("Formation water.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FormationWater", DataType="FormationWater")]
        public FormationWater[] FormationWater {
            get {
                return this.formationWaterField;
            }
            set {
                this.formationWaterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pure fluid component.</summary>
        [System.Xml.Serialization.XmlElementAttribute("PureFluidComponent")]
        [System.ComponentModel.DescriptionAttribute("Pure fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PureFluidComponent", DataType="PureFluidComponent")]
        public PureFluidComponent[] PureFluidComponent {
            get {
                return this.pureFluidComponentField;
            }
            set {
                this.pureFluidComponentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pseudo-fluid component.</summary>
        [System.Xml.Serialization.XmlElementAttribute("PseudoFluidComponent")]
        [System.ComponentModel.DescriptionAttribute("Pseudo-fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PseudoFluidComponent", DataType="PseudoFluidComponent")]
        public PseudoFluidComponent[] PseudoFluidComponent {
            get {
                return this.pseudoFluidComponentField;
            }
            set {
                this.pseudoFluidComponentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Plus-fluid component.</summary>
        [System.Xml.Serialization.XmlElementAttribute("PlusFluidComponent")]
        [System.ComponentModel.DescriptionAttribute("Plus-fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PlusFluidComponent", DataType="PlusFluidComponent")]
        public PlusFluidComponent[] PlusFluidComponent {
            get {
                return this.plusFluidComponentField;
            }
            set {
                this.plusFluidComponentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class StockTankOil : AbstractFluidComponent {
        
        private APIGravityMeasure aPIGravityField;
        
        private MolecularWeightMeasure molecularWeightField;
        
        private EnergyPerMassMeasure grossEnergyContentPerUnitMassField;
        
        private EnergyPerMassMeasure netEnergyContentPerUnitMassField;
        
        private EnergyPerVolumeMeasure grossEnergyContentPerUnitVolumeField;
        
        private EnergyPerVolumeMeasure netEnergyContentPerUnitVolumeField;
        
        private string remarkField;
        
        /// <remarks/>
        /// <summary>API gravity.</summary>
        [System.ComponentModel.DescriptionAttribute("API gravity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("APIGravity", DataType="APIGravityMeasure")]
        public APIGravityMeasure APIGravity {
            get {
                return this.aPIGravityField;
            }
            set {
                this.aPIGravityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Molecular weight.</summary>
        [System.ComponentModel.DescriptionAttribute("Molecular weight.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MolecularWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure MolecularWeight {
            get {
                return this.molecularWeightField;
            }
            set {
                this.molecularWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of heat released during the combustion of a specified amount of STO. It is also known as higher heating value (HHV), gross energy, upper heating value, gross calorific value (GCV) or higher calorific value (HCV). This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The amount of heat released during the combustion of a specified amount of STO. It is also known as higher heating value (HHV), gross energy, upper heating value, gross calorific value (GCV) or higher calorific value (HCV). This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GrossEnergyContentPerUnitMass", DataType="EnergyPerMassMeasure")]
        public EnergyPerMassMeasure GrossEnergyContentPerUnitMass {
            get {
                return this.grossEnergyContentPerUnitMassField;
            }
            set {
                this.grossEnergyContentPerUnitMassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of heat released during the combustion of a specified amount of STO. It is also known as lower heating value (LHV), net energy, lower heating value, net calorific value  (NCV) or lower calorific value (LCV). This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The amount of heat released during the combustion of a specified amount of STO. It is also known as lower heating value (LHV), net energy, lower heating value, net calorific value  (NCV) or lower calorific value (LCV). This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NetEnergyContentPerUnitMass", DataType="EnergyPerMassMeasure")]
        public EnergyPerMassMeasure NetEnergyContentPerUnitMass {
            get {
                return this.netEnergyContentPerUnitMassField;
            }
            set {
                this.netEnergyContentPerUnitMassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of heat released during the combustion of a specified amount of STO. It is also known as higher heating value (HHV), gross energy, upper heating value,  gross calorific value (GCV) or higher calorific value (HCV). This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The amount of heat released during the combustion of a specified amount of STO. It is also known as higher heating value (HHV), gross energy, upper heating value,  gross calorific value (GCV) or higher calorific value (HCV). This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GrossEnergyContentPerUnitVolume", DataType="EnergyPerVolumeMeasure")]
        public EnergyPerVolumeMeasure GrossEnergyContentPerUnitVolume {
            get {
                return this.grossEnergyContentPerUnitVolumeField;
            }
            set {
                this.grossEnergyContentPerUnitVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of heat released during the combustion of a specified amount of STO. It is also known as lower heating value  (LHV), net energy, net calorific value (NCV) or lower calorific value (LCV). This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The amount of heat released during the combustion of a specified amount of STO. It is also known as lower heating value  (LHV), net energy, net calorific value (NCV) or lower calorific value (LCV). This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NetEnergyContentPerUnitVolume", DataType="EnergyPerVolumeMeasure")]
        public EnergyPerVolumeMeasure NetEnergyContentPerUnitVolume {
            get {
                return this.netEnergyContentPerUnitVolumeField;
            }
            set {
                this.netEnergyContentPerUnitVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class APIGravityMeasure {
        
        private APIGravityUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="APIGravityUom")]
        public APIGravityUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum APIGravityUom {
        
        /// <remarks/>
        dAPI,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class MolecularWeightMeasure {
        
        private MolecularWeightUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="MolecularWeightUom")]
        public MolecularWeightUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MolecularWeightUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/mol")]
        gmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/mol")]
        kgmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/lbmol")]
        lbmlbmol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class EnergyPerMassMeasure {
        
        private EnergyPerMassUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="EnergyPerMassUom")]
        public EnergyPerMassUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyPerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/lbm")]
        BtuITlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/g")]
        calthg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/kg")]
        calthkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/lbm")]
        calthlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/g")]
        ergg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/kg")]
        ergkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h/lbm")]
        hphlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/g")]
        Jg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/kg")]
        Jkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/g")]
        kcalthg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/kg")]
        kcalthkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/kg")]
        kJkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/kg")]
        kWhkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/lbm")]
        lbfftlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/kg")]
        MJkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h/kg")]
        MWhkg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class EnergyPerVolumeMeasure {
        
        private EnergyPerVolumeUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="EnergyPerVolumeUom")]
        public EnergyPerVolumeUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyPerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/bbl")]
        BtuITbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/ft3")]
        BtuITft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/gal[UK]")]
        BtuITgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/gal[US]")]
        BtuITgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/cm3")]
        calthcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/mL")]
        calthmL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/mm3")]
        calthmm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/cm3")]
        ergcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/m3")]
        ergm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h/bbl")]
        hphbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/dm3")]
        Jdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m3")]
        Jm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/cm3")]
        kcalthcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/m3")]
        kcalthm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/dm3")]
        kJdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/m3")]
        kJm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/dm3")]
        kWhdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/m3")]
        kWhm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/bbl")]
        lbfftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/gal[US]")]
        lbfftgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/m3")]
        MJm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h/m3")]
        MWhm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi/bbl")]
        tonfUSmibbl,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StockTankOil))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PureFluidComponent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PseudoFluidComponent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PlusFluidComponent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NaturalGas))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FormationWater))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractFluidComponent {
        
        private MassPerMassMeasure massFractionField;
        
        private AmountOfSubstancePerAmountOfSubstanceMeasure moleFractionField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The fluid mass fraction.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid mass fraction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassFraction", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure MassFraction {
            get {
                return this.massFractionField;
            }
            set {
                this.massFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fluid mole fraction.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid mole fraction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MoleFraction", DataType="AmountOfSubstancePerAmountOfSubstanceMeasure")]
        public AmountOfSubstancePerAmountOfSubstanceMeasure MoleFraction {
            get {
                return this.moleFractionField;
            }
            set {
                this.moleFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class PureFluidComponent : AbstractFluidComponent {
        
        private Energistics.DataAccess.ExtensibleEnum<PureComponentEnum> kindField;
        
        private MolecularWeightMeasure molecularWeightField;
        
        private bool hydrocarbonFlagField;
        
        private string remarkField;
        
        /// <remarks/>
        /// <summary>The type of component.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="PureComponentEnumExt")]
        public Energistics.DataAccess.ExtensibleEnum<PureComponentEnum> Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The molecular weight of the pure component.</summary>
        [System.ComponentModel.DescriptionAttribute("The molecular weight of the pure component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MolecularWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure MolecularWeight {
            get {
                return this.molecularWeightField;
            }
            set {
                this.molecularWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Yes/no  flag indicates if hydrocarbon or not.</summary>
        [System.ComponentModel.DescriptionAttribute("Yes/no  flag indicates if hydrocarbon or not.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HydrocarbonFlag", DataType="boolean")]
        public bool HydrocarbonFlag {
            get {
                return this.hydrocarbonFlagField;
            }
            set {
                this.hydrocarbonFlagField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class PseudoFluidComponent : AbstractFluidComponent {
        
        private Energistics.DataAccess.ExtensibleEnum<PseudoComponentEnum> kindField;
        
        private double specificGravityField;
        
        private bool specificGravityFieldSpecified;
        
        private long startingCarbonNumberField;
        
        private bool startingCarbonNumberFieldSpecified;
        
        private long endingCarbonNumberField;
        
        private bool endingCarbonNumberFieldSpecified;
        
        private MolecularWeightMeasure avgMolecularWeightField;
        
        private MassPerVolumeMeasure avgDensityField;
        
        private ThermodynamicTemperatureMeasure startingBoilingPointField;
        
        private ThermodynamicTemperatureMeasure endingBoilingPointField;
        
        private ThermodynamicTemperatureMeasure avgBoilingPointField;
        
        private string remarkField;
        
        /// <remarks/>
        /// <summary>The type from pseudo component enumeration.</summary>
        [System.ComponentModel.DescriptionAttribute("The type from pseudo component enumeration.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="PseudoComponentEnumExt")]
        public Energistics.DataAccess.ExtensibleEnum<PseudoComponentEnum> Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fluid specific gravity.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid specific gravity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpecificGravity", DataType="double")]
        public double SpecificGravity {
            get {
                return this.specificGravityField;
            }
            set {
                this.specificGravityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpecificGravitySpecified {
            get {
                return this.specificGravityFieldSpecified;
            }
            set {
                this.specificGravityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The starting / smalestl carbon number.</summary>
        [System.ComponentModel.DescriptionAttribute("The starting / smalestl carbon number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartingCarbonNumber", DataType="NonNegativeLong")]
        public long StartingCarbonNumber {
            get {
                return this.startingCarbonNumberField;
            }
            set {
                this.startingCarbonNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StartingCarbonNumberSpecified {
            get {
                return this.startingCarbonNumberFieldSpecified;
            }
            set {
                this.startingCarbonNumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ending / largest carbon number.</summary>
        [System.ComponentModel.DescriptionAttribute("The ending / largest carbon number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndingCarbonNumber", DataType="NonNegativeLong")]
        public long EndingCarbonNumber {
            get {
                return this.endingCarbonNumberField;
            }
            set {
                this.endingCarbonNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndingCarbonNumberSpecified {
            get {
                return this.endingCarbonNumberFieldSpecified;
            }
            set {
                this.endingCarbonNumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average molecular weight.</summary>
        [System.ComponentModel.DescriptionAttribute("Average molecular weight.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgMolecularWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure AvgMolecularWeight {
            get {
                return this.avgMolecularWeightField;
            }
            set {
                this.avgMolecularWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average fluid density.</summary>
        [System.ComponentModel.DescriptionAttribute("The average fluid density.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure AvgDensity {
            get {
                return this.avgDensityField;
            }
            set {
                this.avgDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The starting boiling point measure.</summary>
        [System.ComponentModel.DescriptionAttribute("The starting boiling point measure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartingBoilingPoint", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure StartingBoilingPoint {
            get {
                return this.startingBoilingPointField;
            }
            set {
                this.startingBoilingPointField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ending boiling point measure.</summary>
        [System.ComponentModel.DescriptionAttribute("The ending boiling point measure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndingBoilingPoint", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure EndingBoilingPoint {
            get {
                return this.endingBoilingPointField;
            }
            set {
                this.endingBoilingPointField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average boiling point measure.</summary>
        [System.ComponentModel.DescriptionAttribute("The average boiling point measure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgBoilingPoint", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure AvgBoilingPoint {
            get {
                return this.avgBoilingPointField;
            }
            set {
                this.avgBoilingPointField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class PlusFluidComponent : AbstractFluidComponent {
        
        private Energistics.DataAccess.ExtensibleEnum<PlusComponentEnum> kindField;
        
        private double specificGravityField;
        
        private bool specificGravityFieldSpecified;
        
        private long startingCarbonNumberField;
        
        private bool startingCarbonNumberFieldSpecified;
        
        private ThermodynamicTemperatureMeasure startingBoilingPointField;
        
        private MassPerVolumeMeasure avgDensityField;
        
        private MolecularWeightMeasure avgMolecularWeightField;
        
        private string remarkField;
        
        /// <remarks/>
        /// <summary>The kind from plus fluid component. See PlusComponentEnum.</summary>
        [System.ComponentModel.DescriptionAttribute("The kind from plus fluid component. See PlusComponentEnum.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="PlusComponentEnumExt")]
        public Energistics.DataAccess.ExtensibleEnum<PlusComponentEnum> Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fluid specific gravity.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid specific gravity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpecificGravity", DataType="double")]
        public double SpecificGravity {
            get {
                return this.specificGravityField;
            }
            set {
                this.specificGravityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpecificGravitySpecified {
            get {
                return this.specificGravityFieldSpecified;
            }
            set {
                this.specificGravityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The start/min carbon number.</summary>
        [System.ComponentModel.DescriptionAttribute("The start/min carbon number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartingCarbonNumber", DataType="NonNegativeLong")]
        public long StartingCarbonNumber {
            get {
                return this.startingCarbonNumberField;
            }
            set {
                this.startingCarbonNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StartingCarbonNumberSpecified {
            get {
                return this.startingCarbonNumberFieldSpecified;
            }
            set {
                this.startingCarbonNumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The starting boiling temperature measure.</summary>
        [System.ComponentModel.DescriptionAttribute("The starting boiling temperature measure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartingBoilingPoint", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure StartingBoilingPoint {
            get {
                return this.startingBoilingPointField;
            }
            set {
                this.startingBoilingPointField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average density of the fluid.</summary>
        [System.ComponentModel.DescriptionAttribute("The average density of the fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure AvgDensity {
            get {
                return this.avgDensityField;
            }
            set {
                this.avgDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average molecular weight of the fluid.</summary>
        [System.ComponentModel.DescriptionAttribute("The average molecular weight of the fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgMolecularWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure AvgMolecularWeight {
            get {
                return this.avgMolecularWeightField;
            }
            set {
                this.avgMolecularWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class NaturalGas : AbstractFluidComponent {
        
        private double gasGravityField;
        
        private bool gasGravityFieldSpecified;
        
        private MolecularWeightMeasure molecularWeightField;
        
        private EnergyPerMassMeasure grossEnergyContentPerUnitMassField;
        
        private EnergyPerMassMeasure netEnergyContentPerUnitMassField;
        
        private EnergyPerVolumeMeasure grossEnergyContentPerUnitVolumeField;
        
        private EnergyPerVolumeMeasure netEnergyContentPerUnitVolumeField;
        
        private string remarkField;
        
        /// <remarks/>
        /// <summary>Gas gravity.</summary>
        [System.ComponentModel.DescriptionAttribute("Gas gravity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasGravity", DataType="double")]
        public double GasGravity {
            get {
                return this.gasGravityField;
            }
            set {
                this.gasGravityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GasGravitySpecified {
            get {
                return this.gasGravityFieldSpecified;
            }
            set {
                this.gasGravityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Molecular weight.</summary>
        [System.ComponentModel.DescriptionAttribute("Molecular weight.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MolecularWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure MolecularWeight {
            get {
                return this.molecularWeightField;
            }
            set {
                this.molecularWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of heat released during the combustion of a specified amount of gas. It is also known as higher heating value (HHV), gross energy, upper heating value, gross calorific value (GCV) or higher calorific Value (HCV). This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The amount of heat released during the combustion of a specified amount of gas. It is also known as higher heating value (HHV), gross energy, upper heating value, gross calorific value (GCV) or higher calorific Value (HCV). This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GrossEnergyContentPerUnitMass", DataType="EnergyPerMassMeasure")]
        public EnergyPerMassMeasure GrossEnergyContentPerUnitMass {
            get {
                return this.grossEnergyContentPerUnitMassField;
            }
            set {
                this.grossEnergyContentPerUnitMassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of heat released during the combustion of a specified amount of gas. It is also known as lower heating value (LHV), net energy, net calorific value (NCV) or lower calorific value (LCV). This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The amount of heat released during the combustion of a specified amount of gas. It is also known as lower heating value (LHV), net energy, net calorific value (NCV) or lower calorific value (LCV). This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NetEnergyContentPerUnitMass", DataType="EnergyPerMassMeasure")]
        public EnergyPerMassMeasure NetEnergyContentPerUnitMass {
            get {
                return this.netEnergyContentPerUnitMassField;
            }
            set {
                this.netEnergyContentPerUnitMassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of heat released during the combustion of a specified amount of gas. It is also known as higher heating value (HHV), gross energy, upper heating value, gross calorific value (GCV) or higher calorific value (HCV). This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The amount of heat released during the combustion of a specified amount of gas. It is also known as higher heating value (HHV), gross energy, upper heating value, gross calorific value (GCV) or higher calorific value (HCV). This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GrossEnergyContentPerUnitVolume", DataType="EnergyPerVolumeMeasure")]
        public EnergyPerVolumeMeasure GrossEnergyContentPerUnitVolume {
            get {
                return this.grossEnergyContentPerUnitVolumeField;
            }
            set {
                this.grossEnergyContentPerUnitVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of heat released during the combustion of a specified amount of gas. It is also known as lower heating value (LHV), net energy, net calorific value (NCV) or lower calorific value (LCV). This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The amount of heat released during the combustion of a specified amount of gas. It is also known as lower heating value (LHV), net energy, net calorific value (NCV) or lower calorific value (LCV). This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NetEnergyContentPerUnitVolume", DataType="EnergyPerVolumeMeasure")]
        public EnergyPerVolumeMeasure NetEnergyContentPerUnitVolume {
            get {
                return this.netEnergyContentPerUnitVolumeField;
            }
            set {
                this.netEnergyContentPerUnitVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FormationWater : AbstractFluidComponent {
        
        private double specificGravityField;
        
        private bool specificGravityFieldSpecified;
        
        private MassPerMassMeasure salinityField;
        
        private string remarkField;
        
        /// <remarks/>
        /// <summary>Specific gravity.</summary>
        [System.ComponentModel.DescriptionAttribute("Specific gravity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpecificGravity", DataType="double")]
        public double SpecificGravity {
            get {
                return this.specificGravityField;
            }
            set {
                this.specificGravityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpecificGravitySpecified {
            get {
                return this.specificGravityFieldSpecified;
            }
            set {
                this.specificGravityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Salinity level.</summary>
        [System.ComponentModel.DescriptionAttribute("Salinity level.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Salinity", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure Salinity {
            get {
                return this.salinityField;
            }
            set {
                this.salinityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellTest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeSeriesStatistic))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeSeriesData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Report))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductionOperation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WftRun))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidSampleAcquisitionJob))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidSystem))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSimpleProductVolume))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellProductionParameters))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductionWellTest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Transfer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TerminalLifting))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AssetProductionVolumes))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReportingHierarchy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReportingEntity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidAnalysis))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WaterAnalysis))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HydrocarbonAnalysis))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidCharacterization))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidSample))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidSampleContainer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DtsMeasurement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DasInstrumentBox))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DasAcquisition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DtsInstrumentBox))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DtsInstalledSystem))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberOpticalPath))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductVolume))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductFlowModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GraphicalInformationSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataAssuranceRecord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocalEngineeringCompoundCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ActivityTemplate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Activity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EpcExternalPartReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGrowingObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeSeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PropertyKindDictionary))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PropertyKind))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractContextualObject", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    public abstract partial class AbstractObject {
        
        private ObjectAlias[] aliasesField;
        
        private Citation citationField;
        
        private CustomData customDataField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string objectVersionField;
        
        private string schemaVersionField;
        
        private string uuidField;
        
        private ExistenceKind existenceKindField;
        
        private bool existenceKindFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Aliases")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Aliases", DataType="ObjectAlias")]
        public ObjectAlias[] Aliases {
            get {
                return this.aliasesField;
            }
            set {
                this.aliasesField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Citation", DataType="Citation")]
        public Citation Citation {
            get {
                return this.citationField;
            }
            set {
                this.citationField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CustomData", DataType="CustomData")]
        public CustomData CustomData {
            get {
                return this.customDataField;
            }
            set {
                this.customDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("objectVersion", DataType="String64")]
        public string objectVersion {
            get {
                return this.objectVersionField;
            }
            set {
                this.objectVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("schemaVersion", DataType="String64")]
        public string schemaVersion {
            get {
                return this.schemaVersionField;
            }
            set {
                this.schemaVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuid", DataType="UuidString")]
        public string uuid {
            get {
                return this.uuidField;
            }
            set {
                this.uuidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A lifecycle state like actual, required, planned, predicted, etc. This is used to qualify any top-level element (from Epicentre 2.1).</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute("A lifecycle state like actual, required, planned, predicted, etc. This is used to" +
            " qualify any top-level element (from Epicentre 2.1).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("existenceKind", DataType="ExistenceKind")]
        public ExistenceKind existenceKind {
            get {
                return this.existenceKindField;
            }
            set {
                this.existenceKindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool existenceKindSpecified {
            get {
                return this.existenceKindFieldSpecified;
            }
            set {
                this.existenceKindFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ObjectAlias {
        
        private string identifierField;
        
        private string descriptionField;
        
        private string authorityField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Identifier", DataType="String64")]
        public string Identifier {
            get {
                return this.identifierField;
            }
            set {
                this.identifierField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("authority", DataType="String64")]
        public string authority {
            get {
                return this.authorityField;
            }
            set {
                this.authorityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class Citation {
        
        private string titleField;
        
        private string originatorField;
        
        private Energistics.DataAccess.Timestamp creationField;
        
        private string formatField;
        
        private string editorField;
        
        private Energistics.DataAccess.Timestamp lastUpdateField;
        
        private bool lastUpdateFieldSpecified;
        
        private string descriptionField;
        
        private string descriptiveKeywordsField;
        
        /// <remarks/>
        /// <summary>One line description/name of the object.  This is the equivalent in ISO 19115 of CI_Citation.title  Legacy DCGroup - title</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(256)]
        [System.ComponentModel.DescriptionAttribute("One line description/name of the object.  This is the equivalent in ISO 19115 of " +
            "CI_Citation.title  Legacy DCGroup - title")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Title", DataType="String256")]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name (or other human-readable identifier) of the person who initially originated the object or document in the source application. If that information is not available, then this is the user who created the format file. The originator remains the same as the object is subsequently edited.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is "originator".  Legacy DCGroup - author</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"Name (or other human-readable identifier) of the person who initially originated the object or document in the source application. If that information is not available, then this is the user who created the format file. The originator remains the same as the object is subsequently edited.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is ""originator"".  Legacy DCGroup - author")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Originator", DataType="String64")]
        public string Originator {
            get {
                return this.originatorField;
            }
            set {
                this.originatorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the document was created in the source application or, if that information is not available, when it was saved to the file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”creation"  Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - created</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Date and time the document was created in the source application or, if that information is not available, when it was saved to the file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”creation""  Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - created")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Creation", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp Creation {
            get {
                return this.creationField;
            }
            set {
                this.creationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Software or service that was used to originate the object and the file format created. Must be human and machine readable and unambiguously identify the software by including the company name, software name and software version. This is the equivalent in ISO 19115 to the distributionFormat.MD_Format.  The ISO format for this is [vendor:applicationName]/fileExtension where the application name includes the version number of the application.  SIG Implementation Notes - Legacy DCGroup from v1.1 - publisher - fileExtension is not relevant and will be ignored if present. - vendor and applicationName are mandatory.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute(@"Software or service that was used to originate the object and the file format created. Must be human and machine readable and unambiguously identify the software by including the company name, software name and software version. This is the equivalent in ISO 19115 to the distributionFormat.MD_Format.  The ISO format for this is [vendor:applicationName]/fileExtension where the application name includes the version number of the application.  SIG Implementation Notes - Legacy DCGroup from v1.1 - publisher - fileExtension is not relevant and will be ignored if present. - vendor and applicationName are mandatory.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Format", DataType="String2000")]
        public string Format {
            get {
                return this.formatField;
            }
            set {
                this.formatField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name (or other human-readable identifier) of the last person who updated the object.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is "editor".  Legacy DCGroup - contributor</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"Name (or other human-readable identifier) of the last person who updated the object.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is ""editor"".  Legacy DCGroup - contributor")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Editor", DataType="String64")]
        public string Editor {
            get {
                return this.editorField;
            }
            set {
                this.editorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the document was last modified in the source application or, if that information is not available, when it was last saved to the RESQML format file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”lastUpdate"   Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - modified</summary>
        [System.ComponentModel.DescriptionAttribute(@"Date and time the document was last modified in the source application or, if that information is not available, when it was last saved to the RESQML format file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”lastUpdate""   Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - modified")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LastUpdate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp LastUpdate {
            get {
                return this.lastUpdateField;
            }
            set {
                this.lastUpdateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastUpdateSpecified {
            get {
                return this.lastUpdateFieldSpecified;
            }
            set {
                this.lastUpdateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>User descriptive comments about the object. Intended for end-user use (human readable); not necessarily meant to be used by software.  This is the equivalent of the ISO 19115 abstract.CharacterString  Legacy DCGroup - description</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("User descriptive comments about the object. Intended for end-user use (human read" +
            "able); not necessarily meant to be used by software.  This is the equivalent of " +
            "the ISO 19115 abstract.CharacterString  Legacy DCGroup - description")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Key words to describe the activity, for example, history match or volumetric calculations, relevant to this object. Intended to be used in a search function by software.  This is the equivalent in ISO 19115 of descriptiveKeywords.MD_Keywords  Legacy DCGroup - subject</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute(@"Key words to describe the activity, for example, history match or volumetric calculations, relevant to this object. Intended to be used in a search function by software.  This is the equivalent in ISO 19115 of descriptiveKeywords.MD_Keywords  Legacy DCGroup - subject")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DescriptiveKeywords", DataType="String2000")]
        public string DescriptiveKeywords {
            get {
                return this.descriptiveKeywordsField;
            }
            set {
                this.descriptiveKeywordsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class CustomData {
        
        private System.Xml.XmlElement[] anyField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ExtensionNameValue {
        
        private string nameField;
        
        private StringMeasure valueField;
        
        private MeasureClass measureClassField;
        
        private bool measureClassFieldSpecified;
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private bool dTimFieldSpecified;
        
        private long indexField;
        
        private bool indexFieldSpecified;
        
        private string descriptionField;
        
        /// <remarks/>
        /// <summary>The name of the extension. Each standard name should document the expected measure class. Each standard name should document the expected maximum size.  For numeric values the size should be in terms of xsd types such as int, long, short, byte, float or double. For strings, the maximum length should be defined in number of characters. Local extensions to the list of standard names are allowed but it is strongly recommended that the names and definitions be approved by the  respective SIG Technical Team before use.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"The name of the extension. Each standard name should document the expected measure class. Each standard name should document the expected maximum size.  For numeric values the size should be in terms of xsd types such as int, long, short, byte, float or double. For strings, the maximum length should be defined in number of characters. Local extensions to the list of standard names are allowed but it is strongly recommended that the names and definitions be approved by the  respective SIG Technical Team before use.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The value of the extension. This may also include a uom attribute. The content should conform to constraints defined by the data type.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The value of the extension. This may also include a uom attribute. The content sh" +
            "ould conform to constraints defined by the data type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="StringMeasure")]
        public StringMeasure Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of the measure. For example, "length". This should be specified if the value requires a unit of measure.</summary>
        [System.ComponentModel.DescriptionAttribute("The kind of the measure. For example, \"length\". This should be specified if the v" +
            "alue requires a unit of measure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasureClass", DataType="MeasureClass")]
        public MeasureClass MeasureClass {
            get {
                return this.measureClassField;
            }
            set {
                this.measureClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MeasureClassSpecified {
            get {
                return this.measureClassFieldSpecified;
            }
            set {
                this.measureClassFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date-time associated with the value.</summary>
        [System.ComponentModel.DescriptionAttribute("The date-time associated with the value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimSpecified {
            get {
                return this.dTimFieldSpecified;
            }
            set {
                this.dTimFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indexes things with the same name.  That is, 1 indicates the first one, 2 indicates the second one, etc.</summary>
        [System.ComponentModel.DescriptionAttribute("Indexes things with the same name.  That is, 1 indicates the first one, 2 indicat" +
            "es the second one, etc.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="long")]
        public long Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IndexSpecified {
            get {
                return this.indexFieldSpecified;
            }
            set {
                this.indexFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A textual description of the extension.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A textual description of the extension.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class StringMeasure {
        
        private string uomField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="UnitOfMeasureExt")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ExistenceKind {
        
        /// <remarks/>
        actual,
        
        /// <remarks/>
        planned,
        
        /// <remarks/>
        simulated,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class WellTest : AbstractObject {
        
        private EndpointQualifiedDateTime dTimMinField;
        
        private EndpointQualifiedDateTime dTimMaxField;
        
        private System.DateTime dTimCurrentField;
        
        private bool dTimCurrentFieldSpecified;
        
        private TemperaturePressure standardTempPresField;
        
        private System.DateTime testDateField;
        
        private bool testDateFieldSpecified;
        
        private System.DateTime previousTestDateField;
        
        private bool previousTestDateFieldSpecified;
        
        private System.DateTime lastValidTestField;
        
        private bool lastValidTestFieldSpecified;
        
        private TestReason testReasonField;
        
        private bool testReasonFieldSpecified;
        
        private string testTypeField;
        
        private string productFlowPortReferenceField;
        
        private string productFlowUnitReferenceField;
        
        private string productFlowModelReferenceField;
        
        private ValidationState validationStateField;
        
        private bool validationStateFieldSpecified;
        
        private DataObjectReference wellReferenceField;
        
        private AbstractWellTest wellTestDataField;
        
        private WellTestValidationOperation[] validationOperationField;
        
        /// <remarks/>
        /// <summary>The minimum time index contained within the object. The minimum and maximum indexes are server query parameters and will be populated with valid values in a "get" result. That is, all wellTest for a well in the specified period defined by the min/max.</summary>
        [System.ComponentModel.DescriptionAttribute("The minimum time index contained within the object. The minimum and maximum index" +
            "es are server query parameters and will be populated with valid values in a \"get" +
            "\" result. That is, all wellTest for a well in the specified period defined by th" +
            "e min/max.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimMin", DataType="EndpointQualifiedDateTime")]
        public EndpointQualifiedDateTime DTimMin {
            get {
                return this.dTimMinField;
            }
            set {
                this.dTimMinField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum time index contained within the object. The minimum and maximum indexes are server query parameters and will be populated with valid values in a "get" result.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum time index contained within the object. The minimum and maximum index" +
            "es are server query parameters and will be populated with valid values in a \"get" +
            "\" result.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimMax", DataType="EndpointQualifiedDateTime")]
        public EndpointQualifiedDateTime DTimMax {
            get {
                return this.dTimMaxField;
            }
            set {
                this.dTimMaxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The definition of the "current time" index for this object. The current time index is a server query parameter which requests the selection of a single node from a recurring set (e.g., the data related to one point in a time series). That is, the "most recent" (at or before the specified time) wellTest for a well.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The definition of the ""current time"" index for this object. The current time index is a server query parameter which requests the selection of a single node from a recurring set (e.g., the data related to one point in a time series). That is, the ""most recent"" (at or before the specified time) wellTest for a well.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimCurrent", DataType="dateTime")]
        public System.DateTime DTimCurrent {
            get {
                return this.dTimCurrentField;
            }
            set {
                this.dTimCurrentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimCurrentSpecified {
            get {
                return this.dTimCurrentFieldSpecified;
            }
            set {
                this.dTimCurrentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the standard temperature and pressure to which all standard volumes in this report have been corrected. This applies to all elements whose name is suffixed by StdTempPres.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines the standard temperature and pressure to which all standard volumes in th" +
            "is report have been corrected. This applies to all elements whose name is suffix" +
            "ed by StdTempPres.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StandardTempPres", DataType="TemperaturePressure")]
        public TemperaturePressure StandardTempPres {
            get {
                return this.standardTempPresField;
            }
            set {
                this.standardTempPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date-time of the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("The date-time of the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestDate", DataType="dateTime")]
        public System.DateTime TestDate {
            get {
                return this.testDateField;
            }
            set {
                this.testDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TestDateSpecified {
            get {
                return this.testDateFieldSpecified;
            }
            set {
                this.testDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date-time of the previous well test.</summary>
        [System.ComponentModel.DescriptionAttribute("The date-time of the previous well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PreviousTestDate", DataType="dateTime")]
        public System.DateTime PreviousTestDate {
            get {
                return this.previousTestDateField;
            }
            set {
                this.previousTestDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PreviousTestDateSpecified {
            get {
                return this.previousTestDateFieldSpecified;
            }
            set {
                this.previousTestDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date-time of the last valid well test.</summary>
        [System.ComponentModel.DescriptionAttribute("The date-time of the last valid well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LastValidTest", DataType="dateTime")]
        public System.DateTime LastValidTest {
            get {
                return this.lastValidTestField;
            }
            set {
                this.lastValidTestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastValidTestSpecified {
            get {
                return this.lastValidTestFieldSpecified;
            }
            set {
                this.lastValidTestFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reason for the well test: initial, periodic, revision. See enum TestReason.</summary>
        [System.ComponentModel.DescriptionAttribute("The reason for the well test: initial, periodic, revision. See enum TestReason.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestReason", DataType="TestReason")]
        public TestReason TestReason {
            get {
                return this.testReasonField;
            }
            set {
                this.testReasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TestReasonSpecified {
            get {
                return this.testReasonFieldSpecified;
            }
            set {
                this.testReasonFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of well production test.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The type of well production test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestType", DataType="String64")]
        public string TestType {
            get {
                return this.testTypeField;
            }
            set {
                this.testTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A port on a product flow unit that is represented by this test.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A port on a product flow unit that is represented by this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductFlowPortReference", DataType="String64")]
        public string ProductFlowPortReference {
            get {
                return this.productFlowPortReferenceField;
            }
            set {
                this.productFlowPortReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The product flow unit represented by the port. This is defined in the Product Flow Model.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The product flow unit represented by the port. This is defined in the Product Flo" +
            "w Model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductFlowUnitReference", DataType="String64")]
        public string ProductFlowUnitReference {
            get {
                return this.productFlowUnitReferenceField;
            }
            set {
                this.productFlowUnitReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The Product Flow Model that represents the above product flow unit.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The Product Flow Model that represents the above product flow unit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductFlowModelReference", DataType="String64")]
        public string ProductFlowModelReference {
            get {
                return this.productFlowModelReferenceField;
            }
            set {
                this.productFlowModelReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The overall state of the test with respect to validation operations.</summary>
        [System.ComponentModel.DescriptionAttribute("The overall state of the test with respect to validation operations.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ValidationState", DataType="ValidationState")]
        public ValidationState ValidationState {
            get {
                return this.validationStateField;
            }
            set {
                this.validationStateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidationStateSpecified {
            get {
                return this.validationStateFieldSpecified;
            }
            set {
                this.validationStateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellReference", DataType="DataObjectReference")]
        public DataObjectReference WellReference {
            get {
                return this.wellReferenceField;
            }
            set {
                this.wellReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellTestData", DataType="AbstractWellTest")]
        public AbstractWellTest WellTestData {
            get {
                return this.wellTestDataField;
            }
            set {
                this.wellTestDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ValidationOperation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ValidationOperation", DataType="WellTestValidationOperation")]
        public WellTestValidationOperation[] ValidationOperation {
            get {
                return this.validationOperationField;
            }
            set {
                this.validationOperationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class EndpointQualifiedDateTime {
        
        private EndpointQualifier endpointField;
        
        private bool endpointFieldSpecified;
        
        /// <remarks/>
        /// <summary>The default is "inclusive".</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute("The default is \"inclusive\".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("endpoint", DataType="EndpointQualifier")]
        public EndpointQualifier endpoint {
            get {
                return this.endpointField;
            }
            set {
                this.endpointField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endpointSpecified {
            get {
                return this.endpointFieldSpecified;
            }
            set {
                this.endpointFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum EndpointQualifier {
        
        /// <remarks/>
        exclusive,
        
        /// <remarks/>
        extensive,
        
        /// <remarks/>
        inclusive,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("overlap extensive")]
        overlapextensive,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum TestReason {
        
        /// <remarks/>
        initial,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        periodic,
        
        /// <remarks/>
        revision,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ValidationState {
        
        /// <remarks/>
        unvalidated,
        
        /// <remarks/>
        validated,
        
        /// <remarks/>
        validating,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class TimeSeriesStatistic : AbstractObject {
        
        private KeywordValueStruct[] keyField;
        
        private string unitField;
        
        private MeasureClass measureClassField;
        
        private bool measureClassFieldSpecified;
        
        private string commentField;
        
        private DimensionlessMeasure minimumField;
        
        private DimensionlessMeasure maximumField;
        
        private DimensionlessMeasure sumField;
        
        private DimensionlessMeasure meanField;
        
        private DimensionlessMeasure medianField;
        
        private DimensionlessMeasure standardDeviationField;
        
        private TimeSeriesThreshold timeAtThresholdField;
        
        private EndpointDateTime dTimMinField;
        
        private EndpointDateTime dTimMaxField;
        
        /// <remarks/>
        /// <summary>A keyword value pair which characterizes the underlying nature of this value. The key value may provide part of the unique identity of an instance of a concept or it may characterize the underlying concept. The key value will be defined within the specified keyword naming system. This is essentially a classification of the data in the specified system (keyword).</summary>
        [System.Xml.Serialization.XmlElementAttribute("Key")]
        [System.ComponentModel.DescriptionAttribute(@"A keyword value pair which characterizes the underlying nature of this value. The key value may provide part of the unique identity of an instance of a concept or it may characterize the underlying concept. The key value will be defined within the specified keyword naming system. This is essentially a classification of the data in the specified system (keyword).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Key", DataType="KeywordValueStruct")]
        public KeywordValueStruct[] Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>If the time series is a measure then this specifies the unit of measure. The unit acronym must be chosen from the list that is valid for the measure class. If this is specified then the measure class must be specified.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(32)]
        [System.ComponentModel.DescriptionAttribute("If the time series is a measure then this specifies the unit of measure. The unit" +
            " acronym must be chosen from the list that is valid for the measure class. If th" +
            "is is specified then the measure class must be specified.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unit", DataType="UomEnum")]
        public string Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the type of measure that the time series represents. If this is specified then unit must be specified. This may be redundant to some information in the keys but it is important for allowing an application to understand the nature of a measure value even if it does not understand all of the underlying nature.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Defines the type of measure that the time series represents. If this is specified then unit must be specified. This may be redundant to some information in the keys but it is important for allowing an application to understand the nature of a measure value even if it does not understand all of the underlying nature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasureClass", DataType="MeasureClass")]
        public MeasureClass MeasureClass {
            get {
                return this.measureClassField;
            }
            set {
                this.measureClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MeasureClassSpecified {
            get {
                return this.measureClassFieldSpecified;
            }
            set {
                this.measureClassFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A comment about the time series.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A comment about the time series.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The minimum value within the time range of dTimMin to dTimMax. Element "unit" defines the unit of measure of this value.</summary>
        [System.ComponentModel.DescriptionAttribute("The minimum value within the time range of dTimMin to dTimMax. Element \"unit\" def" +
            "ines the unit of measure of this value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Minimum", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure Minimum {
            get {
                return this.minimumField;
            }
            set {
                this.minimumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum value within the time range of dTimMin to dTimMax. Element "unit" defines the unit of measure of this value.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum value within the time range of dTimMin to dTimMax. Element \"unit\" def" +
            "ines the unit of measure of this value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Maximum", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure Maximum {
            get {
                return this.maximumField;
            }
            set {
                this.maximumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The sum of all values within the time range of dTimMin to dTimMax. Element "unit" defines the unit of measure of this value.</summary>
        [System.ComponentModel.DescriptionAttribute("The sum of all values within the time range of dTimMin to dTimMax. Element \"unit\"" +
            " defines the unit of measure of this value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sum", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure Sum {
            get {
                return this.sumField;
            }
            set {
                this.sumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The arithmetic mean (sum divided by count) of all values within the time range of dTimMin to dTimMax. Element "unit" defines the unit of measure of this value.</summary>
        [System.ComponentModel.DescriptionAttribute("The arithmetic mean (sum divided by count) of all values within the time range of" +
            " dTimMin to dTimMax. Element \"unit\" defines the unit of measure of this value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mean", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure Mean {
            get {
                return this.meanField;
            }
            set {
                this.meanField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The median value of all values within the time range of dTimMin to dTimMax. Element "unit" defines the unit of measure of this value.</summary>
        [System.ComponentModel.DescriptionAttribute("The median value of all values within the time range of dTimMin to dTimMax. Eleme" +
            "nt \"unit\" defines the unit of measure of this value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Median", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure Median {
            get {
                return this.medianField;
            }
            set {
                this.medianField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The standard deviation of all values within the time range of dTimMin to dTimMax. Element "unit" defines the unit of measure of this value.</summary>
        [System.ComponentModel.DescriptionAttribute("The standard deviation of all values within the time range of dTimMin to dTimMax." +
            " Element \"unit\" defines the unit of measure of this value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StandardDeviation", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure StandardDeviation {
            get {
                return this.standardDeviationField;
            }
            set {
                this.standardDeviationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines a value threshold window and the time duration where values  (within the time range of dTimMin to dTimMax) were within that window.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines a value threshold window and the time duration where values  (within the " +
            "time range of dTimMin to dTimMax) were within that window.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeAtThreshold", DataType="TimeSeriesThreshold")]
        public TimeSeriesThreshold TimeAtThreshold {
            get {
                return this.timeAtThresholdField;
            }
            set {
                this.timeAtThresholdField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimMin", DataType="EndpointDateTime")]
        public EndpointDateTime DTimMin {
            get {
                return this.dTimMinField;
            }
            set {
                this.dTimMinField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimMax", DataType="EndpointDateTime")]
        public EndpointDateTime DTimMax {
            get {
                return this.dTimMaxField;
            }
            set {
                this.dTimMaxField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class TimeSeriesData : AbstractObject {
        
        private KeywordValueStruct[] keyField;
        
        private string unitField;
        
        private MeasureClass measureClassField;
        
        private bool measureClassFieldSpecified;
        
        private string commentField;
        
        private AbstractValue[] dataValueField;
        
        /// <remarks/>
        /// <summary>A keyword value pair which characterizes the underlying nature of this value. The key value may provide part of the unique identity of an instance of a concept or it may characterize the underlying concept. The key value is defined within the specified keyword-naming system. This is essentially a classification of the data in the specified system (keyword).</summary>
        [System.Xml.Serialization.XmlElementAttribute("Key")]
        [System.ComponentModel.DescriptionAttribute(@"A keyword value pair which characterizes the underlying nature of this value. The key value may provide part of the unique identity of an instance of a concept or it may characterize the underlying concept. The key value is defined within the specified keyword-naming system. This is essentially a classification of the data in the specified system (keyword).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Key", DataType="KeywordValueStruct")]
        public KeywordValueStruct[] Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>If the time series is a measure, then this specifies the unit of measure. The unit acronym must be chosen from the list that is valid for the measure class. If this is specified,  then the measure class must be specified.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(32)]
        [System.ComponentModel.DescriptionAttribute("If the time series is a measure, then this specifies the unit of measure. The uni" +
            "t acronym must be chosen from the list that is valid for the measure class. If t" +
            "his is specified,  then the measure class must be specified.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unit", DataType="UomEnum")]
        public string Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the type of measure that the time series represents. If this is specified then unit must be specified. This may be redundant to some information in the keys, but it is important for allowing an application to understand the nature of a measure value, even if it does not understand all of the underlying nature.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Defines the type of measure that the time series represents. If this is specified then unit must be specified. This may be redundant to some information in the keys, but it is important for allowing an application to understand the nature of a measure value, even if it does not understand all of the underlying nature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasureClass", DataType="MeasureClass")]
        public MeasureClass MeasureClass {
            get {
                return this.measureClassField;
            }
            set {
                this.measureClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MeasureClassSpecified {
            get {
                return this.measureClassFieldSpecified;
            }
            set {
                this.measureClassFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A comment about the time series.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A comment about the time series.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DataValue")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DataValue", DataType="AbstractValue")]
        public AbstractValue[] DataValue {
            get {
                return this.dataValueField;
            }
            set {
                this.dataValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class Report : AbstractObject {
        
        private string kindField;
        
        private System.DateTime dateField;
        
        private bool dateFieldSpecified;
        
        private System.DateTime dateEndField;
        
        private bool dateEndFieldSpecified;
        
        private string monthField;
        
        private string yearField;
        
        private string commentField;
        
        private string reportVersionField;
        
        private ReportVersionStatus reportStatusField;
        
        private bool reportStatusFieldSpecified;
        
        private FacilityIdentifierStruct installationField;
        
        private FacilityIdentifierStruct[] contextFacilityField;
        
        private System.DateTime issueDateField;
        
        private bool issueDateFieldSpecified;
        
        private System.DateTime approvalDateField;
        
        private bool approvalDateFieldSpecified;
        
        private BusinessAssociate operatorField;
        
        private BusinessAssociate issuedByField;
        
        private BusinessAssociate approverField;
        
        private GeographicContext geographicContextField;
        
        /// <remarks/>
        /// <summary>The type of report. This should define and constrain the expected content of the report.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The type of report. This should define and constrain the expected content of the " +
            "report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="String64")]
        public string Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date that the report represents (i.e., not a year or month). Only one of date, month or year should be specified.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date that the report represents (i.e., not a year or month). Only one of date" +
            ", month or year should be specified.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Date", DataType="date")]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateSpecified {
            get {
                return this.dateFieldSpecified;
            }
            set {
                this.dateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ending date that the report represents, if it represents an interval.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The ending date that the report represents, if it represents an interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DateEnd", DataType="date")]
        public System.DateTime DateEnd {
            get {
                return this.dateEndField;
            }
            set {
                this.dateEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateEndSpecified {
            get {
                return this.dateEndFieldSpecified;
            }
            set {
                this.dateEndFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The month that the report represents (i.e., not a year, date or date range). Only one of date, month or year should be specified.</summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([1-9][0-9][0-9][0-9])-(([0][0-9])|([1][0-2]))")]
        [System.ComponentModel.DescriptionAttribute("The month that the report represents (i.e., not a year, date or date range). Only" +
            " one of date, month or year should be specified.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Month", DataType="CalendarMonth")]
        public string Month {
            get {
                return this.monthField;
            }
            set {
                this.monthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The year that the report represents (i.e., not a month, date or date range). Only one of date, month or year should be specified.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(1000D, 9999D)]
        [System.ComponentModel.DescriptionAttribute("The year that the report represents (i.e., not a month, date or date range). Only" +
            " one of date, month or year should be specified.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Year", DataType="CalendarYear")]
        public string Year {
            get {
                return this.yearField;
            }
            set {
                this.yearField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A textual comment about the report.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A textual comment about the report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The current report version.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The current report version.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReportVersion", DataType="String64")]
        public string ReportVersion {
            get {
                return this.reportVersionField;
            }
            set {
                this.reportVersionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The current document version status.</summary>
        [System.ComponentModel.DescriptionAttribute("The current document version status.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReportStatus", DataType="ReportVersionStatus")]
        public ReportVersionStatus ReportStatus {
            get {
                return this.reportStatusField;
            }
            set {
                this.reportStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReportStatusSpecified {
            get {
                return this.reportStatusFieldSpecified;
            }
            set {
                this.reportStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the facility which is represented by this report. The name can be qualified by a naming system. This also defines the kind of facility.</summary>
        [System.ComponentModel.DescriptionAttribute("The name of the facility which is represented by this report. The name can be qua" +
            "lified by a naming system. This also defines the kind of facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Installation", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct Installation {
            get {
                return this.installationField;
            }
            set {
                this.installationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name and type of a facility whose context is relevant to the represented installation.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ContextFacility")]
        [System.ComponentModel.DescriptionAttribute("The name and type of a facility whose context is relevant to the represented inst" +
            "allation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContextFacility", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct[] ContextFacility {
            get {
                return this.contextFacilityField;
            }
            set {
                this.contextFacilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date that the report was issued.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date that the report was issued.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IssueDate", DataType="date")]
        public System.DateTime IssueDate {
            get {
                return this.issueDateField;
            }
            set {
                this.issueDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IssueDateSpecified {
            get {
                return this.issueDateFieldSpecified;
            }
            set {
                this.issueDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date that the report was approved.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date that the report was approved.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ApprovalDate", DataType="date")]
        public System.DateTime ApprovalDate {
            get {
                return this.approvalDateField;
            }
            set {
                this.approvalDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ApprovalDateSpecified {
            get {
                return this.approvalDateFieldSpecified;
            }
            set {
                this.approvalDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Operator", DataType="BusinessAssociate")]
        public BusinessAssociate Operator {
            get {
                return this.operatorField;
            }
            set {
                this.operatorField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IssuedBy", DataType="BusinessAssociate")]
        public BusinessAssociate IssuedBy {
            get {
                return this.issuedByField;
            }
            set {
                this.issuedByField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Approver", DataType="BusinessAssociate")]
        public BusinessAssociate Approver {
            get {
                return this.approverField;
            }
            set {
                this.approverField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeographicContext", DataType="GeographicContext")]
        public GeographicContext GeographicContext {
            get {
                return this.geographicContextField;
            }
            set {
                this.geographicContextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ReportVersionStatus {
        
        /// <remarks/>
        final,
        
        /// <remarks/>
        preliminary,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class ProductionOperation : AbstractObject {
        
        private FacilityIdentifierStruct installationField;
        
        private FacilityIdentifierStruct[] contextFacilityField;
        
        private string kindField;
        
        private ReportingDurationKind periodKindField;
        
        private bool periodKindFieldSpecified;
        
        private System.DateTime issueDateField;
        
        private bool issueDateFieldSpecified;
        
        private NameStruct titleField;
        
        private System.DateTime approvalDateField;
        
        private bool approvalDateFieldSpecified;
        
        private ProductionOperationInstallationReport[] installationReportField;
        
        private BusinessAssociate issuedByField;
        
        private BusinessAssociate approverField;
        
        private BusinessAssociate operatorField;
        
        private GeographicContext geographicContextField;
        
        private AbstractDateTimeClass dateTimeField;
        
        /// <remarks/>
        /// <summary>The name of the facility which is represented by this report. The name can be qualified by a naming system. This also defines the kind of facility.</summary>
        [System.ComponentModel.DescriptionAttribute("The name of the facility which is represented by this report. The name can be qua" +
            "lified by a naming system. This also defines the kind of facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Installation", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct Installation {
            get {
                return this.installationField;
            }
            set {
                this.installationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name and type of a facility whose context is relevant to the represented installation.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ContextFacility")]
        [System.ComponentModel.DescriptionAttribute("The name and type of a facility whose context is relevant to the represented inst" +
            "allation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContextFacility", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct[] ContextFacility {
            get {
                return this.contextFacilityField;
            }
            set {
                this.contextFacilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of report.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The type of report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="String64")]
        public string Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of period that is being reported. This value must be consistent with the reporting start and end values.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of period that is being reported. This value must be consistent with the" +
            " reporting start and end values.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PeriodKind", DataType="ReportingDurationKind")]
        public ReportingDurationKind PeriodKind {
            get {
                return this.periodKindField;
            }
            set {
                this.periodKindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PeriodKindSpecified {
            get {
                return this.periodKindFieldSpecified;
            }
            set {
                this.periodKindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date that the report was issued.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date that the report was issued.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IssueDate", DataType="date")]
        public System.DateTime IssueDate {
            get {
                return this.issueDateField;
            }
            set {
                this.issueDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IssueDateSpecified {
            get {
                return this.issueDateFieldSpecified;
            }
            set {
                this.issueDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The title of the report, if different from the name of the report.</summary>
        [System.ComponentModel.DescriptionAttribute("The title of the report, if different from the name of the report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Title", DataType="NameStruct")]
        public NameStruct Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date that the report was approved.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date that the report was approved.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ApprovalDate", DataType="date")]
        public System.DateTime ApprovalDate {
            get {
                return this.approvalDateField;
            }
            set {
                this.approvalDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ApprovalDateSpecified {
            get {
                return this.approvalDateFieldSpecified;
            }
            set {
                this.approvalDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A report for each installation</summary>
        [System.Xml.Serialization.XmlElementAttribute("InstallationReport")]
        [System.ComponentModel.DescriptionAttribute("A report for each installation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InstallationReport", DataType="ProductionOperationInstallationReport")]
        public ProductionOperationInstallationReport[] InstallationReport {
            get {
                return this.installationReportField;
            }
            set {
                this.installationReportField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IssuedBy", DataType="BusinessAssociate")]
        public BusinessAssociate IssuedBy {
            get {
                return this.issuedByField;
            }
            set {
                this.issuedByField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Approver", DataType="BusinessAssociate")]
        public BusinessAssociate Approver {
            get {
                return this.approverField;
            }
            set {
                this.approverField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Operator", DataType="BusinessAssociate")]
        public BusinessAssociate Operator {
            get {
                return this.operatorField;
            }
            set {
                this.operatorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The geographic context of the report.</summary>
        [System.ComponentModel.DescriptionAttribute("The geographic context of the report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeographicContext", DataType="GeographicContext")]
        public GeographicContext GeographicContext {
            get {
                return this.geographicContextField;
            }
            set {
                this.geographicContextField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DateTime", DataType="AbstractDateTimeClass")]
        public AbstractDateTimeClass DateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StartEndTime))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StartEndDate))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractDateTimeClass {
        
        private Energistics.DataAccess.Timestamp dTimeField;
        
        private bool dTimeFieldSpecified;
        
        private System.DateTime dateField;
        
        private bool dateFieldSpecified;
        
        private string monthField;
        
        /// <remarks/>
        /// <summary>DTime.</summary>
        [System.ComponentModel.DescriptionAttribute("DTime.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTime", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTime {
            get {
                return this.dTimeField;
            }
            set {
                this.dTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimeSpecified {
            get {
                return this.dTimeFieldSpecified;
            }
            set {
                this.dTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("Date.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Date", DataType="date")]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateSpecified {
            get {
                return this.dateFieldSpecified;
            }
            set {
                this.dateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Month.</summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([1-9][0-9][0-9][0-9])-(([0][0-9])|([1][0-2]))")]
        [System.ComponentModel.DescriptionAttribute("Month.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Month", DataType="CalendarMonth")]
        public string Month {
            get {
                return this.monthField;
            }
            set {
                this.monthField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class StartEndTime : AbstractDateTimeClass {
        
        private Energistics.DataAccess.Timestamp dTimStartField;
        
        private bool dTimStartFieldSpecified;
        
        private Energistics.DataAccess.Timestamp dTimEndField;
        
        private bool dTimEndFieldSpecified;
        
        /// <remarks/>
        /// <summary>The beginning date and time that the period represents.</summary>
        [System.ComponentModel.DescriptionAttribute("The beginning date and time that the period represents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimStartSpecified {
            get {
                return this.dTimStartFieldSpecified;
            }
            set {
                this.dTimStartFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ending date and time that the period represents.</summary>
        [System.ComponentModel.DescriptionAttribute("The ending date and time that the period represents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimEndSpecified {
            get {
                return this.dTimEndFieldSpecified;
            }
            set {
                this.dTimEndFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class StartEndDate : AbstractDateTimeClass {
        
        private System.DateTime dateStartField;
        
        private bool dateStartFieldSpecified;
        
        private System.DateTime dateEndField;
        
        private bool dateEndFieldSpecified;
        
        /// <remarks/>
        /// <summary>The beginning date that the period represents.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The beginning date that the period represents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DateStart", DataType="date")]
        public System.DateTime DateStart {
            get {
                return this.dateStartField;
            }
            set {
                this.dateStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateStartSpecified {
            get {
                return this.dateStartFieldSpecified;
            }
            set {
                this.dateStartFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ending date that the period represents.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The ending date that the period represents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DateEnd", DataType="date")]
        public System.DateTime DateEnd {
            get {
                return this.dateEndField;
            }
            set {
                this.dateEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateEndSpecified {
            get {
                return this.dateEndFieldSpecified;
            }
            set {
                this.dateEndFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class WftRun : AbstractObject {
        
        private bool objectGrowingField;
        
        private bool objectGrowingFieldSpecified;
        
        private DataObjectReference tieInLogReferenceField;
        
        private string serviceCompanyField;
        
        private System.DateTime dTimStartField;
        
        private bool dTimStartFieldSpecified;
        
        private System.DateTime dTimEndField;
        
        private bool dTimEndFieldSpecified;
        
        private MeasuredDepthCoord minIndexField;
        
        private MeasuredDepthCoord maxIndexField;
        
        private DataObjectReference wellboreReferenceField;
        
        private WftTestResult[] resultField;
        
        private WftStation[] stationField;
        
        /// <remarks/>
        /// <summary>The growing state of the object. This value is only relevant within the context of a server. This is an API server parameter related to a WITSML "growing" object (e.g., trajectory, logs, mud logs).</summary>
        [System.ComponentModel.DescriptionAttribute("The growing state of the object. This value is only relevant within the context o" +
            "f a server. This is an API server parameter related to a WITSML \"growing\" object" +
            " (e.g., trajectory, logs, mud logs).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ObjectGrowing", DataType="boolean")]
        public bool ObjectGrowing {
            get {
                return this.objectGrowingField;
            }
            set {
                this.objectGrowingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ObjectGrowingSpecified {
            get {
                return this.objectGrowingFieldSpecified;
            }
            set {
                this.objectGrowingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>References a log containing a WFT tie-in (e.g. gamma ray) log vs. depth data.</summary>
        [System.ComponentModel.DescriptionAttribute("References a log containing a WFT tie-in (e.g. gamma ray) log vs. depth data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TieInLogReference", DataType="DataObjectReference")]
        public DataObjectReference TieInLogReference {
            get {
                return this.tieInLogReferenceField;
            }
            set {
                this.tieInLogReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of contractor who provided the service.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of contractor who provided the service.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ServiceCompany", DataType="String64")]
        public string ServiceCompany {
            get {
                return this.serviceCompanyField;
            }
            set {
                this.serviceCompanyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time when the data collection started.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time when the data collection started.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="dateTime")]
        public System.DateTime DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimStartSpecified {
            get {
                return this.dTimStartFieldSpecified;
            }
            set {
                this.dTimStartFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time when the data collection completed.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time when the data collection completed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="dateTime")]
        public System.DateTime DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimEndSpecified {
            get {
                return this.dTimEndFieldSpecified;
            }
            set {
                this.dTimEndFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The minimum station depth within this WFT run. This is an API "structural-range" query parameter for growing objects.</summary>
        [System.ComponentModel.DescriptionAttribute("The minimum station depth within this WFT run. This is an API \"structural-range\" " +
            "query parameter for growing objects.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MinIndex", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MinIndex {
            get {
                return this.minIndexField;
            }
            set {
                this.minIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum station depth within this WFT. This is an API "structural-range" query parameter for growing objects.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum station depth within this WFT. This is an API \"structural-range\" quer" +
            "y parameter for growing objects.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxIndex", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MaxIndex {
            get {
                return this.maxIndexField;
            }
            set {
                this.maxIndexField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreReference", DataType="DataObjectReference")]
        public DataObjectReference WellboreReference {
            get {
                return this.wellboreReferenceField;
            }
            set {
                this.wellboreReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Result")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Result", DataType="WftTestResult")]
        public WftTestResult[] Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Station")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Station", DataType="WftStation")]
        public WftStation[] Station {
            get {
                return this.stationField;
            }
            set {
                this.stationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class FluidSampleAcquisitionJob : AbstractObject {
        
        private System.DateTime estimatedStartDateField;
        
        private bool estimatedStartDateFieldSpecified;
        
        private string operationField;
        
        private DataObjectReference[] fieldNoteReferenceField;
        
        private FluidSampleAcquisition[] fluidSampleAcquisitionField;
        
        private DataObjectReference fluidSystemReferenceField;
        
        /// <remarks/>
        /// <summary>The date when fluid acquisition started.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date when fluid acquisition started.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EstimatedStartDate", DataType="date")]
        public System.DateTime EstimatedStartDate {
            get {
                return this.estimatedStartDateField;
            }
            set {
                this.estimatedStartDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EstimatedStartDateSpecified {
            get {
                return this.estimatedStartDateFieldSpecified;
            }
            set {
                this.estimatedStartDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to an operation described in another data object, which contains the details of the acquisition.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A reference to an operation described in another data object, which contains the " +
            "details of the acquisition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Operation", DataType="String64")]
        public string Operation {
            get {
                return this.operationField;
            }
            set {
                this.operationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reference uid of an attached object that stores the field note.</summary>
        [System.Xml.Serialization.XmlElementAttribute("FieldNoteReference")]
        [System.ComponentModel.DescriptionAttribute("The reference uid of an attached object that stores the field note.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FieldNoteReference", DataType="DataObjectReference")]
        public DataObjectReference[] FieldNoteReference {
            get {
                return this.fieldNoteReferenceField;
            }
            set {
                this.fieldNoteReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("FluidSampleAcquisition")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidSampleAcquisition", DataType="FluidSampleAcquisition")]
        public FluidSampleAcquisition[] FluidSampleAcquisition {
            get {
                return this.fluidSampleAcquisitionField;
            }
            set {
                this.fluidSampleAcquisitionField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidSystemReference", DataType="DataObjectReference")]
        public DataObjectReference FluidSystemReference {
            get {
                return this.fluidSystemReferenceField;
            }
            set {
                this.fluidSystemReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class FluidSystem : AbstractObject {
        
        private AbstractTemperaturePressure standardConditionsField;
        
        private ReservoirFluidKind reservoirFluidKindField;
        
        private PhasePresent phasesPresentField;
        
        private bool phasesPresentFieldSpecified;
        
        private ReservoirLifeCycleState reservoirLifeCycleStateField;
        
        private bool reservoirLifeCycleStateFieldSpecified;
        
        private DataObjectReference[] rockFluidUnitFeatureReferenceField;
        
        private SaturationPressure saturationPressureField;
        
        private VolumePerVolumeMeasure solutionGORField;
        
        private string remarkField;
        
        private FormationWater formationWaterField;
        
        private StockTankOil stockTankOilField;
        
        private NaturalGas naturalGasField;
        
        /// <remarks/>
        /// <summary>The standard temperature and pressure used for the representation of this fluid system.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The standard temperature and pressure used for the representation of this fluid s" +
            "ystem.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StandardConditions", DataType="AbstractTemperaturePressure")]
        public AbstractTemperaturePressure StandardConditions {
            get {
                return this.standardConditionsField;
            }
            set {
                this.standardConditionsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of reservoir fluid for this fluid system. Enum. See reservoir fluid kind.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The kind of reservoir fluid for this fluid system. Enum. See reservoir fluid kind" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReservoirFluidKind", DataType="ReservoirFluidKind")]
        public ReservoirFluidKind ReservoirFluidKind {
            get {
                return this.reservoirFluidKindField;
            }
            set {
                this.reservoirFluidKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The phases present for this fluid system. Enum. See phase present.</summary>
        [System.ComponentModel.DescriptionAttribute("The phases present for this fluid system. Enum. See phase present.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PhasesPresent", DataType="PhasePresent")]
        public PhasePresent PhasesPresent {
            get {
                return this.phasesPresentField;
            }
            set {
                this.phasesPresentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PhasesPresentSpecified {
            get {
                return this.phasesPresentFieldSpecified;
            }
            set {
                this.phasesPresentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reservoir life cycle state for this fluid system. Enum. See reservoir life cycle state.</summary>
        [System.ComponentModel.DescriptionAttribute("The reservoir life cycle state for this fluid system. Enum. See reservoir life cy" +
            "cle state.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReservoirLifeCycleState", DataType="ReservoirLifeCycleState")]
        public ReservoirLifeCycleState ReservoirLifeCycleState {
            get {
                return this.reservoirLifeCycleStateField;
            }
            set {
                this.reservoirLifeCycleStateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReservoirLifeCycleStateSpecified {
            get {
                return this.reservoirLifeCycleStateFieldSpecified;
            }
            set {
                this.reservoirLifeCycleStateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to a RockFluidUnitFeature (a RESQML data object).</summary>
        [System.Xml.Serialization.XmlElementAttribute("RockFluidUnitFeatureReference")]
        [System.ComponentModel.DescriptionAttribute("Reference to a RockFluidUnitFeature (a RESQML data object).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RockFluidUnitFeatureReference", DataType="DataObjectReference")]
        public DataObjectReference[] RockFluidUnitFeatureReference {
            get {
                return this.rockFluidUnitFeatureReferenceField;
            }
            set {
                this.rockFluidUnitFeatureReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The saturation (or bubble point) pressure for the fluid system.</summary>
        [System.ComponentModel.DescriptionAttribute("The saturation (or bubble point) pressure for the fluid system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SaturationPressure", DataType="SaturationPressure")]
        public SaturationPressure SaturationPressure {
            get {
                return this.saturationPressureField;
            }
            set {
                this.saturationPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The solution gas-oil ratio for this fluid system.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The solution gas-oil ratio for this fluid system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SolutionGOR", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure SolutionGOR {
            get {
                return this.solutionGORField;
            }
            set {
                this.solutionGORField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FormationWater", DataType="FormationWater")]
        public FormationWater FormationWater {
            get {
                return this.formationWaterField;
            }
            set {
                this.formationWaterField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StockTankOil", DataType="StockTankOil")]
        public StockTankOil StockTankOil {
            get {
                return this.stockTankOilField;
            }
            set {
                this.stockTankOilField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NaturalGas", DataType="NaturalGas")]
        public NaturalGas NaturalGas {
            get {
                return this.naturalGasField;
            }
            set {
                this.naturalGasField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ReservoirFluidKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("black oil")]
        blackoil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("critical or near critical")]
        criticalornearcritical,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dry gas")]
        drygas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heavy oil")]
        heavyoil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wet gas or condensate")]
        wetgasorcondensate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volatile oil")]
        volatileoil,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum PhasePresent {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas and oil and water")]
        gasandoilandwater,
        
        /// <remarks/>
        water,
        
        /// <remarks/>
        gas,
        
        /// <remarks/>
        oil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil and gas")]
        oilandgas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil and water")]
        oilandwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas and water")]
        gasandwater,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ReservoirLifeCycleState {
        
        /// <remarks/>
        abandoned,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("primary production")]
        primaryproduction,
        
        /// <remarks/>
        prospect,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tertiary production")]
        tertiaryproduction,
        
        /// <remarks/>
        undeveloped,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("secondary recovery")]
        secondaryrecovery,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class ReportingHierarchy : AbstractObject {
        
        private ReportingHierarchyNode[] reportingNodeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ReportingNode")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReportingNode", DataType="ReportingHierarchyNode")]
        public ReportingHierarchyNode[] ReportingNode {
            get {
                return this.reportingNodeField;
            }
            set {
                this.reportingNodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ReportingHierarchyNode {
        
        private ReportingHierarchyNode[] childNodeField;
        
        private DataObjectReference reportingEnitityReferenceField;
        
        private string idField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ChildNode")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChildNode", DataType="ReportingHierarchyNode")]
        public ReportingHierarchyNode[] ChildNode {
            get {
                return this.childNodeField;
            }
            set {
                this.childNodeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReportingEnitityReference", DataType="DataObjectReference")]
        public DataObjectReference ReportingEnitityReference {
            get {
                return this.reportingEnitityReferenceField;
            }
            set {
                this.reportingEnitityReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The identification of node.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The identification of node.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("id", DataType="String64")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The entity name.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The entity name.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("name", DataType="String64")]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class ReportingEntity : AbstractObject {
        
        private ReportingEntityKind kindField;
        
        private DataObjectReference targetFacilityReferenceField;
        
        private ObjectAlias[] aliasField;
        
        /// <remarks/>
        /// <summary>The type of reporting entity.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The type of reporting entity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="ReportingEntityKind")]
        public ReportingEntityKind Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the target facility.</summary>
        [System.ComponentModel.DescriptionAttribute("Reference to the target facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TargetFacilityReference", DataType="DataObjectReference")]
        public DataObjectReference TargetFacilityReference {
            get {
                return this.targetFacilityReferenceField;
            }
            set {
                this.targetFacilityReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Alias")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Alias", DataType="ObjectAlias")]
        public ObjectAlias[] Alias {
            get {
                return this.aliasField;
            }
            set {
                this.aliasField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ReportingEntityKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("business unit")]
        businessunit,
        
        /// <remarks/>
        fpso,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well completion")]
        wellcompletion,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wellbore completion")]
        wellborecompletion,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("commercial entity")]
        commercialentity,
        
        /// <remarks/>
        company,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("contact interval")]
        contactinterval,
        
        /// <remarks/>
        country,
        
        /// <remarks/>
        county,
        
        /// <remarks/>
        facility,
        
        /// <remarks/>
        field,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("field - part")]
        fieldpart,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("flow meter")]
        flowmeter,
        
        /// <remarks/>
        formation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas plant")]
        gasplant,
        
        /// <remarks/>
        lease,
        
        /// <remarks/>
        license,
        
        /// <remarks/>
        pipeline,
        
        /// <remarks/>
        platform,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("production processing facility")]
        productionprocessingfacility,
        
        /// <remarks/>
        reservoir,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rock-fluid unit feature")]
        rockfluidunitfeature,
        
        /// <remarks/>
        state,
        
        /// <remarks/>
        tank,
        
        /// <remarks/>
        terminal,
        
        /// <remarks/>
        well,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well group")]
        wellgroup,
        
        /// <remarks/>
        wellbore,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil tanker")]
        oiltanker,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tanker truck")]
        tankertruck,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WaterAnalysis))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HydrocarbonAnalysis))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class FluidAnalysis : AbstractObject {
        
        private System.DateTime requestDateField;
        
        private bool requestDateFieldSpecified;
        
        private string analysisDescriptionField;
        
        private string analysisPurposeField;
        
        private string analysisSiteField;
        
        private string labContactField;
        
        private AbstractTemperaturePressure standardConditionsField;
        
        private SampleQuality analysisQualityField;
        
        private string remarkField;
        
        private DataObjectReference fluidSampleReferenceField;
        
        private FluidAnalysisReport[] fluidAnalysisReportField;
        
        private SampleContaminant[] sampleContaminantField;
        
        /// <remarks/>
        /// <summary>The date the analysis was requested.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date the analysis was requested.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RequestDate", DataType="date")]
        public System.DateTime RequestDate {
            get {
                return this.requestDateField;
            }
            set {
                this.requestDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RequestDateSpecified {
            get {
                return this.requestDateFieldSpecified;
            }
            set {
                this.requestDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The description about the analysis.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The description about the analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AnalysisDescription", DataType="String2000")]
        public string AnalysisDescription {
            get {
                return this.analysisDescriptionField;
            }
            set {
                this.analysisDescriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The purpose of this analysis.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The purpose of this analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AnalysisPurpose", DataType="String2000")]
        public string AnalysisPurpose {
            get {
                return this.analysisPurposeField;
            }
            set {
                this.analysisPurposeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The location site of the analysis.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The location site of the analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AnalysisSite", DataType="String2000")]
        public string AnalysisSite {
            get {
                return this.analysisSiteField;
            }
            set {
                this.analysisSiteField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the analyst or user who is responsible for the results.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the analyst or user who is responsible for the results.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LabContact", DataType="String64")]
        public string LabContact {
            get {
                return this.labContactField;
            }
            set {
                this.labContactField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The standard temperature and pressure used for the representation of this fluid analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The standard temperature and pressure used for the representation of this fluid a" +
            "nalysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StandardConditions", DataType="AbstractTemperaturePressure")]
        public AbstractTemperaturePressure StandardConditions {
            get {
                return this.standardConditionsField;
            }
            set {
                this.standardConditionsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Enum for the quality of this analysis.  See sample quality.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Enum for the quality of this analysis.  See sample quality.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AnalysisQuality", DataType="SampleQuality")]
        public SampleQuality AnalysisQuality {
            get {
                return this.analysisQualityField;
            }
            set {
                this.analysisQualityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidSampleReference", DataType="DataObjectReference")]
        public DataObjectReference FluidSampleReference {
            get {
                return this.fluidSampleReferenceField;
            }
            set {
                this.fluidSampleReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("FluidAnalysisReport")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidAnalysisReport", DataType="FluidAnalysisReport")]
        public FluidAnalysisReport[] FluidAnalysisReport {
            get {
                return this.fluidAnalysisReportField;
            }
            set {
                this.fluidAnalysisReportField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SampleContaminant")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleContaminant", DataType="SampleContaminant")]
        public SampleContaminant[] SampleContaminant {
            get {
                return this.sampleContaminantField;
            }
            set {
                this.sampleContaminantField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum SampleQuality {
        
        /// <remarks/>
        invalid,
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        valid,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidAnalysisReport {
        
        private string reportIdentifierField;
        
        private System.DateTime reportDateField;
        
        private bool reportDateFieldSpecified;
        
        private string authorField;
        
        private string analysisLaboratoryField;
        
        private DataObjectReference reportDocumentReferenceField;
        
        private ReportLocation[] reportLocationField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The identifier of this fluid analysis report.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The identifier of this fluid analysis report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReportIdentifier", DataType="String64")]
        public string ReportIdentifier {
            get {
                return this.reportIdentifierField;
            }
            set {
                this.reportIdentifierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date of this report.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date of this report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReportDate", DataType="date")]
        public System.DateTime ReportDate {
            get {
                return this.reportDateField;
            }
            set {
                this.reportDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReportDateSpecified {
            get {
                return this.reportDateFieldSpecified;
            }
            set {
                this.reportDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The author of this fluid analysis report.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The author of this fluid analysis report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Author", DataType="String64")]
        public string Author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The laboratory that provided this fluid analysis report.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The laboratory that provided this fluid analysis report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AnalysisLaboratory", DataType="String64")]
        public string AnalysisLaboratory {
            get {
                return this.analysisLaboratoryField;
            }
            set {
                this.analysisLaboratoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to the report document, which will use the Energistics Attachment Object.</summary>
        [System.ComponentModel.DescriptionAttribute("A reference to the report document, which will use the Energistics Attachment Obj" +
            "ect.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReportDocumentReference", DataType="DataObjectReference")]
        public DataObjectReference ReportDocumentReference {
            get {
                return this.reportDocumentReferenceField;
            }
            set {
                this.reportDocumentReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ReportLocation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReportLocation", DataType="ReportLocation")]
        public ReportLocation[] ReportLocation {
            get {
                return this.reportLocationField;
            }
            set {
                this.reportLocationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ReportLocation {
        
        private System.DateTime locationDateField;
        
        private bool locationDateFieldSpecified;
        
        private string locationTypeField;
        
        private string locationField;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The date when this report was stored in this location.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date when this report was stored in this location.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocationDate", DataType="date")]
        public System.DateTime LocationDate {
            get {
                return this.locationDateField;
            }
            set {
                this.locationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LocationDateSpecified {
            get {
                return this.locationDateFieldSpecified;
            }
            set {
                this.locationDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of location in which the report is to be located.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The type of location in which the report is to be located.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocationType", DataType="String64")]
        public string LocationType {
            get {
                return this.locationTypeField;
            }
            set {
                this.locationTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The location of the report, e.g., a path or URL.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The location of the report, e.g., a path or URL.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Location", DataType="String64")]
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class SampleContaminant {
        
        private FluidContaminant contaminantKindField;
        
        private MassPerMassMeasure weightFractionStockTankField;
        
        private VolumePerVolumeMeasure volumeFractionStockTankField;
        
        private MassPerMassMeasure weightFractionLiveSampleField;
        
        private VolumePerVolumeMeasure volumeFractionLiveSampleField;
        
        private MolecularWeightMeasure molecularWeightField;
        
        private MassPerVolumeMeasure densityField;
        
        private LiquidComposition contaminantCompositionField;
        
        private string descriptionField;
        
        private string remarkField;
        
        private DataObjectReference sampleOfContaminantReferenceField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The kind of contaminant.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The kind of contaminant.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContaminantKind", DataType="FluidContaminant")]
        public FluidContaminant ContaminantKind {
            get {
                return this.contaminantKindField;
            }
            set {
                this.contaminantKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The contaminant weight percent in stock tank oil.</summary>
        [System.ComponentModel.DescriptionAttribute("The contaminant weight percent in stock tank oil.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WeightFractionStockTank", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure WeightFractionStockTank {
            get {
                return this.weightFractionStockTankField;
            }
            set {
                this.weightFractionStockTankField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The contaminant volume percent in stock tank oil.</summary>
        [System.ComponentModel.DescriptionAttribute("The contaminant volume percent in stock tank oil.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeFractionStockTank", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure VolumeFractionStockTank {
            get {
                return this.volumeFractionStockTankField;
            }
            set {
                this.volumeFractionStockTankField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The weight fraction of contaminant in the fluid sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The weight fraction of contaminant in the fluid sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WeightFractionLiveSample", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure WeightFractionLiveSample {
            get {
                return this.weightFractionLiveSampleField;
            }
            set {
                this.weightFractionLiveSampleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volume fraction of contaminant in the fluid sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The volume fraction of contaminant in the fluid sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeFractionLiveSample", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure VolumeFractionLiveSample {
            get {
                return this.volumeFractionLiveSampleField;
            }
            set {
                this.volumeFractionLiveSampleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The molecular weight of contaminant in the fluid sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The molecular weight of contaminant in the fluid sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MolecularWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure MolecularWeight {
            get {
                return this.molecularWeightField;
            }
            set {
                this.molecularWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of contaminant in the fluid sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of contaminant in the fluid sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Density", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Density {
            get {
                return this.densityField;
            }
            set {
                this.densityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The composition of contaminant in the fluid sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The composition of contaminant in the fluid sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContaminantComposition", DataType="LiquidComposition")]
        public LiquidComposition ContaminantComposition {
            get {
                return this.contaminantCompositionField;
            }
            set {
                this.contaminantCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the contaminant.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Description of the contaminant.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleOfContaminantReference", DataType="DataObjectReference")]
        public DataObjectReference SampleOfContaminantReference {
            get {
                return this.sampleOfContaminantReferenceField;
            }
            set {
                this.sampleOfContaminantReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum FluidContaminant {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cement fluids")]
        cementfluids,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("completion fluid")]
        completionfluid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling mud")]
        drillingmud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("extraneous gas")]
        extraneousgas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("extraneous oil")]
        extraneousoil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("extraneous water")]
        extraneouswater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("formation water")]
        formationwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("treatment chemicals")]
        treatmentchemicals,
        
        /// <remarks/>
        solid,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class LiquidComposition {
        
        private string remarkField;
        
        private FluidComponent[] liquidComponentField;
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("LiquidComponent")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidComponent", DataType="FluidComponent")]
        public FluidComponent[] LiquidComponent {
            get {
                return this.liquidComponentField;
            }
            set {
                this.liquidComponentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WaterAnalysis : FluidAnalysis {
        
        private SampleIntegrityAndPreparation sampleIntegrityAndPreparationField;
        
        private WaterAnalysisTest[] waterAnalysisTestField;
        
        private WaterSampleComponent[] waterSampleComponentField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleIntegrityAndPreparation", DataType="SampleIntegrityAndPreparation")]
        public SampleIntegrityAndPreparation SampleIntegrityAndPreparation {
            get {
                return this.sampleIntegrityAndPreparationField;
            }
            set {
                this.sampleIntegrityAndPreparationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("WaterAnalysisTest")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterAnalysisTest", DataType="WaterAnalysisTest")]
        public WaterAnalysisTest[] WaterAnalysisTest {
            get {
                return this.waterAnalysisTestField;
            }
            set {
                this.waterAnalysisTestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("WaterSampleComponent")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterSampleComponent", DataType="WaterSampleComponent")]
        public WaterSampleComponent[] WaterSampleComponent {
            get {
                return this.waterSampleComponentField;
            }
            set {
                this.waterSampleComponentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class SampleIntegrityAndPreparation {
        
        private System.DateTime openingDateField;
        
        private VolumeMeasure initialVolumeField;
        
        private AbstractPressureValue openingPressureField;
        
        private ThermodynamicTemperatureMeasure openingTemperatureField;
        
        private SaturationPressure saturationPressureField;
        
        private SaturationTemperature saturationTemperatureField;
        
        private VolumePerVolumeMeasure basicSedimentAndWaterField;
        
        private VolumeMeasure freeWaterVolumeField;
        
        private MassPerMassMeasure waterContentInHydrocarbonField;
        
        private string openingRemarkField;
        
        private SampleRestoration[] sampleRestorationField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The date when this fluid sample was opened.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The date when this fluid sample was opened.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpeningDate", DataType="date")]
        public System.DateTime OpeningDate {
            get {
                return this.openingDateField;
            }
            set {
                this.openingDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The initial volume of the sample when prepared for analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The initial volume of the sample when prepared for analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InitialVolume", DataType="VolumeMeasure")]
        public VolumeMeasure InitialVolume {
            get {
                return this.initialVolumeField;
            }
            set {
                this.initialVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The opening pressure of the sample when prepared for analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The opening pressure of the sample when prepared for analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpeningPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue OpeningPressure {
            get {
                return this.openingPressureField;
            }
            set {
                this.openingPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The opening temperature of the sample when prepared for analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The opening temperature of the sample when prepared for analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpeningTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure OpeningTemperature {
            get {
                return this.openingTemperatureField;
            }
            set {
                this.openingTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The saturation (or bubble point) pressure measured in this test.</summary>
        [System.ComponentModel.DescriptionAttribute("The saturation (or bubble point) pressure measured in this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SaturationPressure", DataType="SaturationPressure")]
        public SaturationPressure SaturationPressure {
            get {
                return this.saturationPressureField;
            }
            set {
                this.saturationPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The saturation temperature of the sample when prepared for analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The saturation temperature of the sample when prepared for analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SaturationTemperature", DataType="SaturationTemperature")]
        public SaturationTemperature SaturationTemperature {
            get {
                return this.saturationTemperatureField;
            }
            set {
                this.saturationTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The basic sediment and water of the sample when prepared for analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The basic sediment and water of the sample when prepared for analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BasicSedimentAndWater", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure BasicSedimentAndWater {
            get {
                return this.basicSedimentAndWaterField;
            }
            set {
                this.basicSedimentAndWaterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The free water volume of the sample when prepared for analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The free water volume of the sample when prepared for analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FreeWaterVolume", DataType="VolumeMeasure")]
        public VolumeMeasure FreeWaterVolume {
            get {
                return this.freeWaterVolumeField;
            }
            set {
                this.freeWaterVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water content in hydrocarbon of the sample when prepared for analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The water content in hydrocarbon of the sample when prepared for analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterContentInHydrocarbon", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure WaterContentInHydrocarbon {
            get {
                return this.waterContentInHydrocarbonField;
            }
            set {
                this.waterContentInHydrocarbonField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about the opening of the sample.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about the opening of the sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpeningRemark", DataType="String2000")]
        public string OpeningRemark {
            get {
                return this.openingRemarkField;
            }
            set {
                this.openingRemarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SampleRestoration")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleRestoration", DataType="SampleRestoration")]
        public SampleRestoration[] SampleRestoration {
            get {
                return this.sampleRestorationField;
            }
            set {
                this.sampleRestorationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class SampleRestoration {
        
        private System.DateTime dateField;
        
        private bool dateFieldSpecified;
        
        private TimeMeasure restorationDurationField;
        
        private AbstractPressureValue restorationPressureField;
        
        private ThermodynamicTemperatureMeasure restorationTemperatureField;
        
        private string mixingMechanismField;
        
        private string remarkField;
        
        /// <remarks/>
        /// <summary>The date when this test was performed.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date when this test was performed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Date", DataType="date")]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateSpecified {
            get {
                return this.dateFieldSpecified;
            }
            set {
                this.dateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The restoration duration when the sample is restored in preparation for analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The restoration duration when the sample is restored in preparation for analysis." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RestorationDuration", DataType="TimeMeasure")]
        public TimeMeasure RestorationDuration {
            get {
                return this.restorationDurationField;
            }
            set {
                this.restorationDurationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The restoration pressure when the sample is restored in preparation for analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The restoration pressure when the sample is restored in preparation for analysis." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RestorationPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue RestorationPressure {
            get {
                return this.restorationPressureField;
            }
            set {
                this.restorationPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The restoration temperature when the sample is restored in preparation for analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The restoration temperature when the sample is restored in preparation for analys" +
            "is.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RestorationTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure RestorationTemperature {
            get {
                return this.restorationTemperatureField;
            }
            set {
                this.restorationTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mixing mechanism when the sample is restored in preparation for analysis.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The mixing mechanism when the sample is restored in preparation for analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MixingMechanism", DataType="String64")]
        public string MixingMechanism {
            get {
                return this.mixingMechanismField;
            }
            set {
                this.mixingMechanismField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WaterAnalysisTest {
        
        private long testNumberField;
        
        private double liquidGravityField;
        
        private bool liquidGravityFieldSpecified;
        
        private MassPerMassMeasure salinityField;
        
        private MassPerMassMeasure totalDissolvedSolidsField;
        
        private MassPerMassMeasure totalSuspendedSolidsField;
        
        private MassPerMassMeasure totalHardnessField;
        
        private double phField;
        
        private bool phFieldSpecified;
        
        private ElectricalResistivityMeasure resistivityField;
        
        private string remarkField;
        
        private WaterAnalysisTestStep[] waterAnalysisTestStepField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>An integer number to identify this test in a sequence of tests.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("An integer number to identify this test in a sequence of tests.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestNumber", DataType="NonNegativeLong")]
        public long TestNumber {
            get {
                return this.testNumberField;
            }
            set {
                this.testNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The liquid gravity for the water analysis test.</summary>
        [System.ComponentModel.DescriptionAttribute("The liquid gravity for the water analysis test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidGravity", DataType="double")]
        public double LiquidGravity {
            get {
                return this.liquidGravityField;
            }
            set {
                this.liquidGravityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LiquidGravitySpecified {
            get {
                return this.liquidGravityFieldSpecified;
            }
            set {
                this.liquidGravityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The salinity for the water analysis test.</summary>
        [System.ComponentModel.DescriptionAttribute("The salinity for the water analysis test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Salinity", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure Salinity {
            get {
                return this.salinityField;
            }
            set {
                this.salinityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total dissolved solids for the water analysis test.</summary>
        [System.ComponentModel.DescriptionAttribute("The total dissolved solids for the water analysis test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalDissolvedSolids", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure TotalDissolvedSolids {
            get {
                return this.totalDissolvedSolidsField;
            }
            set {
                this.totalDissolvedSolidsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total suspended solids for the water analysis test.</summary>
        [System.ComponentModel.DescriptionAttribute("The total suspended solids for the water analysis test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalSuspendedSolids", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure TotalSuspendedSolids {
            get {
                return this.totalSuspendedSolidsField;
            }
            set {
                this.totalSuspendedSolidsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total water hardness for the water analysis test.</summary>
        [System.ComponentModel.DescriptionAttribute("The total water hardness for the water analysis test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalHardness", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure TotalHardness {
            get {
                return this.totalHardnessField;
            }
            set {
                this.totalHardnessField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ph for the water analysis test.</summary>
        [System.ComponentModel.DescriptionAttribute("The ph for the water analysis test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PH", DataType="double")]
        public double PH {
            get {
                return this.phField;
            }
            set {
                this.phField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PHSpecified {
            get {
                return this.phFieldSpecified;
            }
            set {
                this.phFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The resistivity for the water analysis test.</summary>
        [System.ComponentModel.DescriptionAttribute("The resistivity for the water analysis test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Resistivity", DataType="ElectricalResistivityMeasure")]
        public ElectricalResistivityMeasure Resistivity {
            get {
                return this.resistivityField;
            }
            set {
                this.resistivityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the Fluid Analysis Result.</summary>
        [System.Xml.Serialization.XmlElementAttribute("WaterAnalysisTestStep")]
        [System.ComponentModel.DescriptionAttribute("The name of the Fluid Analysis Result.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterAnalysisTestStep", DataType="WaterAnalysisTestStep")]
        public WaterAnalysisTestStep[] WaterAnalysisTestStep {
            get {
                return this.waterAnalysisTestStepField;
            }
            set {
                this.waterAnalysisTestStepField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ElectricalResistivityMeasure {
        
        private ElectricalResistivityUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ElectricalResistivityUom")]
        public ElectricalResistivityUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricalResistivityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kohm.m")]
        kohmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nohm.mil2/ft")]
        nohmmil2ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nohm.mm2/m")]
        nohmmm2m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.cm")]
        ohmcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.m")]
        ohmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.m2/m")]
        ohmm2m,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WaterAnalysisTestStep {
        
        private long stepNumberField;
        
        private PressureMeasure stepPressureField;
        
        private ThermodynamicTemperatureMeasure stepTemperatureField;
        
        private VolumePerVolumeMeasure solutionGasWaterRatioField;
        
        private VolumePerVolumeMeasure waterFormationVolumeFactorField;
        
        private ReciprocalPressureMeasure waterIsothermalCompressibilityField;
        
        private MassPerVolumeMeasure waterDensityField;
        
        private VolumePerMassMeasure waterSpecificVolumeField;
        
        private MassPerVolumePerPressureMeasureExt waterDensityChangeWithPressureField;
        
        private MassPerVolumePerTemperatureMeasureExt waterDensityChangeWithTemperatureField;
        
        private DynamicViscosityMeasure waterViscosityField;
        
        private ReciprocalPressureMeasure waterViscousCompressibilityField;
        
        private EnergyPerVolumeMeasure waterSpecificHeatField;
        
        private EnergyMeasure waterHeatCapacityField;
        
        private ElectricConductivityMeasure waterThermalConductivityField;
        
        private VolumetricThermalExpansionMeasure waterThermalExpansionField;
        
        private MolarEnergyMeasure waterEnthalpyField;
        
        private EnergyLengthPerTimeAreaTemperatureMeasure waterEntropyField;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The step number is the index of a (P,T) step in the overall test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The step number is the index of a (P,T) step in the overall test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepNumber", DataType="NonNegativeLong")]
        public long StepNumber {
            get {
                return this.stepNumberField;
            }
            set {
                this.stepNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure for this test step.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The pressure for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepPressure", DataType="PressureMeasure")]
        public PressureMeasure StepPressure {
            get {
                return this.stepPressureField;
            }
            set {
                this.stepPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature for this test step.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The temperature for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure StepTemperature {
            get {
                return this.stepTemperatureField;
            }
            set {
                this.stepTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The solution gas-water ratio for the water analysis test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The solution gas-water ratio for the water analysis test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SolutionGasWaterRatio", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure SolutionGasWaterRatio {
            get {
                return this.solutionGasWaterRatioField;
            }
            set {
                this.solutionGasWaterRatioField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water formation volume factor for the water analysis test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The water formation volume factor for the water analysis test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterFormationVolumeFactor", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure WaterFormationVolumeFactor {
            get {
                return this.waterFormationVolumeFactorField;
            }
            set {
                this.waterFormationVolumeFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water isothermal compressibility for the water analysis test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The water isothermal compressibility for the water analysis test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterIsothermalCompressibility", DataType="ReciprocalPressureMeasure")]
        public ReciprocalPressureMeasure WaterIsothermalCompressibility {
            get {
                return this.waterIsothermalCompressibilityField;
            }
            set {
                this.waterIsothermalCompressibilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water density for the water analysis test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The water density for the water analysis test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure WaterDensity {
            get {
                return this.waterDensityField;
            }
            set {
                this.waterDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water specific volume for the water analysis test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The water specific volume for the water analysis test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterSpecificVolume", DataType="VolumePerMassMeasure")]
        public VolumePerMassMeasure WaterSpecificVolume {
            get {
                return this.waterSpecificVolumeField;
            }
            set {
                this.waterSpecificVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water density change with pressure for the water analysis test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The water density change with pressure for the water analysis test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterDensityChangeWithPressure", DataType="MassPerVolumePerPressureMeasureExt")]
        public MassPerVolumePerPressureMeasureExt WaterDensityChangeWithPressure {
            get {
                return this.waterDensityChangeWithPressureField;
            }
            set {
                this.waterDensityChangeWithPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water density change with temperature for the water analysis test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The water density change with temperature for the water analysis test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterDensityChangeWithTemperature", DataType="MassPerVolumePerTemperatureMeasureExt")]
        public MassPerVolumePerTemperatureMeasureExt WaterDensityChangeWithTemperature {
            get {
                return this.waterDensityChangeWithTemperatureField;
            }
            set {
                this.waterDensityChangeWithTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water viscosity for the water analysis test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The water viscosity for the water analysis test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure WaterViscosity {
            get {
                return this.waterViscosityField;
            }
            set {
                this.waterViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water viscous compressibility for the water analysis test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The water viscous compressibility for the water analysis test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterViscousCompressibility", DataType="ReciprocalPressureMeasure")]
        public ReciprocalPressureMeasure WaterViscousCompressibility {
            get {
                return this.waterViscousCompressibilityField;
            }
            set {
                this.waterViscousCompressibilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water specific heat for the water analysis test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The water specific heat for the water analysis test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterSpecificHeat", DataType="EnergyPerVolumeMeasure")]
        public EnergyPerVolumeMeasure WaterSpecificHeat {
            get {
                return this.waterSpecificHeatField;
            }
            set {
                this.waterSpecificHeatField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water heat capacity for the water analysis test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The water heat capacity for the water analysis test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterHeatCapacity", DataType="EnergyMeasure")]
        public EnergyMeasure WaterHeatCapacity {
            get {
                return this.waterHeatCapacityField;
            }
            set {
                this.waterHeatCapacityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water thermal conductivity for the water analysis test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The water thermal conductivity for the water analysis test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterThermalConductivity", DataType="ElectricConductivityMeasure")]
        public ElectricConductivityMeasure WaterThermalConductivity {
            get {
                return this.waterThermalConductivityField;
            }
            set {
                this.waterThermalConductivityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water thermal expansion for the water analysis test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The water thermal expansion for the water analysis test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterThermalExpansion", DataType="VolumetricThermalExpansionMeasure")]
        public VolumetricThermalExpansionMeasure WaterThermalExpansion {
            get {
                return this.waterThermalExpansionField;
            }
            set {
                this.waterThermalExpansionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water enthalpy for the water analysis test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The water enthalpy for the water analysis test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterEnthalpy", DataType="MolarEnergyMeasure")]
        public MolarEnergyMeasure WaterEnthalpy {
            get {
                return this.waterEnthalpyField;
            }
            set {
                this.waterEnthalpyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water entropy for the water analysis test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The water entropy for the water analysis test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterEntropy", DataType="EnergyLengthPerTimeAreaTemperatureMeasure")]
        public EnergyLengthPerTimeAreaTemperatureMeasure WaterEntropy {
            get {
                return this.waterEntropyField;
            }
            set {
                this.waterEntropyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OilCompressibility))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ReciprocalPressureMeasure {
        
        private ReciprocalPressureUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ReciprocalPressureUom")]
        public ReciprocalPressureUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/bar")]
        Item1bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/kPa")]
        Item1kPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/Pa")]
        Item1Pa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/pPa")]
        Item1pPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/psi")]
        Item1psi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/upsi")]
        Item1upsi,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class OilCompressibility : ReciprocalPressureMeasure {
        
        private CompressibilityKind kindField;
        
        /// <remarks/>
        /// <summary>The kind of measurement for oil compressibility.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The kind of measurement for oil compressibility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("kind", DataType="CompressibilityKind")]
        public CompressibilityKind kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum CompressibilityKind {
        
        /// <remarks/>
        average,
        
        /// <remarks/>
        point,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VolumePerMassMeasure {
        
        private VolumePerMassUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="VolumePerMassUom")]
        public VolumePerMassUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 L/kg")]
        Item001Lkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ton[UK]")]
        bbltonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ton[US]")]
        bbltonUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/g")]
        cm3g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/kg")]
        dm3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/t")]
        dm3t,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/kg")]
        ft3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/lbm")]
        ft3lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/sack[94lbm]")]
        ft3sack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/lbm")]
        galUKlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/lbm")]
        galUSlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/sack[94lbm]")]
        galUSsack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ton[UK]")]
        galUStonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ton[US]")]
        galUStonUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/kg")]
        Lkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/t")]
        Lt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/ton[UK]")]
        LtonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/g")]
        m3g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kg")]
        m3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/t")]
        m3t,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/ton[UK]")]
        m3tonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/ton[US]")]
        m3tonUS,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class MassPerVolumePerPressureMeasureExt {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="MassPerVolumePerPressureUomExt")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class MassPerVolumePerTemperatureMeasureExt {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="MassPerVolumePerTemperatureUomExt")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class DynamicViscosityMeasure {
        
        private DynamicViscosityUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="DynamicViscosityUom")]
        public DynamicViscosityUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DynamicViscosityUom {
        
        /// <remarks/>
        cP,
        
        /// <remarks/>
        dP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne.s/cm2")]
        dynescm2,
        
        /// <remarks/>
        EP,
        
        /// <remarks/>
        fP,
        
        /// <remarks/>
        GP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.s/m2")]
        kgfsm2,
        
        /// <remarks/>
        kP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.s/ft2")]
        lbfsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.s/in2")]
        lbfsin2,
        
        /// <remarks/>
        mP,
        
        /// <remarks/>
        MP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mPa.s")]
        mPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.s/m2")]
        Nsm2,
        
        /// <remarks/>
        nP,
        
        /// <remarks/>
        P,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s")]
        Pas,
        
        /// <remarks/>
        pP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi.s")]
        psis,
        
        /// <remarks/>
        TP,
        
        /// <remarks/>
        uP,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ElectricConductivityMeasure {
        
        private ElectricConductivityUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ElectricConductivityUom")]
        public ElectricConductivityUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricConductivityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kS/m")]
        kSm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mS/cm")]
        mScm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mS/m")]
        mSm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("S/m")]
        Sm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VolumetricThermalExpansionMeasure {
        
        private VolumetricThermalExpansionUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="VolumetricThermalExpansionUom")]
        public VolumetricThermalExpansionUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumetricThermalExpansionUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/deltaC")]
        Item1deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/deltaF")]
        Item1deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/deltaK")]
        Item1deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/deltaR")]
        Item1deltaR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 m3/(m3.deltaC)")]
        Item1E6m3m3deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 m3/(m3.deltaF)")]
        Item1E6m3m3deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(m3.deltaK)")]
        m3m3deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]/deltaC")]
        ppmvoldeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]/deltaF")]
        ppmvoldeltaF,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class MolarEnergyMeasure {
        
        private MolarEnergyUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="MolarEnergyUom")]
        public MolarEnergyUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MolarEnergyUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/lbmol")]
        BtuITlbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/mol")]
        Jmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/mol")]
        kcalthmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/kmol")]
        kJkmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/kmol")]
        MJkmol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class EnergyLengthPerTimeAreaTemperatureMeasure {
        
        private EnergyLengthPerTimeAreaTemperatureUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="EnergyLengthPerTimeAreaTemperatureUom")]
        public EnergyLengthPerTimeAreaTemperatureUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyLengthPerTimeAreaTemperatureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT].in/(h.ft2.deltaF)")]
        BtuITinhft2deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J.m/(s.m2.deltaK)")]
        Jmsm2deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ.m/(h.m2.deltaK)")]
        kJmhm2deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m.deltaK)")]
        WmdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WaterSampleComponent {
        
        private string ionField;
        
        private MassPerMassMeasure massConcentrationField;
        
        private MassPerMassMeasure equivalentConcentrationField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The ion of the water sample component.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The ion of the water sample component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Ion", DataType="String64")]
        public string Ion {
            get {
                return this.ionField;
            }
            set {
                this.ionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mass concentration of the water sample component.</summary>
        [System.ComponentModel.DescriptionAttribute("The mass concentration of the water sample component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassConcentration", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure MassConcentration {
            get {
                return this.massConcentrationField;
            }
            set {
                this.massConcentrationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The equivalent concentration of the water sample component.</summary>
        [System.ComponentModel.DescriptionAttribute("The equivalent concentration of the water sample component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EquivalentConcentration", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure EquivalentConcentration {
            get {
                return this.equivalentConcentrationField;
            }
            set {
                this.equivalentConcentrationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class HydrocarbonAnalysis : FluidAnalysis {
        
        private FluidComponentCatalog fluidComponentCatalogField;
        
        private SampleIntegrityAndPreparation sampleIntegrityAndPreparationField;
        
        private AtmosphericFlashTestAndCompositionalAnalysis[] atmosphericFlashTestAndCompositionalAnalysisField;
        
        private ConstantCompositionExpansionTest[] constantCompositionExpansionTestField;
        
        private SaturationTest[] saturationTestField;
        
        private DifferentialLiberationTest[] differentialLiberationTestField;
        
        private ConstantVolumeDepletionTest[] constantVolumeDepletionTestField;
        
        private FluidSeparatorTest[] separatorTestField;
        
        private OtherMeasurementTest[] transportTestField;
        
        private VaporLiquidEquilibriumTest[] vaporLiquidEquilibriumTestField;
        
        private SwellingTest[] swellingTestField;
        
        private SlimTubeTest[] slimTubeTestField;
        
        private MultipleContactMiscibilityTest[] multipleContactMiscibilityTestField;
        
        private STOAnalysis[] sTOAnalysisField;
        
        private InterfacialTensionTest[] interfacialTensionTestField;
        
        /// <remarks/>
        /// <summary>The fluid component catalog for this fluid analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid component catalog for this fluid analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidComponentCatalog", DataType="FluidComponentCatalog")]
        public FluidComponentCatalog FluidComponentCatalog {
            get {
                return this.fluidComponentCatalogField;
            }
            set {
                this.fluidComponentCatalogField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The sample integrity and preparation procedure for this fluid analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The sample integrity and preparation procedure for this fluid analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleIntegrityAndPreparation", DataType="SampleIntegrityAndPreparation")]
        public SampleIntegrityAndPreparation SampleIntegrityAndPreparation {
            get {
                return this.sampleIntegrityAndPreparationField;
            }
            set {
                this.sampleIntegrityAndPreparationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An atmospheric flash test and compositional analysis test within this fluid analysis.</summary>
        [System.Xml.Serialization.XmlElementAttribute("AtmosphericFlashTestAndCompositionalAnalysis")]
        [System.ComponentModel.DescriptionAttribute("An atmospheric flash test and compositional analysis test within this fluid analy" +
            "sis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AtmosphericFlashTestAndCompositionalAnalysis", DataType="AtmosphericFlashTestAndCompositionalAnalysis")]
        public AtmosphericFlashTestAndCompositionalAnalysis[] AtmosphericFlashTestAndCompositionalAnalysis {
            get {
                return this.atmosphericFlashTestAndCompositionalAnalysisField;
            }
            set {
                this.atmosphericFlashTestAndCompositionalAnalysisField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A constant composition expansion test within this fluid analysis.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ConstantCompositionExpansionTest")]
        [System.ComponentModel.DescriptionAttribute("A constant composition expansion test within this fluid analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConstantCompositionExpansionTest", DataType="ConstantCompositionExpansionTest")]
        public ConstantCompositionExpansionTest[] ConstantCompositionExpansionTest {
            get {
                return this.constantCompositionExpansionTestField;
            }
            set {
                this.constantCompositionExpansionTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A saturation test within this fluid analysis.</summary>
        [System.Xml.Serialization.XmlElementAttribute("SaturationTest")]
        [System.ComponentModel.DescriptionAttribute("A saturation test within this fluid analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SaturationTest", DataType="SaturationTest")]
        public SaturationTest[] SaturationTest {
            get {
                return this.saturationTestField;
            }
            set {
                this.saturationTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A differential liberation test within this fluid analysis.</summary>
        [System.Xml.Serialization.XmlElementAttribute("DifferentialLiberationTest")]
        [System.ComponentModel.DescriptionAttribute("A differential liberation test within this fluid analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DifferentialLiberationTest", DataType="DifferentialLiberationTest")]
        public DifferentialLiberationTest[] DifferentialLiberationTest {
            get {
                return this.differentialLiberationTestField;
            }
            set {
                this.differentialLiberationTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A constant volume depletion test within this fluid analysis.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ConstantVolumeDepletionTest")]
        [System.ComponentModel.DescriptionAttribute("A constant volume depletion test within this fluid analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConstantVolumeDepletionTest", DataType="ConstantVolumeDepletionTest")]
        public ConstantVolumeDepletionTest[] ConstantVolumeDepletionTest {
            get {
                return this.constantVolumeDepletionTestField;
            }
            set {
                this.constantVolumeDepletionTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A separator test within this fluid analysis.</summary>
        [System.Xml.Serialization.XmlElementAttribute("SeparatorTest")]
        [System.ComponentModel.DescriptionAttribute("A separator test within this fluid analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeparatorTest", DataType="FluidSeparatorTest")]
        public FluidSeparatorTest[] SeparatorTest {
            get {
                return this.separatorTestField;
            }
            set {
                this.separatorTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A transport test within this fluid analysis.</summary>
        [System.Xml.Serialization.XmlElementAttribute("TransportTest")]
        [System.ComponentModel.DescriptionAttribute("A transport test within this fluid analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TransportTest", DataType="OtherMeasurementTest")]
        public OtherMeasurementTest[] TransportTest {
            get {
                return this.transportTestField;
            }
            set {
                this.transportTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A vapor liquid equilibrium test within this fluid analysis.</summary>
        [System.Xml.Serialization.XmlElementAttribute("VaporLiquidEquilibriumTest")]
        [System.ComponentModel.DescriptionAttribute("A vapor liquid equilibrium test within this fluid analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VaporLiquidEquilibriumTest", DataType="VaporLiquidEquilibriumTest")]
        public VaporLiquidEquilibriumTest[] VaporLiquidEquilibriumTest {
            get {
                return this.vaporLiquidEquilibriumTestField;
            }
            set {
                this.vaporLiquidEquilibriumTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A swelling test within this fluid analysis.</summary>
        [System.Xml.Serialization.XmlElementAttribute("SwellingTest")]
        [System.ComponentModel.DescriptionAttribute("A swelling test within this fluid analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SwellingTest", DataType="SwellingTest")]
        public SwellingTest[] SwellingTest {
            get {
                return this.swellingTestField;
            }
            set {
                this.swellingTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A slim tube test within this fluid analysis.</summary>
        [System.Xml.Serialization.XmlElementAttribute("SlimTubeTest")]
        [System.ComponentModel.DescriptionAttribute("A slim tube test within this fluid analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SlimTubeTest", DataType="SlimTubeTest")]
        public SlimTubeTest[] SlimTubeTest {
            get {
                return this.slimTubeTestField;
            }
            set {
                this.slimTubeTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A multiple contact miscibility test within this fluid analysis.</summary>
        [System.Xml.Serialization.XmlElementAttribute("MultipleContactMiscibilityTest")]
        [System.ComponentModel.DescriptionAttribute("A multiple contact miscibility test within this fluid analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MultipleContactMiscibilityTest", DataType="MultipleContactMiscibilityTest")]
        public MultipleContactMiscibilityTest[] MultipleContactMiscibilityTest {
            get {
                return this.multipleContactMiscibilityTestField;
            }
            set {
                this.multipleContactMiscibilityTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An stock tank oil analysis within this fluid analysis.</summary>
        [System.Xml.Serialization.XmlElementAttribute("STOAnalysis")]
        [System.ComponentModel.DescriptionAttribute("An stock tank oil analysis within this fluid analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("STOAnalysis", DataType="STOAnalysis")]
        public STOAnalysis[] STOAnalysis {
            get {
                return this.sTOAnalysisField;
            }
            set {
                this.sTOAnalysisField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An interfacial tension test within this fluid analysis.</summary>
        [System.Xml.Serialization.XmlElementAttribute("InterfacialTensionTest")]
        [System.ComponentModel.DescriptionAttribute("An interfacial tension test within this fluid analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InterfacialTensionTest", DataType="InterfacialTensionTest")]
        public InterfacialTensionTest[] InterfacialTensionTest {
            get {
                return this.interfacialTensionTestField;
            }
            set {
                this.interfacialTensionTestField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class AtmosphericFlashTestAndCompositionalAnalysis {
        
        private long testNumberField;
        
        private System.DateTime dateField;
        
        private bool dateFieldSpecified;
        
        private AbstractPressureValue flashToPressureField;
        
        private ThermodynamicTemperatureMeasure flashToTemperatureField;
        
        private PressureMeasure atmosphericPressureField;
        
        private ThermodynamicTemperatureMeasure atmosphericTemperatureField;
        
        private VolumePerVolumeMeasure flashGORField;
        
        private VolumePerVolumeMeasure oilFormationVolumeFactorField;
        
        private MassPerVolumeMeasure densityAtSamplePressureandTemperatureField;
        
        private MolecularWeightMeasure avgMolecularWeightField;
        
        private string remarkField;
        
        private FlashedLiquid flashedLiquidField;
        
        private FlashedGas flashedGasField;
        
        private OverallComposition overallCompositionField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>An integer number to identify this test in a sequence of tests.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("An integer number to identify this test in a sequence of tests.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestNumber", DataType="NonNegativeLong")]
        public long TestNumber {
            get {
                return this.testNumberField;
            }
            set {
                this.testNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date when this test was performed.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date when this test was performed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Date", DataType="date")]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateSpecified {
            get {
                return this.dateFieldSpecified;
            }
            set {
                this.dateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure to which the sample is flashed in this analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure to which the sample is flashed in this analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlashToPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue FlashToPressure {
            get {
                return this.flashToPressureField;
            }
            set {
                this.flashToPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature to which the sample is flashed in this analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature to which the sample is flashed in this analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlashToTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure FlashToTemperature {
            get {
                return this.flashToTemperatureField;
            }
            set {
                this.flashToTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The atmospheric pressure at the time of this analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The atmospheric pressure at the time of this analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AtmosphericPressure", DataType="PressureMeasure")]
        public PressureMeasure AtmosphericPressure {
            get {
                return this.atmosphericPressureField;
            }
            set {
                this.atmosphericPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The atmospheric temperature at the time of this analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The atmospheric temperature at the time of this analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AtmosphericTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure AtmosphericTemperature {
            get {
                return this.atmosphericTemperatureField;
            }
            set {
                this.atmosphericTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas-oil ratio of the flash in this analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas-oil ratio of the flash in this analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlashGOR", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure FlashGOR {
            get {
                return this.flashGORField;
            }
            set {
                this.flashGORField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The formation volume factor for the oil (liquid) phase at the conditions of this test--volume at test conditions/volume at standard conditions.</summary>
        [System.ComponentModel.DescriptionAttribute("The formation volume factor for the oil (liquid) phase at the conditions of this " +
            "test--volume at test conditions/volume at standard conditions.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilFormationVolumeFactor", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure OilFormationVolumeFactor {
            get {
                return this.oilFormationVolumeFactorField;
            }
            set {
                this.oilFormationVolumeFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the sample at the pressure and temperature conditions of this test.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the sample at the pressure and temperature conditions of this test" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensityAtSamplePressureandTemperature", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensityAtSamplePressureandTemperature {
            get {
                return this.densityAtSamplePressureandTemperatureField;
            }
            set {
                this.densityAtSamplePressureandTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average molecular weight of the sample for this test.</summary>
        [System.ComponentModel.DescriptionAttribute("The average molecular weight of the sample for this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgMolecularWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure AvgMolecularWeight {
            get {
                return this.avgMolecularWeightField;
            }
            set {
                this.avgMolecularWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlashedLiquid", DataType="FlashedLiquid")]
        public FlashedLiquid FlashedLiquid {
            get {
                return this.flashedLiquidField;
            }
            set {
                this.flashedLiquidField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlashedGas", DataType="FlashedGas")]
        public FlashedGas FlashedGas {
            get {
                return this.flashedGasField;
            }
            set {
                this.flashedGasField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OverallComposition", DataType="OverallComposition")]
        public OverallComposition OverallComposition {
            get {
                return this.overallCompositionField;
            }
            set {
                this.overallCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FlashedLiquid {
        
        private APIGravityMeasure oilAPIGravityField;
        
        private MolecularWeightMeasure oilMolecularWeightField;
        
        private LiquidComposition liquidCompositionField;
        
        /// <remarks/>
        /// <summary>The oil molecular weight of the flashed liquid in this atmospheric flash test.</summary>
        [System.ComponentModel.DescriptionAttribute("The oil molecular weight of the flashed liquid in this atmospheric flash test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilAPIGravity", DataType="APIGravityMeasure")]
        public APIGravityMeasure OilAPIGravity {
            get {
                return this.oilAPIGravityField;
            }
            set {
                this.oilAPIGravityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The liquid composition of the flashed liquid in this atmospheric flash test.</summary>
        [System.ComponentModel.DescriptionAttribute("The liquid composition of the flashed liquid in this atmospheric flash test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilMolecularWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure OilMolecularWeight {
            get {
                return this.oilMolecularWeightField;
            }
            set {
                this.oilMolecularWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The oil API gravity of the flashed liquid in this atmospheric flash test.</summary>
        [System.ComponentModel.DescriptionAttribute("The oil API gravity of the flashed liquid in this atmospheric flash test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidComposition", DataType="LiquidComposition")]
        public LiquidComposition LiquidComposition {
            get {
                return this.liquidCompositionField;
            }
            set {
                this.liquidCompositionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FlashedGas {
        
        private double gasGravityField;
        
        private bool gasGravityFieldSpecified;
        
        private MolecularWeightMeasure gasMolecularWeightField;
        
        private double gasZFactorField;
        
        private bool gasZFactorFieldSpecified;
        
        private EnergyMeasure gasHeatingValueField;
        
        private VaporComposition vaporCompositionField;
        
        /// <remarks/>
        /// <summary>The gas gravity of the flashed gas in this atmospheric flash test.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas gravity of the flashed gas in this atmospheric flash test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasGravity", DataType="double")]
        public double GasGravity {
            get {
                return this.gasGravityField;
            }
            set {
                this.gasGravityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GasGravitySpecified {
            get {
                return this.gasGravityFieldSpecified;
            }
            set {
                this.gasGravityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The molecular weight of the gas phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The molecular weight of the gas phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasMolecularWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure GasMolecularWeight {
            get {
                return this.gasMolecularWeightField;
            }
            set {
                this.gasMolecularWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas Z factor value at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas Z factor value at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasZFactor", DataType="double")]
        public double GasZFactor {
            get {
                return this.gasZFactorField;
            }
            set {
                this.gasZFactorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GasZFactorSpecified {
            get {
                return this.gasZFactorFieldSpecified;
            }
            set {
                this.gasZFactorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas molecular weight of the flashed gas in this atmospheric flash test.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas molecular weight of the flashed gas in this atmospheric flash test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasHeatingValue", DataType="EnergyMeasure")]
        public EnergyMeasure GasHeatingValue {
            get {
                return this.gasHeatingValueField;
            }
            set {
                this.gasHeatingValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The vapor composition of the flashed gas in this atmospheric flash test.</summary>
        [System.ComponentModel.DescriptionAttribute("The vapor composition of the flashed gas in this atmospheric flash test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VaporComposition", DataType="VaporComposition")]
        public VaporComposition VaporComposition {
            get {
                return this.vaporCompositionField;
            }
            set {
                this.vaporCompositionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class VaporComposition {
        
        private string remarkField;
        
        private FluidComponent[] vaporComponentField;
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("VaporComponent")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VaporComponent", DataType="FluidComponent")]
        public FluidComponent[] VaporComponent {
            get {
                return this.vaporComponentField;
            }
            set {
                this.vaporComponentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ConstantCompositionExpansionTest {
        
        private long testNumberField;
        
        private ThermodynamicTemperatureMeasure testTemperatureField;
        
        private SaturationPressure saturationPressureField;
        
        private FluidVolumeReference[] liquidFractionReferenceField;
        
        private FluidVolumeReference[] relativeVolumeReferenceField;
        
        private ConstantCompositionExpansionTestStep[] constantCompositionExpansionTestStepField;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A number for this test for purposes of e.g., tracking lab sequence.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A number for this test for purposes of e.g., tracking lab sequence.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestNumber", DataType="NonNegativeLong")]
        public long TestNumber {
            get {
                return this.testNumberField;
            }
            set {
                this.testNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature of this test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The temperature of this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return this.testTemperatureField;
            }
            set {
                this.testTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The saturation (or bubble point) pressure measured in this test.</summary>
        [System.ComponentModel.DescriptionAttribute("The saturation (or bubble point) pressure measured in this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SaturationPressure", DataType="SaturationPressure")]
        public SaturationPressure SaturationPressure {
            get {
                return this.saturationPressureField;
            }
            set {
                this.saturationPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume reference for the measured liquid fraction in a constant composition expansion test. Referenced to liquid volume at saturation pressure (generally).</summary>
        [System.Xml.Serialization.XmlElementAttribute("LiquidFractionReference")]
        [System.ComponentModel.DescriptionAttribute("Volume reference for the measured liquid fraction in a constant composition expan" +
            "sion test. Referenced to liquid volume at saturation pressure (generally).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidFractionReference", DataType="FluidVolumeReference")]
        public FluidVolumeReference[] LiquidFractionReference {
            get {
                return this.liquidFractionReferenceField;
            }
            set {
                this.liquidFractionReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume reference for the relative volume ratio in a constant composition expansion test. Referenced to liquid volume at saturation pressure (generally).</summary>
        [System.Xml.Serialization.XmlElementAttribute("RelativeVolumeReference")]
        [System.ComponentModel.DescriptionAttribute("Volume reference for the relative volume ratio in a constant composition expansio" +
            "n test. Referenced to liquid volume at saturation pressure (generally).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RelativeVolumeReference", DataType="FluidVolumeReference")]
        public FluidVolumeReference[] RelativeVolumeReference {
            get {
                return this.relativeVolumeReferenceField;
            }
            set {
                this.relativeVolumeReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured relative volume ratio = measured volume/volume at Psat.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ConstantCompositionExpansionTestStep")]
        [System.ComponentModel.DescriptionAttribute("Measured relative volume ratio = measured volume/volume at Psat.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConstantCompositionExpansionTestStep", DataType="ConstantCompositionExpansionTestStep")]
        public ConstantCompositionExpansionTestStep[] ConstantCompositionExpansionTestStep {
            get {
                return this.constantCompositionExpansionTestStepField;
            }
            set {
                this.constantCompositionExpansionTestStepField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Expected to be a yes or no value to indicate if differential liberation/vaporization data are corrected to separator conditions/flash data or not.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Expected to be a yes or no value to indicate if differential liberation/vaporizat" +
            "ion data are corrected to separator conditions/flash data or not.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidVolumeReference {
        
        private VolumeReferenceKind kindField;
        
        private VolumeMeasure referenceVolumeField;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The kind of fluid volume references. Enum, see volume reference kind.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The kind of fluid volume references. Enum, see volume reference kind.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="VolumeReferenceKind")]
        public VolumeReferenceKind Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reference volume for this analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The reference volume for this analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferenceVolume", DataType="VolumeMeasure")]
        public VolumeMeasure ReferenceVolume {
            get {
                return this.referenceVolumeField;
            }
            set {
                this.referenceVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum VolumeReferenceKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("initial reservoir")]
        initialreservoir,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("saturation-calculated")]
        saturationcalculated,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("saturation-measured")]
        saturationmeasured,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("separator stage 1")]
        separatorstage1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("separator stage 10")]
        separatorstage10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("separator stage 2")]
        separatorstage2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("separator stage 3")]
        separatorstage3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("separator stage 4")]
        separatorstage4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("separator stage 5")]
        separatorstage5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("separator stage 6")]
        separatorstage6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("separator stage 7")]
        separatorstage7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("separator stage 8")]
        separatorstage8,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("separator stage 9")]
        separatorstage9,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stock tank")]
        stocktank,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ConstantCompositionExpansionTestStep {
        
        private long stepNumberField;
        
        private PressureMeasure stepPressureField;
        
        private RelativeVolumeRatio liquidFractionField;
        
        private MassPerVolumeMeasure oilDensityField;
        
        private OilCompressibility oilCompressibilityField;
        
        private DynamicViscosityMeasure oilViscosityField;
        
        private VolumeMeasure totalVolumeField;
        
        private RelativeVolumeRatio relativeVolumeRatioField;
        
        private MassPerVolumeMeasure gasDensityField;
        
        private double gasZFactorField;
        
        private bool gasZFactorFieldSpecified;
        
        private ReciprocalPressureMeasure gasCompressibilityField;
        
        private DynamicViscosityMeasure gasViscosityField;
        
        private double yFunctionField;
        
        private bool yFunctionFieldSpecified;
        
        private FluidAnalysisStepCondition fluidConditionField;
        
        private bool fluidConditionFieldSpecified;
        
        private PhasePresent phasesPresentField;
        
        private bool phasesPresentFieldSpecified;
        
        private VaporComposition vaporCompositionField;
        
        private LiquidComposition liquidCompositionField;
        
        private OverallComposition overallCompositionField;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The step number is the index of a (P,T) step in the overall test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The step number is the index of a (P,T) step in the overall test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepNumber", DataType="NonNegativeLong")]
        public long StepNumber {
            get {
                return this.stepNumberField;
            }
            set {
                this.stepNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure for this test step.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The pressure for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepPressure", DataType="PressureMeasure")]
        public PressureMeasure StepPressure {
            get {
                return this.stepPressureField;
            }
            set {
                this.stepPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fraction of liquid by volume for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The fraction of liquid by volume for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidFraction", DataType="RelativeVolumeRatio")]
        public RelativeVolumeRatio LiquidFraction {
            get {
                return this.liquidFractionField;
            }
            set {
                this.liquidFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the oil phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the oil phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure OilDensity {
            get {
                return this.oilDensityField;
            }
            set {
                this.oilDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The oil compressibility at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The oil compressibility at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilCompressibility", DataType="OilCompressibility")]
        public OilCompressibility OilCompressibility {
            get {
                return this.oilCompressibilityField;
            }
            set {
                this.oilCompressibilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The viscosity of the oil phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The viscosity of the oil phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure OilViscosity {
            get {
                return this.oilViscosityField;
            }
            set {
                this.oilViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total volume of the expanded mixture at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The total volume of the expanded mixture at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalVolume", DataType="VolumeMeasure")]
        public VolumeMeasure TotalVolume {
            get {
                return this.totalVolumeField;
            }
            set {
                this.totalVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured relative volume ratio = measured volume/volume at Psat.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured relative volume ratio = measured volume/volume at Psat.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RelativeVolumeRatio", DataType="RelativeVolumeRatio")]
        public RelativeVolumeRatio RelativeVolumeRatio {
            get {
                return this.relativeVolumeRatioField;
            }
            set {
                this.relativeVolumeRatioField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas density at the conditions for this viscosity correlation to be used.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas density at the conditions for this viscosity correlation to be used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure GasDensity {
            get {
                return this.gasDensityField;
            }
            set {
                this.gasDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas Z factor value at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas Z factor value at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasZFactor", DataType="double")]
        public double GasZFactor {
            get {
                return this.gasZFactorField;
            }
            set {
                this.gasZFactorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GasZFactorSpecified {
            get {
                return this.gasZFactorFieldSpecified;
            }
            set {
                this.gasZFactorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas compressibility at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas compressibility at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasCompressibility", DataType="ReciprocalPressureMeasure")]
        public ReciprocalPressureMeasure GasCompressibility {
            get {
                return this.gasCompressibilityField;
            }
            set {
                this.gasCompressibilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The viscosity of the gas phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The viscosity of the gas phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return this.gasViscosityField;
            }
            set {
                this.gasViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The Y function at this test step. See  Standing, M.B.: Volumetric And Phase Behavior Of Oil Field Hydrocarbon Systems, Eighth Edition, SPE Richardson, Texas (1977).</summary>
        [System.ComponentModel.DescriptionAttribute("The Y function at this test step. See  Standing, M.B.: Volumetric And Phase Behav" +
            "ior Of Oil Field Hydrocarbon Systems, Eighth Edition, SPE Richardson, Texas (197" +
            "7).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("YFunction", DataType="double")]
        public double YFunction {
            get {
                return this.yFunctionField;
            }
            set {
                this.yFunctionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool YFunctionSpecified {
            get {
                return this.yFunctionFieldSpecified;
            }
            set {
                this.yFunctionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fluid condition at this test step. Enum, see fluid analysis step condition.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid condition at this test step. Enum, see fluid analysis step condition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidCondition", DataType="FluidAnalysisStepCondition")]
        public FluidAnalysisStepCondition FluidCondition {
            get {
                return this.fluidConditionField;
            }
            set {
                this.fluidConditionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FluidConditionSpecified {
            get {
                return this.fluidConditionFieldSpecified;
            }
            set {
                this.fluidConditionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The phases present at this test step (oil, water, gas etc.). Enum, see phases present.</summary>
        [System.ComponentModel.DescriptionAttribute("The phases present at this test step (oil, water, gas etc.). Enum, see phases pre" +
            "sent.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PhasesPresent", DataType="PhasePresent")]
        public PhasePresent PhasesPresent {
            get {
                return this.phasesPresentField;
            }
            set {
                this.phasesPresentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PhasesPresentSpecified {
            get {
                return this.phasesPresentFieldSpecified;
            }
            set {
                this.phasesPresentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The vapor composition at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The vapor composition at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VaporComposition", DataType="VaporComposition")]
        public VaporComposition VaporComposition {
            get {
                return this.vaporCompositionField;
            }
            set {
                this.vaporCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The liquid composition at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The liquid composition at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidComposition", DataType="LiquidComposition")]
        public LiquidComposition LiquidComposition {
            get {
                return this.liquidCompositionField;
            }
            set {
                this.liquidCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The overall composition at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The overall composition at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OverallComposition", DataType="OverallComposition")]
        public OverallComposition OverallComposition {
            get {
                return this.overallCompositionField;
            }
            set {
                this.overallCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum FluidAnalysisStepCondition {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("current reservoir conditions")]
        currentreservoirconditions,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("initial reservoir conditions")]
        initialreservoirconditions,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("initial saturation conditions")]
        initialsaturationconditions,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stock tank conditions")]
        stocktankconditions,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class SaturationTest {
        
        private long testNumberField;
        
        private ThermodynamicTemperatureMeasure testTemperatureField;
        
        private SaturationPressure saturationPressureField;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A number for this test for purposes of, e.g., tracking lab sequence.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A number for this test for purposes of, e.g., tracking lab sequence.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestNumber", DataType="NonNegativeLong")]
        public long TestNumber {
            get {
                return this.testNumberField;
            }
            set {
                this.testNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature of this test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The temperature of this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return this.testTemperatureField;
            }
            set {
                this.testTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The saturation (or bubble point) pressure measured in this test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The saturation (or bubble point) pressure measured in this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SaturationPressure", DataType="SaturationPressure")]
        public SaturationPressure SaturationPressure {
            get {
                return this.saturationPressureField;
            }
            set {
                this.saturationPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DifferentialLiberationTest {
        
        private long testNumberField;
        
        private ThermodynamicTemperatureMeasure testTemperatureField;
        
        private SaturationPressure saturationPressureField;
        
        private SeparatorConditions separatorConditionsField;
        
        private string correctionMethodField;
        
        private string remarkField;
        
        private FluidDifferentialLiberationTestStep[] dlTestStepField;
        
        private FluidVolumeReference shrinkageReferenceField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A number for this test for purposes of, e.g., tracking lab sequence.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A number for this test for purposes of, e.g., tracking lab sequence.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestNumber", DataType="NonNegativeLong")]
        public long TestNumber {
            get {
                return this.testNumberField;
            }
            set {
                this.testNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature of this test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The temperature of this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return this.testTemperatureField;
            }
            set {
                this.testTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The saturation (or bubble point) pressure measured in this test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The saturation (or bubble point) pressure measured in this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SaturationPressure", DataType="SaturationPressure")]
        public SaturationPressure SaturationPressure {
            get {
                return this.saturationPressureField;
            }
            set {
                this.saturationPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to a separator test element that contains the separator conditions (stages) that apply to this test.</summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a separator test element that contains the separator conditions (sta" +
            "ges) that apply to this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeparatorConditions", DataType="SeparatorConditions")]
        public SeparatorConditions SeparatorConditions {
            get {
                return this.separatorConditionsField;
            }
            set {
                this.separatorConditionsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A flag to indicate if differential liberation/vaporization data are corrected to separator conditions/flash data or not.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A flag to indicate if differential liberation/vaporization data are corrected to " +
            "separator conditions/flash data or not.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CorrectionMethod", DataType="String64")]
        public string CorrectionMethod {
            get {
                return this.correctionMethodField;
            }
            set {
                this.correctionMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DlTestStep")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DlTestStep", DataType="FluidDifferentialLiberationTestStep")]
        public FluidDifferentialLiberationTestStep[] DlTestStep {
            get {
                return this.dlTestStepField;
            }
            set {
                this.dlTestStepField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShrinkageReference", DataType="FluidVolumeReference")]
        public FluidVolumeReference ShrinkageReference {
            get {
                return this.shrinkageReferenceField;
            }
            set {
                this.shrinkageReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class SeparatorConditions {
        
        private string separatorTestReferenceField;
        
        /// <remarks/>
        /// <summary>Reference to a separator test element, which contains the separator conditions (stages) which apply to this test.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to a separator test element, which contains the separator conditions (s" +
            "tages) which apply to this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("separatorTestReference", DataType="String64")]
        public string separatorTestReference {
            get {
                return this.separatorTestReferenceField;
            }
            set {
                this.separatorTestReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidDifferentialLiberationTestStep {
        
        private long stepNumberField;
        
        private PressureMeasure stepPressureField;
        
        private ThermodynamicTemperatureMeasure stepTemperatureField;
        
        private MassPerVolumeMeasure oilDensityField;
        
        private VolumePerVolumeMeasure oilFormationVolumeFactorField;
        
        private OilCompressibility oilCompressibilityField;
        
        private DynamicViscosityMeasure oilViscosityField;
        
        private MolecularWeightMeasure gasMolecularWeightField;
        
        private double gasGravityField;
        
        private bool gasGravityFieldSpecified;
        
        private MassPerVolumeMeasure gasDensityField;
        
        private VolumePerVolumeMeasure gasFormationVolumeFactorField;
        
        private double gasZFactorField;
        
        private bool gasZFactorFieldSpecified;
        
        private DynamicViscosityMeasure gasViscosityField;
        
        private VolumePerVolumeMeasure totalFormationVolumeFactorField;
        
        private VolumePerVolumeMeasure solutionGORMeasuredField;
        
        private VolumePerVolumeMeasure solutionGORCorrectField;
        
        private VolumePerVolumeMeasure cumulativeStockTankGORField;
        
        private VolumePerVolumeMeasure oilFormationVolumeFactorCorrectedField;
        
        private APIGravityMeasure residualAPIGravityField;
        
        private FluidAnalysisStepCondition fluidConditionField;
        
        private bool fluidConditionFieldSpecified;
        
        private PhasePresent phasesPresentField;
        
        private bool phasesPresentFieldSpecified;
        
        private LiquidComposition liquidCompositionField;
        
        private VaporComposition vaporCompositionField;
        
        private OverallComposition overallCompositionField;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The step number is the index of a (P,T) step in the overall test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The step number is the index of a (P,T) step in the overall test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepNumber", DataType="NonNegativeLong")]
        public long StepNumber {
            get {
                return this.stepNumberField;
            }
            set {
                this.stepNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure for this test step.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The pressure for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepPressure", DataType="PressureMeasure")]
        public PressureMeasure StepPressure {
            get {
                return this.stepPressureField;
            }
            set {
                this.stepPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure StepTemperature {
            get {
                return this.stepTemperatureField;
            }
            set {
                this.stepTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the oil phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the oil phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure OilDensity {
            get {
                return this.oilDensityField;
            }
            set {
                this.oilDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The formation volume factor for the oil (liquid) phase at the conditions of this test--volume at test conditions/volume st standard conditions.</summary>
        [System.ComponentModel.DescriptionAttribute("The formation volume factor for the oil (liquid) phase at the conditions of this " +
            "test--volume at test conditions/volume st standard conditions.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilFormationVolumeFactor", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure OilFormationVolumeFactor {
            get {
                return this.oilFormationVolumeFactorField;
            }
            set {
                this.oilFormationVolumeFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The oil compressibility at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The oil compressibility at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilCompressibility", DataType="OilCompressibility")]
        public OilCompressibility OilCompressibility {
            get {
                return this.oilCompressibilityField;
            }
            set {
                this.oilCompressibilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The viscosity of the oil phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The viscosity of the oil phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure OilViscosity {
            get {
                return this.oilViscosityField;
            }
            set {
                this.oilViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The molecular weight of the gas phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The molecular weight of the gas phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasMolecularWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure GasMolecularWeight {
            get {
                return this.gasMolecularWeightField;
            }
            set {
                this.gasMolecularWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas gravity at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas gravity at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasGravity", DataType="double")]
        public double GasGravity {
            get {
                return this.gasGravityField;
            }
            set {
                this.gasGravityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GasGravitySpecified {
            get {
                return this.gasGravityFieldSpecified;
            }
            set {
                this.gasGravityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of gas at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of gas at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure GasDensity {
            get {
                return this.gasDensityField;
            }
            set {
                this.gasDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas formation volume factor at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas formation volume factor at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasFormationVolumeFactor", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure GasFormationVolumeFactor {
            get {
                return this.gasFormationVolumeFactorField;
            }
            set {
                this.gasFormationVolumeFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas Z factor value at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas Z factor value at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasZFactor", DataType="double")]
        public double GasZFactor {
            get {
                return this.gasZFactorField;
            }
            set {
                this.gasZFactorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GasZFactorSpecified {
            get {
                return this.gasZFactorFieldSpecified;
            }
            set {
                this.gasZFactorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The viscosity of the gas phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The viscosity of the gas phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return this.gasViscosityField;
            }
            set {
                this.gasViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total formation volume factor at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The total formation volume factor at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalFormationVolumeFactor", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure TotalFormationVolumeFactor {
            get {
                return this.totalFormationVolumeFactorField;
            }
            set {
                this.totalFormationVolumeFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The solution GOR measured at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The solution GOR measured at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SolutionGORMeasured", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure SolutionGORMeasured {
            get {
                return this.solutionGORMeasuredField;
            }
            set {
                this.solutionGORMeasuredField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The solution GOR (corrected) at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The solution GOR (corrected) at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SolutionGORCorrect", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure SolutionGORCorrect {
            get {
                return this.solutionGORCorrectField;
            }
            set {
                this.solutionGORCorrectField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The cumulative stock tank GOR at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The cumulative stock tank GOR at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CumulativeStockTankGOR", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure CumulativeStockTankGOR {
            get {
                return this.cumulativeStockTankGORField;
            }
            set {
                this.cumulativeStockTankGORField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The oil formation volume factor (corrected) at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The oil formation volume factor (corrected) at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilFormationVolumeFactorCorrected", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure OilFormationVolumeFactorCorrected {
            get {
                return this.oilFormationVolumeFactorCorrectedField;
            }
            set {
                this.oilFormationVolumeFactorCorrectedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The residual API gravity at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The residual API gravity at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ResidualAPIGravity", DataType="APIGravityMeasure")]
        public APIGravityMeasure ResidualAPIGravity {
            get {
                return this.residualAPIGravityField;
            }
            set {
                this.residualAPIGravityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fluid condition at this test step. Enum, see fluid analysis step condition.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid condition at this test step. Enum, see fluid analysis step condition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidCondition", DataType="FluidAnalysisStepCondition")]
        public FluidAnalysisStepCondition FluidCondition {
            get {
                return this.fluidConditionField;
            }
            set {
                this.fluidConditionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FluidConditionSpecified {
            get {
                return this.fluidConditionFieldSpecified;
            }
            set {
                this.fluidConditionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The phases present at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The phases present at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PhasesPresent", DataType="PhasePresent")]
        public PhasePresent PhasesPresent {
            get {
                return this.phasesPresentField;
            }
            set {
                this.phasesPresentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PhasesPresentSpecified {
            get {
                return this.phasesPresentFieldSpecified;
            }
            set {
                this.phasesPresentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The liquid composition at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The liquid composition at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidComposition", DataType="LiquidComposition")]
        public LiquidComposition LiquidComposition {
            get {
                return this.liquidCompositionField;
            }
            set {
                this.liquidCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The vapor composition at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The vapor composition at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VaporComposition", DataType="VaporComposition")]
        public VaporComposition VaporComposition {
            get {
                return this.vaporCompositionField;
            }
            set {
                this.vaporCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The overall composition at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The overall composition at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OverallComposition", DataType="OverallComposition")]
        public OverallComposition OverallComposition {
            get {
                return this.overallCompositionField;
            }
            set {
                this.overallCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ConstantVolumeDepletionTest {
        
        private long testNumberField;
        
        private ThermodynamicTemperatureMeasure testTemperatureField;
        
        private VolumeMeasure cumulativeGasProducedReferenceStdField;
        
        private string remarkField;
        
        private SaturationPressure satuationPressureField;
        
        private FluidVolumeReference[] liquidDropoutReferenceField;
        
        private FluidCvdTestStep[] cvdTestStepField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A number for this test for purposes of, e.g., tracking lab sequence.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A number for this test for purposes of, e.g., tracking lab sequence.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestNumber", DataType="NonNegativeLong")]
        public long TestNumber {
            get {
                return this.testNumberField;
            }
            set {
                this.testNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature of this test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The temperature of this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return this.testTemperatureField;
            }
            set {
                this.testTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volume is corrected to standard conditions of temperature and pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("The volume is corrected to standard conditions of temperature and pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CumulativeGasProducedReferenceStd", DataType="VolumeMeasure")]
        public VolumeMeasure CumulativeGasProducedReferenceStd {
            get {
                return this.cumulativeGasProducedReferenceStdField;
            }
            set {
                this.cumulativeGasProducedReferenceStdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SatuationPressure", DataType="SaturationPressure")]
        public SaturationPressure SatuationPressure {
            get {
                return this.satuationPressureField;
            }
            set {
                this.satuationPressureField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("LiquidDropoutReference")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidDropoutReference", DataType="FluidVolumeReference")]
        public FluidVolumeReference[] LiquidDropoutReference {
            get {
                return this.liquidDropoutReferenceField;
            }
            set {
                this.liquidDropoutReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CvdTestStep")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CvdTestStep", DataType="FluidCvdTestStep")]
        public FluidCvdTestStep[] CvdTestStep {
            get {
                return this.cvdTestStepField;
            }
            set {
                this.cvdTestStepField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidCvdTestStep {
        
        private long stepNumberField;
        
        private PressureMeasure stepPressureField;
        
        private DynamicViscosityMeasure oilViscosityField;
        
        private MassPerVolumeMeasure oilDensityField;
        
        private MolecularWeightMeasure gasMolecularWeightField;
        
        private double gasGravityField;
        
        private bool gasGravityFieldSpecified;
        
        private VolumePerVolumeMeasure gasFormationVolumeFactorField;
        
        private double gasZFactorField;
        
        private bool gasZFactorFieldSpecified;
        
        private double phase2ZFactorField;
        
        private bool phase2ZFactorFieldSpecified;
        
        private DynamicViscosityMeasure gasViscosityField;
        
        private AmountOfSubstancePerAmountOfSubstanceMeasure cumulativeFluidProducedFractionField;
        
        private RelativeVolumeRatio liquidFractionField;
        
        private FluidAnalysisStepCondition fluidConditionField;
        
        private bool fluidConditionFieldSpecified;
        
        private PhasePresent phasesPresentField;
        
        private bool phasesPresentFieldSpecified;
        
        private LiquidComposition liquidCompositionField;
        
        private VaporComposition vaporCompositionField;
        
        private OverallComposition overallCompositionField;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The step number is the index of a (P,T) step in the overall test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The step number is the index of a (P,T) step in the overall test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepNumber", DataType="NonNegativeLong")]
        public long StepNumber {
            get {
                return this.stepNumberField;
            }
            set {
                this.stepNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure for this test step.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The pressure for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepPressure", DataType="PressureMeasure")]
        public PressureMeasure StepPressure {
            get {
                return this.stepPressureField;
            }
            set {
                this.stepPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The viscosity of the oil phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The viscosity of the oil phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure OilViscosity {
            get {
                return this.oilViscosityField;
            }
            set {
                this.oilViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the oil phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the oil phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure OilDensity {
            get {
                return this.oilDensityField;
            }
            set {
                this.oilDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The molecular weight of the gas phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The molecular weight of the gas phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasMolecularWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure GasMolecularWeight {
            get {
                return this.gasMolecularWeightField;
            }
            set {
                this.gasMolecularWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas gravity at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas gravity at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasGravity", DataType="double")]
        public double GasGravity {
            get {
                return this.gasGravityField;
            }
            set {
                this.gasGravityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GasGravitySpecified {
            get {
                return this.gasGravityFieldSpecified;
            }
            set {
                this.gasGravityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas formation volume factor at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas formation volume factor at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasFormationVolumeFactor", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure GasFormationVolumeFactor {
            get {
                return this.gasFormationVolumeFactorField;
            }
            set {
                this.gasFormationVolumeFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas Z factor value at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas Z factor value at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasZFactor", DataType="double")]
        public double GasZFactor {
            get {
                return this.gasZFactorField;
            }
            set {
                this.gasZFactorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GasZFactorSpecified {
            get {
                return this.gasZFactorFieldSpecified;
            }
            set {
                this.gasZFactorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The standard Z = PV/RT, but here for a two-phase Z-factor, use total molar volume for both phases.</summary>
        [System.ComponentModel.DescriptionAttribute("The standard Z = PV/RT, but here for a two-phase Z-factor, use total molar volume" +
            " for both phases.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Phase2ZFactor", DataType="double")]
        public double Phase2ZFactor {
            get {
                return this.phase2ZFactorField;
            }
            set {
                this.phase2ZFactorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool Phase2ZFactorSpecified {
            get {
                return this.phase2ZFactorFieldSpecified;
            }
            set {
                this.phase2ZFactorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The viscosity of the gas phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The viscosity of the gas phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return this.gasViscosityField;
            }
            set {
                this.gasViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The cumulative fluid produced (molar) fraction at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The cumulative fluid produced (molar) fraction at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CumulativeFluidProducedFraction", DataType="AmountOfSubstancePerAmountOfSubstanceMeasure")]
        public AmountOfSubstancePerAmountOfSubstanceMeasure CumulativeFluidProducedFraction {
            get {
                return this.cumulativeFluidProducedFractionField;
            }
            set {
                this.cumulativeFluidProducedFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fraction of liquid by volume for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The fraction of liquid by volume for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidFraction", DataType="RelativeVolumeRatio")]
        public RelativeVolumeRatio LiquidFraction {
            get {
                return this.liquidFractionField;
            }
            set {
                this.liquidFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fluid condition at this test step. Enum, see fluid analysis step condition.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid condition at this test step. Enum, see fluid analysis step condition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidCondition", DataType="FluidAnalysisStepCondition")]
        public FluidAnalysisStepCondition FluidCondition {
            get {
                return this.fluidConditionField;
            }
            set {
                this.fluidConditionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FluidConditionSpecified {
            get {
                return this.fluidConditionFieldSpecified;
            }
            set {
                this.fluidConditionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The phases present at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The phases present at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PhasesPresent", DataType="PhasePresent")]
        public PhasePresent PhasesPresent {
            get {
                return this.phasesPresentField;
            }
            set {
                this.phasesPresentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PhasesPresentSpecified {
            get {
                return this.phasesPresentFieldSpecified;
            }
            set {
                this.phasesPresentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The liquid composition at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The liquid composition at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidComposition", DataType="LiquidComposition")]
        public LiquidComposition LiquidComposition {
            get {
                return this.liquidCompositionField;
            }
            set {
                this.liquidCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The vapor composition at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The vapor composition at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VaporComposition", DataType="VaporComposition")]
        public VaporComposition VaporComposition {
            get {
                return this.vaporCompositionField;
            }
            set {
                this.vaporCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The overall composition at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The overall composition at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OverallComposition", DataType="OverallComposition")]
        public OverallComposition OverallComposition {
            get {
                return this.overallCompositionField;
            }
            set {
                this.overallCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidSeparatorTest {
        
        private long testNumberField;
        
        private ThermodynamicTemperatureMeasure reservoirTemperatureField;
        
        private SaturationPressure saturationPressureField;
        
        private VolumePerVolumeMeasure saturatedOilFormationVolumeFactorField;
        
        private MassPerVolumeMeasure saturatedOilDensityField;
        
        private VolumePerVolumeMeasure separatorTestGORField;
        
        private double overallGasGravityField;
        
        private bool overallGasGravityFieldSpecified;
        
        private string remarkField;
        
        private FluidVolumeReference shrinkageReferenceField;
        
        private FluidSeparatorTestStep[] separatorTestStepField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A number for this test for purposes of, e.g., tracking lab sequence.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A number for this test for purposes of, e.g., tracking lab sequence.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestNumber", DataType="NonNegativeLong")]
        public long TestNumber {
            get {
                return this.testNumberField;
            }
            set {
                this.testNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reservoir temperature for this test.</summary>
        [System.ComponentModel.DescriptionAttribute("The reservoir temperature for this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReservoirTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure ReservoirTemperature {
            get {
                return this.reservoirTemperatureField;
            }
            set {
                this.reservoirTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The saturation (or bubble point) pressure measured in this test.</summary>
        [System.ComponentModel.DescriptionAttribute("The saturation (or bubble point) pressure measured in this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SaturationPressure", DataType="SaturationPressure")]
        public SaturationPressure SaturationPressure {
            get {
                return this.saturationPressureField;
            }
            set {
                this.saturationPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The saturated oil formation volume factor for this test.</summary>
        [System.ComponentModel.DescriptionAttribute("The saturated oil formation volume factor for this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SaturatedOilFormationVolumeFactor", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure SaturatedOilFormationVolumeFactor {
            get {
                return this.saturatedOilFormationVolumeFactorField;
            }
            set {
                this.saturatedOilFormationVolumeFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The saturated oil density for this test.</summary>
        [System.ComponentModel.DescriptionAttribute("The saturated oil density for this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SaturatedOilDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure SaturatedOilDensity {
            get {
                return this.saturatedOilDensityField;
            }
            set {
                this.saturatedOilDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The separator test GOR for this test.</summary>
        [System.ComponentModel.DescriptionAttribute("The separator test GOR for this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeparatorTestGOR", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure SeparatorTestGOR {
            get {
                return this.separatorTestGORField;
            }
            set {
                this.separatorTestGORField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The overall gas gravity for this test.</summary>
        [System.ComponentModel.DescriptionAttribute("The overall gas gravity for this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OverallGasGravity", DataType="double")]
        public double OverallGasGravity {
            get {
                return this.overallGasGravityField;
            }
            set {
                this.overallGasGravityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OverallGasGravitySpecified {
            get {
                return this.overallGasGravityFieldSpecified;
            }
            set {
                this.overallGasGravityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShrinkageReference", DataType="FluidVolumeReference")]
        public FluidVolumeReference ShrinkageReference {
            get {
                return this.shrinkageReferenceField;
            }
            set {
                this.shrinkageReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SeparatorTestStep")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeparatorTestStep", DataType="FluidSeparatorTestStep")]
        public FluidSeparatorTestStep[] SeparatorTestStep {
            get {
                return this.separatorTestStepField;
            }
            set {
                this.separatorTestStepField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidSeparatorTestStep {
        
        private long stepNumberField;
        
        private ThermodynamicTemperatureMeasure stepTemperatureField;
        
        private PressureMeasure stepPressureField;
        
        private PressureMeasure bubblePointPressureField;
        
        private APIGravityMeasure residualAPIGravityField;
        
        private DimensionlessMeasure oilSpecificGravityField;
        
        private MassPerVolumeMeasure oilDensityField;
        
        private VolumePerVolumeMeasure oilFormationVolumeFactorStdField;
        
        private VolumePerVolumeMeasure oilFormationVolumeFactorCorrectedField;
        
        private DynamicViscosityMeasure oilViscosityField;
        
        private VolumePerVolumeMeasure stageSeparatorGORStdField;
        
        private VolumePerVolumeMeasure stageSeparatorGORCorrectedField;
        
        private MolecularWeightMeasure gasMolecularWeightField;
        
        private double gasGravityField;
        
        private bool gasGravityFieldSpecified;
        
        private MassPerVolumeMeasure gasDensityField;
        
        private double gasZFactorField;
        
        private bool gasZFactorFieldSpecified;
        
        private DynamicViscosityMeasure gasViscosityField;
        
        private VolumeMeasure gasVolumeField;
        
        private VolumePerVolumeMeasure oilShrinkageFactorField;
        
        private SaturationPressure saturationPressureField;
        
        private FluidAnalysisStepCondition fluidConditionField;
        
        private bool fluidConditionFieldSpecified;
        
        private PhasePresent phasesPresentField;
        
        private bool phasesPresentFieldSpecified;
        
        private LiquidComposition liquidCompositionField;
        
        private VaporComposition vaporCompositionField;
        
        private OverallComposition overallCompositionField;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The step number is the index of a (P,T) step in the overall test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The step number is the index of a (P,T) step in the overall test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepNumber", DataType="NonNegativeLong")]
        public long StepNumber {
            get {
                return this.stepNumberField;
            }
            set {
                this.stepNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature for this test step.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The temperature for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure StepTemperature {
            get {
                return this.stepTemperatureField;
            }
            set {
                this.stepTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure for this test step.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The pressure for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepPressure", DataType="PressureMeasure")]
        public PressureMeasure StepPressure {
            get {
                return this.stepPressureField;
            }
            set {
                this.stepPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The bubble point pressure for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The bubble point pressure for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BubblePointPressure", DataType="PressureMeasure")]
        public PressureMeasure BubblePointPressure {
            get {
                return this.bubblePointPressureField;
            }
            set {
                this.bubblePointPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The residual API gravity for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The residual API gravity for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ResidualAPIGravity", DataType="APIGravityMeasure")]
        public APIGravityMeasure ResidualAPIGravity {
            get {
                return this.residualAPIGravityField;
            }
            set {
                this.residualAPIGravityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The oil specific gravity for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The oil specific gravity for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilSpecificGravity", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure OilSpecificGravity {
            get {
                return this.oilSpecificGravityField;
            }
            set {
                this.oilSpecificGravityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the oil phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the oil phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure OilDensity {
            get {
                return this.oilDensityField;
            }
            set {
                this.oilDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The oil formation volume factor at standard conditions for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The oil formation volume factor at standard conditions for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilFormationVolumeFactorStd", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure OilFormationVolumeFactorStd {
            get {
                return this.oilFormationVolumeFactorStdField;
            }
            set {
                this.oilFormationVolumeFactorStdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The oil formation volume factor (corrected) for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The oil formation volume factor (corrected) for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilFormationVolumeFactorCorrected", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure OilFormationVolumeFactorCorrected {
            get {
                return this.oilFormationVolumeFactorCorrectedField;
            }
            set {
                this.oilFormationVolumeFactorCorrectedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The viscosity of the oil phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The viscosity of the oil phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure OilViscosity {
            get {
                return this.oilViscosityField;
            }
            set {
                this.oilViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The stage separator GOR at standard conditions for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The stage separator GOR at standard conditions for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StageSeparatorGORStd", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure StageSeparatorGORStd {
            get {
                return this.stageSeparatorGORStdField;
            }
            set {
                this.stageSeparatorGORStdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The stage separator GOR (corrected) for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The stage separator GOR (corrected) for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StageSeparatorGORCorrected", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure StageSeparatorGORCorrected {
            get {
                return this.stageSeparatorGORCorrectedField;
            }
            set {
                this.stageSeparatorGORCorrectedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The molecular weight of the gas phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The molecular weight of the gas phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasMolecularWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure GasMolecularWeight {
            get {
                return this.gasMolecularWeightField;
            }
            set {
                this.gasMolecularWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas gravity at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas gravity at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasGravity", DataType="double")]
        public double GasGravity {
            get {
                return this.gasGravityField;
            }
            set {
                this.gasGravityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GasGravitySpecified {
            get {
                return this.gasGravityFieldSpecified;
            }
            set {
                this.gasGravityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of gas at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of gas at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure GasDensity {
            get {
                return this.gasDensityField;
            }
            set {
                this.gasDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas Z factor value at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas Z factor value at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasZFactor", DataType="double")]
        public double GasZFactor {
            get {
                return this.gasZFactorField;
            }
            set {
                this.gasZFactorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GasZFactorSpecified {
            get {
                return this.gasZFactorFieldSpecified;
            }
            set {
                this.gasZFactorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The viscosity of the gas phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The viscosity of the gas phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return this.gasViscosityField;
            }
            set {
                this.gasViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas volume for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas volume for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasVolume", DataType="VolumeMeasure")]
        public VolumeMeasure GasVolume {
            get {
                return this.gasVolumeField;
            }
            set {
                this.gasVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The oil shrinkage factor for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The oil shrinkage factor for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilShrinkageFactor", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure OilShrinkageFactor {
            get {
                return this.oilShrinkageFactorField;
            }
            set {
                this.oilShrinkageFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The saturation (or bubble point) pressure measured in this test.</summary>
        [System.ComponentModel.DescriptionAttribute("The saturation (or bubble point) pressure measured in this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SaturationPressure", DataType="SaturationPressure")]
        public SaturationPressure SaturationPressure {
            get {
                return this.saturationPressureField;
            }
            set {
                this.saturationPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fluid condition at this test step. Enum, see fluid analysis step condition.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid condition at this test step. Enum, see fluid analysis step condition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidCondition", DataType="FluidAnalysisStepCondition")]
        public FluidAnalysisStepCondition FluidCondition {
            get {
                return this.fluidConditionField;
            }
            set {
                this.fluidConditionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FluidConditionSpecified {
            get {
                return this.fluidConditionFieldSpecified;
            }
            set {
                this.fluidConditionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The phases present for this test step. Enum, see phases present.</summary>
        [System.ComponentModel.DescriptionAttribute("The phases present for this test step. Enum, see phases present.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PhasesPresent", DataType="PhasePresent")]
        public PhasePresent PhasesPresent {
            get {
                return this.phasesPresentField;
            }
            set {
                this.phasesPresentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PhasesPresentSpecified {
            get {
                return this.phasesPresentFieldSpecified;
            }
            set {
                this.phasesPresentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The liquid composition for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The liquid composition for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidComposition", DataType="LiquidComposition")]
        public LiquidComposition LiquidComposition {
            get {
                return this.liquidCompositionField;
            }
            set {
                this.liquidCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The vapor composition for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The vapor composition for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VaporComposition", DataType="VaporComposition")]
        public VaporComposition VaporComposition {
            get {
                return this.vaporCompositionField;
            }
            set {
                this.vaporCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The overall composition for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The overall composition for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OverallComposition", DataType="OverallComposition")]
        public OverallComposition OverallComposition {
            get {
                return this.overallCompositionField;
            }
            set {
                this.overallCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class OtherMeasurementTest {
        
        private long testNumberField;
        
        private string remarkField;
        
        private OtherMeasurementTestStep[] otherMeasurementTestStepField;
        
        private FluidCharacterizationTable fluidCharacterizationTableField;
        
        private FluidCharacterizationTableFormat[] fluidCharacterizationTableFormatSetField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>An integer number to identify this test in a sequence of tests.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("An integer number to identify this test in a sequence of tests.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestNumber", DataType="NonNegativeLong")]
        public long TestNumber {
            get {
                return this.testNumberField;
            }
            set {
                this.testNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("OtherMeasurementTestStep")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OtherMeasurementTestStep", DataType="OtherMeasurementTestStep")]
        public OtherMeasurementTestStep[] OtherMeasurementTestStep {
            get {
                return this.otherMeasurementTestStepField;
            }
            set {
                this.otherMeasurementTestStepField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidCharacterizationTable", DataType="FluidCharacterizationTable")]
        public FluidCharacterizationTable FluidCharacterizationTable {
            get {
                return this.fluidCharacterizationTableField;
            }
            set {
                this.fluidCharacterizationTableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidCharacterizationTableFormatSet", DataType="FluidCharacterizationTableFormatSet")]
        public FluidCharacterizationTableFormat[] FluidCharacterizationTableFormatSet {
            get {
                return this.fluidCharacterizationTableFormatSetField;
            }
            set {
                this.fluidCharacterizationTableFormatSetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class OtherMeasurementTestStep {
        
        private long stepNumberField;
        
        private PressureMeasure stepPressureField;
        
        private ThermodynamicTemperatureMeasure stepTemperatureField;
        
        private DynamicViscosityMeasure oilViscosityField;
        
        private MassPerVolumeMeasure oilMassDensityField;
        
        private DynamicViscosityMeasure gasViscosityField;
        
        private double gasGravityField;
        
        private bool gasGravityFieldSpecified;
        
        private MassPerVolumeMeasure gasMassDensityField;
        
        private double gasZFactorField;
        
        private bool gasZFactorFieldSpecified;
        
        private FluidAnalysisStepCondition fluidConditionField;
        
        private bool fluidConditionFieldSpecified;
        
        private string waterContentField;
        
        private DynamicViscosityMeasure waterViscosityField;
        
        private MassPerMassMeasure salinityField;
        
        private double rswField;
        
        private bool rswFieldSpecified;
        
        private double shearField;
        
        private bool shearFieldSpecified;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The step number is the index of a (P,T) step in the overall test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The step number is the index of a (P,T) step in the overall test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepNumber", DataType="NonNegativeLong")]
        public long StepNumber {
            get {
                return this.stepNumberField;
            }
            set {
                this.stepNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepPressure", DataType="PressureMeasure")]
        public PressureMeasure StepPressure {
            get {
                return this.stepPressureField;
            }
            set {
                this.stepPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure StepTemperature {
            get {
                return this.stepTemperatureField;
            }
            set {
                this.stepTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The viscosity of the oil phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The viscosity of the oil phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure OilViscosity {
            get {
                return this.oilViscosityField;
            }
            set {
                this.oilViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The oil mass density for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The oil mass density for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilMassDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure OilMassDensity {
            get {
                return this.oilMassDensityField;
            }
            set {
                this.oilMassDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The viscosity of the gas phase at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The viscosity of the gas phase at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return this.gasViscosityField;
            }
            set {
                this.gasViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas gravity at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas gravity at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasGravity", DataType="double")]
        public double GasGravity {
            get {
                return this.gasGravityField;
            }
            set {
                this.gasGravityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GasGravitySpecified {
            get {
                return this.gasGravityFieldSpecified;
            }
            set {
                this.gasGravityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas density at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas density at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasMassDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure GasMassDensity {
            get {
                return this.gasMassDensityField;
            }
            set {
                this.gasMassDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas Z factor value at this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas Z factor value at this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasZFactor", DataType="double")]
        public double GasZFactor {
            get {
                return this.gasZFactorField;
            }
            set {
                this.gasZFactorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GasZFactorSpecified {
            get {
                return this.gasZFactorFieldSpecified;
            }
            set {
                this.gasZFactorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fluid condition at this test step. Enum, see fluid analysis step condition.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid condition at this test step. Enum, see fluid analysis step condition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidCondition", DataType="FluidAnalysisStepCondition")]
        public FluidAnalysisStepCondition FluidCondition {
            get {
                return this.fluidConditionField;
            }
            set {
                this.fluidConditionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FluidConditionSpecified {
            get {
                return this.fluidConditionFieldSpecified;
            }
            set {
                this.fluidConditionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water content for this test step.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The water content for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterContent", DataType="String64")]
        public string WaterContent {
            get {
                return this.waterContentField;
            }
            set {
                this.waterContentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water viscosity for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The water viscosity for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure WaterViscosity {
            get {
                return this.waterViscosityField;
            }
            set {
                this.waterViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The salinity for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The salinity for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Salinity", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure Salinity {
            get {
                return this.salinityField;
            }
            set {
                this.salinityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The rsw for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The rsw for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Rsw", DataType="double")]
        public double Rsw {
            get {
                return this.rswField;
            }
            set {
                this.rswField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RswSpecified {
            get {
                return this.rswFieldSpecified;
            }
            set {
                this.rswFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The shear for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The shear for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Shear", DataType="double")]
        public double Shear {
            get {
                return this.shearField;
            }
            set {
                this.shearField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShearSpecified {
            get {
                return this.shearFieldSpecified;
            }
            set {
                this.shearFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidCharacterizationTable {
        
        private FluidCharacterizationTableConstant[] tableConstantField;
        
        private string remarkField;
        
        private FluidCharacterizationTableRow[] tableRowField;
        
        private string uidField;
        
        private string tableFormatField;
        
        private string nameField;
        
        /// <remarks/>
        /// <summary>A constant associated with this fluid characterization table.</summary>
        [System.Xml.Serialization.XmlElementAttribute("TableConstant")]
        [System.ComponentModel.DescriptionAttribute("A constant associated with this fluid characterization table.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TableConstant", DataType="FluidCharacterizationTableConstant")]
        public FluidCharacterizationTableConstant[] TableConstant {
            get {
                return this.tableConstantField;
            }
            set {
                this.tableConstantField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TableRow")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TableRow", DataType="FluidCharacterizationTableRow")]
        public FluidCharacterizationTableRow[] TableRow {
            get {
                return this.tableRowField;
            }
            set {
                this.tableRowField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The uid reference of the table format for this table.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The uid reference of the table format for this table.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("tableFormat", DataType="String64")]
        public string tableFormat {
            get {
                return this.tableFormatField;
            }
            set {
                this.tableFormatField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of this table.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of this table.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("name", DataType="String64")]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidCharacterizationTableConstant {
        
        private Energistics.DataAccess.ExtensibleEnum<OutputFluidProperty> propertyField;
        
        private ThermodynamicPhase phaseField;
        
        private bool phaseFieldSpecified;
        
        private ObjectAlias[] keywordAliasField;
        
        private string fluidComponentReferenceField;
        
        private string nameField;
        
        private decimal valueField;
        
        private string uomField;
        
        /// <remarks/>
        /// <summary>The property that this table constant contains. Enum. See output fluid property ext.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The property that this table constant contains. Enum. See output fluid property e" +
            "xt.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Property", DataType="OutputFluidPropertyExt")]
        public Energistics.DataAccess.ExtensibleEnum<OutputFluidProperty> Property {
            get {
                return this.propertyField;
            }
            set {
                this.propertyField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Phase", DataType="ThermodynamicPhase")]
        public ThermodynamicPhase Phase {
            get {
                return this.phaseField;
            }
            set {
                this.phaseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PhaseSpecified {
            get {
                return this.phaseFieldSpecified;
            }
            set {
                this.phaseFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("KeywordAlias")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KeywordAlias", DataType="ObjectAlias")]
        public ObjectAlias[] KeywordAlias {
            get {
                return this.keywordAliasField;
            }
            set {
                this.keywordAliasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the fluid component to which this value relates.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to the fluid component to which this value relates.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("fluidComponentReference", DataType="String64")]
        public string fluidComponentReference {
            get {
                return this.fluidComponentReferenceField;
            }
            set {
                this.fluidComponentReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>User-defined name for this attribute.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("User-defined name for this attribute.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("name", DataType="String64")]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The value for this table constant.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The value for this table constant.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("value", DataType="decimal")]
        public decimal value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The UOM for this constant for this fluid characterization table.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The UOM for this constant for this fluid characterization table.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="String64")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ThermodynamicPhase {
        
        /// <remarks/>
        aqueous,
        
        /// <remarks/>
        oleic,
        
        /// <remarks/>
        vapor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("total hydrocarbon")]
        totalhydrocarbon,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidCharacterizationTableRow {
        
        private string rowField;
        
        private saturationKind kindField;
        
        private bool kindFieldSpecified;
        
        private string valueField;
        
        /// <remarks/>
        /// <summary>The string containing the contents of a row in the table.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The string containing the contents of a row in the table.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("row", DataType="String64")]
        public string row {
            get {
                return this.rowField;
            }
            set {
                this.rowField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This type characteristic describes the row of data as either saturated or under-saturated at the conditions defined for the row.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute("This type characteristic describes the row of data as either saturated or under-s" +
            "aturated at the conditions defined for the row.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("kind", DataType="saturationKind")]
        public saturationKind kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool kindSpecified {
            get {
                return this.kindFieldSpecified;
            }
            set {
                this.kindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum saturationKind {
        
        /// <remarks/>
        saturated,
        
        /// <remarks/>
        undersaturated,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidCharacterizationTableFormat {
        
        private string nullValueField;
        
        private TableDelimiter delimiterField;
        
        private FluidCharacterizationTableColumn[] tableColumnField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The null value for this fluid characterization table format.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The null value for this fluid characterization table format.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NullValue", DataType="String64")]
        public string NullValue {
            get {
                return this.nullValueField;
            }
            set {
                this.nullValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The delimiter for this fluid characterization table format.</summary>
        [System.ComponentModel.DescriptionAttribute("The delimiter for this fluid characterization table format.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Delimiter", DataType="TableDelimiter")]
        public TableDelimiter Delimiter {
            get {
                return this.delimiterField;
            }
            set {
                this.delimiterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TableColumn")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TableColumn", DataType="FluidCharacterizationTableColumn")]
        public FluidCharacterizationTableColumn[] TableColumn {
            get {
                return this.tableColumnField;
            }
            set {
                this.tableColumnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class TableDelimiter {
        
        private string asciiCharactersField;
        
        /// <remarks/>
        /// <summary>The ascii character which represents a column delimiter in each row of a table using this table format.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The ascii character which represents a column delimiter in each row of a table us" +
            "ing this table format.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("asciiCharacters", DataType="String64")]
        public string asciiCharacters {
            get {
                return this.asciiCharactersField;
            }
            set {
                this.asciiCharactersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidCharacterizationTableColumn {
        
        private Energistics.DataAccess.ExtensibleEnum<OutputFluidProperty> propertyField;
        
        private ThermodynamicPhase phaseField;
        
        private bool phaseFieldSpecified;
        
        private ObjectAlias[] keywordAliasField;
        
        private string fluidComponentReferenceField;
        
        private string nameField;
        
        private long sequenceField;
        
        private bool sequenceFieldSpecified;
        
        private string uomField;
        
        /// <remarks/>
        /// <summary>The property that this column contains. Enum. See output fluid property ext.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The property that this column contains. Enum. See output fluid property ext.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Property", DataType="OutputFluidPropertyExt")]
        public Energistics.DataAccess.ExtensibleEnum<OutputFluidProperty> Property {
            get {
                return this.propertyField;
            }
            set {
                this.propertyField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Phase", DataType="ThermodynamicPhase")]
        public ThermodynamicPhase Phase {
            get {
                return this.phaseField;
            }
            set {
                this.phaseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PhaseSpecified {
            get {
                return this.phaseFieldSpecified;
            }
            set {
                this.phaseFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("KeywordAlias")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KeywordAlias", DataType="ObjectAlias")]
        public ObjectAlias[] KeywordAlias {
            get {
                return this.keywordAliasField;
            }
            set {
                this.keywordAliasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The  reference to a fluid component for this column in this fluid characterization table.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The  reference to a fluid component for this column in this fluid characterizatio" +
            "n table.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("fluidComponentReference", DataType="String64")]
        public string fluidComponentReference {
            get {
                return this.fluidComponentReferenceField;
            }
            set {
                this.fluidComponentReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name for this column in this fluid characterization table.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name for this column in this fluid characterization table.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("name", DataType="String64")]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Index number for this column for consumption by an external system.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute("Index number for this column for consumption by an external system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("sequence", DataType="NonNegativeLong")]
        public long sequence {
            get {
                return this.sequenceField;
            }
            set {
                this.sequenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sequenceSpecified {
            get {
                return this.sequenceFieldSpecified;
            }
            set {
                this.sequenceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The UOM for this column in this fluid characterization table.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The UOM for this column in this fluid characterization table.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="String64")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class VaporLiquidEquilibriumTest {
        
        private long testNumberField;
        
        private ThermodynamicTemperatureMeasure testTemperatureField;
        
        private PressureMeasure testPressureField;
        
        private VolumePerVolumeMeasure gasSolventAddedField;
        
        private VolumeMeasure mixtureVolumeField;
        
        private AmountOfSubstancePerAmountOfSubstanceMeasure mixtureGasSolventMoleFractionField;
        
        private VolumePerVolumeMeasure mixtureGORField;
        
        private ThermodynamicTemperatureMeasure mixturePsatTestTemperatureField;
        
        private VolumePerVolumeMeasure mixtureRelativeVolumeRelativeToPsatField;
        
        private string atmosphericFlashTestReferenceField;
        
        private InjectedGas injectedGasAddedField;
        
        private RefInjectedGasAdded cumulativeGasAddedField;
        
        private VolumePerVolumeMeasure vaporPhaseVolumeField;
        
        private PhaseViscosity vaporPhaseViscosityField;
        
        private PhaseDensity[] vaporPhaseDensityField;
        
        private VolumePerVolumeMeasure liquidPhaseVolumeField;
        
        private PhaseDensity liquidPhaseDensityField;
        
        private FluidComponent[] vaporCompositionField;
        
        private string vaporTransportTestReferenceField;
        
        private string liquidTransportTestReferenceField;
        
        private LiquidComposition[] liquidCompositionField;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>An integer number to identify this test in a sequence of tests.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("An integer number to identify this test in a sequence of tests.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestNumber", DataType="NonNegativeLong")]
        public long TestNumber {
            get {
                return this.testNumberField;
            }
            set {
                this.testNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature of this test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The temperature of this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return this.testTemperatureField;
            }
            set {
                this.testTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure of this test.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure of this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestPressure", DataType="PressureMeasure")]
        public PressureMeasure TestPressure {
            get {
                return this.testPressureField;
            }
            set {
                this.testPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas solvent added for this VLE test.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas solvent added for this VLE test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasSolventAdded", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure GasSolventAdded {
            get {
                return this.gasSolventAddedField;
            }
            set {
                this.gasSolventAddedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mixture volume for this VLE test.</summary>
        [System.ComponentModel.DescriptionAttribute("The mixture volume for this VLE test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MixtureVolume", DataType="VolumeMeasure")]
        public VolumeMeasure MixtureVolume {
            get {
                return this.mixtureVolumeField;
            }
            set {
                this.mixtureVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mixture gas solvent mole fraction for this VLE test.</summary>
        [System.ComponentModel.DescriptionAttribute("The mixture gas solvent mole fraction for this VLE test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MixtureGasSolventMoleFraction", DataType="AmountOfSubstancePerAmountOfSubstanceMeasure")]
        public AmountOfSubstancePerAmountOfSubstanceMeasure MixtureGasSolventMoleFraction {
            get {
                return this.mixtureGasSolventMoleFractionField;
            }
            set {
                this.mixtureGasSolventMoleFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mixture gas-oil ratio for this VLE test.</summary>
        [System.ComponentModel.DescriptionAttribute("The mixture gas-oil ratio for this VLE test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MixtureGOR", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure MixtureGOR {
            get {
                return this.mixtureGORField;
            }
            set {
                this.mixtureGORField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mixture saturation pressure test temperature for this VLE test.</summary>
        [System.ComponentModel.DescriptionAttribute("The mixture saturation pressure test temperature for this VLE test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MixturePsatTestTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure MixturePsatTestTemperature {
            get {
                return this.mixturePsatTestTemperatureField;
            }
            set {
                this.mixturePsatTestTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mixture relative volume relative to volume a saturation pressure for this VLE test.</summary>
        [System.ComponentModel.DescriptionAttribute("The mixture relative volume relative to volume a saturation pressure for this VLE" +
            " test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MixtureRelativeVolumeRelativeToPsat", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure MixtureRelativeVolumeRelativeToPsat {
            get {
                return this.mixtureRelativeVolumeRelativeToPsatField;
            }
            set {
                this.mixtureRelativeVolumeRelativeToPsatField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the atmospheric flash test for this VLE test.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to the atmospheric flash test for this VLE test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AtmosphericFlashTestReference", DataType="String64")]
        public string AtmosphericFlashTestReference {
            get {
                return this.atmosphericFlashTestReferenceField;
            }
            set {
                this.atmosphericFlashTestReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the injected gas added for this VLE test.</summary>
        [System.ComponentModel.DescriptionAttribute("Reference to the injected gas added for this VLE test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InjectedGasAdded", DataType="InjectedGas")]
        public InjectedGas InjectedGasAdded {
            get {
                return this.injectedGasAddedField;
            }
            set {
                this.injectedGasAddedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the cumulative gas added for this VLE test.</summary>
        [System.ComponentModel.DescriptionAttribute("Reference to the cumulative gas added for this VLE test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CumulativeGasAdded", DataType="RefInjectedGasAdded")]
        public RefInjectedGasAdded CumulativeGasAdded {
            get {
                return this.cumulativeGasAddedField;
            }
            set {
                this.cumulativeGasAddedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The vapor phase volume for this VLE test.</summary>
        [System.ComponentModel.DescriptionAttribute("The vapor phase volume for this VLE test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VaporPhaseVolume", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure VaporPhaseVolume {
            get {
                return this.vaporPhaseVolumeField;
            }
            set {
                this.vaporPhaseVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The vapor phase viscosity for this VLE test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The vapor phase viscosity for this VLE test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VaporPhaseViscosity", DataType="PhaseViscosity")]
        public PhaseViscosity VaporPhaseViscosity {
            get {
                return this.vaporPhaseViscosityField;
            }
            set {
                this.vaporPhaseViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The vapor phase density for this VLE test.</summary>
        [System.Xml.Serialization.XmlElementAttribute("VaporPhaseDensity")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The vapor phase density for this VLE test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VaporPhaseDensity", DataType="PhaseDensity")]
        public PhaseDensity[] VaporPhaseDensity {
            get {
                return this.vaporPhaseDensityField;
            }
            set {
                this.vaporPhaseDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The liquid phase volume for this VLE test.</summary>
        [System.ComponentModel.DescriptionAttribute("The liquid phase volume for this VLE test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidPhaseVolume", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure LiquidPhaseVolume {
            get {
                return this.liquidPhaseVolumeField;
            }
            set {
                this.liquidPhaseVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The liquid phase density for this VLE test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The liquid phase density for this VLE test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidPhaseDensity", DataType="PhaseDensity")]
        public PhaseDensity LiquidPhaseDensity {
            get {
                return this.liquidPhaseDensityField;
            }
            set {
                this.liquidPhaseDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The vapor composition for this VLE test.</summary>
        [System.Xml.Serialization.XmlElementAttribute("VaporComposition")]
        [System.ComponentModel.DescriptionAttribute("The vapor composition for this VLE test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VaporComposition", DataType="FluidComponent")]
        public FluidComponent[] VaporComposition {
            get {
                return this.vaporCompositionField;
            }
            set {
                this.vaporCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to a vapor transport property test associated with this VLE test.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A reference to a vapor transport property test associated with this VLE test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VaporTransportTestReference", DataType="String64")]
        public string VaporTransportTestReference {
            get {
                return this.vaporTransportTestReferenceField;
            }
            set {
                this.vaporTransportTestReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to a liquid transport property test associated with this VLE test.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A reference to a liquid transport property test associated with this VLE test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidTransportTestReference", DataType="String64")]
        public string LiquidTransportTestReference {
            get {
                return this.liquidTransportTestReferenceField;
            }
            set {
                this.liquidTransportTestReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The liquid composition for this VLE test.</summary>
        [System.Xml.Serialization.XmlElementAttribute("LiquidComposition")]
        [System.ComponentModel.DescriptionAttribute("The liquid composition for this VLE test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidComposition", DataType="LiquidComposition")]
        public LiquidComposition[] LiquidComposition {
            get {
                return this.liquidCompositionField;
            }
            set {
                this.liquidCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class InjectedGas {
        
        private VaporComposition[] vaporCompositionField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The composition of injected gas (vapor) for this test.</summary>
        [System.Xml.Serialization.XmlElementAttribute("VaporComposition")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The composition of injected gas (vapor) for this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VaporComposition", DataType="VaporComposition")]
        public VaporComposition[] VaporComposition {
            get {
                return this.vaporCompositionField;
            }
            set {
                this.vaporCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class PhaseViscosity {
        
        private PressureMeasure pressureField;
        
        private DynamicViscosityMeasure viscosityField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The pressure corresponding to this phase viscosity.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure corresponding to this phase viscosity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pressure", DataType="PressureMeasure")]
        public PressureMeasure Pressure {
            get {
                return this.pressureField;
            }
            set {
                this.pressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The phase viscosity.</summary>
        [System.ComponentModel.DescriptionAttribute("The phase viscosity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Viscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure Viscosity {
            get {
                return this.viscosityField;
            }
            set {
                this.viscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class PhaseDensity {
        
        private PressureMeasure pressureField;
        
        private MassPerVolumeMeasure densityField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The pressure corresponding to this phase density.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure corresponding to this phase density.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pressure", DataType="PressureMeasure")]
        public PressureMeasure Pressure {
            get {
                return this.pressureField;
            }
            set {
                this.pressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The phase density.</summary>
        [System.ComponentModel.DescriptionAttribute("The phase density.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Density", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Density {
            get {
                return this.densityField;
            }
            set {
                this.densityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class SwellingTest {
        
        private long testNumberField;
        
        private ThermodynamicTemperatureMeasure testTemperatureField;
        
        private InjectedGas[] injectedGasField;
        
        private string remarkField;
        
        private SwellingTestStep[] swellingTestStepField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>An integer number to identify this test in a sequence of tests.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("An integer number to identify this test in a sequence of tests.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestNumber", DataType="NonNegativeLong")]
        public long TestNumber {
            get {
                return this.testNumberField;
            }
            set {
                this.testNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature of this test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The temperature of this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return this.testTemperatureField;
            }
            set {
                this.testTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the gas injected during the swelling test.</summary>
        [System.Xml.Serialization.XmlElementAttribute("InjectedGas")]
        [System.ComponentModel.DescriptionAttribute("Reference to the gas injected during the swelling test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InjectedGas", DataType="InjectedGas")]
        public InjectedGas[] InjectedGas {
            get {
                return this.injectedGasField;
            }
            set {
                this.injectedGasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SwellingTestStep")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SwellingTestStep", DataType="SwellingTestStep")]
        public SwellingTestStep[] SwellingTestStep {
            get {
                return this.swellingTestStepField;
            }
            set {
                this.swellingTestStepField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class SwellingTestStep {
        
        private long stepNumberField;
        
        private RefInjectedGasAdded[] incrementalGasAddedField;
        
        private RefInjectedGasAdded[] cumulativeGasAddedField;
        
        private VolumePerVolumeMeasure gorField;
        
        private SaturationPressure saturationPressureField;
        
        private RelativeVolumeRatio swollenVolumeField;
        
        private VolumePerVolumeMeasure swellingFactorField;
        
        private MassPerVolumeMeasure densityAtSaturationPointField;
        
        private string constantCompositionExpansionTestField;
        
        private string transportPropertyTestReferenceField;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The step number is the index of a (P,T) step in the overall test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The step number is the index of a (P,T) step in the overall test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepNumber", DataType="NonNegativeLong")]
        public long StepNumber {
            get {
                return this.stepNumberField;
            }
            set {
                this.stepNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The incremental gas added for this swelling test step.</summary>
        [System.Xml.Serialization.XmlElementAttribute("IncrementalGasAdded")]
        [System.ComponentModel.DescriptionAttribute("The incremental gas added for this swelling test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IncrementalGasAdded", DataType="RefInjectedGasAdded")]
        public RefInjectedGasAdded[] IncrementalGasAdded {
            get {
                return this.incrementalGasAddedField;
            }
            set {
                this.incrementalGasAddedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The cumulative gas added for this swelling test step.</summary>
        [System.Xml.Serialization.XmlElementAttribute("CumulativeGasAdded")]
        [System.ComponentModel.DescriptionAttribute("The cumulative gas added for this swelling test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CumulativeGasAdded", DataType="RefInjectedGasAdded")]
        public RefInjectedGasAdded[] CumulativeGasAdded {
            get {
                return this.cumulativeGasAddedField;
            }
            set {
                this.cumulativeGasAddedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas-oil ratio for this swelling test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas-oil ratio for this swelling test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Gor", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Gor {
            get {
                return this.gorField;
            }
            set {
                this.gorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The saturation (or bubble point) pressure measured in this test.</summary>
        [System.ComponentModel.DescriptionAttribute("The saturation (or bubble point) pressure measured in this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SaturationPressure", DataType="SaturationPressure")]
        public SaturationPressure SaturationPressure {
            get {
                return this.saturationPressureField;
            }
            set {
                this.saturationPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The swollen volume for this swelling test step, relative to a reference volume.</summary>
        [System.ComponentModel.DescriptionAttribute("The swollen volume for this swelling test step, relative to a reference volume.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SwollenVolume", DataType="RelativeVolumeRatio")]
        public RelativeVolumeRatio SwollenVolume {
            get {
                return this.swollenVolumeField;
            }
            set {
                this.swollenVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The swelling factor for this swelling test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The swelling factor for this swelling test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SwellingFactor", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure SwellingFactor {
            get {
                return this.swellingFactorField;
            }
            set {
                this.swellingFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density at saturation point for this swelling test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The density at saturation point for this swelling test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensityAtSaturationPoint", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensityAtSaturationPoint {
            get {
                return this.densityAtSaturationPointField;
            }
            set {
                this.densityAtSaturationPointField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to a constant composition expansion test associated with this swelling test.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A reference to a constant composition expansion test associated with this swellin" +
            "g test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConstantCompositionExpansionTest", DataType="String64")]
        public string ConstantCompositionExpansionTest {
            get {
                return this.constantCompositionExpansionTestField;
            }
            set {
                this.constantCompositionExpansionTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to a transport property test associated with this swelling test.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A reference to a transport property test associated with this swelling test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TransportPropertyTestReference", DataType="String64")]
        public string TransportPropertyTestReference {
            get {
                return this.transportPropertyTestReferenceField;
            }
            set {
                this.transportPropertyTestReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class SlimTubeTest {
        
        private long testNumberField;
        
        private ThermodynamicTemperatureMeasure testTemperatureField;
        
        private ThermodynamicTemperatureMeasure pumpTemperatureField;
        
        private string remarkField;
        
        private SlimTubeTestStep[] slimTubeTestPressureStepField;
        
        private SlimTubeSpecification[] slimTubeSpecificationField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>An integer number to identify this test in a sequence of tests.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("An integer number to identify this test in a sequence of tests.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestNumber", DataType="NonNegativeLong")]
        public long TestNumber {
            get {
                return this.testNumberField;
            }
            set {
                this.testNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature of this test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The temperature of this test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return this.testTemperatureField;
            }
            set {
                this.testTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pump temperature during the slim-tube test.</summary>
        [System.ComponentModel.DescriptionAttribute("The pump temperature during the slim-tube test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PumpTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure PumpTemperature {
            get {
                return this.pumpTemperatureField;
            }
            set {
                this.pumpTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SlimTubeTestPressureStep")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SlimTubeTestPressureStep", DataType="SlimTubeTestStep")]
        public SlimTubeTestStep[] SlimTubeTestPressureStep {
            get {
                return this.slimTubeTestPressureStepField;
            }
            set {
                this.slimTubeTestPressureStepField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SlimTubeSpecification")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SlimTubeSpecification", DataType="SlimTubeSpecification")]
        public SlimTubeSpecification[] SlimTubeSpecification {
            get {
                return this.slimTubeSpecificationField;
            }
            set {
                this.slimTubeSpecificationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class SlimTubeTestStep {
        
        private long stepNumberField;
        
        private PressureMeasure stepAveragePressureField;
        
        private string remarkField;
        
        private SlimTubeTestVolumeStep[] slimTubeTestVolumeStepField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The step number is the index of a (P,T) step in the overall test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The step number is the index of a (P,T) step in the overall test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepNumber", DataType="NonNegativeLong")]
        public long StepNumber {
            get {
                return this.stepNumberField;
            }
            set {
                this.stepNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average pressure for this slim-tube test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The average pressure for this slim-tube test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepAveragePressure", DataType="PressureMeasure")]
        public PressureMeasure StepAveragePressure {
            get {
                return this.stepAveragePressureField;
            }
            set {
                this.stepAveragePressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SlimTubeTestVolumeStep")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SlimTubeTestVolumeStep", DataType="SlimTubeTestVolumeStep")]
        public SlimTubeTestVolumeStep[] SlimTubeTestVolumeStep {
            get {
                return this.slimTubeTestVolumeStepField;
            }
            set {
                this.slimTubeTestVolumeStepField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class SlimTubeTestVolumeStep {
        
        private long stepNumberField;
        
        private PressureMeasure differentialPressureField;
        
        private string runTimeField;
        
        private VolumeMeasure injectionVolumeAtPumpTemperatureField;
        
        private VolumeMeasure injectionVolumeAtTestTemperatureField;
        
        private VolumePerVolumeMeasure injectedPoreVolumeFractionField;
        
        private LengthPerTimeMeasure darcyVelocityField;
        
        private VolumePerVolumeMeasure cumulativeOilProductionPercOOIPField;
        
        private VolumeMeasure cumulativeOilProductionSTOField;
        
        private VolumePerVolumeMeasure incrementalProducedGORField;
        
        private VolumePerVolumeMeasure cumulativeProducedGORField;
        
        private string remarkField;
        
        private ProducedGasProperties producedGasPropertiesField;
        
        private ProducedOilProperties producedOilPropertiesField;
        
        private MassBalance massBalanceField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The step number is the index of a (P,T) step in the overall test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The step number is the index of a (P,T) step in the overall test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepNumber", DataType="NonNegativeLong")]
        public long StepNumber {
            get {
                return this.stepNumberField;
            }
            set {
                this.stepNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The differential pressure of the slim-tube test volume step.</summary>
        [System.ComponentModel.DescriptionAttribute("The differential pressure of the slim-tube test volume step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DifferentialPressure", DataType="PressureMeasure")]
        public PressureMeasure DifferentialPressure {
            get {
                return this.differentialPressureField;
            }
            set {
                this.differentialPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The run time of the slim-tube test volume step.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The run time of the slim-tube test volume step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RunTime", DataType="String64")]
        public string RunTime {
            get {
                return this.runTimeField;
            }
            set {
                this.runTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The injection volume at pump temperature of the slim-tube test volume step.</summary>
        [System.ComponentModel.DescriptionAttribute("The injection volume at pump temperature of the slim-tube test volume step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InjectionVolumeAtPumpTemperature", DataType="VolumeMeasure")]
        public VolumeMeasure InjectionVolumeAtPumpTemperature {
            get {
                return this.injectionVolumeAtPumpTemperatureField;
            }
            set {
                this.injectionVolumeAtPumpTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The injection volume at test temperature of the slim-tube test volume step.</summary>
        [System.ComponentModel.DescriptionAttribute("The injection volume at test temperature of the slim-tube test volume step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InjectionVolumeAtTestTemperature", DataType="VolumeMeasure")]
        public VolumeMeasure InjectionVolumeAtTestTemperature {
            get {
                return this.injectionVolumeAtTestTemperatureField;
            }
            set {
                this.injectionVolumeAtTestTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The injected pore volume fraction of the slim-tube test volume step.</summary>
        [System.ComponentModel.DescriptionAttribute("The injected pore volume fraction of the slim-tube test volume step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InjectedPoreVolumeFraction", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure InjectedPoreVolumeFraction {
            get {
                return this.injectedPoreVolumeFractionField;
            }
            set {
                this.injectedPoreVolumeFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The Darcy velocity of the slim-tube test volume step.</summary>
        [System.ComponentModel.DescriptionAttribute("The Darcy velocity of the slim-tube test volume step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DarcyVelocity", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure DarcyVelocity {
            get {
                return this.darcyVelocityField;
            }
            set {
                this.darcyVelocityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The cumulative oil production as a fraction of the original oil in place of the slim-tube test volume step.</summary>
        [System.ComponentModel.DescriptionAttribute("The cumulative oil production as a fraction of the original oil in place of the s" +
            "lim-tube test volume step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CumulativeOilProductionPercOOIP", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure CumulativeOilProductionPercOOIP {
            get {
                return this.cumulativeOilProductionPercOOIPField;
            }
            set {
                this.cumulativeOilProductionPercOOIPField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The cumulative oil production of stock stank oil for the slim-tube test volume step.</summary>
        [System.ComponentModel.DescriptionAttribute("The cumulative oil production of stock stank oil for the slim-tube test volume st" +
            "ep.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CumulativeOilProductionSTO", DataType="VolumeMeasure")]
        public VolumeMeasure CumulativeOilProductionSTO {
            get {
                return this.cumulativeOilProductionSTOField;
            }
            set {
                this.cumulativeOilProductionSTOField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The incremental produced GOR of the slim-tube test volume step.</summary>
        [System.ComponentModel.DescriptionAttribute("The incremental produced GOR of the slim-tube test volume step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IncrementalProducedGOR", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure IncrementalProducedGOR {
            get {
                return this.incrementalProducedGORField;
            }
            set {
                this.incrementalProducedGORField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The cumulative oil production GOR for the slim-tube test volume step.</summary>
        [System.ComponentModel.DescriptionAttribute("The cumulative oil production GOR for the slim-tube test volume step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CumulativeProducedGOR", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure CumulativeProducedGOR {
            get {
                return this.cumulativeProducedGORField;
            }
            set {
                this.cumulativeProducedGORField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProducedGasProperties", DataType="ProducedGasProperties")]
        public ProducedGasProperties ProducedGasProperties {
            get {
                return this.producedGasPropertiesField;
            }
            set {
                this.producedGasPropertiesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProducedOilProperties", DataType="ProducedOilProperties")]
        public ProducedOilProperties ProducedOilProperties {
            get {
                return this.producedOilPropertiesField;
            }
            set {
                this.producedOilPropertiesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassBalance", DataType="MassBalance")]
        public MassBalance MassBalance {
            get {
                return this.massBalanceField;
            }
            set {
                this.massBalanceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class LengthPerTimeMeasure {
        
        private LengthPerTimeUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthPerTimeUom")]
        public LengthPerTimeUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft/h")]
        Item1000fth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft/s")]
        Item1000fts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/a")]
        cma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/s")]
        cms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm/s")]
        dms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/d")]
        ftd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/h")]
        fth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/min")]
        ftmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ms")]
        ftms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/s")]
        fts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/us")]
        ftus,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/a")]
        ina,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/min")]
        inmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/s")]
        ins,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/h")]
        kmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/s")]
        kms,
        
        /// <remarks/>
        knot,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/d")]
        md,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/h")]
        mh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/min")]
        mmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/ms")]
        mms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/s")]
        ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/h")]
        mih,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mil/a")]
        mila,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/a")]
        mma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/s")]
        mms1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nm/s")]
        nms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("um/s")]
        ums,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProducedGasProperties {
        
        private DimensionlessMeasure producedGasGravityField;
        
        private VaporComposition[] vaporCompositionField;
        
        /// <remarks/>
        /// <summary>The produced gas gravity of this produced gas.</summary>
        [System.ComponentModel.DescriptionAttribute("The produced gas gravity of this produced gas.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProducedGasGravity", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure ProducedGasGravity {
            get {
                return this.producedGasGravityField;
            }
            set {
                this.producedGasGravityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The vapor composition of this produced gas.</summary>
        [System.Xml.Serialization.XmlElementAttribute("VaporComposition")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The vapor composition of this produced gas.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VaporComposition", DataType="VaporComposition")]
        public VaporComposition[] VaporComposition {
            get {
                return this.vaporCompositionField;
            }
            set {
                this.vaporCompositionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProducedOilProperties {
        
        private MassPerVolumeMeasure sTODensityField;
        
        private APIGravityMeasure sTOApiGravityField;
        
        private MolecularWeightMeasure sTOMWField;
        
        private VolumePerVolumeMeasure sTOWaterContentField;
        
        private MassPerMassMeasure asphalteneContentField;
        
        /// <remarks/>
        /// <summary>The stock tank oil density of this produced oil.</summary>
        [System.ComponentModel.DescriptionAttribute("The stock tank oil density of this produced oil.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("STODensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure STODensity {
            get {
                return this.sTODensityField;
            }
            set {
                this.sTODensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The stock tank oil API gravity of this produced oil.</summary>
        [System.ComponentModel.DescriptionAttribute("The stock tank oil API gravity of this produced oil.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("STOApiGravity", DataType="APIGravityMeasure")]
        public APIGravityMeasure STOApiGravity {
            get {
                return this.sTOApiGravityField;
            }
            set {
                this.sTOApiGravityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The stock tank oil molecular weight of this produced oil.</summary>
        [System.ComponentModel.DescriptionAttribute("The stock tank oil molecular weight of this produced oil.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("STOMW", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure STOMW {
            get {
                return this.sTOMWField;
            }
            set {
                this.sTOMWField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The stock tank oil water content of this produced oil.</summary>
        [System.ComponentModel.DescriptionAttribute("The stock tank oil water content of this produced oil.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("STOWaterContent", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure STOWaterContent {
            get {
                return this.sTOWaterContentField;
            }
            set {
                this.sTOWaterContentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The asphaltene content of this produced oil.</summary>
        [System.ComponentModel.DescriptionAttribute("The asphaltene content of this produced oil.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AsphalteneContent", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure AsphalteneContent {
            get {
                return this.asphalteneContentField;
            }
            set {
                this.asphalteneContentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class MassBalance {
        
        private MassPerMassMeasure massBalanceFractionField;
        
        private string remarkField;
        
        private MassIn massInField;
        
        private MassOut massOutField;
        
        /// <remarks/>
        /// <summary>The mass balance fraction for this slim tube test volume step.</summary>
        [System.ComponentModel.DescriptionAttribute("The mass balance fraction for this slim tube test volume step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassBalanceFraction", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure MassBalanceFraction {
            get {
                return this.massBalanceFractionField;
            }
            set {
                this.massBalanceFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassIn", DataType="MassIn")]
        public MassIn MassIn {
            get {
                return this.massInField;
            }
            set {
                this.massInField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassOut", DataType="MassOut")]
        public MassOut MassOut {
            get {
                return this.massOutField;
            }
            set {
                this.massOutField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class MassIn {
        
        private MassMeasure massFluidSlimtubeField;
        
        private MassMeasure massFluidConnectingLinesField;
        
        private MassMeasure massInjectedGasSolventField;
        
        private MassMeasure totalMassInField;
        
        /// <remarks/>
        /// <summary>The mass of fluid in the slim tube for this slim tube test volume step mass balance.</summary>
        [System.ComponentModel.DescriptionAttribute("The mass of fluid in the slim tube for this slim tube test volume step mass balan" +
            "ce.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassFluidSlimtube", DataType="MassMeasure")]
        public MassMeasure MassFluidSlimtube {
            get {
                return this.massFluidSlimtubeField;
            }
            set {
                this.massFluidSlimtubeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mass of fluid in the connecting lines for this slim tube test volume step mass balance.</summary>
        [System.ComponentModel.DescriptionAttribute("The mass of fluid in the connecting lines for this slim tube test volume step mas" +
            "s balance.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassFluidConnectingLines", DataType="MassMeasure")]
        public MassMeasure MassFluidConnectingLines {
            get {
                return this.massFluidConnectingLinesField;
            }
            set {
                this.massFluidConnectingLinesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mass of injected gas solvent for this slim tube test volume step mass balance.</summary>
        [System.ComponentModel.DescriptionAttribute("The mass of injected gas solvent for this slim tube test volume step mass balance" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassInjectedGasSolvent", DataType="MassMeasure")]
        public MassMeasure MassInjectedGasSolvent {
            get {
                return this.massInjectedGasSolventField;
            }
            set {
                this.massInjectedGasSolventField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total mass in for this slim tube test volume step mass balance.</summary>
        [System.ComponentModel.DescriptionAttribute("The total mass in for this slim tube test volume step mass balance.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalMassIn", DataType="MassMeasure")]
        public MassMeasure TotalMassIn {
            get {
                return this.totalMassInField;
            }
            set {
                this.totalMassInField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class MassOut {
        
        private MassMeasure massEffluentStockTankOilField;
        
        private MassMeasure massProducedEffluentGasField;
        
        private MassMeasure massResidualOilField;
        
        private MassMeasure massProducedEffluentGasFlowDownField;
        
        private MassMeasure totalMassOutField;
        
        /// <remarks/>
        /// <summary>The mass of effluent stock tank oil for this slim tube test volume step mass balance.</summary>
        [System.ComponentModel.DescriptionAttribute("The mass of effluent stock tank oil for this slim tube test volume step mass bala" +
            "nce.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassEffluentStockTankOil", DataType="MassMeasure")]
        public MassMeasure MassEffluentStockTankOil {
            get {
                return this.massEffluentStockTankOilField;
            }
            set {
                this.massEffluentStockTankOilField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mass of produced effluent gas for this slim tube test volume step mass balance.</summary>
        [System.ComponentModel.DescriptionAttribute("The mass of produced effluent gas for this slim tube test volume step mass balanc" +
            "e.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassProducedEffluentGas", DataType="MassMeasure")]
        public MassMeasure MassProducedEffluentGas {
            get {
                return this.massProducedEffluentGasField;
            }
            set {
                this.massProducedEffluentGasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mass of residual oil for this slim tube test volume step mass balance.</summary>
        [System.ComponentModel.DescriptionAttribute("The mass of residual oil for this slim tube test volume step mass balance.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassResidualOil", DataType="MassMeasure")]
        public MassMeasure MassResidualOil {
            get {
                return this.massResidualOilField;
            }
            set {
                this.massResidualOilField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mass of produced effluent gas flow down for this slim tube test volume step mass balance.</summary>
        [System.ComponentModel.DescriptionAttribute("The mass of produced effluent gas flow down for this slim tube test volume step m" +
            "ass balance.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassProducedEffluentGasFlowDown", DataType="MassMeasure")]
        public MassMeasure MassProducedEffluentGasFlowDown {
            get {
                return this.massProducedEffluentGasFlowDownField;
            }
            set {
                this.massProducedEffluentGasFlowDownField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total mass out for this slim tube test volume step mass balance.</summary>
        [System.ComponentModel.DescriptionAttribute("The total mass out for this slim tube test volume step mass balance.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalMassOut", DataType="MassMeasure")]
        public MassMeasure TotalMassOut {
            get {
                return this.totalMassOutField;
            }
            set {
                this.totalMassOutField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class SlimTubeSpecification {
        
        private LengthMeasure lengthField;
        
        private LengthMeasure outerDiameterField;
        
        private LengthMeasure innerDiameterField;
        
        private AreaMeasure crossSectionAreaField;
        
        private string packingMaterialField;
        
        private VolumeMeasure poreVolumeField;
        
        private VolumePerVolumeMeasure porosityField;
        
        private PermeabilityRockMeasure permeabilityField;
        
        private InjectedGas[] injectedGasField;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The length of the slim tube.</summary>
        [System.ComponentModel.DescriptionAttribute("The length of the slim tube.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Length", DataType="LengthMeasure")]
        public LengthMeasure Length {
            get {
                return this.lengthField;
            }
            set {
                this.lengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The outer diameter of the slim tube.</summary>
        [System.ComponentModel.DescriptionAttribute("The outer diameter of the slim tube.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OuterDiameter", DataType="LengthMeasure")]
        public LengthMeasure OuterDiameter {
            get {
                return this.outerDiameterField;
            }
            set {
                this.outerDiameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The inner diameter of the slim tube.</summary>
        [System.ComponentModel.DescriptionAttribute("The inner diameter of the slim tube.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InnerDiameter", DataType="LengthMeasure")]
        public LengthMeasure InnerDiameter {
            get {
                return this.innerDiameterField;
            }
            set {
                this.innerDiameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The cross section area of the slim tube.</summary>
        [System.ComponentModel.DescriptionAttribute("The cross section area of the slim tube.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CrossSectionArea", DataType="AreaMeasure")]
        public AreaMeasure CrossSectionArea {
            get {
                return this.crossSectionAreaField;
            }
            set {
                this.crossSectionAreaField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The packing material used in the slim tube.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The packing material used in the slim tube.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PackingMaterial", DataType="String64")]
        public string PackingMaterial {
            get {
                return this.packingMaterialField;
            }
            set {
                this.packingMaterialField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pore volume of the slim tube.</summary>
        [System.ComponentModel.DescriptionAttribute("The pore volume of the slim tube.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PoreVolume", DataType="VolumeMeasure")]
        public VolumeMeasure PoreVolume {
            get {
                return this.poreVolumeField;
            }
            set {
                this.poreVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The porosity of the slim tube.</summary>
        [System.ComponentModel.DescriptionAttribute("The porosity of the slim tube.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Porosity", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Porosity {
            get {
                return this.porosityField;
            }
            set {
                this.porosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The permeability of the slim tube.</summary>
        [System.ComponentModel.DescriptionAttribute("The permeability of the slim tube.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Permeability", DataType="PermeabilityRockMeasure")]
        public PermeabilityRockMeasure Permeability {
            get {
                return this.permeabilityField;
            }
            set {
                this.permeabilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the gas injected into the slim tube.</summary>
        [System.Xml.Serialization.XmlElementAttribute("InjectedGas")]
        [System.ComponentModel.DescriptionAttribute("Reference to the gas injected into the slim tube.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InjectedGas", DataType="InjectedGas")]
        public InjectedGas[] InjectedGas {
            get {
                return this.injectedGasField;
            }
            set {
                this.injectedGasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class AreaMeasure {
        
        private AreaUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="AreaUom")]
        public AreaUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaUom {
        
        /// <remarks/>
        acre,
        
        /// <remarks/>
        b,
        
        /// <remarks/>
        cm2,
        
        /// <remarks/>
        ft2,
        
        /// <remarks/>
        ha,
        
        /// <remarks/>
        in2,
        
        /// <remarks/>
        km2,
        
        /// <remarks/>
        m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[US]2")]
        miUS2,
        
        /// <remarks/>
        mi2,
        
        /// <remarks/>
        mm2,
        
        /// <remarks/>
        section,
        
        /// <remarks/>
        um2,
        
        /// <remarks/>
        yd2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class PermeabilityRockMeasure {
        
        private PermeabilityRockUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="PermeabilityRockUom")]
        public PermeabilityRockUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PermeabilityRockUom {
        
        /// <remarks/>
        D,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D[API]")]
        DAPI,
        
        /// <remarks/>
        mD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API]")]
        TDAPI,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class MultipleContactMiscibilityTest {
        
        private long testNumberField;
        
        private string gasSolventCompositionReferenceField;
        
        private DimensionlessMeasure mixRatioField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestNumber", DataType="NonNegativeLong")]
        public long TestNumber {
            get {
                return this.testNumberField;
            }
            set {
                this.testNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reference to the composition of the gas solvent that is a fluid composition.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The reference to the composition of the gas solvent that is a fluid composition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasSolventCompositionReference", DataType="String64")]
        public string GasSolventCompositionReference {
            get {
                return this.gasSolventCompositionReferenceField;
            }
            set {
                this.gasSolventCompositionReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mix ratio for the multiple contact miscibility test.</summary>
        [System.ComponentModel.DescriptionAttribute("The mix ratio for the multiple contact miscibility test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MixRatio", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure MixRatio {
            get {
                return this.mixRatioField;
            }
            set {
                this.mixRatioField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class STOAnalysis {
        
        private System.DateTime dateField;
        
        private PressureMeasure flashFromPressureField;
        
        private ThermodynamicTemperatureMeasure flashFromTemperatureField;
        
        private MolecularWeightMeasure molecularWeightField;
        
        private FluidAnalysisStepCondition fluidConditionField;
        
        private bool fluidConditionFieldSpecified;
        
        private PhasePresent phasesPresentField;
        
        private bool phasesPresentFieldSpecified;
        
        private LiquidComposition liquidCompositionField;
        
        private VaporComposition vaporCompositionField;
        
        private OverallComposition overallCompositionField;
        
        private string remarkField;
        
        private STOFlashedLiquid sTOFlashedLiquidField;
        
        /// <remarks/>
        /// <summary>The date when this test was performed.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The date when this test was performed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Date", DataType="date")]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure from which the sample was flashed for the stock tank oil analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure from which the sample was flashed for the stock tank oil analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlashFromPressure", DataType="PressureMeasure")]
        public PressureMeasure FlashFromPressure {
            get {
                return this.flashFromPressureField;
            }
            set {
                this.flashFromPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature from which the sample was flashed for the stock tank oil analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature from which the sample was flashed for the stock tank oil analysis" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlashFromTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure FlashFromTemperature {
            get {
                return this.flashFromTemperatureField;
            }
            set {
                this.flashFromTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The molecular weight for the stock tank oil analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The molecular weight for the stock tank oil analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MolecularWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure MolecularWeight {
            get {
                return this.molecularWeightField;
            }
            set {
                this.molecularWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fluid condition at this test step. Enum, see fluid analysis step condition.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid condition at this test step. Enum, see fluid analysis step condition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidCondition", DataType="FluidAnalysisStepCondition")]
        public FluidAnalysisStepCondition FluidCondition {
            get {
                return this.fluidConditionField;
            }
            set {
                this.fluidConditionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FluidConditionSpecified {
            get {
                return this.fluidConditionFieldSpecified;
            }
            set {
                this.fluidConditionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The phases present for the stock tank oil analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The phases present for the stock tank oil analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PhasesPresent", DataType="PhasePresent")]
        public PhasePresent PhasesPresent {
            get {
                return this.phasesPresentField;
            }
            set {
                this.phasesPresentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PhasesPresentSpecified {
            get {
                return this.phasesPresentFieldSpecified;
            }
            set {
                this.phasesPresentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The liquid composition for the stock tank oil analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The liquid composition for the stock tank oil analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidComposition", DataType="LiquidComposition")]
        public LiquidComposition LiquidComposition {
            get {
                return this.liquidCompositionField;
            }
            set {
                this.liquidCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The vapor composition for the stock tank oil analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The vapor composition for the stock tank oil analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VaporComposition", DataType="VaporComposition")]
        public VaporComposition VaporComposition {
            get {
                return this.vaporCompositionField;
            }
            set {
                this.vaporCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The overall composition for the stock tank oil analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The overall composition for the stock tank oil analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OverallComposition", DataType="OverallComposition")]
        public OverallComposition OverallComposition {
            get {
                return this.overallCompositionField;
            }
            set {
                this.overallCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("STOFlashedLiquid", DataType="STOFlashedLiquid")]
        public STOFlashedLiquid STOFlashedLiquid {
            get {
                return this.sTOFlashedLiquidField;
            }
            set {
                this.sTOFlashedLiquidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class STOFlashedLiquid {
        
        private APIGravityMeasure oilAPIGravityField;
        
        private MassPerMassMeasure waterContentField;
        
        private DimensionlessMeasure watsonKFactorField;
        
        private MassPerMassMeasure asphalteneContentField;
        
        private MassPerMassMeasure paraffinContentField;
        
        private ThermodynamicTemperatureMeasure cloudPointField;
        
        private ThermodynamicTemperatureMeasure waxAppearanceTemperatureField;
        
        private ThermodynamicTemperatureMeasure pourPointField;
        
        private ThermodynamicTemperatureMeasure aSTMFlashPointField;
        
        private DimensionlessMeasure totalAcidNumberField;
        
        private MassPerMassMeasure totalSulfurField;
        
        private MassPerMassMeasure nitrogenField;
        
        private MassPerMassMeasure elementalSulfurField;
        
        private MassPerMassMeasure leadField;
        
        private MassPerMassMeasure nickelField;
        
        private MassPerMassMeasure vanadiumField;
        
        private MassPerMassMeasure ironField;
        
        private ViscosityAtTemperature[] viscosityAtTemperatureField;
        
        private PressureMeasure reidVaporPressureField;
        
        private Sara[] saraField;
        
        /// <remarks/>
        /// <summary>Oil API gravity.</summary>
        [System.ComponentModel.DescriptionAttribute("Oil API gravity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilAPIGravity", DataType="APIGravityMeasure")]
        public APIGravityMeasure OilAPIGravity {
            get {
                return this.oilAPIGravityField;
            }
            set {
                this.oilAPIGravityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The water content of the liquid phase of the stock tank analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The water content of the liquid phase of the stock tank analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterContent", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure WaterContent {
            get {
                return this.waterContentField;
            }
            set {
                this.waterContentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The Watson K factor of the liquid phase of the stock tank analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The Watson K factor of the liquid phase of the stock tank analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WatsonKFactor", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure WatsonKFactor {
            get {
                return this.watsonKFactorField;
            }
            set {
                this.watsonKFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The asphaltene content of the liquid phase of the stock tank analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The asphaltene content of the liquid phase of the stock tank analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AsphalteneContent", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure AsphalteneContent {
            get {
                return this.asphalteneContentField;
            }
            set {
                this.asphalteneContentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The paraffin content of the liquid phase of the stock tank analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The paraffin content of the liquid phase of the stock tank analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParaffinContent", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure ParaffinContent {
            get {
                return this.paraffinContentField;
            }
            set {
                this.paraffinContentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The cloud point of the liquid phase of the stock tank analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The cloud point of the liquid phase of the stock tank analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CloudPoint", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure CloudPoint {
            get {
                return this.cloudPointField;
            }
            set {
                this.cloudPointField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The wax appearance temperature of the liquid phase of the stock tank analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The wax appearance temperature of the liquid phase of the stock tank analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaxAppearanceTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure WaxAppearanceTemperature {
            get {
                return this.waxAppearanceTemperatureField;
            }
            set {
                this.waxAppearanceTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pour point of the liquid phase of the stock tank analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The pour point of the liquid phase of the stock tank analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PourPoint", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure PourPoint {
            get {
                return this.pourPointField;
            }
            set {
                this.pourPointField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ASTM flash point of the liquid phase of the stock tank analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The ASTM flash point of the liquid phase of the stock tank analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ASTMFlashPoint", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure ASTMFlashPoint {
            get {
                return this.aSTMFlashPointField;
            }
            set {
                this.aSTMFlashPointField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total acid number of the liquid phase of the stock tank analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The total acid number of the liquid phase of the stock tank analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalAcidNumber", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure TotalAcidNumber {
            get {
                return this.totalAcidNumberField;
            }
            set {
                this.totalAcidNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total sulfur content of the liquid phase of the stock tank analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The total sulfur content of the liquid phase of the stock tank analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalSulfur", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure TotalSulfur {
            get {
                return this.totalSulfurField;
            }
            set {
                this.totalSulfurField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The nitrogen content of the liquid phase of the stock tank analysis.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The nitrogen content of the liquid phase of the stock tank analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Nitrogen", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure Nitrogen {
            get {
                return this.nitrogenField;
            }
            set {
                this.nitrogenField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The elemental sulfur content of the liquid phase of the stock tank analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The elemental sulfur content of the liquid phase of the stock tank analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ElementalSulfur", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure ElementalSulfur {
            get {
                return this.elementalSulfurField;
            }
            set {
                this.elementalSulfurField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The lead content of the liquid phase of the stock tank analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The lead content of the liquid phase of the stock tank analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Lead", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure Lead {
            get {
                return this.leadField;
            }
            set {
                this.leadField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The nickel content of the liquid phase of the stock tank analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The nickel content of the liquid phase of the stock tank analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Nickel", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure Nickel {
            get {
                return this.nickelField;
            }
            set {
                this.nickelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The vanadium content of the liquid phase of the stock tank analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The vanadium content of the liquid phase of the stock tank analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Vanadium", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure Vanadium {
            get {
                return this.vanadiumField;
            }
            set {
                this.vanadiumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The iron content of the liquid phase of the stock tank analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The iron content of the liquid phase of the stock tank analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Iron", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure Iron {
            get {
                return this.ironField;
            }
            set {
                this.ironField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The viscosity at test temperature of the liquid phase of the stock tank analysis.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ViscosityAtTemperature")]
        [System.ComponentModel.DescriptionAttribute("The viscosity at test temperature of the liquid phase of the stock tank analysis." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ViscosityAtTemperature", DataType="ViscosityAtTemperature")]
        public ViscosityAtTemperature[] ViscosityAtTemperature {
            get {
                return this.viscosityAtTemperatureField;
            }
            set {
                this.viscosityAtTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reid vapor pressure of the liquid phase of the stock tank analysis.</summary>
        [System.ComponentModel.DescriptionAttribute("The reid vapor pressure of the liquid phase of the stock tank analysis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReidVaporPressure", DataType="PressureMeasure")]
        public PressureMeasure ReidVaporPressure {
            get {
                return this.reidVaporPressureField;
            }
            set {
                this.reidVaporPressureField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Sara")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sara", DataType="Sara")]
        public Sara[] Sara {
            get {
                return this.saraField;
            }
            set {
                this.saraField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ViscosityAtTemperature {
        
        private DynamicViscosityMeasure viscosityField;
        
        private ThermodynamicTemperatureMeasure viscosityTemperatureField;
        
        /// <remarks/>
        /// <summary>Viscosity measurement at the associated temperature.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Viscosity measurement at the associated temperature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Viscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure Viscosity {
            get {
                return this.viscosityField;
            }
            set {
                this.viscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Temperature at which the viscosity was measured.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Temperature at which the viscosity was measured.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ViscosityTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure ViscosityTemperature {
            get {
                return this.viscosityTemperatureField;
            }
            set {
                this.viscosityTemperatureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class Sara {
        
        private MassPerMassMeasure aromaticsWeightFractionField;
        
        private MassPerMassMeasure asphaltenesWeightFractionField;
        
        private MassPerMassMeasure napthenesWeightFractionField;
        
        private MassPerMassMeasure paraffinsWeightFractionField;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The aromatics weight fraction in the sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The aromatics weight fraction in the sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AromaticsWeightFraction", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure AromaticsWeightFraction {
            get {
                return this.aromaticsWeightFractionField;
            }
            set {
                this.aromaticsWeightFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The asphaltenes weight fraction in the sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The asphaltenes weight fraction in the sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AsphaltenesWeightFraction", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure AsphaltenesWeightFraction {
            get {
                return this.asphaltenesWeightFractionField;
            }
            set {
                this.asphaltenesWeightFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The napthenes weight fraction in the sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The napthenes weight fraction in the sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NapthenesWeightFraction", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure NapthenesWeightFraction {
            get {
                return this.napthenesWeightFractionField;
            }
            set {
                this.napthenesWeightFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The paraffins weight fraction in the sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The paraffins weight fraction in the sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParaffinsWeightFraction", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure ParaffinsWeightFraction {
            get {
                return this.paraffinsWeightFractionField;
            }
            set {
                this.paraffinsWeightFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class InterfacialTensionTest {
        
        private long testNumberField;
        
        private ThermodynamicPhase wettingPhaseField;
        
        private ThermodynamicPhase nonWettingPhaseField;
        
        private AbstractFluidComponent surfactantField;
        
        private string remarkField;
        
        private InterfacialTensionTestStep[] interfacialTensionTestStepField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>An integer number to identify this test in a sequence of tests.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("An integer number to identify this test in a sequence of tests.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestNumber", DataType="NonNegativeLong")]
        public long TestNumber {
            get {
                return this.testNumberField;
            }
            set {
                this.testNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The wetting phase for this interfacial tension test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The wetting phase for this interfacial tension test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WettingPhase", DataType="ThermodynamicPhase")]
        public ThermodynamicPhase WettingPhase {
            get {
                return this.wettingPhaseField;
            }
            set {
                this.wettingPhaseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The non-wetting phase for this interfacial tension test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The non-wetting phase for this interfacial tension test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nonWettingPhase", DataType="ThermodynamicPhase")]
        public ThermodynamicPhase nonWettingPhase {
            get {
                return this.nonWettingPhaseField;
            }
            set {
                this.nonWettingPhaseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The surfactant for this interfacial tension test.</summary>
        [System.ComponentModel.DescriptionAttribute("The surfactant for this interfacial tension test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Surfactant", DataType="AbstractFluidComponent")]
        public AbstractFluidComponent Surfactant {
            get {
                return this.surfactantField;
            }
            set {
                this.surfactantField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("InterfacialTensionTestStep")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InterfacialTensionTestStep", DataType="InterfacialTensionTestStep")]
        public InterfacialTensionTestStep[] InterfacialTensionTestStep {
            get {
                return this.interfacialTensionTestStepField;
            }
            set {
                this.interfacialTensionTestStepField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class InterfacialTensionTestStep {
        
        private long stepNumberField;
        
        private PressureMeasure stepPressureField;
        
        private ThermodynamicTemperatureMeasure stepTemperatureField;
        
        private DimensionlessMeasure wettingPhaseSaturationField;
        
        private MassPerMassMeasure surfactantConcentrationField;
        
        private ForcePerLengthMeasure interfacialTensionField;
        
        private string remarkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The step number is the index of a (P,T) step in the overall test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The step number is the index of a (P,T) step in the overall test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepNumber", DataType="NonNegativeLong")]
        public long StepNumber {
            get {
                return this.stepNumberField;
            }
            set {
                this.stepNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepPressure", DataType="PressureMeasure")]
        public PressureMeasure StepPressure {
            get {
                return this.stepPressureField;
            }
            set {
                this.stepPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure StepTemperature {
            get {
                return this.stepTemperatureField;
            }
            set {
                this.stepTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The wetting phase saturation for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The wetting phase saturation for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WettingPhaseSaturation", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure WettingPhaseSaturation {
            get {
                return this.wettingPhaseSaturationField;
            }
            set {
                this.wettingPhaseSaturationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The surfactant concentration for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The surfactant concentration for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SurfactantConcentration", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure SurfactantConcentration {
            get {
                return this.surfactantConcentrationField;
            }
            set {
                this.surfactantConcentrationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The interfacial tension for this test step.</summary>
        [System.ComponentModel.DescriptionAttribute("The interfacial tension for this test step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InterfacialTension", DataType="ForcePerLengthMeasure")]
        public ForcePerLengthMeasure InterfacialTension {
            get {
                return this.interfacialTensionField;
            }
            set {
                this.interfacialTensionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ForcePerLengthMeasure {
        
        private ForcePerLengthUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ForcePerLengthUom")]
        public ForcePerLengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForcePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbf/ft")]
        Item001lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 lbf/m")]
        Item130lbfm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 N/m")]
        Item130Nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne/cm")]
        dynecm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/cm")]
        kgfcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN/m")]
        kNm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft")]
        lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/in")]
        lbfin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN/km")]
        mNkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN/m")]
        mNm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m")]
        Nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl/cm")]
        pdlcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]/ft")]
        tonfUKft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/ft")]
        tonfUSft,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class FluidCharacterization : AbstractObject {
        
        private ApplicationInfo applicationSourceField;
        
        private ApplicationInfo[] applicationTargetField;
        
        private string fluidSystemCharacterizationTypeField;
        
        private string intendedUsageField;
        
        private DataObjectReference rockFluidUnitFeatureReferenceField;
        
        private AbstractTemperaturePressure standardConditionsField;
        
        private FluidCharacterizationSource[] fluidCharacterizationSourceField;
        
        private FluidComponentCatalog fluidComponentCatalogField;
        
        private FluidCharacterizationModel[] fluidCharacterizationModelField;
        
        private FluidCharacterizationTableFormat[] fluidCharacterizationTableFormatSetField;
        
        private string remarkField;
        
        private DataObjectReference fluidSystemField;
        
        /// <remarks/>
        /// <summary>The software used to generate  the fluid characterization.</summary>
        [System.ComponentModel.DescriptionAttribute("The software used to generate  the fluid characterization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ApplicationSource", DataType="ApplicationInfo")]
        public ApplicationInfo ApplicationSource {
            get {
                return this.applicationSourceField;
            }
            set {
                this.applicationSourceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The software which is the consumer of the fluid characterization.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ApplicationTarget")]
        [System.ComponentModel.DescriptionAttribute("The software which is the consumer of the fluid characterization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ApplicationTarget", DataType="ApplicationInfo")]
        public ApplicationInfo[] ApplicationTarget {
            get {
                return this.applicationTargetField;
            }
            set {
                this.applicationTargetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of fluid characterization.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The kind of fluid characterization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidSystemCharacterizationType", DataType="String64")]
        public string FluidSystemCharacterizationType {
            get {
                return this.fluidSystemCharacterizationTypeField;
            }
            set {
                this.fluidSystemCharacterizationTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The intended usage of the fluid characterization.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The intended usage of the fluid characterization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IntendedUsage", DataType="String64")]
        public string IntendedUsage {
            get {
                return this.intendedUsageField;
            }
            set {
                this.intendedUsageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to a rock fluid unit feature (a RESQML feature).</summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a rock fluid unit feature (a RESQML feature).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RockFluidUnitFeatureReference", DataType="DataObjectReference")]
        public DataObjectReference RockFluidUnitFeatureReference {
            get {
                return this.rockFluidUnitFeatureReferenceField;
            }
            set {
                this.rockFluidUnitFeatureReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The standard temperature and pressure used for the representation of this fluid characterization.</summary>
        [System.ComponentModel.DescriptionAttribute("The standard temperature and pressure used for the representation of this fluid c" +
            "haracterization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StandardConditions", DataType="AbstractTemperaturePressure")]
        public AbstractTemperaturePressure StandardConditions {
            get {
                return this.standardConditionsField;
            }
            set {
                this.standardConditionsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the fluid analysis tests which were the source data for this fluid characterization.</summary>
        [System.Xml.Serialization.XmlElementAttribute("FluidCharacterizationSource")]
        [System.ComponentModel.DescriptionAttribute("Reference to the fluid analysis tests which were the source data for this fluid c" +
            "haracterization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidCharacterizationSource", DataType="FluidCharacterizationSource")]
        public FluidCharacterizationSource[] FluidCharacterizationSource {
            get {
                return this.fluidCharacterizationSourceField;
            }
            set {
                this.fluidCharacterizationSourceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fluid component catalog for this fluid characterization.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid component catalog for this fluid characterization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidComponentCatalog", DataType="FluidComponentCatalog")]
        public FluidComponentCatalog FluidComponentCatalog {
            get {
                return this.fluidComponentCatalogField;
            }
            set {
                this.fluidComponentCatalogField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The model used to generate the fluid characterization.</summary>
        [System.Xml.Serialization.XmlElementAttribute("FluidCharacterizationModel")]
        [System.ComponentModel.DescriptionAttribute("The model used to generate the fluid characterization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidCharacterizationModel", DataType="FluidCharacterizationModel")]
        public FluidCharacterizationModel[] FluidCharacterizationModel {
            get {
                return this.fluidCharacterizationModelField;
            }
            set {
                this.fluidCharacterizationModelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The collection of fluid characterization table formats.</summary>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        [System.ComponentModel.DescriptionAttribute("The collection of fluid characterization table formats.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidCharacterizationTableFormatSet", DataType="FluidCharacterizationTableFormatSet")]
        public FluidCharacterizationTableFormat[] FluidCharacterizationTableFormatSet {
            get {
                return this.fluidCharacterizationTableFormatSetField;
            }
            set {
                this.fluidCharacterizationTableFormatSetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidSystem", DataType="DataObjectReference")]
        public DataObjectReference FluidSystem {
            get {
                return this.fluidSystemField;
            }
            set {
                this.fluidSystemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ApplicationInfo {
        
        private string[] applicationNameField;
        
        private string versionField;
        
        /// <remarks/>
        /// <summary>The name of the application that is expected to use these fluid characterization data.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ApplicationName")]
        [System.ComponentModel.DescriptionAttribute("The name of the application that is expected to use these fluid characterization " +
            "data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ApplicationName", DataType="String64")]
        public string[] ApplicationName {
            get {
                return this.applicationNameField;
            }
            set {
                this.applicationNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The version of the application that is expected to use these fluid characterization data.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The version of the application that is expected to use these fluid characterizati" +
            "on data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("version", DataType="String64")]
        public string version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidCharacterizationSource {
        
        private string[] fluidAnalysisTestReferenceField;
        
        private DataObjectReference fluidAnalysisReferenceField;
        
        /// <remarks/>
        /// <summary>A reference to a fluid analysis test which was used as source data for this fluid characterization.</summary>
        [System.Xml.Serialization.XmlElementAttribute("FluidAnalysisTestReference")]
        [System.ComponentModel.DescriptionAttribute("A reference to a fluid analysis test which was used as source data for this fluid" +
            " characterization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidAnalysisTestReference", DataType="String64")]
        public string[] FluidAnalysisTestReference {
            get {
                return this.fluidAnalysisTestReferenceField;
            }
            set {
                this.fluidAnalysisTestReferenceField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidAnalysisReference", DataType="DataObjectReference")]
        public DataObjectReference FluidAnalysisReference {
            get {
                return this.fluidAnalysisReferenceField;
            }
            set {
                this.fluidAnalysisReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidCharacterizationModel {
        
        private string nameField;
        
        private AbstractPressureValue referencePressureField;
        
        private AbstractPressureValue referenceStockTankPressureField;
        
        private ThermodynamicTemperatureMeasure referenceTemperatureField;
        
        private ThermodynamicTemperatureMeasure referenceStockTankTemperatureField;
        
        private string remarkField;
        
        private ReferenceSeparatorStage[] referenceSeparatorStageField;
        
        private AbstractPvtModel modelSpecificationField;
        
        private FluidCharacterizationTable[] fluidCharacterizationTableField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name of the fluid analysis result.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the fluid analysis result.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reference pressure for this fluid characterization.</summary>
        [System.ComponentModel.DescriptionAttribute("The reference pressure for this fluid characterization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferencePressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue ReferencePressure {
            get {
                return this.referencePressureField;
            }
            set {
                this.referencePressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reference stock tank pressure for this fluid characterization.</summary>
        [System.ComponentModel.DescriptionAttribute("The reference stock tank pressure for this fluid characterization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferenceStockTankPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue ReferenceStockTankPressure {
            get {
                return this.referenceStockTankPressureField;
            }
            set {
                this.referenceStockTankPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reference temperature for this fluid characterization.</summary>
        [System.ComponentModel.DescriptionAttribute("The reference temperature for this fluid characterization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferenceTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure ReferenceTemperature {
            get {
                return this.referenceTemperatureField;
            }
            set {
                this.referenceTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reference stock tank temperature for this fluid characterization.</summary>
        [System.ComponentModel.DescriptionAttribute("The reference stock tank temperature for this fluid characterization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferenceStockTankTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure ReferenceStockTankTemperature {
            get {
                return this.referenceStockTankTemperatureField;
            }
            set {
                this.referenceStockTankTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ReferenceSeparatorStage")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferenceSeparatorStage", DataType="ReferenceSeparatorStage")]
        public ReferenceSeparatorStage[] ReferenceSeparatorStage {
            get {
                return this.referenceSeparatorStageField;
            }
            set {
                this.referenceSeparatorStageField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ModelSpecification", DataType="AbstractPvtModel")]
        public AbstractPvtModel ModelSpecification {
            get {
                return this.modelSpecificationField;
            }
            set {
                this.modelSpecificationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("FluidCharacterizationTable")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidCharacterizationTable", DataType="FluidCharacterizationTable")]
        public FluidCharacterizationTable[] FluidCharacterizationTable {
            get {
                return this.fluidCharacterizationTableField;
            }
            set {
                this.fluidCharacterizationTableField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ReferenceSeparatorStage {
        
        private AbstractPressureValue separatorPressureField;
        
        private ThermodynamicTemperatureMeasureExt separatorTemperatureField;
        
        private long separatorNumberField;
        
        private bool separatorNumberFieldSpecified;
        
        /// <remarks/>
        /// <summary>The separator pressure for a separator stage used to define the separation train, which is used as the basis of this fluid characterization.</summary>
        [System.ComponentModel.DescriptionAttribute("The separator pressure for a separator stage used to define the separation train," +
            " which is used as the basis of this fluid characterization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeparatorPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue SeparatorPressure {
            get {
                return this.separatorPressureField;
            }
            set {
                this.separatorPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The separator temperature for a separator stage used to define the separation train, which is used as the basis of this fluid characterization.</summary>
        [System.ComponentModel.DescriptionAttribute("The separator temperature for a separator stage used to define the separation tra" +
            "in, which is used as the basis of this fluid characterization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeparatorTemperature", DataType="ThermodynamicTemperatureMeasureExt")]
        public ThermodynamicTemperatureMeasureExt SeparatorTemperature {
            get {
                return this.separatorTemperatureField;
            }
            set {
                this.separatorTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The separator number for a separator stage used to define the separation train, which is used as the basis of this fluid characterization.</summary>
        [System.ComponentModel.DescriptionAttribute("The separator number for a separator stage used to define the separation train, w" +
            "hich is used as the basis of this fluid characterization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeparatorNumber", DataType="NonNegativeLong")]
        public long SeparatorNumber {
            get {
                return this.separatorNumberField;
            }
            set {
                this.separatorNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SeparatorNumberSpecified {
            get {
                return this.separatorNumberFieldSpecified;
            }
            set {
                this.separatorNumberFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ThermodynamicTemperatureMeasureExt {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ThermodynamicTemperatureUomExt")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CorrelationThermalModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityUndersaturatedModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BerganAndSuttonUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityBubblePointModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BergmanSuttonBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationGasViscosityModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Lucas))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LondonoArcherBlasinggame))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LeeGonzalez))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CarrDempsey))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityDeadModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BerganSuttonDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCompositionalModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CompositionalThermalModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCompositionalViscosityModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LohrenzBrayClarkCorrelation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FrictionTheory))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CSPedersen87))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CSPedersen84))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCompositionalEoSModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Srk_EOS))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PengRobinson78_EOS))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PengRobinson76_EOS))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractPvtModel {
        
        private CustomPvtModelExtension customPvtModelExtensionField;
        
        private PvtModelParameter[] pvtModelParameterSetField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CustomPvtModelExtension", DataType="CustomPvtModelExtension")]
        public CustomPvtModelExtension CustomPvtModelExtension {
            get {
                return this.customPvtModelExtensionField;
            }
            set {
                this.customPvtModelExtensionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("Coefficient", IsNullable=false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PvtModelParameterSet", DataType="PvtModelParameterSet")]
        public PvtModelParameter[] PvtModelParameterSet {
            get {
                return this.pvtModelParameterSetField;
            }
            set {
                this.pvtModelParameterSetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class CustomPvtModelExtension {
        
        private string descriptionField;
        
        private CustomPvtModelParameter[] customPvtModelParameterField;
        
        /// <remarks/>
        /// <summary>A description of the custom model.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A description of the custom model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CustomPvtModelParameter")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CustomPvtModelParameter", DataType="CustomPvtModelParameter")]
        public CustomPvtModelParameter[] CustomPvtModelParameter {
            get {
                return this.customPvtModelParameterField;
            }
            set {
                this.customPvtModelParameterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class CustomPvtModelParameter {
        
        private ExtensionNameValue customParameterValueField;
        
        private string fluidComponentReferenceField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CustomParameterValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue CustomParameterValue {
            get {
                return this.customParameterValueField;
            }
            set {
                this.customParameterValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to a fluid component to which this custom model parameter applies.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to a fluid component to which this custom model parameter applies.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("fluidComponentReference", DataType="String64")]
        public string fluidComponentReference {
            get {
                return this.fluidComponentReferenceField;
            }
            set {
                this.fluidComponentReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class PvtModelParameter {
        
        private string kindField;
        
        private string nameField;
        
        private double valueField;
        
        /// <remarks/>
        /// <summary>The kind of model parameter. Extensible enum.  See PVT model parameter kind ext.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The kind of model parameter. Extensible enum.  See PVT model parameter kind ext.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("kind", DataType="PvtModelParameterKindExt")]
        public string kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The  user-defined name of a parameter, which can be added to any model.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The  user-defined name of a parameter, which can be added to any model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("name", DataType="String64")]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CorrelationThermalModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityUndersaturatedModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BerganAndSuttonUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityBubblePointModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BergmanSuttonBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationGasViscosityModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Lucas))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LondonoArcherBlasinggame))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LeeGonzalez))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CarrDempsey))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityDeadModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BerganSuttonDead))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractCorrelationModel : AbstractPvtModel {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class CorrelationThermalModel : AbstractCorrelationModel {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityUndersaturatedModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BerganAndSuttonUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityBubblePointModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BergmanSuttonBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationGasViscosityModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Lucas))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LondonoArcherBlasinggame))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LeeGonzalez))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CarrDempsey))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityDeadModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BerganSuttonDead))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractCorrelationViscosityModel : AbstractCorrelationModel {
        
        private MolecularWeightMeasure molecularWeightField;
        
        /// <remarks/>
        /// <summary>The molecular weight of the fluid for the viscosity model.</summary>
        [System.ComponentModel.DescriptionAttribute("The molecular weight of the fluid for the viscosity model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MolecularWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure MolecularWeight {
            get {
                return this.molecularWeightField;
            }
            set {
                this.molecularWeightField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BerganAndSuttonUndersaturated))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractCorrelationViscosityUndersaturatedModel : AbstractCorrelationViscosityModel {
        
        private DynamicViscosityMeasure undersaturatedOilViscosityField;
        
        private DynamicViscosityMeasure bubblePointOilViscosityField;
        
        private PressureMeasure bubblePointPressureField;
        
        private PressureMeasure pressureField;
        
        /// <remarks/>
        /// <summary>The under saturated viscosity output from the under saturated viscosity model.</summary>
        [System.ComponentModel.DescriptionAttribute("The under saturated viscosity output from the under saturated viscosity model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UndersaturatedOilViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure UndersaturatedOilViscosity {
            get {
                return this.undersaturatedOilViscosityField;
            }
            set {
                this.undersaturatedOilViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The bubble point viscosity input for the under saturated viscosity model.</summary>
        [System.ComponentModel.DescriptionAttribute("The bubble point viscosity input for the under saturated viscosity model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BubblePointOilViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure BubblePointOilViscosity {
            get {
                return this.bubblePointOilViscosityField;
            }
            set {
                this.bubblePointOilViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The bubble point pressure for the under saturated viscosity model.</summary>
        [System.ComponentModel.DescriptionAttribute("The bubble point pressure for the under saturated viscosity model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BubblePointPressure", DataType="PressureMeasure")]
        public PressureMeasure BubblePointPressure {
            get {
                return this.bubblePointPressureField;
            }
            set {
                this.bubblePointPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure for the under saturated viscosity model.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure for the under saturated viscosity model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pressure", DataType="PressureMeasure")]
        public PressureMeasure Pressure {
            get {
                return this.pressureField;
            }
            set {
                this.pressureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Standing-Undersaturated", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class StandingUndersaturated : AbstractCorrelationViscosityUndersaturatedModel {
        
        private ThermodynamicTemperatureMeasure reservoirTemperatureField;
        
        private VolumePerVolumeMeasure solutionGasOilRatioField;
        
        /// <remarks/>
        public ThermodynamicTemperatureMeasure ReservoirTemperature {
            get {
                return this.reservoirTemperatureField;
            }
            set {
                this.reservoirTemperatureField = value;
            }
        }
        
        /// <remarks/>
        public VolumePerVolumeMeasure SolutionGasOilRatio {
            get {
                return this.solutionGasOilRatioField;
            }
            set {
                this.solutionGasOilRatioField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PetroskyFarshad-Undersaturated", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class PetroskyFarshadUndersaturated : AbstractCorrelationViscosityUndersaturatedModel {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DindorukChristman-Undersaturated", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DindorukChristmanUndersaturated : AbstractCorrelationViscosityUndersaturatedModel {
        
        private ThermodynamicTemperatureMeasure reservoirTemperatureField;
        
        private VolumePerVolumeMeasure solutionGasOilRatioField;
        
        /// <remarks/>
        public ThermodynamicTemperatureMeasure ReservoirTemperature {
            get {
                return this.reservoirTemperatureField;
            }
            set {
                this.reservoirTemperatureField = value;
            }
        }
        
        /// <remarks/>
        public VolumePerVolumeMeasure SolutionGasOilRatio {
            get {
                return this.solutionGasOilRatioField;
            }
            set {
                this.solutionGasOilRatioField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DeGhetto-Undersaturated", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DeGhettoUndersaturated : AbstractCorrelationViscosityUndersaturatedModel {
        
        private ThermodynamicTemperatureMeasure reservoirTemperatureField;
        
        private VolumePerVolumeMeasure solutionGasOilRatioField;
        
        /// <remarks/>
        public ThermodynamicTemperatureMeasure ReservoirTemperature {
            get {
                return this.reservoirTemperatureField;
            }
            set {
                this.reservoirTemperatureField = value;
            }
        }
        
        /// <remarks/>
        public VolumePerVolumeMeasure SolutionGasOilRatio {
            get {
                return this.solutionGasOilRatioField;
            }
            set {
                this.solutionGasOilRatioField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BerganAndSutton-Undersaturated", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class BerganAndSuttonUndersaturated : AbstractCorrelationViscosityUndersaturatedModel {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BergmanSuttonBubblePoint))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractCorrelationViscosityBubblePointModel : AbstractCorrelationViscosityModel {
        
        private DynamicViscosityMeasure deadOilViscosityField;
        
        private DynamicViscosityMeasure bubblePointOilViscosityField;
        
        private DimensionlessMeasure solutionGasOilRateField;
        
        /// <remarks/>
        /// <summary>The dead oil viscosity input for the bubble point viscosity model.</summary>
        [System.ComponentModel.DescriptionAttribute("The dead oil viscosity input for the bubble point viscosity model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DeadOilViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure DeadOilViscosity {
            get {
                return this.deadOilViscosityField;
            }
            set {
                this.deadOilViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The bubble point viscosity output from the bubble point viscosity model.</summary>
        [System.ComponentModel.DescriptionAttribute("The bubble point viscosity output from the bubble point viscosity model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BubblePointOilViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure BubblePointOilViscosity {
            get {
                return this.bubblePointOilViscosityField;
            }
            set {
                this.bubblePointOilViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The solution gas oil ratio for the bubble point viscosity model.</summary>
        [System.ComponentModel.DescriptionAttribute("The solution gas oil ratio for the bubble point viscosity model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SolutionGasOilRate", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure SolutionGasOilRate {
            get {
                return this.solutionGasOilRateField;
            }
            set {
                this.solutionGasOilRateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Standing-BubblePoint", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class StandingBubblePoint : AbstractCorrelationViscosityBubblePointModel {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PetroskyFarshad-BubblePoint", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class PetroskyFarshadBubblePoint : AbstractCorrelationViscosityBubblePointModel {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DindorukChristman-BubblePoint", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DindorukChristmanBubblePoint : AbstractCorrelationViscosityBubblePointModel {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DeGhetto-BubblePoint", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DeGhettoBubblePoint : AbstractCorrelationViscosityBubblePointModel {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BergmanSutton-BubblePoint", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class BergmanSuttonBubblePoint : AbstractCorrelationViscosityBubblePointModel {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Lucas))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LondonoArcherBlasinggame))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LeeGonzalez))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CarrDempsey))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractCorrelationGasViscosityModel : AbstractCorrelationViscosityModel {
        
        private DynamicViscosityMeasure gasViscosityField;
        
        private ThermodynamicTemperatureMeasure reservoirTemperatureField;
        
        /// <remarks/>
        /// <summary>The gas viscosity output from the gas viscosity model.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas viscosity output from the gas viscosity model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return this.gasViscosityField;
            }
            set {
                this.gasViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reservoir temperature for the gas viscosity model.</summary>
        [System.ComponentModel.DescriptionAttribute("The reservoir temperature for the gas viscosity model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReservoirTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure ReservoirTemperature {
            get {
                return this.reservoirTemperatureField;
            }
            set {
                this.reservoirTemperatureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class Lucas : AbstractCorrelationGasViscosityModel {
        
        private MolecularWeightMeasure gasMolarWeightField;
        
        private DynamicViscosityMeasure gasViscosityAt1AtmField;
        
        private ThermodynamicTemperatureMeasure pseudoCriticalTemperatureField;
        
        private PressureMeasure pseudoCriticalPressureField;
        
        private ThermodynamicTemperaturePerThermodynamicTemperatureMeasure pseudoReducedTemperatureField;
        
        private PressurePerPressureMeasure pseudoReducedPressureField;
        
        /// <remarks/>
        /// <summary>The molecular weight of the gas as an input to this viscosity correlation.</summary>
        [System.ComponentModel.DescriptionAttribute("The molecular weight of the gas as an input to this viscosity correlation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasMolarWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure GasMolarWeight {
            get {
                return this.gasMolarWeightField;
            }
            set {
                this.gasMolarWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas viscosity at 1 atm for the viscosity correlation.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas viscosity at 1 atm for the viscosity correlation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasViscosityAt1Atm", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure GasViscosityAt1Atm {
            get {
                return this.gasViscosityAt1AtmField;
            }
            set {
                this.gasViscosityAt1AtmField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pseudo critical temperature for the viscosity correlation.</summary>
        [System.ComponentModel.DescriptionAttribute("The pseudo critical temperature for the viscosity correlation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PseudoCriticalTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure PseudoCriticalTemperature {
            get {
                return this.pseudoCriticalTemperatureField;
            }
            set {
                this.pseudoCriticalTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pseudo critical pressure for the viscosity correlation.</summary>
        [System.ComponentModel.DescriptionAttribute("The pseudo critical pressure for the viscosity correlation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PseudoCriticalPressure", DataType="PressureMeasure")]
        public PressureMeasure PseudoCriticalPressure {
            get {
                return this.pseudoCriticalPressureField;
            }
            set {
                this.pseudoCriticalPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pseudo reduced temperature for the viscosity correlation.</summary>
        [System.ComponentModel.DescriptionAttribute("The pseudo reduced temperature for the viscosity correlation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PseudoReducedTemperature", DataType="ThermodynamicTemperaturePerThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperaturePerThermodynamicTemperatureMeasure PseudoReducedTemperature {
            get {
                return this.pseudoReducedTemperatureField;
            }
            set {
                this.pseudoReducedTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pseudo reduced pressure for the viscosity correlation.</summary>
        [System.ComponentModel.DescriptionAttribute("The pseudo reduced pressure for the viscosity correlation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PseudoReducedPressure", DataType="PressurePerPressureMeasure")]
        public PressurePerPressureMeasure PseudoReducedPressure {
            get {
                return this.pseudoReducedPressureField;
            }
            set {
                this.pseudoReducedPressureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ThermodynamicTemperaturePerThermodynamicTemperatureMeasure {
        
        private ThermodynamicTemperaturePerThermodynamicTemperatureUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ThermodynamicTemperaturePerThermodynamicTemperatureUom")]
        public ThermodynamicTemperaturePerThermodynamicTemperatureUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermodynamicTemperaturePerThermodynamicTemperatureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/degC")]
        degCdegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/degF")]
        degFdegF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degR/degR")]
        degRdegR,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K/K")]
        KK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class PressurePerPressureMeasure {
        
        private PressurePerPressureUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="PressurePerPressureUom")]
        public PressurePerPressureUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressurePerPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/atm")]
        atmatm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/bar")]
        barbar,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/kPa")]
        kPakPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa/MPa")]
        MPaMPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/Pa")]
        PaPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/psi")]
        psipsi,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class LondonoArcherBlasinggame : AbstractCorrelationGasViscosityModel {
        
        private MassPerVolumeMeasure gasDensityField;
        
        private DynamicViscosityMeasure gasViscosityAt1AtmField;
        
        private PvtModelParameter[] gasViscosityCoefficient1AtmField;
        
        /// <remarks/>
        /// <summary>The gas density at the conditions for this viscosity correlation to be used.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas density at the conditions for this viscosity correlation to be used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure GasDensity {
            get {
                return this.gasDensityField;
            }
            set {
                this.gasDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas viscosity at 1 atm for the viscosity correlation.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas viscosity at 1 atm for the viscosity correlation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasViscosityAt1Atm", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure GasViscosityAt1Atm {
            get {
                return this.gasViscosityAt1AtmField;
            }
            set {
                this.gasViscosityAt1AtmField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("GasViscosityCoefficient1Atm")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasViscosityCoefficient1Atm", DataType="PvtModelParameter")]
        public PvtModelParameter[] GasViscosityCoefficient1Atm {
            get {
                return this.gasViscosityCoefficient1AtmField;
            }
            set {
                this.gasViscosityCoefficient1AtmField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class LeeGonzalez : AbstractCorrelationGasViscosityModel {
        
        private MolecularWeightMeasure gasMolarWeightField;
        
        private MassPerVolumeMeasure gasDensityField;
        
        /// <remarks/>
        /// <summary>The molecular weight of the gas as an input to this viscosity correlation.</summary>
        [System.ComponentModel.DescriptionAttribute("The molecular weight of the gas as an input to this viscosity correlation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasMolarWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure GasMolarWeight {
            get {
                return this.gasMolarWeightField;
            }
            set {
                this.gasMolarWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas density at the conditions for this viscosity correlation to be used.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas density at the conditions for this viscosity correlation to be used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure GasDensity {
            get {
                return this.gasDensityField;
            }
            set {
                this.gasDensityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class CarrDempsey : AbstractCorrelationGasViscosityModel {
        
        private MolecularWeightMeasure gasMolarWeightField;
        
        private DynamicViscosityMeasure gasViscosityAt1AtmField;
        
        private ThermodynamicTemperaturePerThermodynamicTemperatureMeasure pseudoReducedTemperatureField;
        
        private PressurePerPressureMeasure pseudoReducedPressureField;
        
        /// <remarks/>
        /// <summary>The molecular weight of the gas as an input to this viscosity correlation.</summary>
        [System.ComponentModel.DescriptionAttribute("The molecular weight of the gas as an input to this viscosity correlation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasMolarWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure GasMolarWeight {
            get {
                return this.gasMolarWeightField;
            }
            set {
                this.gasMolarWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gas viscosity at 1 atm for the viscosity correlation.</summary>
        [System.ComponentModel.DescriptionAttribute("The gas viscosity at 1 atm for the viscosity correlation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasViscosityAt1Atm", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure GasViscosityAt1Atm {
            get {
                return this.gasViscosityAt1AtmField;
            }
            set {
                this.gasViscosityAt1AtmField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pseudo reducedtemperature for the viscosity correlation.</summary>
        [System.ComponentModel.DescriptionAttribute("The pseudo reducedtemperature for the viscosity correlation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PseudoReducedTemperature", DataType="ThermodynamicTemperaturePerThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperaturePerThermodynamicTemperatureMeasure PseudoReducedTemperature {
            get {
                return this.pseudoReducedTemperatureField;
            }
            set {
                this.pseudoReducedTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pseudo reduced pressure for the viscosity correlation.</summary>
        [System.ComponentModel.DescriptionAttribute("The pseudo reduced pressure for the viscosity correlation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PseudoReducedPressure", DataType="PressurePerPressureMeasure")]
        public PressurePerPressureMeasure PseudoReducedPressure {
            get {
                return this.pseudoReducedPressureField;
            }
            set {
                this.pseudoReducedPressureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BerganSuttonDead))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractCorrelationViscosityDeadModel : AbstractCorrelationViscosityModel {
        
        private DynamicViscosityMeasure deadOilViscosityField;
        
        private ThermodynamicTemperatureMeasure reservoirTemperatureField;
        
        /// <remarks/>
        /// <summary>The dead oil viscosity output from the dead oil viscosity model.</summary>
        [System.ComponentModel.DescriptionAttribute("The dead oil viscosity output from the dead oil viscosity model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DeadOilViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure DeadOilViscosity {
            get {
                return this.deadOilViscosityField;
            }
            set {
                this.deadOilViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reservoir temperature for the dead oil viscosity model.</summary>
        [System.ComponentModel.DescriptionAttribute("The reservoir temperature for the dead oil viscosity model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReservoirTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure ReservoirTemperature {
            get {
                return this.reservoirTemperatureField;
            }
            set {
                this.reservoirTemperatureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Standing-Dead", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class StandingDead : AbstractCorrelationViscosityDeadModel {
        
        private APIGravityMeasure oilGravityAtStockTankField;
        
        /// <remarks/>
        public APIGravityMeasure OilGravityAtStockTank {
            get {
                return this.oilGravityAtStockTankField;
            }
            set {
                this.oilGravityAtStockTankField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PetroskyFarshad-Dead", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class PetroskyFarshadDead : AbstractCorrelationViscosityDeadModel {
        
        private APIGravityMeasure oilGravityAtStockTankField;
        
        /// <remarks/>
        public APIGravityMeasure OilGravityAtStockTank {
            get {
                return this.oilGravityAtStockTankField;
            }
            set {
                this.oilGravityAtStockTankField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DindorukChristman-Dead", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DindorukChristmanDead : AbstractCorrelationViscosityDeadModel {
        
        private APIGravityMeasure oilGravityAtStockTankField;
        
        /// <remarks/>
        public APIGravityMeasure OilGravityAtStockTank {
            get {
                return this.oilGravityAtStockTankField;
            }
            set {
                this.oilGravityAtStockTankField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DeGhetto-Dead", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DeGhettoDead : AbstractCorrelationViscosityDeadModel {
        
        private APIGravityMeasure oilAPIAtStockTankField;
        
        /// <remarks/>
        public APIGravityMeasure OilAPIAtStockTank {
            get {
                return this.oilAPIAtStockTankField;
            }
            set {
                this.oilAPIAtStockTankField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BerganSutton-Dead", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class BerganSuttonDead : AbstractCorrelationViscosityDeadModel {
        
        private DynamicViscosityMeasure deadOilViscosityAt100FField;
        
        private DynamicViscosityMeasure deadOilViscosityAt210FField;
        
        /// <remarks/>
        public DynamicViscosityMeasure DeadOilViscosityAt100F {
            get {
                return this.deadOilViscosityAt100FField;
            }
            set {
                this.deadOilViscosityAt100FField = value;
            }
        }
        
        /// <remarks/>
        public DynamicViscosityMeasure DeadOilViscosityAt210F {
            get {
                return this.deadOilViscosityAt210FField;
            }
            set {
                this.deadOilViscosityAt210FField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CompositionalThermalModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCompositionalViscosityModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LohrenzBrayClarkCorrelation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FrictionTheory))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CSPedersen87))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CSPedersen84))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCompositionalEoSModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Srk_EOS))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PengRobinson78_EOS))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PengRobinson76_EOS))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractCompositionalModel : AbstractPvtModel {
        
        private MixingRule mixingRuleField;
        
        private bool mixingRuleFieldSpecified;
        
        private FluidComponentProperty[] componentPropertySetField;
        
        private BinaryInteractionCoefficient[] binaryInteractionCoefficientSetField;
        
        /// <remarks/>
        /// <summary>The mixing rule which was applied in the compositional model. Enum. See mixing rule.</summary>
        [System.ComponentModel.DescriptionAttribute("The mixing rule which was applied in the compositional model. Enum. See mixing ru" +
            "le.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MixingRule", DataType="MixingRule")]
        public MixingRule MixingRule {
            get {
                return this.mixingRuleField;
            }
            set {
                this.mixingRuleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MixingRuleSpecified {
            get {
                return this.mixingRuleFieldSpecified;
            }
            set {
                this.mixingRuleFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ComponentPropertySet", DataType="ComponentPropertySet")]
        public FluidComponentProperty[] ComponentPropertySet {
            get {
                return this.componentPropertySetField;
            }
            set {
                this.componentPropertySetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BinaryInteractionCoefficientSet", DataType="BinaryInteractionCoefficientSet")]
        public BinaryInteractionCoefficient[] BinaryInteractionCoefficientSet {
            get {
                return this.binaryInteractionCoefficientSetField;
            }
            set {
                this.binaryInteractionCoefficientSetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum MixingRule {
        
        /// <remarks/>
        asymmetric,
        
        /// <remarks/>
        classical,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidComponentProperty {
        
        private PressureMeasure criticalPressureField;
        
        private ThermodynamicTemperatureMeasure criticalTemperatureField;
        
        private DynamicViscosityMeasure criticalViscosityField;
        
        private VolumeMeasure compactVolumeField;
        
        private MolarVolumeMeasure criticalVolumeField;
        
        private decimal acentricFactorField;
        
        private bool acentricFactorFieldSpecified;
        
        private MassPerVolumeMeasure massDensityField;
        
        private double omegaAField;
        
        private bool omegaAFieldSpecified;
        
        private double omegaBField;
        
        private bool omegaBFieldSpecified;
        
        private decimal volumeShiftParameterField;
        
        private bool volumeShiftParameterFieldSpecified;
        
        private MassPerVolumeMeasure partialMolarDensityField;
        
        private double parachorField;
        
        private bool parachorFieldSpecified;
        
        private MolarVolumeMeasure partialMolarVolumeField;
        
        private MassPerVolumeMeasure referenceDensityZJField;
        
        private APIGravityMeasure referenceGravityZJField;
        
        private ThermodynamicTemperatureMeasure referenceTemperatureZJField;
        
        private ReciprocalPressureMeasure viscousCompressibilityField;
        
        private string remarkField;
        
        private string fluidComponentReferenceField;
        
        /// <remarks/>
        /// <summary>The critical pressure for this fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The critical pressure for this fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CriticalPressure", DataType="PressureMeasure")]
        public PressureMeasure CriticalPressure {
            get {
                return this.criticalPressureField;
            }
            set {
                this.criticalPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The critical temperature for this fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The critical temperature for this fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CriticalTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure CriticalTemperature {
            get {
                return this.criticalTemperatureField;
            }
            set {
                this.criticalTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The critical viscosity for this fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The critical viscosity for this fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CriticalViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure CriticalViscosity {
            get {
                return this.criticalViscosityField;
            }
            set {
                this.criticalViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The compact volume for this fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The compact volume for this fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CompactVolume", DataType="VolumeMeasure")]
        public VolumeMeasure CompactVolume {
            get {
                return this.compactVolumeField;
            }
            set {
                this.compactVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The critical volume for this fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The critical volume for this fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CriticalVolume", DataType="MolarVolumeMeasure")]
        public MolarVolumeMeasure CriticalVolume {
            get {
                return this.criticalVolumeField;
            }
            set {
                this.criticalVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The acentric factor for this fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The acentric factor for this fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AcentricFactor", DataType="decimal")]
        public decimal AcentricFactor {
            get {
                return this.acentricFactorField;
            }
            set {
                this.acentricFactorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AcentricFactorSpecified {
            get {
                return this.acentricFactorFieldSpecified;
            }
            set {
                this.acentricFactorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mass density for this fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The mass density for this fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure MassDensity {
            get {
                return this.massDensityField;
            }
            set {
                this.massDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The omega A for this fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The omega A for this fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OmegaA", DataType="double")]
        public double OmegaA {
            get {
                return this.omegaAField;
            }
            set {
                this.omegaAField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OmegaASpecified {
            get {
                return this.omegaAFieldSpecified;
            }
            set {
                this.omegaAFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The omega B for this fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The omega B for this fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OmegaB", DataType="double")]
        public double OmegaB {
            get {
                return this.omegaBField;
            }
            set {
                this.omegaBField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OmegaBSpecified {
            get {
                return this.omegaBFieldSpecified;
            }
            set {
                this.omegaBFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volume shift parameter for this fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The volume shift parameter for this fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeShiftParameter", DataType="decimal")]
        public decimal VolumeShiftParameter {
            get {
                return this.volumeShiftParameterField;
            }
            set {
                this.volumeShiftParameterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VolumeShiftParameterSpecified {
            get {
                return this.volumeShiftParameterFieldSpecified;
            }
            set {
                this.volumeShiftParameterFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The partial molar density for this fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The partial molar density for this fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PartialMolarDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure PartialMolarDensity {
            get {
                return this.partialMolarDensityField;
            }
            set {
                this.partialMolarDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The parachor for this fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The parachor for this fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parachor", DataType="double")]
        public double Parachor {
            get {
                return this.parachorField;
            }
            set {
                this.parachorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParachorSpecified {
            get {
                return this.parachorFieldSpecified;
            }
            set {
                this.parachorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The partial molar volume for this fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The partial molar volume for this fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PartialMolarVolume", DataType="MolarVolumeMeasure")]
        public MolarVolumeMeasure PartialMolarVolume {
            get {
                return this.partialMolarVolumeField;
            }
            set {
                this.partialMolarVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reference density for this fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The reference density for this fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferenceDensityZJ", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure ReferenceDensityZJ {
            get {
                return this.referenceDensityZJField;
            }
            set {
                this.referenceDensityZJField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reference gravity for this fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The reference gravity for this fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferenceGravityZJ", DataType="APIGravityMeasure")]
        public APIGravityMeasure ReferenceGravityZJ {
            get {
                return this.referenceGravityZJField;
            }
            set {
                this.referenceGravityZJField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reference temperature for this fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The reference temperature for this fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferenceTemperatureZJ", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure ReferenceTemperatureZJ {
            get {
                return this.referenceTemperatureZJField;
            }
            set {
                this.referenceTemperatureZJField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The viscous compressibility for this fluid component.</summary>
        [System.ComponentModel.DescriptionAttribute("The viscous compressibility for this fluid component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ViscousCompressibility", DataType="ReciprocalPressureMeasure")]
        public ReciprocalPressureMeasure ViscousCompressibility {
            get {
                return this.viscousCompressibilityField;
            }
            set {
                this.viscousCompressibilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reference to the fluid component to which these properties apply.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The reference to the fluid component to which these properties apply.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("fluidComponentReference", DataType="String64")]
        public string fluidComponentReference {
            get {
                return this.fluidComponentReferenceField;
            }
            set {
                this.fluidComponentReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class MolarVolumeMeasure {
        
        private MolarVolumeUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="MolarVolumeUom")]
        public MolarVolumeUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MolarVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/kmol")]
        dm3kmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/lbmol")]
        ft3lbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/kmol")]
        Lkmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/mol")]
        Lmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kmol")]
        m3kmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/mol")]
        m3mol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class BinaryInteractionCoefficient {
        
        private string fluidComponent1ReferenceField;
        
        private string fluidComponent2ReferenceField;
        
        private double valueField;
        
        /// <remarks/>
        /// <summary>Reference to the first fluid component for this binary interaction coefficient.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to the first fluid component for this binary interaction coefficient.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("fluidComponent1Reference", DataType="String64")]
        public string fluidComponent1Reference {
            get {
                return this.fluidComponent1ReferenceField;
            }
            set {
                this.fluidComponent1ReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the second fluid component for this binary interaction coefficient.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to the second fluid component for this binary interaction coefficient.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("fluidComponent2Reference", DataType="String64")]
        public string fluidComponent2Reference {
            get {
                return this.fluidComponent2ReferenceField;
            }
            set {
                this.fluidComponent2ReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class CompositionalThermalModel : AbstractCompositionalModel {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LohrenzBrayClarkCorrelation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FrictionTheory))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CSPedersen87))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CSPedersen84))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractCompositionalViscosityModel : AbstractCompositionalModel {
        
        private ThermodynamicPhase phaseField;
        
        /// <remarks/>
        /// <summary>The phase the compositional viscosity model applies to.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The phase the compositional viscosity model applies to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("phase", DataType="ThermodynamicPhase")]
        public ThermodynamicPhase phase {
            get {
                return this.phaseField;
            }
            set {
                this.phaseField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Lohrenz-Bray-ClarkCorrelation", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class LohrenzBrayClarkCorrelation : AbstractCompositionalViscosityModel {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FrictionTheory : AbstractCompositionalViscosityModel {
        
        private PrsvParameter[] prsvParameterField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("PrsvParameter")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PrsvParameter", DataType="PrsvParameter")]
        public PrsvParameter[] PrsvParameter {
            get {
                return this.prsvParameterField;
            }
            set {
                this.prsvParameterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class PrsvParameter {
        
        private double a1Field;
        
        private double a2Field;
        
        private double b1Field;
        
        private double b2Field;
        
        private double c2Field;
        
        private string fluidComponentReferenceField;
        
        /// <remarks/>
        /// <summary>The parameter a1.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The parameter a1.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("a1", DataType="double")]
        public double a1 {
            get {
                return this.a1Field;
            }
            set {
                this.a1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The parameter a2.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The parameter a2.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("a2", DataType="double")]
        public double a2 {
            get {
                return this.a2Field;
            }
            set {
                this.a2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The parameter b1.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The parameter b1.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("b1", DataType="double")]
        public double b1 {
            get {
                return this.b1Field;
            }
            set {
                this.b1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The parameter b2.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The parameter b2.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("b2", DataType="double")]
        public double b2 {
            get {
                return this.b2Field;
            }
            set {
                this.b2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The parameter c2.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The parameter c2.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("c2", DataType="double")]
        public double c2 {
            get {
                return this.c2Field;
            }
            set {
                this.c2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fluid component to which this PRSV parameter set applies.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The fluid component to which this PRSV parameter set applies.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("fluidComponentReference", DataType="String64")]
        public string fluidComponentReference {
            get {
                return this.fluidComponentReferenceField;
            }
            set {
                this.fluidComponentReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class CSPedersen87 : AbstractCompositionalViscosityModel {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class CSPedersen84 : AbstractCompositionalViscosityModel {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Srk_EOS))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PengRobinson78_EOS))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PengRobinson76_EOS))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractCompositionalEoSModel : AbstractCompositionalModel {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class Srk_EOS : AbstractCompositionalEoSModel {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class PengRobinson78_EOS : AbstractCompositionalEoSModel {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class PengRobinson76_EOS : AbstractCompositionalEoSModel {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class FluidSample : AbstractObject {
        
        private FluidSampleKind sampleKindField;
        
        private bool sampleKindFieldSpecified;
        
        private DataObjectReference rockFluidUnitFeatureReferenceField;
        
        private bool representativeField;
        
        private bool representativeFieldSpecified;
        
        private string sampleDispositionField;
        
        private string remarkField;
        
        private DataObjectReference fluidSystemReferenceField;
        
        private FluidSampleChainofCustodyEvent[] fluidSampleChainofCustodyEventField;
        
        private FluidSampleComposition[] fluidSampleCompositionField;
        
        private SampleRecombinationRequirement sampleRecombinationRequirementField;
        
        private FluidSampleAcquisitionJobSource fluidSampleAcquisitionJobSourceField;
        
        private DataObjectReference originalSampleContainerReferenceField;
        
        /// <remarks/>
        /// <summary>The kind of sample. Enum.  See fluid sample kind.</summary>
        [System.ComponentModel.DescriptionAttribute("The kind of sample. Enum.  See fluid sample kind.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleKind", DataType="FluidSampleKind")]
        public FluidSampleKind SampleKind {
            get {
                return this.sampleKindField;
            }
            set {
                this.sampleKindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SampleKindSpecified {
            get {
                return this.sampleKindFieldSpecified;
            }
            set {
                this.sampleKindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to a RockFluidUnitFeature (a RESQML feature).</summary>
        [System.ComponentModel.DescriptionAttribute("Reference to a RockFluidUnitFeature (a RESQML feature).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RockFluidUnitFeatureReference", DataType="DataObjectReference")]
        public DataObjectReference RockFluidUnitFeatureReference {
            get {
                return this.rockFluidUnitFeatureReferenceField;
            }
            set {
                this.rockFluidUnitFeatureReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Boolean to state whether the sample is representative or not.</summary>
        [System.ComponentModel.DescriptionAttribute("Boolean to state whether the sample is representative or not.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Representative", DataType="boolean")]
        public bool Representative {
            get {
                return this.representativeField;
            }
            set {
                this.representativeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RepresentativeSpecified {
            get {
                return this.representativeFieldSpecified;
            }
            set {
                this.representativeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The sample disposition, if any.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The sample disposition, if any.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleDisposition", DataType="String64")]
        public string SampleDisposition {
            get {
                return this.sampleDispositionField;
            }
            set {
                this.sampleDispositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidSystemReference", DataType="DataObjectReference")]
        public DataObjectReference FluidSystemReference {
            get {
                return this.fluidSystemReferenceField;
            }
            set {
                this.fluidSystemReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>chain of chustody</summary>
        [System.Xml.Serialization.XmlElementAttribute("FluidSampleChainofCustodyEvent")]
        [System.ComponentModel.DescriptionAttribute("chain of chustody")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidSampleChainofCustodyEvent", DataType="FluidSampleChainofCustodyEvent")]
        public FluidSampleChainofCustodyEvent[] FluidSampleChainofCustodyEvent {
            get {
                return this.fluidSampleChainofCustodyEventField;
            }
            set {
                this.fluidSampleChainofCustodyEventField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("FluidSampleComposition")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidSampleComposition", DataType="FluidSampleComposition")]
        public FluidSampleComposition[] FluidSampleComposition {
            get {
                return this.fluidSampleCompositionField;
            }
            set {
                this.fluidSampleCompositionField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleRecombinationRequirement", DataType="SampleRecombinationRequirement")]
        public SampleRecombinationRequirement SampleRecombinationRequirement {
            get {
                return this.sampleRecombinationRequirementField;
            }
            set {
                this.sampleRecombinationRequirementField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidSampleAcquisitionJobSource", DataType="FluidSampleAcquisitionJobSource")]
        public FluidSampleAcquisitionJobSource FluidSampleAcquisitionJobSource {
            get {
                return this.fluidSampleAcquisitionJobSourceField;
            }
            set {
                this.fluidSampleAcquisitionJobSourceField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OriginalSampleContainerReference", DataType="DataObjectReference")]
        public DataObjectReference OriginalSampleContainerReference {
            get {
                return this.originalSampleContainerReferenceField;
            }
            set {
                this.originalSampleContainerReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum FluidSampleKind {
        
        /// <remarks/>
        synthetic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("separator water")]
        separatorwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("separator oil")]
        separatoroil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("separator gas")]
        separatorgas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("downhole cased")]
        downholecased,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("downhole open")]
        downholeopen,
        
        /// <remarks/>
        recombined,
        
        /// <remarks/>
        wellhead,
        
        /// <remarks/>
        commingled,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidSampleChainofCustodyEvent {
        
        private VolumeMeasure transferVolumeField;
        
        private AbstractPressureValue transferPressureField;
        
        private ThermodynamicTemperatureMeasure transferTemperatureField;
        
        private SampleQuality sampleIntegrityField;
        
        private VolumeMeasure remainingVolumeField;
        
        private VolumeMeasure lostVolumeField;
        
        private System.DateTime custodyDateField;
        
        private bool custodyDateFieldSpecified;
        
        private SampleAction custodyActionField;
        
        private bool custodyActionFieldSpecified;
        
        private string custodianField;
        
        private string containerLocationField;
        
        private string remarkField;
        
        private DataObjectReference prevContainerField;
        
        private DataObjectReference currentContainerField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The transfer volume for this chain of custody event.</summary>
        [System.ComponentModel.DescriptionAttribute("The transfer volume for this chain of custody event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TransferVolume", DataType="VolumeMeasure")]
        public VolumeMeasure TransferVolume {
            get {
                return this.transferVolumeField;
            }
            set {
                this.transferVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The transfer pressure for this chain of custody event.</summary>
        [System.ComponentModel.DescriptionAttribute("The transfer pressure for this chain of custody event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TransferPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue TransferPressure {
            get {
                return this.transferPressureField;
            }
            set {
                this.transferPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The transfer temperature for this chain of custody event.</summary>
        [System.ComponentModel.DescriptionAttribute("The transfer temperature for this chain of custody event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TransferTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TransferTemperature {
            get {
                return this.transferTemperatureField;
            }
            set {
                this.transferTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The sample integrity for this chain of custody event. Enum. See sample quality.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The sample integrity for this chain of custody event. Enum. See sample quality.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleIntegrity", DataType="SampleQuality")]
        public SampleQuality SampleIntegrity {
            get {
                return this.sampleIntegrityField;
            }
            set {
                this.sampleIntegrityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The remaining volume of sample for this chain of custody event.</summary>
        [System.ComponentModel.DescriptionAttribute("The remaining volume of sample for this chain of custody event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RemainingVolume", DataType="VolumeMeasure")]
        public VolumeMeasure RemainingVolume {
            get {
                return this.remainingVolumeField;
            }
            set {
                this.remainingVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The lost volume of sample for this chain of custody event.</summary>
        [System.ComponentModel.DescriptionAttribute("The lost volume of sample for this chain of custody event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LostVolume", DataType="VolumeMeasure")]
        public VolumeMeasure LostVolume {
            get {
                return this.lostVolumeField;
            }
            set {
                this.lostVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date for this chain of custody event.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date for this chain of custody event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CustodyDate", DataType="date")]
        public System.DateTime CustodyDate {
            get {
                return this.custodyDateField;
            }
            set {
                this.custodyDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CustodyDateSpecified {
            get {
                return this.custodyDateFieldSpecified;
            }
            set {
                this.custodyDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The action for this chain of custody event. Enum. See sample action.</summary>
        [System.ComponentModel.DescriptionAttribute("The action for this chain of custody event. Enum. See sample action.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CustodyAction", DataType="SampleAction")]
        public SampleAction CustodyAction {
            get {
                return this.custodyActionField;
            }
            set {
                this.custodyActionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CustodyActionSpecified {
            get {
                return this.custodyActionFieldSpecified;
            }
            set {
                this.custodyActionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The custodian for this chain of custody event.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The custodian for this chain of custody event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Custodian", DataType="String64")]
        public string Custodian {
            get {
                return this.custodianField;
            }
            set {
                this.custodianField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The container location for this chain of custody event.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The container location for this chain of custody event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContainerLocation", DataType="String64")]
        public string ContainerLocation {
            get {
                return this.containerLocationField;
            }
            set {
                this.containerLocationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PrevContainer", DataType="DataObjectReference")]
        public DataObjectReference PrevContainer {
            get {
                return this.prevContainerField;
            }
            set {
                this.prevContainerField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CurrentContainer", DataType="DataObjectReference")]
        public DataObjectReference CurrentContainer {
            get {
                return this.currentContainerField;
            }
            set {
                this.currentContainerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum SampleAction {
        
        /// <remarks/>
        custodyTransfer,
        
        /// <remarks/>
        destroyed,
        
        /// <remarks/>
        sampleTransfer,
        
        /// <remarks/>
        stored,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("subSample Dead")]
        subSampleDead,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("subSample Live")]
        subSampleLive,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidSampleComposition {
        
        private VolumePerVolumeMeasure volumeFractionField;
        
        private MassPerMassMeasure massFractionField;
        
        private AmountOfSubstancePerAmountOfSubstanceMeasure moleFractionField;
        
        private string remarkField;
        
        private DataObjectReference fluidSampleField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The volume fraction of this parent sample within this combined sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The volume fraction of this parent sample within this combined sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeFraction", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure VolumeFraction {
            get {
                return this.volumeFractionField;
            }
            set {
                this.volumeFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mass fraction of this parent sample within this combined sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The mass fraction of this parent sample within this combined sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassFraction", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure MassFraction {
            get {
                return this.massFractionField;
            }
            set {
                this.massFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mole fraction of this parent sample within this combined sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The mole fraction of this parent sample within this combined sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MoleFraction", DataType="AmountOfSubstancePerAmountOfSubstanceMeasure")]
        public AmountOfSubstancePerAmountOfSubstanceMeasure MoleFraction {
            get {
                return this.moleFractionField;
            }
            set {
                this.moleFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidSample", DataType="DataObjectReference")]
        public DataObjectReference FluidSample {
            get {
                return this.fluidSampleField;
            }
            set {
                this.fluidSampleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class SampleRecombinationRequirement {
        
        private DataObjectReference liquidSampleField;
        
        private DataObjectReference vaporSampleField;
        
        private AbstractPressureValue recombinationPressureField;
        
        private ThermodynamicTemperatureMeasure recombinationTemperatureField;
        
        private VolumePerVolumeMeasure recombinationGORField;
        
        private SaturationPressure recombinationSaturationPressureField;
        
        private LiquidComposition liquidCompositionField;
        
        private VaporComposition vaporCompositionField;
        
        private OverallComposition overallCompositionField;
        
        private string remarkField;
        
        /// <remarks/>
        /// <summary>Reference to the liquid sample used in this sample recombination.</summary>
        [System.ComponentModel.DescriptionAttribute("Reference to the liquid sample used in this sample recombination.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidSample", DataType="DataObjectReference")]
        public DataObjectReference LiquidSample {
            get {
                return this.liquidSampleField;
            }
            set {
                this.liquidSampleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the vapor sample used in this sample recombination.</summary>
        [System.ComponentModel.DescriptionAttribute("Reference to the vapor sample used in this sample recombination.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VaporSample", DataType="DataObjectReference")]
        public DataObjectReference VaporSample {
            get {
                return this.vaporSampleField;
            }
            set {
                this.vaporSampleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The recombination pressure for this sample recombination.</summary>
        [System.ComponentModel.DescriptionAttribute("The recombination pressure for this sample recombination.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RecombinationPressure", DataType="AbstractPressureValue")]
        public AbstractPressureValue RecombinationPressure {
            get {
                return this.recombinationPressureField;
            }
            set {
                this.recombinationPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The recombination temperature for this sample recombination.</summary>
        [System.ComponentModel.DescriptionAttribute("The recombination temperature for this sample recombination.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RecombinationTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure RecombinationTemperature {
            get {
                return this.recombinationTemperatureField;
            }
            set {
                this.recombinationTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The recombination gas-oil ratio for this sample recombination.</summary>
        [System.ComponentModel.DescriptionAttribute("The recombination gas-oil ratio for this sample recombination.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RecombinationGOR", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure RecombinationGOR {
            get {
                return this.recombinationGORField;
            }
            set {
                this.recombinationGORField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The recombination saturation pressure for this sample recombination.</summary>
        [System.ComponentModel.DescriptionAttribute("The recombination saturation pressure for this sample recombination.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RecombinationSaturationPressure", DataType="SaturationPressure")]
        public SaturationPressure RecombinationSaturationPressure {
            get {
                return this.recombinationSaturationPressureField;
            }
            set {
                this.recombinationSaturationPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fluid sampling recombination started with this liquid composition.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid sampling recombination started with this liquid composition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LiquidComposition", DataType="LiquidComposition")]
        public LiquidComposition LiquidComposition {
            get {
                return this.liquidCompositionField;
            }
            set {
                this.liquidCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fluid sampling recombination started with this vapor composition.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid sampling recombination started with this vapor composition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VaporComposition", DataType="VaporComposition")]
        public VaporComposition VaporComposition {
            get {
                return this.vaporCompositionField;
            }
            set {
                this.vaporCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The aim of the fluid sampling recombination was this overall composition.</summary>
        [System.ComponentModel.DescriptionAttribute("The aim of the fluid sampling recombination was this overall composition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OverallComposition", DataType="OverallComposition")]
        public OverallComposition OverallComposition {
            get {
                return this.overallCompositionField;
            }
            set {
                this.overallCompositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FluidSampleAcquisitionJobSource {
        
        private string fluidSampleAcquisitionReferenceField;
        
        private DataObjectReference fluidSampleAcquisitionJobReferenceField;
        
        /// <remarks/>
        /// <summary>Reference to the fluid sample acquisition (by uid) within a fluid sample acquisition job (which is referred to as a top-level object) which acquired this fluid sample.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to the fluid sample acquisition (by uid) within a fluid sample acquisit" +
            "ion job (which is referred to as a top-level object) which acquired this fluid s" +
            "ample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidSampleAcquisitionReference", DataType="String64")]
        public string FluidSampleAcquisitionReference {
            get {
                return this.fluidSampleAcquisitionReferenceField;
            }
            set {
                this.fluidSampleAcquisitionReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidSampleAcquisitionJobReference", DataType="DataObjectReference")]
        public DataObjectReference FluidSampleAcquisitionJobReference {
            get {
                return this.fluidSampleAcquisitionJobReferenceField;
            }
            set {
                this.fluidSampleAcquisitionJobReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class FluidSampleContainer : AbstractObject {
        
        private string makeField;
        
        private string modelField;
        
        private string serialNumberField;
        
        private string bottleIDField;
        
        private VolumeMeasure capacityField;
        
        private string ownerField;
        
        private string kindField;
        
        private string metallurgyField;
        
        private PressureMeasure pressureRatingField;
        
        private ThermodynamicTemperatureMeasure temperatureRatingField;
        
        private System.DateTime lastInspectionDateField;
        
        private bool lastInspectionDateFieldSpecified;
        
        private DataObjectReference transportCertificateReferenceField;
        
        private string remarkField;
        
        /// <remarks/>
        /// <summary>The make of this fluid sample container.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The make of this fluid sample container.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Make", DataType="String64")]
        public string Make {
            get {
                return this.makeField;
            }
            set {
                this.makeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The model of this fluid sample container.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The model of this fluid sample container.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Model", DataType="String64")]
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The serial number of this fluid sample container.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The serial number of this fluid sample container.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SerialNumber", DataType="String64")]
        public string SerialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reference ID  of a bottle or a chamber.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The reference ID  of a bottle or a chamber.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottleID", DataType="String64")]
        public string BottleID {
            get {
                return this.bottleIDField;
            }
            set {
                this.bottleIDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volume of a bottle or chamber.</summary>
        [System.ComponentModel.DescriptionAttribute("The volume of a bottle or chamber.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Capacity", DataType="VolumeMeasure")]
        public VolumeMeasure Capacity {
            get {
                return this.capacityField;
            }
            set {
                this.capacityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The owner of this fluid sample container.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The owner of this fluid sample container.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Owner", DataType="String64")]
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of this fluid sample container.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The kind of this fluid sample container.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="String64")]
        public string Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The metallurgy of this fluid sample container.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The metallurgy of this fluid sample container.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Metallurgy", DataType="String64")]
        public string Metallurgy {
            get {
                return this.metallurgyField;
            }
            set {
                this.metallurgyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure rating of this fluid sample container.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure rating of this fluid sample container.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PressureRating", DataType="PressureMeasure")]
        public PressureMeasure PressureRating {
            get {
                return this.pressureRatingField;
            }
            set {
                this.pressureRatingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature rating of this fluid sample container.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature rating of this fluid sample container.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TemperatureRating", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TemperatureRating {
            get {
                return this.temperatureRatingField;
            }
            set {
                this.temperatureRatingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date when this fluid sample container was last inspected.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date when this fluid sample container was last inspected.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LastInspectionDate", DataType="date")]
        public System.DateTime LastInspectionDate {
            get {
                return this.lastInspectionDateField;
            }
            set {
                this.lastInspectionDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastInspectionDateSpecified {
            get {
                return this.lastInspectionDateFieldSpecified;
            }
            set {
                this.lastInspectionDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reference uid of an attached object which stores the transport certificate.</summary>
        [System.ComponentModel.DescriptionAttribute("The reference uid of an attached object which stores the transport certificate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TransportCertificateReference", DataType="DataObjectReference")]
        public DataObjectReference TransportCertificateReference {
            get {
                return this.transportCertificateReferenceField;
            }
            set {
                this.transportCertificateReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this data item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this data item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class DtsMeasurement : AbstractObject {
        
        private bool badSetFlagField;
        
        private bool emptySetFlagField;
        
        private System.DateTime timeStartField;
        
        private System.DateTime timeEndField;
        
        private bool timeEndFieldSpecified;
        
        private TimeMeasure timeSinceInstrumentStartupField;
        
        private string[] measurementTagsField;
        
        private DataObjectReference installedSystemReferenceField;
        
        private OpticalPathConfiguration measurementConfigurationField;
        
        private FacilityIdentifier facilityIdentifierField;
        
        private DtsMeasurementTrace[] measurementTraceField;
        
        private ExtensionNameValue[] diagnosticParametersField;
        
        private DtsInterpretationLogSet interpretationLogField;
        
        /// <remarks/>
        /// <summary>Set to 'true' when a measurement is included but is known to be bad (i.e., all the values are null). Use this flag in situations when you want to keep track of the fact that a measurement was generated/received, however the measurement was bad.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Set to \'true\' when a measurement is included but is known to be bad (i.e., all th" +
            "e values are null). Use this flag in situations when you want to keep track of t" +
            "he fact that a measurement was generated/received, however the measurement was b" +
            "ad.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BadSetFlag", DataType="boolean")]
        public bool BadSetFlag {
            get {
                return this.badSetFlagField;
            }
            set {
                this.badSetFlagField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Set to 'true' when the measurement set is empty (only the header is provided). Use this flag for situations when the instrument box attempts to get a reading, but nothing is generated (fiber is disconnected, for example).</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Set to \'true\' when the measurement set is empty (only the header is provided). Us" +
            "e this flag for situations when the instrument box attempts to get a reading, bu" +
            "t nothing is generated (fiber is disconnected, for example).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EmptySetFlag", DataType="boolean")]
        public bool EmptySetFlag {
            get {
                return this.emptySetFlagField;
            }
            set {
                this.emptySetFlagField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time when the installed system began taking the measurement.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Time when the installed system began taking the measurement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeStart", DataType="dateTime")]
        public System.DateTime TimeStart {
            get {
                return this.timeStartField;
            }
            set {
                this.timeStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time when the installed system finished taking the measurement.</summary>
        [System.ComponentModel.DescriptionAttribute("Time when the installed system finished taking the measurement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeEnd", DataType="dateTime")]
        public System.DateTime TimeEnd {
            get {
                return this.timeEndField;
            }
            set {
                this.timeEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeEndSpecified {
            get {
                return this.timeEndFieldSpecified;
            }
            set {
                this.timeEndFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of time that the instrument box has been up and running since its last power up.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of time that the instrument box has been up and running since its last pow" +
            "er up.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeSinceInstrumentStartup", DataType="TimeMeasure")]
        public TimeMeasure TimeSinceInstrumentStartup {
            get {
                return this.timeSinceInstrumentStartupField;
            }
            set {
                this.timeSinceInstrumentStartupField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This supports user-defined "tags" (in the form of text strings) to be attached to the measurement. Example: to indicate other operations under way at the time (e.g., start of injection).</summary>
        [System.Xml.Serialization.XmlElementAttribute("MeasurementTags")]
        [System.ComponentModel.DescriptionAttribute("This supports user-defined \"tags\" (in the form of text strings) to be attached to" +
            " the measurement. Example: to indicate other operations under way at the time (e" +
            ".g., start of injection).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasurementTags", DataType="String64")]
        public string[] MeasurementTags {
            get {
                return this.measurementTagsField;
            }
            set {
                this.measurementTagsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the installed system used to take the measurement (combination of instrument box and optical path).</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Reference to the installed system used to take the measurement (combination of in" +
            "strument box and optical path).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InstalledSystemReference", DataType="DataObjectReference")]
        public DataObjectReference InstalledSystemReference {
            get {
                return this.installedSystemReferenceField;
            }
            set {
                this.installedSystemReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Enum. The configuration of the optical path. This may be varied from measurement to measurement, independent of the fiber path network.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Enum. The configuration of the optical path. This may be varied from measurement " +
            "to measurement, independent of the fiber path network.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasurementConfiguration", DataType="OpticalPathConfiguration")]
        public OpticalPathConfiguration MeasurementConfiguration {
            get {
                return this.measurementConfigurationField;
            }
            set {
                this.measurementConfigurationField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityIdentifier", DataType="FacilityIdentifier")]
        public FacilityIdentifier FacilityIdentifier {
            get {
                return this.facilityIdentifierField;
            }
            set {
                this.facilityIdentifierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Header data for raw (measured) traces collections</summary>
        [System.Xml.Serialization.XmlElementAttribute("MeasurementTrace")]
        [System.ComponentModel.DescriptionAttribute("Header data for raw (measured) traces collections")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasurementTrace", DataType="DtsMeasurementTrace")]
        public DtsMeasurementTrace[] MeasurementTrace {
            get {
                return this.measurementTraceField;
            }
            set {
                this.measurementTraceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Diagnostic information generated by the instrument box at the time the measurement was taken.</summary>
        [System.Xml.Serialization.XmlElementAttribute("DiagnosticParameters")]
        [System.ComponentModel.DescriptionAttribute("Diagnostic information generated by the instrument box at the time the measuremen" +
            "t was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiagnosticParameters", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] DiagnosticParameters {
            get {
                return this.diagnosticParametersField;
            }
            set {
                this.diagnosticParametersField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InterpretationLog", DataType="DtsInterpretationLogSet")]
        public DtsInterpretationLogSet InterpretationLog {
            get {
                return this.interpretationLogField;
            }
            set {
                this.interpretationLogField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum OpticalPathConfiguration {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("accurate single-ended/dual laser")]
        accuratesingleendedduallaser,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("differential loss calibrated")]
        differentiallosscalibrated,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("double-ended")]
        doubleended,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("single-ended")]
        singleended,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FacilityIdentifier {
        
        private NameStruct nameField;
        
        private FacilityIdentifierStruct installationField;
        
        private string kindField;
        
        private FacilityIdentifierStruct contextFacilityField;
        
        private ProductVolumeBusinessUnit businessUnitField;
        
        private BusinessAssociate operatorField;
        
        private GeographicContext geographicContextField;
        
        private string[] textField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Name of the facility.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Name of the facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="NameStruct")]
        public NameStruct Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the facility that is represented by this facility mapping.</summary>
        [System.ComponentModel.DescriptionAttribute("The name of the facility that is represented by this facility mapping.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Installation", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct Installation {
            get {
                return this.installationField;
            }
            set {
                this.installationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of facility where the fiber is deployed.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Type of facility where the fiber is deployed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="String64")]
        public string Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name and type of a facility whose context is relevant to the represented installation.</summary>
        [System.ComponentModel.DescriptionAttribute("The name and type of a facility whose context is relevant to the represented inst" +
            "allation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContextFacility", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct ContextFacility {
            get {
                return this.contextFacilityField;
            }
            set {
                this.contextFacilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Identifier of the business unit responsible for the facility.</summary>
        [System.ComponentModel.DescriptionAttribute("Identifier of the business unit responsible for the facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BusinessUnit", DataType="ProductVolumeBusinessUnit")]
        public ProductVolumeBusinessUnit BusinessUnit {
            get {
                return this.businessUnitField;
            }
            set {
                this.businessUnitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Contact for the company/person operating the facility</summary>
        [System.ComponentModel.DescriptionAttribute("Contact for the company/person operating the facility")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Operator", DataType="BusinessAssociate")]
        public BusinessAssociate Operator {
            get {
                return this.operatorField;
            }
            set {
                this.operatorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The geographical information about the facility.</summary>
        [System.ComponentModel.DescriptionAttribute("The geographical information about the facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeographicContext", DataType="GeographicContext")]
        public GeographicContext GeographicContext {
            get {
                return this.geographicContextField;
            }
            set {
                this.geographicContextField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string[] Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductVolumeBusinessUnit {
        
        private BusinessUnitKind kindField;
        
        private string nameField;
        
        private string descriptionField;
        
        private ProductVolumeBusinessSubUnit[] subUnitField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The type of business unit.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The type of business unit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="BusinessUnitKind")]
        public BusinessUnitKind Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The human contextual name of the business unit.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The human contextual name of the business unit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A textual description of the business unit.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A textual description of the business unit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A component part of the unit.  The composition of a unit may vary with time. This defines the ownership share or account information for a sub unit within the context of the whole unit. For ownership shares, at any one point in time the sum of the shares should be 100%.</summary>
        [System.Xml.Serialization.XmlElementAttribute("SubUnit")]
        [System.ComponentModel.DescriptionAttribute(@"A component part of the unit.  The composition of a unit may vary with time. This defines the ownership share or account information for a sub unit within the context of the whole unit. For ownership shares, at any one point in time the sum of the shares should be 100%.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SubUnit", DataType="ProductVolumeBusinessSubUnit")]
        public ProductVolumeBusinessSubUnit[] SubUnit {
            get {
                return this.subUnitField;
            }
            set {
                this.subUnitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum BusinessUnitKind {
        
        /// <remarks/>
        businessarea,
        
        /// <remarks/>
        company,
        
        /// <remarks/>
        field,
        
        /// <remarks/>
        license,
        
        /// <remarks/>
        platform,
        
        /// <remarks/>
        terminal,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductVolumeBusinessSubUnit {
        
        private string kindField;
        
        private OwnershipBusinessAcct ownershipBusinessAcctField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Points to business unit which is part of another business unit.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Points to business unit which is part of another business unit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="String64")]
        public string Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OwnershipBusinessAcct", DataType="OwnershipBusinessAcct")]
        public OwnershipBusinessAcct OwnershipBusinessAcct {
            get {
                return this.ownershipBusinessAcctField;
            }
            set {
                this.ownershipBusinessAcctField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class OwnershipBusinessAcct {
        
        private object itemField;
        
        /// <remarks/>
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DtsMeasurementTrace {
        
        private TraceProcessingType traceProcessingTypeField;
        
        private LengthMeasure samplingIntervalField;
        
        private string indexMnemonicField;
        
        private string pointCountField;
        
        private FrequencyMeasure frequencyRayleigh1Field;
        
        private FrequencyMeasure frequencyRayleigh2Field;
        
        private DataObjectReference channelSetReferenceField;
        
        private string commentField;
        
        private string parentMeasurementReferenceField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Denotes whether the trace was stored as acquired by the measurement device or recalibrated in any way.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Denotes whether the trace was stored as acquired by the measurement device or rec" +
            "alibrated in any way.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TraceProcessingType", DataType="TraceProcessingType")]
        public TraceProcessingType TraceProcessingType {
            get {
                return this.traceProcessingTypeField;
            }
            set {
                this.traceProcessingTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The difference in fiber distance between consecutive temperature sample points in a single temperature trace.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The difference in fiber distance between consecutive temperature sample points in" +
            " a single temperature trace.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SamplingInterval", DataType="LengthMeasure")]
        public LengthMeasure SamplingInterval {
            get {
                return this.samplingIntervalField;
            }
            set {
                this.samplingIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mnemonic of the channel in the MeasuredTraceSet that represents the index to the data (expected to be a length along the facility (e.g., wellbore, pipeline) being measured.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The mnemonic of the channel in the MeasuredTraceSet that represents the index to " +
            "the data (expected to be a length along the facility (e.g., wellbore, pipeline) " +
            "being measured.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexMnemonic", DataType="String64")]
        public string IndexMnemonic {
            get {
                return this.indexMnemonicField;
            }
            set {
                this.indexMnemonicField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of rows in this interpreted data object. Each row or "point" represents a measurement along the fiber.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The number of rows in this interpreted data object. Each row or \"point\" represent" +
            "s a measurement along the fiber.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PointCount", DataType="nonNegativeInteger")]
        public string PointCount {
            get {
                return this.pointCountField;
            }
            set {
                this.pointCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Frequency reference for Rayleigh 1 measurement.</summary>
        [System.ComponentModel.DescriptionAttribute("Frequency reference for Rayleigh 1 measurement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FrequencyRayleigh1", DataType="FrequencyMeasure")]
        public FrequencyMeasure FrequencyRayleigh1 {
            get {
                return this.frequencyRayleigh1Field;
            }
            set {
                this.frequencyRayleigh1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Frequency reference for Rayleigh 2 measurement.</summary>
        [System.ComponentModel.DescriptionAttribute("Frequency reference for Rayleigh 2 measurement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FrequencyRayleigh2", DataType="FrequencyMeasure")]
        public FrequencyMeasure FrequencyRayleigh2 {
            get {
                return this.frequencyRayleigh2Field;
            }
            set {
                this.frequencyRayleigh2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pointer to a ChannelSet containing the comma-delimited list of mnemonics and units, and channel data representing the measurement trace.  BUSINESS RULE: The mnemonics and the units must follow a strict order.   The mnemonic list must be in this order: fiberDistance, antistokes, stokes, reverseAntiStokes, reverseStokes, rayleigh1, rayleigh2, brillouinfrequency, loss, lossRatio, cumulativeExcessLoss, frequencyQualityMeasure, measurementUncertainty, brillouinAmplitude, opticalPathTemperature, uncalibratedTemperature1, uncalibratedTemperature2  The unit list must be one of the following: - m, mW, mW, mW, mW, mW, mW, GHz, dB/Km, dB/Km, dB, dimensionless, degC, mW, degC, DegC, degC  - ft, mW, mW, mW, mW,mW, mW, GHz, dB/Km, dB/Km,dB, dimensionless, degF, mW, degF, degF, degF</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Pointer to a ChannelSet containing the comma-delimited list of mnemonics and units, and channel data representing the measurement trace.  BUSINESS RULE: The mnemonics and the units must follow a strict order.   The mnemonic list must be in this order: fiberDistance, antistokes, stokes, reverseAntiStokes, reverseStokes, rayleigh1, rayleigh2, brillouinfrequency, loss, lossRatio, cumulativeExcessLoss, frequencyQualityMeasure, measurementUncertainty, brillouinAmplitude, opticalPathTemperature, uncalibratedTemperature1, uncalibratedTemperature2  The unit list must be one of the following: - m, mW, mW, mW, mW, mW, mW, GHz, dB/Km, dB/Km, dB, dimensionless, degC, mW, degC, DegC, degC  - ft, mW, mW, mW, mW,mW, mW, GHz, dB/Km, dB/Km,dB, dimensionless, degF, mW, degF, degF, degF")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChannelSetReference", DataType="DataObjectReference")]
        public DataObjectReference ChannelSetReference {
            get {
                return this.channelSetReferenceField;
            }
            set {
                this.channelSetReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A descriptive remark about the measured trace set.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A descriptive remark about the measured trace set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Where this dtsMeasuredTraceSet was derived from a parent dtsMeasuredTraceSet (having been recalibrated for example), the parent dtsMeasuredTraceSet can be indicated by referencing its UID with this element.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Where this dtsMeasuredTraceSet was derived from a parent dtsMeasuredTraceSet (hav" +
            "ing been recalibrated for example), the parent dtsMeasuredTraceSet can be indica" +
            "ted by referencing its UID with this element.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("parentMeasurementReference", DataType="String64")]
        public string parentMeasurementReference {
            get {
                return this.parentMeasurementReferenceField;
            }
            set {
                this.parentMeasurementReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier of this object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier of this object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum TraceProcessingType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("as acquired")]
        asacquired,
        
        /// <remarks/>
        recalibrated,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DtsInterpretationLogSet {
        
        private string preferredInterpretationReferenceField;
        
        private DtsInterpretationData[] interpretationDataField;
        
        /// <remarks/>
        /// <summary>For a set of dtsInterpretedData logs that are generated from the same measurement (each log having gone through a different post-processing type, for example), if there is one log that is ‘preferred’ for additional business decisions (while the other ones were merely what-if scenarios), then this preferred log in the collection of child dtsInterpretedData can be flagged by referencing its UID with this element.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"For a set of dtsInterpretedData logs that are generated from the same measurement (each log having gone through a different post-processing type, for example), if there is one log that is ‘preferred’ for additional business decisions (while the other ones were merely what-if scenarios), then this preferred log in the collection of child dtsInterpretedData can be flagged by referencing its UID with this element.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PreferredInterpretationReference", DataType="String64")]
        public string PreferredInterpretationReference {
            get {
                return this.preferredInterpretationReferenceField;
            }
            set {
                this.preferredInterpretationReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("InterpretationData")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InterpretationData", DataType="DtsInterpretationData")]
        public DtsInterpretationData[] InterpretationData {
            get {
                return this.interpretationDataField;
            }
            set {
                this.interpretationDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DtsInterpretationData {
        
        private string facilityMappingField;
        
        private LengthMeasure samplingIntervalField;
        
        private bool badFlagField;
        
        private System.DateTime creationStartTimeField;
        
        private InterpretationProcessingType interpretationProcessingTypeField;
        
        private string indexMnemonicField;
        
        private string pointCountField;
        
        private DataObjectReference channelSetReferenceField;
        
        private string commentField;
        
        private string measurementReferenceField;
        
        private string parentInterpretationReferenceField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A reference to the facilityMapping to which this InterpretationData relates. The facility mapping relates a length of fiber to a corresponding length of a facility (probably a wellbore or pipeline). The facilityMapping also contains the datum from which the InterpretedData is indexed.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"A reference to the facilityMapping to which this InterpretationData relates. The facility mapping relates a length of fiber to a corresponding length of a facility (probably a wellbore or pipeline). The facilityMapping also contains the datum from which the InterpretedData is indexed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityMapping", DataType="String64")]
        public string FacilityMapping {
            get {
                return this.facilityMappingField;
            }
            set {
                this.facilityMappingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The difference in fiber distance between consecutive temperature sample points in a single temperature trace.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The difference in fiber distance between consecutive temperature sample points in" +
            " a single temperature trace.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SamplingInterval", DataType="LengthMeasure")]
        public LengthMeasure SamplingInterval {
            get {
                return this.samplingIntervalField;
            }
            set {
                this.samplingIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates whether or not the interpretation log contains bad data. This flag allows you to keep bad data  (so at least you know that something was generated/acquired) and filter it out when doing relevant data operations.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Indicates whether or not the interpretation log contains bad data. This flag allo" +
            "ws you to keep bad data  (so at least you know that something was generated/acqu" +
            "ired) and filter it out when doing relevant data operations.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BadFlag", DataType="boolean")]
        public bool BadFlag {
            get {
                return this.badFlagField;
            }
            set {
                this.badFlagField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time when the interpretation log data was generated.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Time when the interpretation log data was generated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CreationStartTime", DataType="date")]
        public System.DateTime CreationStartTime {
            get {
                return this.creationStartTimeField;
            }
            set {
                this.creationStartTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates what type of post-processing technique was used to generate this interpretation log. Enum list. The meaning is that this process was applied to the InterpretedData referenced by the parentInterpretationID.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Indicates what type of post-processing technique was used to generate this interp" +
            "retation log. Enum list. The meaning is that this process was applied to the Int" +
            "erpretedData referenced by the parentInterpretationID.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InterpretationProcessingType", DataType="InterpretationProcessingType")]
        public InterpretationProcessingType InterpretationProcessingType {
            get {
                return this.interpretationProcessingTypeField;
            }
            set {
                this.interpretationProcessingTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mnemonic of the channel in the InterpretedData that represents the index to the data (expected to be a length along the facility (e.g., wellbore, pipeline) being measured.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The mnemonic of the channel in the InterpretedData that represents the index to t" +
            "he data (expected to be a length along the facility (e.g., wellbore, pipeline) b" +
            "eing measured.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexMnemonic", DataType="String64")]
        public string IndexMnemonic {
            get {
                return this.indexMnemonicField;
            }
            set {
                this.indexMnemonicField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of rows in this interpreted data object. Each row or "point" represents a measurement along the fiber.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The number of rows in this interpreted data object. Each row or \"point\" represent" +
            "s a measurement along the fiber.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PointCount", DataType="nonNegativeInteger")]
        public string PointCount {
            get {
                return this.pointCountField;
            }
            set {
                this.pointCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pointer to a ChannelSet containing the comma-delimited list of mnemonics and units, and channel data representing the interpretation data.  BUSINESS RULE: The mnemonics and the units must follow a strict order.   The mnemonic list must be in this order: facilityDistance, adjustedTemperature  The unit list must be one of the following: - m,degC - ft,degF</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Pointer to a ChannelSet containing the comma-delimited list of mnemonics and units, and channel data representing the interpretation data.  BUSINESS RULE: The mnemonics and the units must follow a strict order.   The mnemonic list must be in this order: facilityDistance, adjustedTemperature  The unit list must be one of the following: - m,degC - ft,degF")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChannelSetReference", DataType="DataObjectReference")]
        public DataObjectReference ChannelSetReference {
            get {
                return this.channelSetReferenceField;
            }
            set {
                this.channelSetReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A descriptive remark about the interpretation log.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A descriptive remark about the interpretation log.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mandatory element indicating that the referenced MeasuredTraceSet object is the raw trace data from which this InterpretedData is derived. This is needed so that any InterpretedData can be related to the raw measurement from which it is derived.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Mandatory element indicating that the referenced MeasuredTraceSet object is the r" +
            "aw trace data from which this InterpretedData is derived. This is needed so that" +
            " any InterpretedData can be related to the raw measurement from which it is deri" +
            "ved.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("measurementReference", DataType="String64")]
        public string measurementReference {
            get {
                return this.measurementReferenceField;
            }
            set {
                this.measurementReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Optional element indicating that the referenced InterpretedData object is the parent from which this InterpretedData is derived. Example, this instance may be derived from a parent by the data having been temperature-shifted to match an external data source. The element InterpretationProcessingType is provided to record which type of operation was performed on the parent data to obtain this instance of data.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"Optional element indicating that the referenced InterpretedData object is the parent from which this InterpretedData is derived. Example, this instance may be derived from a parent by the data having been temperature-shifted to match an external data source. The element InterpretationProcessingType is provided to record which type of operation was performed on the parent data to obtain this instance of data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("parentInterpretationReference", DataType="String64")]
        public string parentInterpretationReference {
            get {
                return this.parentInterpretationReferenceField;
            }
            set {
                this.parentInterpretationReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier of this object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier of this object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum InterpretationProcessingType {
        
        /// <remarks/>
        averaged,
        
        /// <remarks/>
        denormalized,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("depth-corrected")]
        depthcorrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("manufacturer-generated")]
        manufacturergenerated,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature-shifted")]
        temperatureshifted,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("user-custom")]
        usercustom,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class DasInstrumentBox : AbstractObject {
        
        private string serialNumberField;
        
        private IndexedObject[] parameterField;
        
        private FacilityIdentifier facilityIdentifierField;
        
        private Instrument instrumentField;
        
        private string firmwareVersionField;
        
        private DtsPatchCord patchCordField;
        
        private string instrumentBoxDescriptionField;
        
        /// <remarks/>
        /// <summary>An identification tag for the instrument box. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("An identification tag for the instrument box. A serial number is a type of identi" +
            "fication tag however some tags contain many pieces of information. This structur" +
            "e just identifies the tag and does not describe the contents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SerialNumber", DataType="String64")]
        public string SerialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Additional parameters to define the instrument box as a piece of equipment. These should not be parameters to define the installation or use of the box in the wellbore, or other system. This element should be used only if an appropriate parameter is not available as an element, or in the calibration operation.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Parameter")]
        [System.ComponentModel.DescriptionAttribute(@"Additional parameters to define the instrument box as a piece of equipment. These should not be parameters to define the installation or use of the box in the wellbore, or other system. This element should be used only if an appropriate parameter is not available as an element, or in the calibration operation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="IndexedObject")]
        public IndexedObject[] Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Identifies the facility to which an instrument is attached.  Type is the PRODML Common Facility Identifier.</summary>
        [System.ComponentModel.DescriptionAttribute("Identifies the facility to which an instrument is attached.  Type is the PRODML C" +
            "ommon Facility Identifier.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityIdentifier", DataType="FacilityIdentifier")]
        public FacilityIdentifier FacilityIdentifier {
            get {
                return this.facilityIdentifierField;
            }
            set {
                this.facilityIdentifierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The general data of an instrument, including vendor information, in the installed system.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The general data of an instrument, including vendor information, in the installed" +
            " system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Instrument", DataType="Instrument")]
        public Instrument Instrument {
            get {
                return this.instrumentField;
            }
            set {
                this.instrumentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Firmware version of the DAS Instrument box.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Firmware version of the DAS Instrument box.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FirmwareVersion", DataType="String64")]
        public string FirmwareVersion {
            get {
                return this.firmwareVersionField;
            }
            set {
                this.firmwareVersionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the patch cord connecting the fiber optic path to the DAS instrument box connector.</summary>
        [System.ComponentModel.DescriptionAttribute("Description of the patch cord connecting the fiber optic path to the DAS instrume" +
            "nt box connector.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PatchCord", DataType="DtsPatchCord")]
        public DtsPatchCord PatchCord {
            get {
                return this.patchCordField;
            }
            set {
                this.patchCordField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An identification tag for the instrument box. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("An identification tag for the instrument box. A serial number is a type of identi" +
            "fication tag however some tags contain many pieces of information. This structur" +
            "e just identifies the tag and does not describe the contents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InstrumentBoxDescription", DataType="String2000")]
        public string InstrumentBoxDescription {
            get {
                return this.instrumentBoxDescriptionField;
            }
            set {
                this.instrumentBoxDescriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class IndexedObject {
        
        private long indexField;
        
        private bool indexFieldSpecified;
        
        private string nameField;
        
        private string uomField;
        
        private string descriptionField;
        
        /// <remarks/>
        /// <summary>Index.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute("Index.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("index", DataType="NonNegativeLong")]
        public long index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool indexSpecified {
            get {
                return this.indexFieldSpecified;
            }
            set {
                this.indexFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("name", DataType="String64")]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unit of measure.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute("Unit of measure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="string")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Description.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("description", DataType="String2000")]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberOTDRInstrumentBox))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class Instrument : AbstractDtsEquipment {
        
        private BusinessAssociate instrumentVendorField;
        
        /// <remarks/>
        /// <summary>Contact information for the person/company that provided the equipment</summary>
        [System.ComponentModel.DescriptionAttribute("Contact information for the person/company that provided the equipment")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InstrumentVendor", DataType="BusinessAssociate")]
        public BusinessAssociate InstrumentVendor {
            get {
                return this.instrumentVendorField;
            }
            set {
                this.instrumentVendorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Instrument))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberOTDRInstrumentBox))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberCommon))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberTurnaround))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberTerminator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberSplice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberOpticalPathSegment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberConnection))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractDtsEquipment {
        
        private string nameField;
        
        private string manufacturerField;
        
        private System.DateTime manufacturingDateField;
        
        private bool manufacturingDateFieldSpecified;
        
        private string typeField;
        
        private System.DateTime supplyDateField;
        
        private bool supplyDateFieldSpecified;
        
        private string supplierModelNumberField;
        
        private string softwareVersionField;
        
        private string commentField;
        
        private BusinessAssociate supplierField;
        
        /// <remarks/>
        /// <summary>The DTS instrument equipment name.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The DTS instrument equipment name.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The manufacturer for this item of equipment.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The manufacturer for this item of equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Manufacturer", DataType="String64")]
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date when the equipment (e.g., instrument box) was manufactured.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("Date when the equipment (e.g., instrument box) was manufactured.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ManufacturingDate", DataType="date")]
        public System.DateTime ManufacturingDate {
            get {
                return this.manufacturingDateField;
            }
            set {
                this.manufacturingDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ManufacturingDateSpecified {
            get {
                return this.manufacturingDateFieldSpecified;
            }
            set {
                this.manufacturingDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of equipment. This might include the model type.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The type of equipment. This might include the model type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="String64")]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date on which this fiber segment was supplied.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date on which this fiber segment was supplied.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SupplyDate", DataType="date")]
        public System.DateTime SupplyDate {
            get {
                return this.supplyDateField;
            }
            set {
                this.supplyDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SupplyDateSpecified {
            get {
                return this.supplyDateFieldSpecified;
            }
            set {
                this.supplyDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The model number (alphanumeric) that is used by the supplier to reference the type of fiber that is supplied to the user.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The model number (alphanumeric) that is used by the supplier to reference the typ" +
            "e of fiber that is supplied to the user.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SupplierModelNumber", DataType="String64")]
        public string SupplierModelNumber {
            get {
                return this.supplierModelNumberField;
            }
            set {
                this.supplierModelNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Latest known version of the software/firmware that is running in the equipment</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Latest known version of the software/firmware that is running in the equipment")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SoftwareVersion", DataType="String64")]
        public string SoftwareVersion {
            get {
                return this.softwareVersionField;
            }
            set {
                this.softwareVersionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A descriptive remark about the equipment (e.g., optical fiber).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A descriptive remark about the equipment (e.g., optical fiber).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Contact details for the company/person supplying the equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("Contact details for the company/person supplying the equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Supplier", DataType="BusinessAssociate")]
        public BusinessAssociate Supplier {
            get {
                return this.supplierField;
            }
            set {
                this.supplierField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberTurnaround))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberTerminator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberSplice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberOpticalPathSegment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberConnection))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberCommon : AbstractDtsEquipment {
        
        private DimensionlessMeasure reflectanceField;
        
        private DimensionlessMeasure lossField;
        
        private string reasonForDecommissioningField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The fraction of incident light that is reflected by a fiber path component. Measured in dB.</summary>
        [System.ComponentModel.DescriptionAttribute("The fraction of incident light that is reflected by a fiber path component. Measu" +
            "red in dB.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Reflectance", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure Reflectance {
            get {
                return this.reflectanceField;
            }
            set {
                this.reflectanceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fraction of incident light that is lost by a fiber path component. Measured in dB.</summary>
        [System.ComponentModel.DescriptionAttribute("The fraction of incident light that is lost by a fiber path component. Measured i" +
            "n dB.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Loss", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure Loss {
            get {
                return this.lossField;
            }
            set {
                this.lossField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Any remarks that help understand why the optical fiber is no longer in use.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Any remarks that help understand why the optical fiber is no longer in use.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReasonForDecommissioning", DataType="String2000")]
        public string ReasonForDecommissioning {
            get {
                return this.reasonForDecommissioningField;
            }
            set {
                this.reasonForDecommissioningField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier of this object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier of this object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberTurnaround : FiberCommon {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberTerminator : FiberCommon {
        
        private TerminationType terminationTypeField;
        
        /// <remarks/>
        /// <summary>Information about the termination used for the fiber.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Information about the termination used for the fiber.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TerminationType", DataType="TerminationType")]
        public TerminationType TerminationType {
            get {
                return this.terminationTypeField;
            }
            set {
                this.terminationTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum TerminationType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("looped back to instrument box")]
        loopedbacktoinstrumentbox,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("termination at cable")]
        terminationatcable,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberSplice : FiberCommon {
        
        private string spliceEquipmentUsedReferenceField;
        
        private string strippingTypeField;
        
        private string protectorTypeField;
        
        private FiberSpliceTypes fiberSpliceTypeField;
        
        private PressureMeasure pressureRatingField;
        
        private PlaneAngleUom bendAngleField;
        
        private bool bendAngleFieldSpecified;
        
        /// <remarks/>
        /// <summary>A useful description of the equipment used to create the splice.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A useful description of the equipment used to create the splice.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpliceEquipmentUsedReference", DataType="String64")]
        public string SpliceEquipmentUsedReference {
            get {
                return this.spliceEquipmentUsedReferenceField;
            }
            set {
                this.spliceEquipmentUsedReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A useful description of the stripping type that was conducted.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A useful description of the stripping type that was conducted.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StrippingType", DataType="String64")]
        public string StrippingType {
            get {
                return this.strippingTypeField;
            }
            set {
                this.strippingTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A useful description of the type of protector used in the splice.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A useful description of the type of protector used in the splice.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProtectorType", DataType="String64")]
        public string ProtectorType {
            get {
                return this.protectorTypeField;
            }
            set {
                this.protectorTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Enum. The type of splice.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Enum. The type of splice.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FiberSpliceType", DataType="FiberSpliceTypes")]
        public FiberSpliceTypes FiberSpliceType {
            get {
                return this.fiberSpliceTypeField;
            }
            set {
                this.fiberSpliceTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure rating for which the splice is expected to withstand.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure rating for which the splice is expected to withstand.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PressureRating", DataType="PressureMeasure")]
        public PressureMeasure PressureRating {
            get {
                return this.pressureRatingField;
            }
            set {
                this.pressureRatingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measurement of the bend on the splice.</summary>
        [System.ComponentModel.DescriptionAttribute("The measurement of the bend on the splice.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BendAngle", DataType="PlaneAngleUom")]
        public PlaneAngleUom BendAngle {
            get {
                return this.bendAngleField;
            }
            set {
                this.bendAngleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BendAngleSpecified {
            get {
                return this.bendAngleFieldSpecified;
            }
            set {
                this.bendAngleFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum FiberSpliceTypes {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cable splice")]
        cablesplice,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h splice")]
        hsplice,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("user-custom")]
        usercustom,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberOpticalPathSegment : FiberCommon {
        
        private LengthMeasure fiberLengthField;
        
        private LengthMeasure overStuffingField;
        
        private LengthMeasure coreDiameterField;
        
        private LengthMeasure claddedDiameterField;
        
        private LengthMeasure outsideDiameterField;
        
        private FiberMode modeField;
        
        private bool modeFieldSpecified;
        
        private string coatingField;
        
        private string jacketField;
        
        private string coreTypeField;
        
        private IndexedObject[] parameterField;
        
        private string spoolNumberTagField;
        
        private LengthMeasure spoolLengthField;
        
        private CableType cableTypeField;
        
        private bool cableTypeFieldSpecified;
        
        private FiberRefractiveIndex[] refractiveIndexField;
        
        private FiberConveyance fiberConveyanceField;
        
        private FiberOneWayAttenuation[] oneWayAttenuationField;
        
        /// <remarks/>
        /// <summary>The length of fiber in this optical path section.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The length of fiber in this optical path section.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FiberLength", DataType="LengthMeasure")]
        public LengthMeasure FiberLength {
            get {
                return this.fiberLengthField;
            }
            set {
                this.fiberLengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>For this fiber segment, the amount of "overstuffing", i.e., the excess length of fiber that was installed compared to the length of the facility that is to be surveyed. Example: if 110 m of fiber were to be installed to measure 100 m length of pipeline, the overstuffing would be 10 m. Overstuffing can be allowed for in the facilityMapping section. The overstuffing is assumed to be linear distributed along the facility being measured.</summary>
        [System.ComponentModel.DescriptionAttribute(@"For this fiber segment, the amount of ""overstuffing"", i.e., the excess length of fiber that was installed compared to the length of the facility that is to be surveyed. Example: if 110 m of fiber were to be installed to measure 100 m length of pipeline, the overstuffing would be 10 m. Overstuffing can be allowed for in the facilityMapping section. The overstuffing is assumed to be linear distributed along the facility being measured.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OverStuffing", DataType="LengthMeasure")]
        public LengthMeasure OverStuffing {
            get {
                return this.overStuffingField;
            }
            set {
                this.overStuffingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The inner diameter of the core, generally measured in microns (um).</summary>
        [System.ComponentModel.DescriptionAttribute("The inner diameter of the core, generally measured in microns (um).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CoreDiameter", DataType="LengthMeasure")]
        public LengthMeasure CoreDiameter {
            get {
                return this.coreDiameterField;
            }
            set {
                this.coreDiameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The diameter of the core plus the cladding, generally measured in microns (um).</summary>
        [System.ComponentModel.DescriptionAttribute("The diameter of the core plus the cladding, generally measured in microns (um).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CladdedDiameter", DataType="LengthMeasure")]
        public LengthMeasure CladdedDiameter {
            get {
                return this.claddedDiameterField;
            }
            set {
                this.claddedDiameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The diameter of the cable containing the fiber, including all its sheathing layers.</summary>
        [System.ComponentModel.DescriptionAttribute("The diameter of the cable containing the fiber, including all its sheathing layer" +
            "s.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OutsideDiameter", DataType="LengthMeasure")]
        public LengthMeasure OutsideDiameter {
            get {
                return this.outsideDiameterField;
            }
            set {
                this.outsideDiameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mode of fiber. Enum. Values are single- or multi- mode fiber, or other/unknown.</summary>
        [System.ComponentModel.DescriptionAttribute("The mode of fiber. Enum. Values are single- or multi- mode fiber, or other/unknow" +
            "n.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mode", DataType="FiberMode")]
        public FiberMode Mode {
            get {
                return this.modeField;
            }
            set {
                this.modeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModeSpecified {
            get {
                return this.modeFieldSpecified;
            }
            set {
                this.modeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of coating on the fiber.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The type of coating on the fiber.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Coating", DataType="String64")]
        public string Coating {
            get {
                return this.coatingField;
            }
            set {
                this.coatingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of jacket covering the fiber.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The type of jacket covering the fiber.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Jacket", DataType="String64")]
        public string Jacket {
            get {
                return this.jacketField;
            }
            set {
                this.jacketField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Property of the fiber core.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Property of the fiber core.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CoreType", DataType="String64")]
        public string CoreType {
            get {
                return this.coreTypeField;
            }
            set {
                this.coreTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Additional parameters to define the fiber as a material.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Parameter")]
        [System.ComponentModel.DescriptionAttribute("Additional parameters to define the fiber as a material.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="IndexedObject")]
        public IndexedObject[] Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The spool number of the particular spool from which this fiber segment was taken. The spool number may contain alphanumeric characters.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The spool number of the particular spool from which this fiber segment was taken." +
            " The spool number may contain alphanumeric characters.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpoolNumberTag", DataType="String64")]
        public string SpoolNumberTag {
            get {
                return this.spoolNumberTagField;
            }
            set {
                this.spoolNumberTagField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The length of the fiber on the spool when purchased.</summary>
        [System.ComponentModel.DescriptionAttribute("The length of the fiber on the spool when purchased.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpoolLength", DataType="LengthMeasure")]
        public LengthMeasure SpoolLength {
            get {
                return this.spoolLengthField;
            }
            set {
                this.spoolLengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Enum. The type of cable used in this segment. Example: single-fiber-cable.</summary>
        [System.ComponentModel.DescriptionAttribute("Enum. The type of cable used in this segment. Example: single-fiber-cable.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CableType", DataType="CableType")]
        public CableType CableType {
            get {
                return this.cableTypeField;
            }
            set {
                this.cableTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CableTypeSpecified {
            get {
                return this.cableTypeFieldSpecified;
            }
            set {
                this.cableTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The refractive index of a material depends on the frequency (or wavelength) of the light. Hence it is necessary to include both the value (a unitless number) and the frequency (or wavelength) it was measured at. The frequency will be a quantity type with a frequency unit such as Hz.</summary>
        [System.Xml.Serialization.XmlElementAttribute("RefractiveIndex")]
        [System.ComponentModel.DescriptionAttribute(@"The refractive index of a material depends on the frequency (or wavelength) of the light. Hence it is necessary to include both the value (a unitless number) and the frequency (or wavelength) it was measured at. The frequency will be a quantity type with a frequency unit such as Hz.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RefractiveIndex", DataType="FiberRefractiveIndex")]
        public FiberRefractiveIndex[] RefractiveIndex {
            get {
                return this.refractiveIndexField;
            }
            set {
                this.refractiveIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The means by which this fiber segment is conveyed into the well.</summary>
        [System.ComponentModel.DescriptionAttribute("The means by which this fiber segment is conveyed into the well.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FiberConveyance", DataType="FiberConveyance")]
        public FiberConveyance FiberConveyance {
            get {
                return this.fiberConveyanceField;
            }
            set {
                this.fiberConveyanceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The power loss for one way travel of a beam of light, usually measured in decibels per unit length. It is necessary to include both the value (and its unit) and the wavelength. The wavelength varies with the refractive index, while the frequency remains constant.  The wavelength given to specify this type is the wavelength in a vacuum (refractive index = 1).</summary>
        [System.Xml.Serialization.XmlElementAttribute("OneWayAttenuation")]
        [System.ComponentModel.DescriptionAttribute(@"The power loss for one way travel of a beam of light, usually measured in decibels per unit length. It is necessary to include both the value (and its unit) and the wavelength. The wavelength varies with the refractive index, while the frequency remains constant.  The wavelength given to specify this type is the wavelength in a vacuum (refractive index = 1).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OneWayAttenuation", DataType="FiberOneWayAttenuation")]
        public FiberOneWayAttenuation[] OneWayAttenuation {
            get {
                return this.oneWayAttenuationField;
            }
            set {
                this.oneWayAttenuationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum FiberMode {
        
        /// <remarks/>
        multimode,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        singlemode,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum CableType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electrical-fiber-cable")]
        electricalfibercable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("multi-fiber-cable")]
        multifibercable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("single-fiber-cable")]
        singlefibercable,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberRefractiveIndex {
        
        private LogarithmicPowerRatioPerLengthMeasure valueField;
        
        private FrequencyMeasure frequencyField;
        
        private LengthMeasure wavelengthField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The value of the refractive index.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The value of the refractive index.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="LogarithmicPowerRatioPerLengthMeasure")]
        public LogarithmicPowerRatioPerLengthMeasure Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The frequency (and UOM) for which the refractive index is measured.</summary>
        [System.ComponentModel.DescriptionAttribute("The frequency (and UOM) for which the refractive index is measured.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Frequency", DataType="FrequencyMeasure")]
        public FrequencyMeasure Frequency {
            get {
                return this.frequencyField;
            }
            set {
                this.frequencyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The wavelength (and UOM) for which the refractive index is measured. The reported wavelength should be the wavelength of the light in a vacuum.</summary>
        [System.ComponentModel.DescriptionAttribute("The wavelength (and UOM) for which the refractive index is measured. The reported" +
            " wavelength should be the wavelength of the light in a vacuum.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wavelength", DataType="LengthMeasure")]
        public LengthMeasure Wavelength {
            get {
                return this.wavelengthField;
            }
            set {
                this.wavelengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier of this object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier of this object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class LogarithmicPowerRatioPerLengthMeasure {
        
        private LogarithmicPowerRatioPerLengthUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LogarithmicPowerRatioPerLengthUom")]
        public LogarithmicPowerRatioPerLengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LogarithmicPowerRatioPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B/m")]
        Bm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/ft")]
        dBft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/km")]
        dBkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/m")]
        dBm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberConveyance {
        
        private AbstractCable cableField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Cable", DataType="AbstractCable")]
        public AbstractCable Cable {
            get {
                return this.cableField;
            }
            set {
                this.cableField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PermanentCable))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(InterventionConveyance))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberControlLine))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractCable {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class PermanentCable : AbstractCable {
        
        private PermanentCableInstallationType permanentCableInstallationTypeField;
        
        private string commentField;
        
        /// <remarks/>
        /// <summary>Enum. For permanent conveyance option, the type of conveyance. Example: clamped to tubular.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Enum. For permanent conveyance option, the type of conveyance. Example: clamped t" +
            "o tubular.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PermanentCableInstallationType", DataType="PermanentCableInstallationType")]
        public PermanentCableInstallationType PermanentCableInstallationType {
            get {
                return this.permanentCableInstallationTypeField;
            }
            set {
                this.permanentCableInstallationTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comment about the intervention conveyance.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comment about the intervention conveyance.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum PermanentCableInstallationType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("buried parallel to tubular")]
        buriedparalleltotubular,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("clamped to tubular")]
        clampedtotubular,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wrapped around tubular")]
        wrappedaroundtubular,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class InterventionConveyance : AbstractCable {
        
        private InterventionConveyanceType interventionConveyanceTypeField;
        
        private string commentField;
        
        /// <remarks/>
        /// <summary>The type from the enumeration list of InterventionConveyanceType.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The type from the enumeration list of InterventionConveyanceType.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InterventionConveyanceType", DataType="InterventionConveyanceType")]
        public InterventionConveyanceType InterventionConveyanceType {
            get {
                return this.interventionConveyanceTypeField;
            }
            set {
                this.interventionConveyanceTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comment about the intervention conveyance.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comment about the intervention conveyance.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum InterventionConveyanceType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coiled tubing")]
        coiledtubing,
        
        /// <remarks/>
        rod,
        
        /// <remarks/>
        slickline,
        
        /// <remarks/>
        wireline,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberControlLine : AbstractCable {
        
        private ControlLineSize sizeField;
        
        private ControlLineMaterial materialField;
        
        private ControlLineEncapsulationType encapsulationTypeField;
        
        private ControlLineEncapsulationSize encapsulationSizeField;
        
        private string commentField;
        
        private FiberPumpActivity[] pumpActivityField;
        
        private string downholeControlLineReferenceField;
        
        /// <remarks/>
        /// <summary>Enum of the common sizes of control line. The enum list gives diameters and weight per length values. A fiber may be installed inside the control line.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Enum of the common sizes of control line. The enum list gives diameters and weigh" +
            "t per length values. A fiber may be installed inside the control line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Size", DataType="ControlLineSize")]
        public ControlLineSize Size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Enum of the common materials from which a control line may be made. A fiber may be installed inside the control line.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Enum of the common materials from which a control line may be made. A fiber may b" +
            "e installed inside the control line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Material", DataType="ControlLineMaterial")]
        public ControlLineMaterial Material {
            get {
                return this.materialField;
            }
            set {
                this.materialField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Enum of square or round encapsulation for a control line. A fiber may be installed inside the control line.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Enum of square or round encapsulation for a control line. A fiber may be installe" +
            "d inside the control line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EncapsulationType", DataType="ControlLineEncapsulationType")]
        public ControlLineEncapsulationType EncapsulationType {
            get {
                return this.encapsulationTypeField;
            }
            set {
                this.encapsulationTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Enum of the size of encapsulation of a fiber within a control line.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Enum of the size of encapsulation of a fiber within a control line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EncapsulationSize", DataType="ControlLineEncapsulationSize")]
        public ControlLineEncapsulationSize EncapsulationSize {
            get {
                return this.encapsulationSizeField;
            }
            set {
                this.encapsulationSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A descriptive remark about the fiber control line.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A descriptive remark about the fiber control line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The activity of pumping the fiber downhole into a control line (small diameter tube).</summary>
        [System.Xml.Serialization.XmlElementAttribute("PumpActivity")]
        [System.ComponentModel.DescriptionAttribute("The activity of pumping the fiber downhole into a control line (small diameter tu" +
            "be).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PumpActivity", DataType="FiberPumpActivity")]
        public FiberPumpActivity[] PumpActivity {
            get {
                return this.pumpActivityField;
            }
            set {
                this.pumpActivityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to the control line string in a completion data object that represents this control line containing a fiber.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A reference to the control line string in a completion data object that represent" +
            "s this control line containing a fiber.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("downholeControlLineReference", DataType="String64")]
        public string downholeControlLineReference {
            get {
                return this.downholeControlLineReferenceField;
            }
            set {
                this.downholeControlLineReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ControlLineSize {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diameter 0.25 in weight 0.028 lb/ft")]
        diameter025inweight0028lbft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diameter 0.25 in weight 0.035 lb/ft")]
        diameter025inweight0035lbft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diameter 0.375 in weight 0.048 lb/ft")]
        diameter0375inweight0048lbft,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ControlLineMaterial {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inc 825")]
        inc825,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ss 316")]
        ss316,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ControlLineEncapsulationType {
        
        /// <remarks/>
        round,
        
        /// <remarks/>
        square,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ControlLineEncapsulationSize {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("11x11")]
        Item11x11,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("23x11")]
        Item23x11,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberPumpActivity {
        
        private string nameField;
        
        private string installedFiberField;
        
        private System.DateTime pumpingDateField;
        
        private bool pumpingDateFieldSpecified;
        
        private string engineerNameField;
        
        private string serviceCompanyField;
        
        private string pumpFluidTypeField;
        
        private string controlLineFluidField;
        
        private string pumpDirectionField;
        
        private string fiberEndSealField;
        
        private string cableMeterTypeField;
        
        private string cableMeterSerialNumberField;
        
        private System.DateTime cableMeterCalibrationDateField;
        
        private bool cableMeterCalibrationDateFieldSpecified;
        
        private LengthMeasure excessFiberRecoveredField;
        
        private string commentField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A name that can be used to reference the pumping activity. In general, a pumping activity does not have a natural name, so this element is often not used.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A name that can be used to reference the pumping activity. In general, a pumping " +
            "activity does not have a natural name, so this element is often not used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the InstalledFiberInstance that this activity relates to.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the InstalledFiberInstance that this activity relates to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InstalledFiber", DataType="String64")]
        public string InstalledFiber {
            get {
                return this.installedFiberField;
            }
            set {
                this.installedFiberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date of the pumping activity.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date of the pumping activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PumpingDate", DataType="date")]
        public System.DateTime PumpingDate {
            get {
                return this.pumpingDateField;
            }
            set {
                this.pumpingDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PumpingDateSpecified {
            get {
                return this.pumpingDateFieldSpecified;
            }
            set {
                this.pumpingDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The person in charge of the pumping activity.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The person in charge of the pumping activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EngineerName", DataType="String64")]
        public string EngineerName {
            get {
                return this.engineerNameField;
            }
            set {
                this.engineerNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The company that performed the pumping activity.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The company that performed the pumping activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ServiceCompany", DataType="String64")]
        public string ServiceCompany {
            get {
                return this.serviceCompanyField;
            }
            set {
                this.serviceCompanyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of fluid used in the pump.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The type of fluid used in the pump.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PumpFluidType", DataType="String64")]
        public string PumpFluidType {
            get {
                return this.pumpFluidTypeField;
            }
            set {
                this.pumpFluidTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of fluid used in the control line.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The type of fluid used in the control line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ControlLineFluid", DataType="String64")]
        public string ControlLineFluid {
            get {
                return this.controlLineFluidField;
            }
            set {
                this.controlLineFluidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The direction of the pumping.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The direction of the pumping.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PumpDirection", DataType="String64")]
        public string PumpDirection {
            get {
                return this.pumpDirectionField;
            }
            set {
                this.pumpDirectionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of end seal on the fiber.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The type of end seal on the fiber.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FiberEndSeal", DataType="String64")]
        public string FiberEndSeal {
            get {
                return this.fiberEndSealField;
            }
            set {
                this.fiberEndSealField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of cable meter.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The type of cable meter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CableMeterType", DataType="String64")]
        public string CableMeterType {
            get {
                return this.cableMeterTypeField;
            }
            set {
                this.cableMeterTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The serial number of the cable meter.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The serial number of the cable meter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CableMeterSerialNumber", DataType="String64")]
        public string CableMeterSerialNumber {
            get {
                return this.cableMeterSerialNumberField;
            }
            set {
                this.cableMeterSerialNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date the cable meter was calibrated.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date the cable meter was calibrated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CableMeterCalibrationDate", DataType="date")]
        public System.DateTime CableMeterCalibrationDate {
            get {
                return this.cableMeterCalibrationDateField;
            }
            set {
                this.cableMeterCalibrationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CableMeterCalibrationDateSpecified {
            get {
                return this.cableMeterCalibrationDateFieldSpecified;
            }
            set {
                this.cableMeterCalibrationDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The length of the excess fiber that was removed.</summary>
        [System.ComponentModel.DescriptionAttribute("The length of the excess fiber that was removed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExcessFiberRecovered", DataType="LengthMeasure")]
        public LengthMeasure ExcessFiberRecovered {
            get {
                return this.excessFiberRecoveredField;
            }
            set {
                this.excessFiberRecoveredField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comment about the pump activity.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comment about the pump activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier of this object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier of this object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberOneWayAttenuation {
        
        private LogarithmicPowerRatioPerLengthMeasure valueField;
        
        private AbstractAttenuationMeasure attenuationMeasureField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The value of the one-way loss per unit of length. The usual UOM is decibels per kilometer (dB/km) although this might vary depending on the calibration method used.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The value of the one-way loss per unit of length. The usual UOM is decibels per k" +
            "ilometer (dB/km) although this might vary depending on the calibration method us" +
            "ed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="LogarithmicPowerRatioPerLengthMeasure")]
        public LogarithmicPowerRatioPerLengthMeasure Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AttenuationMeasure", DataType="AbstractAttenuationMeasure")]
        public AbstractAttenuationMeasure AttenuationMeasure {
            get {
                return this.attenuationMeasureField;
            }
            set {
                this.attenuationMeasureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier of this object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [System.ComponentModel.DescriptionAttribute("Unique identifier of this object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="UuidString")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WaveLength))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Frequency))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractAttenuationMeasure {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class WaveLength : AbstractAttenuationMeasure {
        
        private LengthMeasure waveLength1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("WaveLength")]
        public LengthMeasure WaveLength1 {
            get {
                return this.waveLength1Field;
            }
            set {
                this.waveLength1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class Frequency : AbstractAttenuationMeasure {
        
        private FrequencyMeasure frequency1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Frequency")]
        public FrequencyMeasure Frequency1 {
            get {
                return this.frequency1Field;
            }
            set {
                this.frequency1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberConnection : FiberCommon {
        
        private FiberConnectorTypes[] connectorTypeField;
        
        private FiberEndType[] endTypeField;
        
        /// <remarks/>
        /// <summary>Specifies whether this is a dry mate or wet mate.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ConnectorType")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Specifies whether this is a dry mate or wet mate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConnectorType", DataType="FiberConnectorTypes")]
        public FiberConnectorTypes[] ConnectorType {
            get {
                return this.connectorTypeField;
            }
            set {
                this.connectorTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Describes whether the fiber end is angle polished or flat polished.</summary>
        [System.Xml.Serialization.XmlElementAttribute("EndType")]
        [System.ComponentModel.DescriptionAttribute("Describes whether the fiber end is angle polished or flat polished.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndType", DataType="FiberEndType")]
        public FiberEndType[] EndType {
            get {
                return this.endTypeField;
            }
            set {
                this.endTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum FiberConnectorTypes {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dry mate")]
        drymate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wet mate")]
        wetmate,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum FiberEndType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angle polished")]
        anglepolished,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("flat polished")]
        flatpolished,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberOTDRInstrumentBox : Instrument {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DtsPatchCord {
        
        private LengthMeasure fiberLengthField;
        
        private string descriptionField;
        
        /// <remarks/>
        /// <summary>Optical distance between the instrument and the end of the patch cord that will be attached to the rest of the optical path from which a measurement will be taken.</summary>
        [System.ComponentModel.DescriptionAttribute("Optical distance between the instrument and the end of the patch cord that will b" +
            "e attached to the rest of the optical path from which a measurement will be take" +
            "n.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FiberLength", DataType="LengthMeasure")]
        public LengthMeasure FiberLength {
            get {
                return this.fiberLengthField;
            }
            set {
                this.fiberLengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A textual description of the patch cord.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A textual description of the patch cord.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class DasAcquisition : AbstractObject {
        
        private string acquisitionIdField;
        
        private string acquisitionDescriptionField;
        
        private DataObjectReference opticalPathField;
        
        private DataObjectReference dasInstrumentBoxField;
        
        private string[] facilityIdField;
        
        private BusinessAssociate vendorCodeField;
        
        private FrequencyMeasure pulseRateField;
        
        private TimeMeasure pulseWidthField;
        
        private LengthMeasure gaugeLengthField;
        
        private string gaugeLengthUnitField;
        
        private LengthMeasure spatialSamplingIntervalField;
        
        private string spatialSamplingIntervalUnitField;
        
        private FrequencyMeasure minimumFrequencyField;
        
        private FrequencyMeasure maximumFrequencyField;
        
        private long numberOfLociField;
        
        private long startLocusIndexField;
        
        private Energistics.DataAccess.Timestamp measurementStartTimeField;
        
        private bool triggeredMeasurementField;
        
        private string pulseWidthUnitField;
        
        private DasRaw[] rawField;
        
        private DasCustom customField;
        
        private DasCalibration[] calibrationField;
        
        private DasProcessed processedField;
        
        public DasAcquisition() {
            this.pulseWidthUnitField = "ns";
        }
        
        /// <remarks/>
        /// <summary>A universally unique identifier (UUID) for an instance of a DAS acquisition.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [System.ComponentModel.DescriptionAttribute("A universally unique identifier (UUID) for an instance of a DAS acquisition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AcquisitionId", DataType="UuidString")]
        public string AcquisitionId {
            get {
                return this.acquisitionIdField;
            }
            set {
                this.acquisitionIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Free format description of the acquired DAS data.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Free format description of the acquired DAS data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AcquisitionDescription", DataType="String2000")]
        public string AcquisitionDescription {
            get {
                return this.acquisitionDescriptionField;
            }
            set {
                this.acquisitionDescriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the fiber optical path. A fiber optical path consists of a series of fibers, connectors, etc. together forming the path for the light pulse emitted from the measurement instrument.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Description of the fiber optical path. A fiber optical path consists of a series " +
            "of fibers, connectors, etc. together forming the path for the light pulse emitte" +
            "d from the measurement instrument.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpticalPath", DataType="DataObjectReference")]
        public DataObjectReference OpticalPath {
            get {
                return this.opticalPathField;
            }
            set {
                this.opticalPathField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the measurement instrument. Often referred to as interrogator unit or IU.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Description of the measurement instrument. Often referred to as interrogator unit" +
            " or IU.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DasInstrumentBox", DataType="DataObjectReference")]
        public DataObjectReference DasInstrumentBox {
            get {
                return this.dasInstrumentBoxField;
            }
            set {
                this.dasInstrumentBoxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This is a human-readable name for the facility or facilities which this acquisition is measuring.</summary>
        [System.Xml.Serialization.XmlElementAttribute("FacilityId")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("This is a human-readable name for the facility or facilities which this acquisiti" +
            "on is measuring.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityId", DataType="String64")]
        public string[] FacilityId {
            get {
                return this.facilityIdField;
            }
            set {
                this.facilityIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the vendor providing the DAS data acquisition service.  Note that in the HDF5 (H5) file, this is a single string describing vendor name and some additional information that the vendor deems relevant, e.g., ‘VendorX FBE data version 2.3’.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Description of the vendor providing the DAS data acquisition service.  Note that " +
            "in the HDF5 (H5) file, this is a single string describing vendor name and some a" +
            "dditional information that the vendor deems relevant, e.g., ‘VendorX FBE data ve" +
            "rsion 2.3’.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VendorCode", DataType="BusinessAssociate")]
        public BusinessAssociate VendorCode {
            get {
                return this.vendorCodeField;
            }
            set {
                this.vendorCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The rate at which the interrogator unit interrogates the fiber sensor. For most interrogators, this element is informally known as the ‘pulse rate’.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The rate at which the interrogator unit interrogates the fiber sensor. For most i" +
            "nterrogators, this element is informally known as the ‘pulse rate’.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PulseRate", DataType="FrequencyMeasure")]
        public FrequencyMeasure PulseRate {
            get {
                return this.pulseRateField;
            }
            set {
                this.pulseRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The width of the ‘pulse’ sent down the fiber.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The width of the ‘pulse’ sent down the fiber.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PulseWidth", DataType="TimeMeasure")]
        public TimeMeasure PulseWidth {
            get {
                return this.pulseWidthField;
            }
            set {
                this.pulseWidthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A distance (length along the fiber) which the DAS interrogator unit manufacturer designs and implements by hardware or software to affect the interrogator unit spatial resolution.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A distance (length along the fiber) which the DAS interrogator unit manufacturer " +
            "designs and implements by hardware or software to affect the interrogator unit s" +
            "patial resolution.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GaugeLength", DataType="LengthMeasure")]
        public LengthMeasure GaugeLength {
            get {
                return this.gaugeLengthField;
            }
            set {
                this.gaugeLengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Only required in an HDF5 (H5) file to record the unit of measure of the gauge length.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Only required in an HDF5 (H5) file to record the unit of measure of the gauge len" +
            "gth.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GaugeLengthUnit", DataType="String64")]
        public string GaugeLengthUnit {
            get {
                return this.gaugeLengthUnitField;
            }
            set {
                this.gaugeLengthUnitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The separation between two consecutive ‘spatial sample’ points on the fiber at which the signal is measured. Not to be confused with ‘spatial resolution’.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The separation between two consecutive ‘spatial sample’ points on the fiber at wh" +
            "ich the signal is measured. Not to be confused with ‘spatial resolution’.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpatialSamplingInterval", DataType="LengthMeasure")]
        public LengthMeasure SpatialSamplingInterval {
            get {
                return this.spatialSamplingIntervalField;
            }
            set {
                this.spatialSamplingIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Only required in an HDF5 (H5) file to record the unit of measure of the sampling interval.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Only required in an HDF5 (H5) file to record the unit of measure of the sampling " +
            "interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpatialSamplingIntervalUnit", DataType="String64")]
        public string SpatialSamplingIntervalUnit {
            get {
                return this.spatialSamplingIntervalUnitField;
            }
            set {
                this.spatialSamplingIntervalUnitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The minimum signal frequency a measurement instrument can provide as specified by the vendor.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The minimum signal frequency a measurement instrument can provide as specified by" +
            " the vendor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MinimumFrequency", DataType="FrequencyMeasure")]
        public FrequencyMeasure MinimumFrequency {
            get {
                return this.minimumFrequencyField;
            }
            set {
                this.minimumFrequencyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum signal frequency a measurement instrument can provide as specified by the vendor. This is the Nyquist frequency (or some fraction thereof) of PulseRate.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The maximum signal frequency a measurement instrument can provide as specified by" +
            " the vendor. This is the Nyquist frequency (or some fraction thereof) of PulseRa" +
            "te.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaximumFrequency", DataType="FrequencyMeasure")]
        public FrequencyMeasure MaximumFrequency {
            get {
                return this.maximumFrequencyField;
            }
            set {
                this.maximumFrequencyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total number of ‘loci’ (acoustic sample points) acquired by the measurement instrument in a single ‘scan’ of the fiber.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The total number of ‘loci’ (acoustic sample points) acquired by the measurement i" +
            "nstrument in a single ‘scan’ of the fiber.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumberOfLoci", DataType="NonNegativeLong")]
        public long NumberOfLoci {
            get {
                return this.numberOfLociField;
            }
            set {
                this.numberOfLociField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The first ‘locus’ acquired by the interrogator unit. Where ‘Locus Index 0’ is the acoustic sample point at the connector of the measurement instrument.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The first ‘locus’ acquired by the interrogator unit. Where ‘Locus Index 0’ is the" +
            " acoustic sample point at the connector of the measurement instrument.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartLocusIndex", DataType="NonNegativeLong")]
        public long StartLocusIndex {
            get {
                return this.startLocusIndexField;
            }
            set {
                this.startLocusIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The time-date specification of the beginning of a data ‘sample’ in a ‘time series’ in ISO 8601 compatible format. This is typically a GPS-locked time measurement.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The time-date specification of the beginning of a data ‘sample’ in a ‘time series" +
            "’ in ISO 8601 compatible format. This is typically a GPS-locked time measurement" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasurementStartTime", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp MeasurementStartTime {
            get {
                return this.measurementStartTimeField;
            }
            set {
                this.measurementStartTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measurement for an acquisition that requires synchronization between a transmitting source (Tx) and a recording (Rx) measurement system. It must be recorded for every measurement regardless of what application it will serve.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Measurement for an acquisition that requires synchronization between a transmitti" +
            "ng source (Tx) and a recording (Rx) measurement system. It must be recorded for " +
            "every measurement regardless of what application it will serve.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TriggeredMeasurement", DataType="boolean")]
        public bool TriggeredMeasurement {
            get {
                return this.triggeredMeasurementField;
            }
            set {
                this.triggeredMeasurementField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Only required in an HDF5 (H5) file to record the unit of measure of the pulse width. Default is nanoseconds (ns).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Only required in an HDF5 (H5) file to record the unit of measure of the pulse wid" +
            "th. Default is nanoseconds (ns).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PulseWidthUnit", DataType="String64")]
        public string PulseWidthUnit {
            get {
                return this.pulseWidthUnitField;
            }
            set {
                this.pulseWidthUnitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Raw")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Raw", DataType="DasRaw")]
        public DasRaw[] Raw {
            get {
                return this.rawField;
            }
            set {
                this.rawField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Custom", DataType="DasCustom")]
        public DasCustom Custom {
            get {
                return this.customField;
            }
            set {
                this.customField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Calibration")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Calibration", DataType="DasCalibration")]
        public DasCalibration[] Calibration {
            get {
                return this.calibrationField;
            }
            set {
                this.calibrationField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Processed", DataType="DasProcessed")]
        public DasProcessed Processed {
            get {
                return this.processedField;
            }
            set {
                this.processedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DasRaw {
        
        private long rawIndexField;
        
        private bool rawIndexFieldSpecified;
        
        private string rawDescriptionField;
        
        private string rawDataUnitField;
        
        private FrequencyMeasure outputDataRateField;
        
        private long startLocusIndexField;
        
        private long numberOfLociField;
        
        private DasRawData rawDataField;
        
        private DasTimeArray rawDataTimeField;
        
        private DasTimeArray rawDataTriggerTimeField;
        
        private DasCustom customField;
        
        private string uuidField;
        
        /// <remarks/>
        /// <summary>The nth count of this Raw instance in the Acquisition.  Recommended if there is more than 1 Raw instance in this Acquisition.  This index corresponds to the Raw array number in the H5 file.</summary>
        [System.ComponentModel.DescriptionAttribute("The nth count of this Raw instance in the Acquisition.  Recommended if there is m" +
            "ore than 1 Raw instance in this Acquisition.  This index corresponds to the Raw " +
            "array number in the H5 file.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RawIndex", DataType="NonNegativeLong")]
        public long RawIndex {
            get {
                return this.rawIndexField;
            }
            set {
                this.rawIndexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RawIndexSpecified {
            get {
                return this.rawIndexFieldSpecified;
            }
            set {
                this.rawIndexFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Free format description of the raw DAS data acquired.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Free format description of the raw DAS data acquired.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RawDescription", DataType="String2000")]
        public string RawDescription {
            get {
                return this.rawDescriptionField;
            }
            set {
                this.rawDescriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Data unit for the DAS measurement instrument.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Data unit for the DAS measurement instrument.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RawDataUnit", DataType="String64")]
        public string RawDataUnit {
            get {
                return this.rawDataUnitField;
            }
            set {
                this.rawDataUnitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The rate at which the spectra data is provided for all ‘loci’ (spatial samples). This is typically equal to the interrogation rate/pulse rate of the DAS measurement system or an integer fraction thereof. This attribute is optional in the Raw Data object. If present, it overrides the Acquisition PulseRate. If not present, then OutputDataRate is assumed equal to the PulseRate.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The rate at which the spectra data is provided for all ‘loci’ (spatial samples). This is typically equal to the interrogation rate/pulse rate of the DAS measurement system or an integer fraction thereof. This attribute is optional in the Raw Data object. If present, it overrides the Acquisition PulseRate. If not present, then OutputDataRate is assumed equal to the PulseRate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OutputDataRate", DataType="FrequencyMeasure")]
        public FrequencyMeasure OutputDataRate {
            get {
                return this.outputDataRateField;
            }
            set {
                this.outputDataRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The first ‘locus’ acquired by the interrogator unit. Where ‘Locus Index 0’ is the acoustic sample point at the connector of the measurement instrument.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The first ‘locus’ acquired by the interrogator unit. Where ‘Locus Index 0’ is the" +
            " acoustic sample point at the connector of the measurement instrument.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartLocusIndex", DataType="NonNegativeLong")]
        public long StartLocusIndex {
            get {
                return this.startLocusIndexField;
            }
            set {
                this.startLocusIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total number of ‘loci’ (acoustic sample points) acquired by the measurement instrument in a single ‘scan’ of the fiber.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The total number of ‘loci’ (acoustic sample points) acquired by the measurement i" +
            "nstrument in a single ‘scan’ of the fiber.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumberOfLoci", DataType="NonNegativeLong")]
        public long NumberOfLoci {
            get {
                return this.numberOfLociField;
            }
            set {
                this.numberOfLociField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A DAS array object containing the raw DAS data.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A DAS array object containing the raw DAS data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RawData", DataType="DasRawData")]
        public DasRawData RawData {
            get {
                return this.rawDataField;
            }
            set {
                this.rawDataField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A DAS array object containing the sample times corresponding to a single ‘scan’ of the fiber. In a single ‘scan’, the DAS measurement system acquires raw data samples for all the loci specified by StartLocusIndex . The ‘scan’ frequency is equal to the DAS Acquisition Pulse Rate.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"A DAS array object containing the sample times corresponding to a single ‘scan’ of the fiber. In a single ‘scan’, the DAS measurement system acquires raw data samples for all the loci specified by StartLocusIndex . The ‘scan’ frequency is equal to the DAS Acquisition Pulse Rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RawDataTime", DataType="DasTimeArray")]
        public DasTimeArray RawDataTime {
            get {
                return this.rawDataTimeField;
            }
            set {
                this.rawDataTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A DAS array object containing the times of the triggers in a triggered measurement. Multiple times may be stored to indicate multiple triggers within a single DAS raw data recording. This array contains only valid data if TriggeredMeasurement is set to ‘true’ in DAS Acquisition.</summary>
        [System.ComponentModel.DescriptionAttribute(@"A DAS array object containing the times of the triggers in a triggered measurement. Multiple times may be stored to indicate multiple triggers within a single DAS raw data recording. This array contains only valid data if TriggeredMeasurement is set to ‘true’ in DAS Acquisition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RawDataTriggerTime", DataType="DasTimeArray")]
        public DasTimeArray RawDataTriggerTime {
            get {
                return this.rawDataTriggerTimeField;
            }
            set {
                this.rawDataTriggerTimeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Custom", DataType="DasCustom")]
        public DasCustom Custom {
            get {
                return this.customField;
            }
            set {
                this.customField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A universally unique identifier (UUID) for an instance of raw DAS data.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [System.ComponentModel.DescriptionAttribute("A universally unique identifier (UUID) for an instance of raw DAS data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuid", DataType="UuidString")]
        public string uuid {
            get {
                return this.uuidField;
            }
            set {
                this.uuidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DasRawData {
        
        private DasDimensions[] dimensionsField;
        
        private AbstractNumericArray rawDataArrayField;
        
        /// <remarks/>
        /// <summary>An array of two elements describing the ordering of the raw data array. The fastest running index is stored in the second element. For the DAS measurement instrument, the ordering is typically {‘time’, ‘locus’} indicating that the locus is the fastest running index, but in some cases the order may be reversed.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Dimensions")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"An array of two elements describing the ordering of the raw data array. The fastest running index is stored in the second element. For the DAS measurement instrument, the ordering is typically {‘time’, ‘locus’} indicating that the locus is the fastest running index, but in some cases the order may be reversed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Dimensions", DataType="DasDimensions")]
        public DasDimensions[] Dimensions {
            get {
                return this.dimensionsField;
            }
            set {
                this.dimensionsField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RawDataArray", DataType="AbstractNumericArray")]
        public AbstractNumericArray RawDataArray {
            get {
                return this.rawDataArrayField;
            }
            set {
                this.rawDataArrayField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum DasDimensions {
        
        /// <remarks/>
        frequency,
        
        /// <remarks/>
        locus,
        
        /// <remarks/>
        time,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractIntegerArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerRangeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerArrayFromBooleanMaskArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractFloatingPointArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointConstantArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractNumericArray : AbstractValueArray {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractStringArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractNumericArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractIntegerArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerRangeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerArrayFromBooleanMaskArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractFloatingPointArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractBooleanArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanArrayFromIndexArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractValueArray {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringConstantArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractStringArray : AbstractValueArray {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class StringExternalArray : AbstractStringArray {
        
        private ExternalDatasetPart[] valuesField;
        
        /// <remarks/>
        /// <summary>Reference to HDF5 array of integer or double</summary>
        [System.Xml.Serialization.XmlArrayItemAttribute("ExternalFileProxy", IsNullable=false)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Reference to HDF5 array of integer or double")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Values", DataType="ExternalDataset")]
        public ExternalDatasetPart[] Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DasExternalDatasetPart))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ExternalDatasetPart {
        
        private long countField;
        
        private string pathInExternalFileField;
        
        private long startIndexField;
        
        private DataObjectReference epcExternalPartReferenceField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="PositiveLong")]
        public long Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A string which is meaningful to the API which will store and retrieve data from the external file.  For an HDF file this is the path of the referenced dataset in the external file. The separator between groups and final dataset is a slash '/' in an hdf file.  For a LAS file this could be the list of mnemonics in the ~A block.  For a SEG-Y file this could be a list of trace headers.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute(@"A string which is meaningful to the API which will store and retrieve data from the external file.  For an HDF file this is the path of the referenced dataset in the external file. The separator between groups and final dataset is a slash '/' in an hdf file.  For a LAS file this could be the list of mnemonics in the ~A block.  For a SEG-Y file this could be a list of trace headers.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PathInExternalFile", DataType="String2000")]
        public string PathInExternalFile {
            get {
                return this.pathInExternalFileField;
            }
            set {
                this.pathInExternalFileField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartIndex", DataType="NonNegativeLong")]
        public long StartIndex {
            get {
                return this.startIndexField;
            }
            set {
                this.startIndexField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EpcExternalPartReference", DataType="DataObjectReference")]
        public DataObjectReference EpcExternalPartReference {
            get {
                return this.epcExternalPartReferenceField;
            }
            set {
                this.epcExternalPartReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DasExternalDatasetPart : ExternalDatasetPart {
        
        private Energistics.DataAccess.Timestamp partStartTimeField;
        
        private bool partStartTimeFieldSpecified;
        
        private Energistics.DataAccess.Timestamp partEndTimeField;
        
        private bool partEndTimeFieldSpecified;
        
        /// <remarks/>
        /// <summary>The timestamp in human readable, ISO 8601 format of the first recorded sample in the sub-record of the raw data array stored in the corresponding HDF data file.</summary>
        [System.ComponentModel.DescriptionAttribute("The timestamp in human readable, ISO 8601 format of the first recorded sample in " +
            "the sub-record of the raw data array stored in the corresponding HDF data file.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PartStartTime", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp PartStartTime {
            get {
                return this.partStartTimeField;
            }
            set {
                this.partStartTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PartStartTimeSpecified {
            get {
                return this.partStartTimeFieldSpecified;
            }
            set {
                this.partStartTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The timestamp in human readable, ISO 8601 format of the last recorded sample in the sub-record of the raw data array stored in the corresponding HDF data file.</summary>
        [System.ComponentModel.DescriptionAttribute("The timestamp in human readable, ISO 8601 format of the last recorded sample in t" +
            "he sub-record of the raw data array stored in the corresponding HDF data file.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PartEndTime", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp PartEndTime {
            get {
                return this.partEndTimeField;
            }
            set {
                this.partEndTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PartEndTimeSpecified {
            get {
                return this.partEndTimeFieldSpecified;
            }
            set {
                this.partEndTimeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class StringConstantArray : AbstractStringArray {
        
        private string valueField;
        
        private long countField;
        
        /// <remarks/>
        /// <summary>Value inside all the elements of the array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Value inside all the elements of the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="String2000")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Size of the array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Size of the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="PositiveLong")]
        public long Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanArrayFromIndexArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractBooleanArray : AbstractValueArray {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class BooleanExternalArray : AbstractBooleanArray {
        
        private ExternalDatasetPart[] valuesField;
        
        /// <remarks/>
        /// <summary>Reference to an HDF5 array of values.</summary>
        [System.Xml.Serialization.XmlArrayItemAttribute("ExternalFileProxy", IsNullable=false)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Reference to an HDF5 array of values.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Values", DataType="ExternalDataset")]
        public ExternalDatasetPart[] Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class BooleanConstantArray : AbstractBooleanArray {
        
        private bool valueField;
        
        private long countField;
        
        /// <remarks/>
        /// <summary>Value inside all the elements of the array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Value inside all the elements of the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="boolean")]
        public bool Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Size of the array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Size of the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="PositiveLong")]
        public long Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class BooleanArrayFromIndexArray : AbstractBooleanArray {
        
        private long countField;
        
        private AbstractIntegerArray indicesField;
        
        private bool indexIsTrueField;
        
        /// <remarks/>
        /// <summary>Total number of Boolean elements in the array. This number is different from the number of indices used to represent the array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Total number of Boolean elements in the array. This number is different from the " +
            "number of indices used to represent the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="PositiveLong")]
        public long Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Array of integer indices.  BUSINESS RULE: Must be non-negative.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Array of integer indices.  BUSINESS RULE: Must be non-negative.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Indices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray Indices {
            get {
                return this.indicesField;
            }
            set {
                this.indicesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates whether the specified elements are true or false.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the specified elements are true or false.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexIsTrue", DataType="boolean")]
        public bool IndexIsTrue {
            get {
                return this.indexIsTrueField;
            }
            set {
                this.indexIsTrueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerRangeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerArrayFromBooleanMaskArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractIntegerArray : AbstractNumericArray {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class IntegerRangeArray : AbstractIntegerArray {
        
        private long countField;
        
        private long valueField;
        
        /// <remarks/>
        /// <summary>Size of the array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Size of the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="PositiveLong")]
        public long Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Start value for the range. End value is start+count-1.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Start value for the range. End value is start+count-1.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="long")]
        public long Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class IntegerLatticeArray : AbstractIntegerArray {
        
        private long startValueField;
        
        private IntegerConstantArray[] offsetField;
        
        /// <remarks/>
        /// <summary>Value representing the global start for the lattice: i.e., iStart + jStart*ni + kStart*ni*nj</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Value representing the global start for the lattice: i.e., iStart + jStart*ni + k" +
            "Start*ni*nj")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartValue", DataType="long")]
        public long StartValue {
            get {
                return this.startValueField;
            }
            set {
                this.startValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Offset")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Offset", DataType="IntegerConstantArray")]
        public IntegerConstantArray[] Offset {
            get {
                return this.offsetField;
            }
            set {
                this.offsetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class IntegerConstantArray : AbstractIntegerArray {
        
        private long valueField;
        
        private long countField;
        
        /// <remarks/>
        /// <summary>Values inside all the elements of the array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Values inside all the elements of the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="long")]
        public long Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Size of the array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Size of the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="PositiveLong")]
        public long Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class IntegerExternalArray : AbstractIntegerArray {
        
        private long nullValueField;
        
        private ExternalDatasetPart[] valuesField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NullValue", DataType="long")]
        public long NullValue {
            get {
                return this.nullValueField;
            }
            set {
                this.nullValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to an HDF5 array of integers or doubles.</summary>
        [System.Xml.Serialization.XmlArrayItemAttribute("ExternalFileProxy", IsNullable=false)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Reference to an HDF5 array of integers or doubles.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Values", DataType="ExternalDataset")]
        public ExternalDatasetPart[] Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class IntegerArrayFromBooleanMaskArray : AbstractIntegerArray {
        
        private long totalIndexCountField;
        
        private AbstractBooleanArray maskField;
        
        /// <remarks/>
        /// <summary>Total number of integer elements in the array. This number is different from the number of Boolean mask values used to represent the array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Total number of integer elements in the array. This number is different from the " +
            "number of Boolean mask values used to represent the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalIndexCount", DataType="PositiveLong")]
        public long TotalIndexCount {
            get {
                return this.totalIndexCountField;
            }
            set {
                this.totalIndexCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Boolean mask. A true element indicates that the index is included on the list of integer values.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Boolean mask. A true element indicates that the index is included on the list of " +
            "integer values.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mask", DataType="AbstractBooleanArray")]
        public AbstractBooleanArray Mask {
            get {
                return this.maskField;
            }
            set {
                this.maskField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointConstantArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractFloatingPointArray : AbstractNumericArray {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class FloatingPointLatticeArray : AbstractFloatingPointArray {
        
        private double startValueField;
        
        private FloatingPointConstantArray[] offsetField;
        
        /// <remarks/>
        /// <summary>Value representing the global start for the lattice.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Value representing the global start for the lattice.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartValue", DataType="double")]
        public double StartValue {
            get {
                return this.startValueField;
            }
            set {
                this.startValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Offset")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Offset", DataType="FloatingPointConstantArray")]
        public FloatingPointConstantArray[] Offset {
            get {
                return this.offsetField;
            }
            set {
                this.offsetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class FloatingPointConstantArray : AbstractFloatingPointArray {
        
        private double valueField;
        
        private long countField;
        
        /// <remarks/>
        /// <summary>Values inside all the elements of the array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Values inside all the elements of the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="double")]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Size of the array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Size of the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="PositiveLong")]
        public long Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleExternalArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class FloatingPointExternalArray : AbstractFloatingPointArray {
        
        private ExternalDatasetPart[] valuesField;
        
        /// <remarks/>
        /// <summary>Reference to an HDF5 array of doubles.</summary>
        [System.Xml.Serialization.XmlArrayItemAttribute("ExternalFileProxy", IsNullable=false)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Reference to an HDF5 array of doubles.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Values", DataType="ExternalDataset")]
        public ExternalDatasetPart[] Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class FloatExternalArray : FloatingPointExternalArray {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class DoubleExternalArray : FloatingPointExternalArray {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DasTimeArray {
        
        private Energistics.DataAccess.Timestamp startTimeField;
        
        private Energistics.DataAccess.Timestamp endTimeField;
        
        private bool endTimeFieldSpecified;
        
        private IntegerExternalArray timeArrayField;
        
        /// <remarks/>
        /// <summary>The timestamp in human readable, ISO 8601 format of the last recorded sample in the acquistion. Note that this is the start time of the acquistion if a raw dataset is stored in multiple HDF files. The end time of the sub-record stored in an individual HDF file is stored in PartStartTime.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The timestamp in human readable, ISO 8601 format of the last recorded sample in the acquistion. Note that this is the start time of the acquistion if a raw dataset is stored in multiple HDF files. The end time of the sub-record stored in an individual HDF file is stored in PartStartTime.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartTime", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The timestamp in human readable, ISO 8601 format of the last recorded sample in the acquisition. Note that this is the end time of the acquistion if a raw data set is stored in multiple HDF files. The end time of the sub-record stored in an individual HDF file is stored in PartEndTime.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The timestamp in human readable, ISO 8601 format of the last recorded sample in the acquisition. Note that this is the end time of the acquistion if a raw data set is stored in multiple HDF files. The end time of the sub-record stored in an individual HDF file is stored in PartEndTime.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndTime", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndTimeSpecified {
            get {
                return this.endTimeFieldSpecified;
            }
            set {
                this.endTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeArray", DataType="IntegerExternalArray")]
        public IntegerExternalArray TimeArray {
            get {
                return this.timeArrayField;
            }
            set {
                this.timeArrayField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DasCustom {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DasCalibration {
        
        private long calibrationIndexField;
        
        private bool calibrationIndexFieldSpecified;
        
        private long numberOfCalibrationPointsField;
        
        private string calibrationDescriptionField;
        
        private string calibrationOpticalPathDistanceUnitField;
        
        private string calibrationFacilityLengthUnitField;
        
        private WellboreDatumReference calibrationDatumField;
        
        private bool calibrationDatumFieldSpecified;
        
        private string facilityNameField;
        
        private FacilityKind facilityKindField;
        
        private DasCalibrationPoint[] calibrationDataPointsField;
        
        /// <remarks/>
        /// <summary>The nth count of this Calibration in the Acquisition.  Recommended if there is more than 1 Calibration in this Acquisition.  This index corresponds to the Calibration array number in the H5 file.</summary>
        [System.ComponentModel.DescriptionAttribute("The nth count of this Calibration in the Acquisition.  Recommended if there is mo" +
            "re than 1 Calibration in this Acquisition.  This index corresponds to the Calibr" +
            "ation array number in the H5 file.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalibrationIndex", DataType="NonNegativeLong")]
        public long CalibrationIndex {
            get {
                return this.calibrationIndexField;
            }
            set {
                this.calibrationIndexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CalibrationIndexSpecified {
            get {
                return this.calibrationIndexFieldSpecified;
            }
            set {
                this.calibrationIndexFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total number of calibration points in the array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The total number of calibration points in the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumberOfCalibrationPoints", DataType="NonNegativeLong")]
        public long NumberOfCalibrationPoints {
            get {
                return this.numberOfCalibrationPointsField;
            }
            set {
                this.numberOfCalibrationPointsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Free format description of the DAS calibration provided for an instance of a DAS acquisition.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Free format description of the DAS calibration provided for an instance of a DAS " +
            "acquisition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalibrationDescription", DataType="String2000")]
        public string CalibrationDescription {
            get {
                return this.calibrationDescriptionField;
            }
            set {
                this.calibrationDescriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unit of measurement of OpticalPathDistance value CalibrationPoints</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unit of measurement of OpticalPathDistance value CalibrationPoints")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalibrationOpticalPathDistanceUnit", DataType="String64")]
        public string CalibrationOpticalPathDistanceUnit {
            get {
                return this.calibrationOpticalPathDistanceUnitField;
            }
            set {
                this.calibrationOpticalPathDistanceUnitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unit of measurement of FacilityLength value CalibrationPoints</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unit of measurement of FacilityLength value CalibrationPoints")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalibrationFacilityLengthUnit", DataType="String64")]
        public string CalibrationFacilityLengthUnit {
            get {
                return this.calibrationFacilityLengthUnitField;
            }
            set {
                this.calibrationFacilityLengthUnitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Datum used as basis for measurement of calibration point distance and length.</summary>
        [System.ComponentModel.DescriptionAttribute("Datum used as basis for measurement of calibration point distance and length.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalibrationDatum", DataType="WellboreDatumReference")]
        public WellboreDatumReference CalibrationDatum {
            get {
                return this.calibrationDatumField;
            }
            set {
                this.calibrationDatumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CalibrationDatumSpecified {
            get {
                return this.calibrationDatumFieldSpecified;
            }
            set {
                this.calibrationDatumFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates which facility is being calibrated.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Indicates which facility is being calibrated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityName", DataType="String64")]
        public string FacilityName {
            get {
                return this.facilityNameField;
            }
            set {
                this.facilityNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Enumeration to indicate the type of facility (well or pipeline) for this acquisition.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Enumeration to indicate the type of facility (well or pipeline) for this acquisit" +
            "ion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityKind", DataType="FacilityKind")]
        public FacilityKind FacilityKind {
            get {
                return this.facilityKindField;
            }
            set {
                this.facilityKindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CalibrationDataPoints")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalibrationDataPoints", DataType="DasCalibrationPoint")]
        public DasCalibrationPoint[] CalibrationDataPoints {
            get {
                return this.calibrationDataPointsField;
            }
            set {
                this.calibrationDataPointsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum WellboreDatumReference {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ground level")]
        groundlevel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kelly bushing")]
        kellybushing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean sea level")]
        meansealevel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("derrick floor")]
        derrickfloor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing flange")]
        casingflange,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("crown valve")]
        crownvalve,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rotary bushing")]
        rotarybushing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rotary table")]
        rotarytable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sea floor")]
        seafloor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lowest astronomical tide")]
        lowestastronomicaltide,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean higher high water")]
        meanhigherhighwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean high water")]
        meanhighwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean lower low water")]
        meanlowerlowwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean low water")]
        meanlowwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean tide level")]
        meantidelevel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kickoff point")]
        kickoffpoint,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum FacilityKind {
        
        /// <remarks/>
        generic,
        
        /// <remarks/>
        pipeline,
        
        /// <remarks/>
        well,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DasCalibrationPoint {
        
        private long calibrationLocusIndexField;
        
        private LengthMeasure calibrationOpticalPathDistanceField;
        
        private LengthMeasure calibrationFacilityLengthField;
        
        private Energistics.DataAccess.ExtensibleEnum<DasCalibrationType> calibrationTypeField;
        
        /// <remarks/>
        /// <summary>The locus index for the calibration point. Where ‘Locus Index 0’ is the acoustic sample point at the connector of the measurement instrument.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The locus index for the calibration point. Where ‘Locus Index 0’ is the acoustic " +
            "sample point at the connector of the measurement instrument.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalibrationLocusIndex", DataType="NonNegativeLong")]
        public long CalibrationLocusIndex {
            get {
                return this.calibrationLocusIndexField;
            }
            set {
                this.calibrationLocusIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ‘fiber distance’ corresponding with the locus index of the calibration point. This is similar to the OpticalPathDistance used in DTS. This ‘fiber distance’ is the distance from the connector of the measurement instrument to the acoustic sample point along the fiber that is the furthest from the measurement instrument for that particular test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The ‘fiber distance’ corresponding with the locus index of the calibration point. This is similar to the OpticalPathDistance used in DTS. This ‘fiber distance’ is the distance from the connector of the measurement instrument to the acoustic sample point along the fiber that is the furthest from the measurement instrument for that particular test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalibrationOpticalPathDistance", DataType="LengthMeasure")]
        public LengthMeasure CalibrationOpticalPathDistance {
            get {
                return this.calibrationOpticalPathDistanceField;
            }
            set {
                this.calibrationOpticalPathDistanceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ‘facility length’ corresponding to the CalibrationOpticPathDistance. The ‘facility length’ is the length along the ‘optical path’ and is corrected for overstuffing, additional fiber in turnaround-subs or H-splices that increase the optical path length on the OTDR, but not the actual facility length.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The ‘facility length’ corresponding to the CalibrationOpticPathDistance. The ‘facility length’ is the length along the ‘optical path’ and is corrected for overstuffing, additional fiber in turnaround-subs or H-splices that increase the optical path length on the OTDR, but not the actual facility length.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalibrationFacilityLength", DataType="LengthMeasure")]
        public LengthMeasure CalibrationFacilityLength {
            get {
                return this.calibrationFacilityLengthField;
            }
            set {
                this.calibrationFacilityLengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A brief meaningful description of the type of calibration point. This is an extensible enumeration type. Current reserved keywords are ‘locus calibration’, ‘tap test’ and ‘last locus to end of fiber’ for commonly used calibration points.</summary>
        [System.ComponentModel.DescriptionAttribute("A brief meaningful description of the type of calibration point. This is an exten" +
            "sible enumeration type. Current reserved keywords are ‘locus calibration’, ‘tap " +
            "test’ and ‘last locus to end of fiber’ for commonly used calibration points.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalibrationType", DataType="DasCalibrationTypeExt")]
        public Energistics.DataAccess.ExtensibleEnum<DasCalibrationType> CalibrationType {
            get {
                return this.calibrationTypeField;
            }
            set {
                this.calibrationTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DasProcessed {
        
        private DasFbe[] fbeField;
        
        private DasSpectra[] spectraField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Fbe")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Fbe", DataType="DasFbe")]
        public DasFbe[] Fbe {
            get {
                return this.fbeField;
            }
            set {
                this.fbeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Spectra")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Spectra", DataType="DasSpectra")]
        public DasSpectra[] Spectra {
            get {
                return this.spectraField;
            }
            set {
                this.spectraField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DasFbe {
        
        private long fbeIndexField;
        
        private bool fbeIndexFieldSpecified;
        
        private string fbeDescriptionField;
        
        private string fbeDataUnitField;
        
        private FrequencyMeasure outputDataRateField;
        
        private long startLocusIndexField;
        
        private long numberOfLociField;
        
        private LengthMeasure spatialSamplingIntervalField;
        
        private string spatialSamplingIntervalUnitField;
        
        private string filterTypeField;
        
        private long windowSizeField;
        
        private bool windowSizeFieldSpecified;
        
        private long windowOverlapField;
        
        private bool windowOverlapFieldSpecified;
        
        private string windowFunctionField;
        
        private string transformTypeField;
        
        private long transformSizeField;
        
        private bool transformSizeFieldSpecified;
        
        private string rawReferenceField;
        
        private string spectraReferenceField;
        
        private DasFbeData[] fbeDataField;
        
        private DasTimeArray fbeDataTimeField;
        
        private DasCustom customField;
        
        private string uuidField;
        
        /// <remarks/>
        /// <summary>The nth count of this Fbe instance in the Acquisition.  Recommended if there is more than 1 Fbe instance in this Acquisition.  This index corresponds to the Fbe array number in the H5 file.</summary>
        [System.ComponentModel.DescriptionAttribute("The nth count of this Fbe instance in the Acquisition.  Recommended if there is m" +
            "ore than 1 Fbe instance in this Acquisition.  This index corresponds to the Fbe " +
            "array number in the H5 file.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FbeIndex", DataType="NonNegativeLong")]
        public long FbeIndex {
            get {
                return this.fbeIndexField;
            }
            set {
                this.fbeIndexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FbeIndexSpecified {
            get {
                return this.fbeIndexFieldSpecified;
            }
            set {
                this.fbeIndexFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the FBE data.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Description of the FBE data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FbeDescription", DataType="String2000")]
        public string FbeDescription {
            get {
                return this.fbeDescriptionField;
            }
            set {
                this.fbeDescriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Data unit for the FBE data.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Data unit for the FBE data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FbeDataUnit", DataType="String64")]
        public string FbeDataUnit {
            get {
                return this.fbeDataUnitField;
            }
            set {
                this.fbeDataUnitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The rate at which the FBE data is provided for all ‘loci’ (spatial samples). This is typically equal to the interrogation rate/pulse rate of the DAS measurement system or an integer fraction thereof. Note this attribute is mandatory for FBE and spectrum data. For raw data this attribute is optional.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The rate at which the FBE data is provided for all ‘loci’ (spatial samples). This is typically equal to the interrogation rate/pulse rate of the DAS measurement system or an integer fraction thereof. Note this attribute is mandatory for FBE and spectrum data. For raw data this attribute is optional.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OutputDataRate", DataType="FrequencyMeasure")]
        public FrequencyMeasure OutputDataRate {
            get {
                return this.outputDataRateField;
            }
            set {
                this.outputDataRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The first ‘locus’ acquired by the interrogator unit, where ‘Locus Index 0’ is the acoustic sample point at the connector of the measurement instrument.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The first ‘locus’ acquired by the interrogator unit, where ‘Locus Index 0’ is the" +
            " acoustic sample point at the connector of the measurement instrument.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartLocusIndex", DataType="NonNegativeLong")]
        public long StartLocusIndex {
            get {
                return this.startLocusIndexField;
            }
            set {
                this.startLocusIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total number of ‘loci’ (acoustic sample points) acquired by the measurement instrument in a single ‘scan’ of the fiber.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The total number of ‘loci’ (acoustic sample points) acquired by the measurement i" +
            "nstrument in a single ‘scan’ of the fiber.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumberOfLoci", DataType="NonNegativeLong")]
        public long NumberOfLoci {
            get {
                return this.numberOfLociField;
            }
            set {
                this.numberOfLociField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The separation between two consecutive ‘spatial sample’ points on the fiber at which the signal is measured. It should not be confused with ‘spatial resolution’. If this data element is present in the DASFbe object, then it overwrites the SpatialSamplingInterval value described in DASAcquistion.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The separation between two consecutive ‘spatial sample’ points on the fiber at which the signal is measured. It should not be confused with ‘spatial resolution’. If this data element is present in the DASFbe object, then it overwrites the SpatialSamplingInterval value described in DASAcquistion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpatialSamplingInterval", DataType="LengthMeasure")]
        public LengthMeasure SpatialSamplingInterval {
            get {
                return this.spatialSamplingIntervalField;
            }
            set {
                this.spatialSamplingIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Only required in Hdf5 file to record the unit of measure of the sampling interval of the Fbe.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Only required in Hdf5 file to record the unit of measure of the sampling interval" +
            " of the Fbe.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpatialSamplingIntervalUnit", DataType="String64")]
        public string SpatialSamplingIntervalUnit {
            get {
                return this.spatialSamplingIntervalUnitField;
            }
            set {
                this.spatialSamplingIntervalUnitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A string describing the type of filter applied by the vendor. Important frequency type filter classes are: frequency response filters (low-pass, high-pass, band-pass, notch filters) and butterworth, chebyshev and bessel filters. The filter type and characteristics applied to the acquired or processed data is important information for end-user applications.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"A string describing the type of filter applied by the vendor. Important frequency type filter classes are: frequency response filters (low-pass, high-pass, band-pass, notch filters) and butterworth, chebyshev and bessel filters. The filter type and characteristics applied to the acquired or processed data is important information for end-user applications.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FilterType", DataType="String64")]
        public string FilterType {
            get {
                return this.filterTypeField;
            }
            set {
                this.filterTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of samples in the filter window applied.</summary>
        [System.ComponentModel.DescriptionAttribute("The number of samples in the filter window applied.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WindowSize", DataType="NonNegativeLong")]
        public long WindowSize {
            get {
                return this.windowSizeField;
            }
            set {
                this.windowSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WindowSizeSpecified {
            get {
                return this.windowSizeFieldSpecified;
            }
            set {
                this.windowSizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of sample overlaps between consecutive filter windows applied.</summary>
        [System.ComponentModel.DescriptionAttribute("The number of sample overlaps between consecutive filter windows applied.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WindowOverlap", DataType="NonNegativeLong")]
        public long WindowOverlap {
            get {
                return this.windowOverlapField;
            }
            set {
                this.windowOverlapField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WindowOverlapSpecified {
            get {
                return this.windowOverlapFieldSpecified;
            }
            set {
                this.windowOverlapFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The window function applied to the sample window used to calculate the frequency band. Example 'HANNING', 'HAMMING', 'BESSEL' window.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The window function applied to the sample window used to calculate the frequency " +
            "band. Example \'HANNING\', \'HAMMING\', \'BESSEL\' window.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WindowFunction", DataType="String64")]
        public string WindowFunction {
            get {
                return this.windowFunctionField;
            }
            set {
                this.windowFunctionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A string describing the type of mathematical transformation applied by the vendor. Typically this is some type of discrete fast Fourier transform (often abbreviated as DFT, DFFT or FFT).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A string describing the type of mathematical transformation applied by the vendor" +
            ". Typically this is some type of discrete fast Fourier transform (often abbrevia" +
            "ted as DFT, DFFT or FFT).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TransformType", DataType="String64")]
        public string TransformType {
            get {
                return this.transformTypeField;
            }
            set {
                this.transformTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of samples used in the TransformType.</summary>
        [System.ComponentModel.DescriptionAttribute("The number of samples used in the TransformType.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TransformSize", DataType="NonNegativeLong")]
        public long TransformSize {
            get {
                return this.transformSizeField;
            }
            set {
                this.transformSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TransformSizeSpecified {
            get {
                return this.transformSizeFieldSpecified;
            }
            set {
                this.transformSizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A universally unique identifier (UUID) for the HDF file containing the raw data.</summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [System.ComponentModel.DescriptionAttribute("A universally unique identifier (UUID) for the HDF file containing the raw data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RawReference", DataType="UuidString")]
        public string RawReference {
            get {
                return this.rawReferenceField;
            }
            set {
                this.rawReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A universally unique identifier (UUID) for the HDF file containing the spectra data.</summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [System.ComponentModel.DescriptionAttribute("A universally unique identifier (UUID) for the HDF file containing the spectra da" +
            "ta.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpectraReference", DataType="UuidString")]
        public string SpectraReference {
            get {
                return this.spectraReferenceField;
            }
            set {
                this.spectraReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A DAS array object containing the FBE DAS data.</summary>
        [System.Xml.Serialization.XmlElementAttribute("FbeData")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A DAS array object containing the FBE DAS data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FbeData", DataType="DasFbeData")]
        public DasFbeData[] FbeData {
            get {
                return this.fbeDataField;
            }
            set {
                this.fbeDataField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A DAS array object containing the sample times corresponding to a single ‘scan’ of the fiber. In a single ‘scan’, the DAS measurement system acquires raw data samples for all the loci specified by StartLocusIndex and NumberOfLoci. The ‘scan’ frequency is equal to the DAS acquisition pulse rate.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"A DAS array object containing the sample times corresponding to a single ‘scan’ of the fiber. In a single ‘scan’, the DAS measurement system acquires raw data samples for all the loci specified by StartLocusIndex and NumberOfLoci. The ‘scan’ frequency is equal to the DAS acquisition pulse rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FbeDataTime", DataType="DasTimeArray")]
        public DasTimeArray FbeDataTime {
            get {
                return this.fbeDataTimeField;
            }
            set {
                this.fbeDataTimeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Custom", DataType="DasCustom")]
        public DasCustom Custom {
            get {
                return this.customField;
            }
            set {
                this.customField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A universally unique identifier (UUID) of an instance of FBE DAS data.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [System.ComponentModel.DescriptionAttribute("A universally unique identifier (UUID) of an instance of FBE DAS data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuid", DataType="UuidString")]
        public string uuid {
            get {
                return this.uuidField;
            }
            set {
                this.uuidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DasFbeData {
        
        private long fbeDataIndexField;
        
        private bool fbeDataIndexFieldSpecified;
        
        private FrequencyMeasure startFrequencyField;
        
        private FrequencyMeasure endFrequencyField;
        
        private DasDimensions[] dimensionsField;
        
        private AbstractNumericArray fbeDataArrayField;
        
        /// <remarks/>
        /// <summary>The nth count of this DasFbeData in the DasFbe.  Recommended if there is more than 1 dataset in this Fbe.  This index corresponds to the FbeData array number in the H5 file.</summary>
        [System.ComponentModel.DescriptionAttribute("The nth count of this DasFbeData in the DasFbe.  Recommended if there is more tha" +
            "n 1 dataset in this Fbe.  This index corresponds to the FbeData array number in " +
            "the H5 file.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FbeDataIndex", DataType="NonNegativeLong")]
        public long FbeDataIndex {
            get {
                return this.fbeDataIndexField;
            }
            set {
                this.fbeDataIndexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FbeDataIndexSpecified {
            get {
                return this.fbeDataIndexFieldSpecified;
            }
            set {
                this.fbeDataIndexFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Start of an individual frequency band in a DAS FBE data set. This typically corresponds to the frequency of the 3dB point of the filter.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Start of an individual frequency band in a DAS FBE data set. This typically corre" +
            "sponds to the frequency of the 3dB point of the filter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartFrequency", DataType="FrequencyMeasure")]
        public FrequencyMeasure StartFrequency {
            get {
                return this.startFrequencyField;
            }
            set {
                this.startFrequencyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>End of an individual frequency band in a DAS FBE data set. This typically corresponds to the frequency of the 3dB point of the filter.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("End of an individual frequency band in a DAS FBE data set. This typically corresp" +
            "onds to the frequency of the 3dB point of the filter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndFrequency", DataType="FrequencyMeasure")]
        public FrequencyMeasure EndFrequency {
            get {
                return this.endFrequencyField;
            }
            set {
                this.endFrequencyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An array of two elements describing the ordering of the FBE data array. The fastest running index is stored in the second element. For example the  {‘time’, ‘locus’} indicates that ‘locus’ is the fastest running index. Note that vendors may deliver data with different orderings.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Dimensions")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"An array of two elements describing the ordering of the FBE data array. The fastest running index is stored in the second element. For example the  {‘time’, ‘locus’} indicates that ‘locus’ is the fastest running index. Note that vendors may deliver data with different orderings.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Dimensions", DataType="DasDimensions")]
        public DasDimensions[] Dimensions {
            get {
                return this.dimensionsField;
            }
            set {
                this.dimensionsField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FbeDataArray", DataType="AbstractNumericArray")]
        public AbstractNumericArray FbeDataArray {
            get {
                return this.fbeDataArrayField;
            }
            set {
                this.fbeDataArrayField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DasSpectra {
        
        private long spectraIndexField;
        
        private bool spectraIndexFieldSpecified;
        
        private string spectraDescriptionField;
        
        private string spectraDataUnitField;
        
        private FrequencyMeasure outputDataRateField;
        
        private long startLocusIndexField;
        
        private long numberOfLociField;
        
        private LengthMeasure spatialSamplingIntervalField;
        
        private string spatialSamplingIntervalUnitField;
        
        private string filterTypeField;
        
        private long windowSizeField;
        
        private bool windowSizeFieldSpecified;
        
        private long windowOverlapField;
        
        private bool windowOverlapFieldSpecified;
        
        private string windowFunctionField;
        
        private string transformTypeField;
        
        private long transformSizeField;
        
        private string rawReferenceField;
        
        private string fbeReferenceField;
        
        private DasSpectraData spectraDataField;
        
        private DasTimeArray spectraDataTimeField;
        
        private DasCustom customField;
        
        private string uuidField;
        
        /// <remarks/>
        /// <summary>The nth count of this Spectra instance in the acquisition. Recommended if there is more than 1 Spectra instance in this acquisition.  This index corresponds to the Spectra array number in the H5 file.</summary>
        [System.ComponentModel.DescriptionAttribute("The nth count of this Spectra instance in the acquisition. Recommended if there i" +
            "s more than 1 Spectra instance in this acquisition.  This index corresponds to t" +
            "he Spectra array number in the H5 file.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpectraIndex", DataType="NonNegativeLong")]
        public long SpectraIndex {
            get {
                return this.spectraIndexField;
            }
            set {
                this.spectraIndexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpectraIndexSpecified {
            get {
                return this.spectraIndexFieldSpecified;
            }
            set {
                this.spectraIndexFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the spectra data.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Description of the spectra data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpectraDescription", DataType="String2000")]
        public string SpectraDescription {
            get {
                return this.spectraDescriptionField;
            }
            set {
                this.spectraDescriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Data unit for the spectra data.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Data unit for the spectra data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpectraDataUnit", DataType="String64")]
        public string SpectraDataUnit {
            get {
                return this.spectraDataUnitField;
            }
            set {
                this.spectraDataUnitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The rate at which the spectra data is provided for all ‘loci’ (spatial samples). This is typically equal to the interrogation rate/pulse rate of the DAS measurement system or an integer fraction thereof. Note this attribute is mandatory for FBE and spectrum data. For raw data this attribute is optional.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The rate at which the spectra data is provided for all ‘loci’ (spatial samples). This is typically equal to the interrogation rate/pulse rate of the DAS measurement system or an integer fraction thereof. Note this attribute is mandatory for FBE and spectrum data. For raw data this attribute is optional.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OutputDataRate", DataType="FrequencyMeasure")]
        public FrequencyMeasure OutputDataRate {
            get {
                return this.outputDataRateField;
            }
            set {
                this.outputDataRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The first ‘locus’ acquired by the interrogator unit, where ‘Locus Index 0’ is the acoustic sample point at the connector of the measurement instrument.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The first ‘locus’ acquired by the interrogator unit, where ‘Locus Index 0’ is the" +
            " acoustic sample point at the connector of the measurement instrument.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartLocusIndex", DataType="NonNegativeLong")]
        public long StartLocusIndex {
            get {
                return this.startLocusIndexField;
            }
            set {
                this.startLocusIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total number of ‘loci’ (acoustic sample points) acquired by the measurement instrument in a single ‘scan’ of the fiber.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The total number of ‘loci’ (acoustic sample points) acquired by the measurement i" +
            "nstrument in a single ‘scan’ of the fiber.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumberOfLoci", DataType="NonNegativeLong")]
        public long NumberOfLoci {
            get {
                return this.numberOfLociField;
            }
            set {
                this.numberOfLociField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The separation between two consecutive ‘spatial sample’ points on the fiber at which the signal is measured. It should not be confused with ‘spatial resolution’. If this data element is present in the DasSpectrum object, then it overwrites the SpatialSamplingInterval value described in DasAcquistion.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The separation between two consecutive ‘spatial sample’ points on the fiber at which the signal is measured. It should not be confused with ‘spatial resolution’. If this data element is present in the DasSpectrum object, then it overwrites the SpatialSamplingInterval value described in DasAcquistion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpatialSamplingInterval", DataType="LengthMeasure")]
        public LengthMeasure SpatialSamplingInterval {
            get {
                return this.spatialSamplingIntervalField;
            }
            set {
                this.spatialSamplingIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Only required in an HDF5 file to record the unit of measure of the sampling interval of the spectra.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Only required in an HDF5 file to record the unit of measure of the sampling inter" +
            "val of the spectra.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpatialSamplingIntervalUnit", DataType="String64")]
        public string SpatialSamplingIntervalUnit {
            get {
                return this.spatialSamplingIntervalUnitField;
            }
            set {
                this.spatialSamplingIntervalUnitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A string describing the type of filter applied by the vendor. Important frequency type filter classes are: frequency response filters (low-pass, high-pass, band-pass, notch filters) and butterworth, chebyshev and bessel filters. The filter type and characteristics applied to the acquired or processed data is important information for end-user applications.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"A string describing the type of filter applied by the vendor. Important frequency type filter classes are: frequency response filters (low-pass, high-pass, band-pass, notch filters) and butterworth, chebyshev and bessel filters. The filter type and characteristics applied to the acquired or processed data is important information for end-user applications.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FilterType", DataType="String64")]
        public string FilterType {
            get {
                return this.filterTypeField;
            }
            set {
                this.filterTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of samples in the filter window applied.</summary>
        [System.ComponentModel.DescriptionAttribute("The number of samples in the filter window applied.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WindowSize", DataType="NonNegativeLong")]
        public long WindowSize {
            get {
                return this.windowSizeField;
            }
            set {
                this.windowSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WindowSizeSpecified {
            get {
                return this.windowSizeFieldSpecified;
            }
            set {
                this.windowSizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of sample overlaps between consecutive filter windows applied.</summary>
        [System.ComponentModel.DescriptionAttribute("The number of sample overlaps between consecutive filter windows applied.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WindowOverlap", DataType="NonNegativeLong")]
        public long WindowOverlap {
            get {
                return this.windowOverlapField;
            }
            set {
                this.windowOverlapField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WindowOverlapSpecified {
            get {
                return this.windowOverlapFieldSpecified;
            }
            set {
                this.windowOverlapFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A string describing the window function applied by the vendor.  Examples are "Hamming" or "Hanning".</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A string describing the window function applied by the vendor.  Examples are \"Ham" +
            "ming\" or \"Hanning\".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WindowFunction", DataType="String64")]
        public string WindowFunction {
            get {
                return this.windowFunctionField;
            }
            set {
                this.windowFunctionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A string describing the type of mathematical transformation applied by the vendor. Typically this is some type of discrete fast Fourier transform (often abbreviated as DFT, DFFT or FFT).</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A string describing the type of mathematical transformation applied by the vendor" +
            ". Typically this is some type of discrete fast Fourier transform (often abbrevia" +
            "ted as DFT, DFFT or FFT).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TransformType", DataType="String64")]
        public string TransformType {
            get {
                return this.transformTypeField;
            }
            set {
                this.transformTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of samples used in the TransformType.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The number of samples used in the TransformType.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TransformSize", DataType="NonNegativeLong")]
        public long TransformSize {
            get {
                return this.transformSizeField;
            }
            set {
                this.transformSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for the HDF5 file containing the raw data.</summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for the HDF5 file containing the raw data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RawReference", DataType="UuidString")]
        public string RawReference {
            get {
                return this.rawReferenceField;
            }
            set {
                this.rawReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A universally unique identifier (UUID) of an instance of DAS FBE data.</summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [System.ComponentModel.DescriptionAttribute("A universally unique identifier (UUID) of an instance of DAS FBE data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FbeReference", DataType="UuidString")]
        public string FbeReference {
            get {
                return this.fbeReferenceField;
            }
            set {
                this.fbeReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A DAS array object containing the spectra DAS data.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A DAS array object containing the spectra DAS data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpectraData", DataType="DasSpectraData")]
        public DasSpectraData SpectraData {
            get {
                return this.spectraDataField;
            }
            set {
                this.spectraDataField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A DAS array object containing the sample times corresponding to a single ‘scan’ of the fiber. In a single ‘scan’, the DAS measurement system acquires raw data samples for all the loci specified by StartLocusIndex and NumberOfLoci. The ‘scan’ frequency is equal to the DAS acquisition pulse rate.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"A DAS array object containing the sample times corresponding to a single ‘scan’ of the fiber. In a single ‘scan’, the DAS measurement system acquires raw data samples for all the loci specified by StartLocusIndex and NumberOfLoci. The ‘scan’ frequency is equal to the DAS acquisition pulse rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpectraDataTime", DataType="DasTimeArray")]
        public DasTimeArray SpectraDataTime {
            get {
                return this.spectraDataTimeField;
            }
            set {
                this.spectraDataTimeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Custom", DataType="DasCustom")]
        public DasCustom Custom {
            get {
                return this.customField;
            }
            set {
                this.customField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A universally unique identifier (UUID) for an instance of spectra DAS data.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [System.ComponentModel.DescriptionAttribute("A universally unique identifier (UUID) for an instance of spectra DAS data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuid", DataType="UuidString")]
        public string uuid {
            get {
                return this.uuidField;
            }
            set {
                this.uuidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DasSpectraData {
        
        private FrequencyMeasure startFrequencyField;
        
        private FrequencyMeasure endFrequencyField;
        
        private DasDimensions[] dimensionsField;
        
        private AbstractNumericArray spectraDataArrayField;
        
        /// <remarks/>
        /// <summary>Start frequency in a DAS spectra data set. This value typically is set to the minimum frequency present in the spectra data set.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Start frequency in a DAS spectra data set. This value typically is set to the min" +
            "imum frequency present in the spectra data set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartFrequency", DataType="FrequencyMeasure")]
        public FrequencyMeasure StartFrequency {
            get {
                return this.startFrequencyField;
            }
            set {
                this.startFrequencyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>End frequency in a DAS spectra data set. This value is typically set to the maximum frequency present in the spectra data set.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("End frequency in a DAS spectra data set. This value is typically set to the maxim" +
            "um frequency present in the spectra data set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndFrequency", DataType="FrequencyMeasure")]
        public FrequencyMeasure EndFrequency {
            get {
                return this.endFrequencyField;
            }
            set {
                this.endFrequencyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An array of three elements describing the ordering of the raw data array. The fastest running index is stored in the last element. For example {‘time’, ‘locus’, ‘frequency’} indicates that the frequency is the fastest running index. Note that vendors may deliver data with different orderings.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Dimensions")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"An array of three elements describing the ordering of the raw data array. The fastest running index is stored in the last element. For example {‘time’, ‘locus’, ‘frequency’} indicates that the frequency is the fastest running index. Note that vendors may deliver data with different orderings.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Dimensions", DataType="DasDimensions")]
        public DasDimensions[] Dimensions {
            get {
                return this.dimensionsField;
            }
            set {
                this.dimensionsField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpectraDataArray", DataType="AbstractNumericArray")]
        public AbstractNumericArray SpectraDataArray {
            get {
                return this.spectraDataArrayField;
            }
            set {
                this.spectraDataArrayField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class DtsInstrumentBox : AbstractObject {
        
        private string serialNumberField;
        
        private LengthMeasure internalOvenLocationNearField;
        
        private LengthMeasure internalOvenLocationFarField;
        
        private ThermodynamicTemperatureMeasure referenceCoilTemperatureField;
        
        private IndexedObject[] parameterField;
        
        private TimeMeasure warmupTimeField;
        
        private TimeMeasure startupTimeField;
        
        private FacilityIdentifier facilityIdentifierField;
        
        private DtsPatchCord dtsPatchCordField;
        
        private DtsCalibration[] instrumentCalibrationField;
        
        private Instrument instrumentField;
        
        /// <remarks/>
        /// <summary>An identification tag for the instrument box. A serial number is a type of identification tag; however, some tags contain many pieces of information. This structure only identifies the tag and does not describe the contents.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("An identification tag for the instrument box. A serial number is a type of identi" +
            "fication tag; however, some tags contain many pieces of information. This struct" +
            "ure only identifies the tag and does not describe the contents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SerialNumber", DataType="String64")]
        public string SerialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Near distance of the oven from the beginning of the fiber.</summary>
        [System.ComponentModel.DescriptionAttribute("Near distance of the oven from the beginning of the fiber.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InternalOvenLocationNear", DataType="LengthMeasure")]
        public LengthMeasure InternalOvenLocationNear {
            get {
                return this.internalOvenLocationNearField;
            }
            set {
                this.internalOvenLocationNearField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Far distance of the oven from the beginning of the fiber.</summary>
        [System.ComponentModel.DescriptionAttribute("Far distance of the oven from the beginning of the fiber.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InternalOvenLocationFar", DataType="LengthMeasure")]
        public LengthMeasure InternalOvenLocationFar {
            get {
                return this.internalOvenLocationFarField;
            }
            set {
                this.internalOvenLocationFarField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature of the oven.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature of the oven.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferenceCoilTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure ReferenceCoilTemperature {
            get {
                return this.referenceCoilTemperatureField;
            }
            set {
                this.referenceCoilTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Additional parameters to define the instrument box as a piece of equipment. These should not be parameters to define the installation or use of the box in the wellbore or other system. Only use this element if an appropriate parameter is not available as an element or in the calibration operation.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Parameter")]
        [System.ComponentModel.DescriptionAttribute(@"Additional parameters to define the instrument box as a piece of equipment. These should not be parameters to define the installation or use of the box in the wellbore or other system. Only use this element if an appropriate parameter is not available as an element or in the calibration operation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="IndexedObject")]
        public IndexedObject[] Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The duration of time starting from the initiation of the first temperature measurement until the unit complies with the stated values of the main measurement specifications.</summary>
        [System.ComponentModel.DescriptionAttribute("The duration of time starting from the initiation of the first temperature measur" +
            "ement until the unit complies with the stated values of the main measurement spe" +
            "cifications.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WarmupTime", DataType="TimeMeasure")]
        public TimeMeasure WarmupTime {
            get {
                return this.warmupTimeField;
            }
            set {
                this.warmupTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The duration of time from the initial powering on of the instrument until the first temperature measurement is permitted.</summary>
        [System.ComponentModel.DescriptionAttribute("The duration of time from the initial powering on of the instrument until the fir" +
            "st temperature measurement is permitted.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartupTime", DataType="TimeMeasure")]
        public TimeMeasure StartupTime {
            get {
                return this.startupTimeField;
            }
            set {
                this.startupTimeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityIdentifier", DataType="FacilityIdentifier")]
        public FacilityIdentifier FacilityIdentifier {
            get {
                return this.facilityIdentifierField;
            }
            set {
                this.facilityIdentifierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Information regarding the patch cord used to connect the instrument box to the start of the optical fiber path.</summary>
        [System.ComponentModel.DescriptionAttribute("Information regarding the patch cord used to connect the instrument box to the st" +
            "art of the optical fiber path.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DtsPatchCord", DataType="DtsPatchCord")]
        public DtsPatchCord DtsPatchCord {
            get {
                return this.dtsPatchCordField;
            }
            set {
                this.dtsPatchCordField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Calibration parameters vary from vendor to vendor, depending  on the calibration method being used. This is a general type that allows a calibration  date, business associate, and many  name/value pairs.</summary>
        [System.Xml.Serialization.XmlElementAttribute("InstrumentCalibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration parameters vary from vendor to vendor, depending  on the calibration " +
            "method being used. This is a general type that allows a calibration  date, busin" +
            "ess associate, and many  name/value pairs.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InstrumentCalibration", DataType="DtsCalibration")]
        public DtsCalibration[] InstrumentCalibration {
            get {
                return this.instrumentCalibrationField;
            }
            set {
                this.instrumentCalibrationField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Instrument", DataType="Instrument")]
        public Instrument Instrument {
            get {
                return this.instrumentField;
            }
            set {
                this.instrumentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class DtsCalibration {
        
        private System.DateTime dTimCalibrationField;
        
        private bool dTimCalibrationFieldSpecified;
        
        private string calibratedByField;
        
        private string calibrationProtocolField;
        
        private CalibrationParameter[] parameterField;
        
        private string remarkField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The date of the calibration.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date of the calibration.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimCalibration", DataType="date")]
        public System.DateTime DTimCalibration {
            get {
                return this.dTimCalibrationField;
            }
            set {
                this.dTimCalibrationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimCalibrationSpecified {
            get {
                return this.dTimCalibrationFieldSpecified;
            }
            set {
                this.dTimCalibrationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The business associate that performed the calibration.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The business associate that performed the calibration.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalibratedBy", DataType="String64")]
        public string CalibratedBy {
            get {
                return this.calibratedByField;
            }
            set {
                this.calibratedByField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This may be a standard protocol or a software application.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("This may be a standard protocol or a software application.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalibrationProtocol", DataType="String64")]
        public string CalibrationProtocol {
            get {
                return this.calibrationProtocolField;
            }
            set {
                this.calibrationProtocolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Attribute name is the name of the parameter. Optional attribute uom is the unit of measure of the parameter. The value of the element is the value of the parameter. Note that a string value may appear as a parameter.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Parameter")]
        [System.ComponentModel.DescriptionAttribute("Attribute name is the name of the parameter. Optional attribute uom is the unit o" +
            "f measure of the parameter. The value of the element is the value of the paramet" +
            "er. Note that a string value may appear as a parameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="CalibrationParameter")]
        public CalibrationParameter[] Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Any remarks that may be useful regarding the calibration information.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Any remarks that may be useful regarding the calibration information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A  unique identifier (UID) of an instance of DtsCalibration.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A  unique identifier (UID) of an instance of DtsCalibration.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class CalibrationParameter {
        
        private string uomField;
        
        private string nameField;
        
        /// <remarks/>
        /// <summary>The unit of measure of the parameter value.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(32)]
        [System.ComponentModel.DescriptionAttribute("The unit of measure of the parameter value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="UomEnum")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the parameter.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the parameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("name", DataType="String64")]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class DtsInstalledSystem : AbstractObject {
        
        private System.DateTime dateMinField;
        
        private System.DateTime dateMaxField;
        
        private bool dateMaxFieldSpecified;
        
        private LengthMeasure opticalPathLengthField;
        
        private double opticalBudgetField;
        
        private bool opticalBudgetFieldSpecified;
        
        private DataObjectReference opticalPathReferenceField;
        
        private DataObjectReference instrumentBoxReferenceField;
        
        private string commentField;
        
        private FacilityIdentifier facilityIdentifierField;
        
        private DtsCalibration[] dtsCalibrationField;
        
        /// <remarks/>
        /// <summary>The minimum date index contained within the object. The minimum and maximum indexes are server query parameters and are populated with valid values in a "get" result. That is, all measurements for a well in the specified period defined by the min/max.  For a description of the behavior related to this parameter in WITSML v1.4.1, see the WITSML API Specification appendix on "Special Handling" of growing objects.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The minimum date index contained within the object. The minimum and maximum indexes are server query parameters and are populated with valid values in a ""get"" result. That is, all measurements for a well in the specified period defined by the min/max.  For a description of the behavior related to this parameter in WITSML v1.4.1, see the WITSML API Specification appendix on ""Special Handling"" of growing objects.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DateMin", DataType="dateTime")]
        public System.DateTime DateMin {
            get {
                return this.dateMinField;
            }
            set {
                this.dateMinField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum date index contained within the object. The minimum and maximum indexes are server query parameters and are populated with valid values in a "get" result.  For a description of the behavior related to this parameter in WITSML v1.4.1, see the WITSML API Specification appendix on "Special Handling" of growing objects.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The maximum date index contained within the object. The minimum and maximum indexes are server query parameters and are populated with valid values in a ""get"" result.  For a description of the behavior related to this parameter in WITSML v1.4.1, see the WITSML API Specification appendix on ""Special Handling"" of growing objects.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DateMax", DataType="dateTime")]
        public System.DateTime DateMax {
            get {
                return this.dateMaxField;
            }
            set {
                this.dateMaxField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateMaxSpecified {
            get {
                return this.dateMaxFieldSpecified;
            }
            set {
                this.dateMaxFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The length of the fiber installed in the wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("The length of the fiber installed in the wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpticalPathLength", DataType="LengthMeasure")]
        public LengthMeasure OpticalPathLength {
            get {
                return this.opticalPathLengthField;
            }
            set {
                this.opticalPathLengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total light budget available for the installation. This is generally measured in decibels, and indicates the total power loss for two-way travel of the light in the installed fiber.</summary>
        [System.ComponentModel.DescriptionAttribute("Total light budget available for the installation. This is generally measured in " +
            "decibels, and indicates the total power loss for two-way travel of the light in " +
            "the installed fiber.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpticalBudget", DataType="double")]
        public double OpticalBudget {
            get {
                return this.opticalBudgetField;
            }
            set {
                this.opticalBudgetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OpticalBudgetSpecified {
            get {
                return this.opticalBudgetFieldSpecified;
            }
            set {
                this.opticalBudgetFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to the optical path data object that is used in this installed system.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A reference to the optical path data object that is used in this installed system" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpticalPathReference", DataType="DataObjectReference")]
        public DataObjectReference OpticalPathReference {
            get {
                return this.opticalPathReferenceField;
            }
            set {
                this.opticalPathReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to the instrument box data object used in this installed system.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A reference to the instrument box data object used in this installed system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InstrumentBoxReference", DataType="DataObjectReference")]
        public DataObjectReference InstrumentBoxReference {
            get {
                return this.instrumentBoxReferenceField;
            }
            set {
                this.instrumentBoxReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comment about this installed system.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comment about this installed system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityIdentifier", DataType="FacilityIdentifier")]
        public FacilityIdentifier FacilityIdentifier {
            get {
                return this.facilityIdentifierField;
            }
            set {
                this.facilityIdentifierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Calibration parameters vary from vendor to vendor, depending  on the calibration method being used. This is a general type that allows a calibration  date, business associate, and many  name/value pairs.</summary>
        [System.Xml.Serialization.XmlElementAttribute("DtsCalibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration parameters vary from vendor to vendor, depending  on the calibration " +
            "method being used. This is a general type that allows a calibration  date, busin" +
            "ess associate, and many  name/value pairs.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DtsCalibration", DataType="DtsCalibration")]
        public DtsCalibration[] DtsCalibration {
            get {
                return this.dtsCalibrationField;
            }
            set {
                this.dtsCalibrationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class FiberOpticalPath : AbstractObject {
        
        private FiberOpticalPathInventory inventoryField;
        
        private FiberOpticalPathNetwork[] opticalPathNetworkField;
        
        private FiberFacilityMapping[] facilityMappingField;
        
        private FiberPathDefect[] defectField;
        
        private FiberOTDR[] otdrField;
        
        private BusinessAssociate installingVendorField;
        
        private FacilityIdentifier facilityIdentifierField;
        
        /// <remarks/>
        /// <summary>The list of equipment used in the optical path.  Equipment may be used in the optical path for different periods of time, so this inventory contains all items of equipment which are used at some period of time.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The list of equipment used in the optical path.  Equipment may be used in the opt" +
            "ical path for different periods of time, so this inventory contains all items of" +
            " equipment which are used at some period of time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Inventory", DataType="FiberOpticalPathInventory")]
        public FiberOpticalPathInventory Inventory {
            get {
                return this.inventoryField;
            }
            set {
                this.inventoryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("OpticalPathNetwork")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpticalPathNetwork", DataType="FiberOpticalPathNetwork")]
        public FiberOpticalPathNetwork[] OpticalPathNetwork {
            get {
                return this.opticalPathNetworkField;
            }
            set {
                this.opticalPathNetworkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Relates distances measured along the optical path to specific lengths along facilities (wellbores or pipelines).</summary>
        [System.Xml.Serialization.XmlElementAttribute("FacilityMapping")]
        [System.ComponentModel.DescriptionAttribute("Relates distances measured along the optical path to specific lengths along facil" +
            "ities (wellbores or pipelines).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityMapping", DataType="FiberFacilityMapping")]
        public FiberFacilityMapping[] FacilityMapping {
            get {
                return this.facilityMappingField;
            }
            set {
                this.facilityMappingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A zone of the fibre which has defective optical properties (e.g., darkening).</summary>
        [System.Xml.Serialization.XmlElementAttribute("Defect")]
        [System.ComponentModel.DescriptionAttribute("A zone of the fibre which has defective optical properties (e.g., darkening).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Defect", DataType="FiberPathDefect")]
        public FiberPathDefect[] Defect {
            get {
                return this.defectField;
            }
            set {
                this.defectField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This records the result arrays along with context information for an Optical Time Domain Reflectometry (OTDR) survey.  The arrays will define the relative scattered power from the Rayleigh scattering vs distance along the fiber.  The actual data values are recorded in a OTDR file and/or image file, which are referenced in subelements.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Otdr")]
        [System.ComponentModel.DescriptionAttribute(@"This records the result arrays along with context information for an Optical Time Domain Reflectometry (OTDR) survey.  The arrays will define the relative scattered power from the Rayleigh scattering vs distance along the fiber.  The actual data values are recorded in a OTDR file and/or image file, which are referenced in subelements.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Otdr", DataType="FiberOTDR")]
        public FiberOTDR[] Otdr {
            get {
                return this.otdrField;
            }
            set {
                this.otdrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The vendor who performed the physical deployment</summary>
        [System.ComponentModel.DescriptionAttribute("The vendor who performed the physical deployment")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InstallingVendor", DataType="BusinessAssociate")]
        public BusinessAssociate InstallingVendor {
            get {
                return this.installingVendorField;
            }
            set {
                this.installingVendorField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityIdentifier", DataType="FacilityIdentifier")]
        public FacilityIdentifier FacilityIdentifier {
            get {
                return this.facilityIdentifierField;
            }
            set {
                this.facilityIdentifierField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberOpticalPathInventory {
        
        private FiberConnection[] connectionField;
        
        private FiberTurnaround[] turnaroundField;
        
        private FiberOpticalPathSegment[] segmentField;
        
        private FiberTerminator terminatorField;
        
        private FiberSplice[] spliceField;
        
        /// <remarks/>
        /// <summary>A connection component within the optical path.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Connection")]
        [System.ComponentModel.DescriptionAttribute("A connection component within the optical path.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Connection", DataType="FiberConnection")]
        public FiberConnection[] Connection {
            get {
                return this.connectionField;
            }
            set {
                this.connectionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A turnaround component within the optical path.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Turnaround")]
        [System.ComponentModel.DescriptionAttribute("A turnaround component within the optical path.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Turnaround", DataType="FiberTurnaround")]
        public FiberTurnaround[] Turnaround {
            get {
                return this.turnaroundField;
            }
            set {
                this.turnaroundField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A single segment of the optical fiber used for distributed temperature surveys. Multiple such segments may be connected by other types of component including connectors, splices and fiber turnarounds.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Segment")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A single segment of the optical fiber used for distributed temperature surveys. M" +
            "ultiple such segments may be connected by other types of component including con" +
            "nectors, splices and fiber turnarounds.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Segment", DataType="FiberOpticalPathSegment")]
        public FiberOpticalPathSegment[] Segment {
            get {
                return this.segmentField;
            }
            set {
                this.segmentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The terminator of the optical path. This may be a component (in the case of a single ended fiber installation), or it may be a connection back into the instrument box in the case of a double ended fiber installation.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The terminator of the optical path. This may be a component (in the case of a sin" +
            "gle ended fiber installation), or it may be a connection back into the instrumen" +
            "t box in the case of a double ended fiber installation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Terminator", DataType="FiberTerminator")]
        public FiberTerminator Terminator {
            get {
                return this.terminatorField;
            }
            set {
                this.terminatorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A splice component within the optical path.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Splice")]
        [System.ComponentModel.DescriptionAttribute("A splice component within the optical path.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Splice", DataType="FiberSplice")]
        public FiberSplice[] Splice {
            get {
                return this.spliceField;
            }
            set {
                this.spliceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberOpticalPathNetwork {
        
        private FacilityIdentifierStruct installationField;
        
        private FacilityIdentifierStruct[] contextFacilityField;
        
        private System.DateTime dTimStartField;
        
        private bool dTimStartFieldSpecified;
        
        private System.DateTime dTimeEndField;
        
        private bool dTimeEndFieldSpecified;
        
        private EndpointQualifiedDateTime existenceTimeField;
        
        private EndpointQualifiedDateTime dTimMinField;
        
        private EndpointQualifiedDateTime dTimMaxField;
        
        private string commentField;
        
        private ProductFlowExternalReference[] externalConnectField;
        
        private ProductFlowNetwork[] networkField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Installation.</summary>
        [System.ComponentModel.DescriptionAttribute("Installation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Installation", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct Installation {
            get {
                return this.installationField;
            }
            set {
                this.installationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Context facility.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ContextFacility")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Context facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContextFacility", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct[] ContextFacility {
            get {
                return this.contextFacilityField;
            }
            set {
                this.contextFacilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>DTimStart.</summary>
        [System.ComponentModel.DescriptionAttribute("DTimStart.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="dateTime")]
        public System.DateTime DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimStartSpecified {
            get {
                return this.dTimStartFieldSpecified;
            }
            set {
                this.dTimStartFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>DTimeEnd.</summary>
        [System.ComponentModel.DescriptionAttribute("DTimeEnd.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimeEnd", DataType="dateTime")]
        public System.DateTime DTimeEnd {
            get {
                return this.dTimeEndField;
            }
            set {
                this.dTimeEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimeEndSpecified {
            get {
                return this.dTimeEndFieldSpecified;
            }
            set {
                this.dTimeEndFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>ExistenceTime.</summary>
        [System.ComponentModel.DescriptionAttribute("ExistenceTime.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExistenceTime", DataType="EndpointQualifiedDateTime")]
        public EndpointQualifiedDateTime ExistenceTime {
            get {
                return this.existenceTimeField;
            }
            set {
                this.existenceTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>DTimMin.</summary>
        [System.ComponentModel.DescriptionAttribute("DTimMin.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimMin", DataType="EndpointQualifiedDateTime")]
        public EndpointQualifiedDateTime DTimMin {
            get {
                return this.dTimMinField;
            }
            set {
                this.dTimMinField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>DTimMax.</summary>
        [System.ComponentModel.DescriptionAttribute("DTimMax.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimMax", DataType="EndpointQualifiedDateTime")]
        public EndpointQualifiedDateTime DTimMax {
            get {
                return this.dTimMaxField;
            }
            set {
                this.dTimMaxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comment.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ExternalConnect")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExternalConnect", DataType="ProductFlowExternalReference")]
        public ProductFlowExternalReference[] ExternalConnect {
            get {
                return this.externalConnectField;
            }
            set {
                this.externalConnectField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Network")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Network", DataType="ProductFlowNetwork")]
        public ProductFlowNetwork[] Network {
            get {
                return this.networkField;
            }
            set {
                this.networkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier of this object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier of this object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductFlowExternalReference {
        
        private string portReferenceField;
        
        private string connectedPortReferenceField;
        
        private string connectedModelReferenceField;
        
        private FacilityIdentifierStruct connectedInstallationField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Reference to a type of port.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to a type of port.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PortReference", DataType="String64")]
        public string PortReference {
            get {
                return this.portReferenceField;
            }
            set {
                this.portReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the connected port.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to the connected port.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConnectedPortReference", DataType="String64")]
        public string ConnectedPortReference {
            get {
                return this.connectedPortReferenceField;
            }
            set {
                this.connectedPortReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the connected model.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to the connected model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConnectedModelReference", DataType="String64")]
        public string ConnectedModelReference {
            get {
                return this.connectedModelReferenceField;
            }
            set {
                this.connectedModelReferenceField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConnectedInstallation", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct ConnectedInstallation {
            get {
                return this.connectedInstallationField;
            }
            set {
                this.connectedInstallationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductFlowNetwork {
        
        private string nameField;
        
        private string planNameField;
        
        private string parentNetworkReferenceField;
        
        private string commentField;
        
        private ProductFlowExternalPort[] portField;
        
        private ProductFlowNetworkPlan[] planField;
        
        private ProductFlowChangeLog[] changeLogField;
        
        private ProductFlowUnit[] unitField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name of the product flow network. This must be unique within the context of the overall product flow model.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the product flow network. This must be unique within the context of t" +
            "he overall product flow model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of a network plan. This indicates a planned network. All child network components must all be planned and be part of the same plan. The parent network must either contain the plan (i.e., be an actual) or be part of the same plan. Not specified indicates an actual network.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"The name of a network plan. This indicates a planned network. All child network components must all be planned and be part of the same plan. The parent network must either contain the plan (i.e., be an actual) or be part of the same plan. Not specified indicates an actual network.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PlanName", DataType="String64")]
        public string PlanName {
            get {
                return this.planNameField;
            }
            set {
                this.planNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the network containing the unit that this network represents. That is, the unit must exist in a different network. If a parent network is not specified then the network represents the model. A model should only be represented by one network. The model network represents the overall installation. All other networks represent internal detail and should not be referenced from outside the model. The external ports on the model network represent the external ports to the overall product flow model. A pointer to an external port on the product flow model does not require the name of the model network because it is redundant to knowledge of the model name (i.e., there is a one-to-one correspondence).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"A pointer to the network containing the unit that this network represents. That is, the unit must exist in a different network. If a parent network is not specified then the network represents the model. A model should only be represented by one network. The model network represents the overall installation. All other networks represent internal detail and should not be referenced from outside the model. The external ports on the model network represent the external ports to the overall product flow model. A pointer to an external port on the product flow model does not require the name of the model network because it is redundant to knowledge of the model name (i.e., there is a one-to-one correspondence).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentNetworkReference", DataType="String64")]
        public string ParentNetworkReference {
            get {
                return this.parentNetworkReferenceField;
            }
            set {
                this.parentNetworkReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A descriptive remark about the network.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A descriptive remark about the network.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An external port. This exposes an internal node for the purpose of allowing connections to the internal behavior of the network. Networks that represent a Flow Unit should always have external ports. If this network represents a Unit then the name of the external port must match the name of a port on the Unit (i.e., they are logically the same port).</summary>
        [System.Xml.Serialization.XmlElementAttribute("Port")]
        [System.ComponentModel.DescriptionAttribute(@"An external port. This exposes an internal node for the purpose of allowing connections to the internal behavior of the network. Networks that represent a Flow Unit should always have external ports. If this network represents a Unit then the name of the external port must match the name of a port on the Unit (i.e., they are logically the same port).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Port", DataType="ProductFlowExternalPort")]
        public ProductFlowExternalPort[] Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the existance of a planned network which is a variant of this network beginning at a specified point in time. Any changes to the actual network after that time do not affect the plan.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Plan")]
        [System.ComponentModel.DescriptionAttribute("Defines the existance of a planned network which is a variant of this network beg" +
            "inning at a specified point in time. Any changes to the actual network after tha" +
            "t time do not affect the plan.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Plan", DataType="ProductFlowNetworkPlan")]
        public ProductFlowNetworkPlan[] Plan {
            get {
                return this.planField;
            }
            set {
                this.planField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Documents that a change occurred at a particular time.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ChangeLog")]
        [System.ComponentModel.DescriptionAttribute("Documents that a change occurred at a particular time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChangeLog", DataType="ProductFlowChangeLog")]
        public ProductFlowChangeLog[] ChangeLog {
            get {
                return this.changeLogField;
            }
            set {
                this.changeLogField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A flow behavior for one unit. Within this context, a unit represents a usage of equipment for some purpose. The unit is generally identified by its function rather than the actual equipment used to realize the function. A unit might represent something complex like a field or separator or something simple  like a valve or pump.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Unit")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"A flow behavior for one unit. Within this context, a unit represents a usage of equipment for some purpose. The unit is generally identified by its function rather than the actual equipment used to realize the function. A unit might represent something complex like a field or separator or something simple  like a valve or pump.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unit", DataType="ProductFlowUnit")]
        public ProductFlowUnit[] Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductFlowExternalPort {
        
        private string nameField;
        
        private ProductFlowPortType directionField;
        
        private bool exposedField;
        
        private bool exposedFieldSpecified;
        
        private string connectedNodeField;
        
        private string commentField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name of the external port within the context of the current product flow network.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the external port within the context of the current product flow netw" +
            "ork.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines whether this port is an inlet or outlet. Note that this is a nominal intended direction.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Defines whether this port is an inlet or outlet. Note that this is a nominal inte" +
            "nded direction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Direction", DataType="ProductFlowPortType")]
        public ProductFlowPortType Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True ("true" or "1") indicates that the port is an exposed internal port and cannot be used in a connection external to the network. False ("false" or "0") or not given indicates a normal port.</summary>
        [System.ComponentModel.DescriptionAttribute("True (\"true\" or \"1\") indicates that the port is an exposed internal port and cann" +
            "ot be used in a connection external to the network. False (\"false\" or \"0\") or no" +
            "t given indicates a normal port.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Exposed", DataType="boolean")]
        public bool Exposed {
            get {
                return this.exposedField;
            }
            set {
                this.exposedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExposedSpecified {
            get {
                return this.exposedFieldSpecified;
            }
            set {
                this.exposedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the internal node to which this external port is connected. All ports (whether internal or external) that are connected to a node with the same name are connected to each other. Node names are unique to each network. The purpose of the external port is to provide input to or output from the internal network except when the port is an "exposed" port. The purpose of an exposed port is to allow the properties of the port to be seen external to the network. For an exposed port, the connection points to the associated port.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"Defines the internal node to which this external port is connected. All ports (whether internal or external) that are connected to a node with the same name are connected to each other. Node names are unique to each network. The purpose of the external port is to provide input to or output from the internal network except when the port is an ""exposed"" port. The purpose of an exposed port is to allow the properties of the port to be seen external to the network. For an exposed port, the connection points to the associated port.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConnectedNode", DataType="String64")]
        public string ConnectedNode {
            get {
                return this.connectedNodeField;
            }
            set {
                this.connectedNodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A descriptive remark about the port.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A descriptive remark about the port.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ProductFlowPortType {
        
        /// <remarks/>
        inlet,
        
        /// <remarks/>
        outlet,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductFlowNetworkPlan {
        
        private string nameField;
        
        private System.DateTime dTimStartField;
        
        private string purposeField;
        
        private ProductFlowChangeLog[] changeLogField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name assigned to the plan.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name assigned to the plan.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time of the start of the plan. This point coincides with the end of the actual configuration. The configuration of the actual at this point in time represents the configuration of the plan at this starting point. All changes to this plan must be in the future from this point in time.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The date and time of the start of the plan. This point coincides with the end of the actual configuration. The configuration of the actual at this point in time represents the configuration of the plan at this starting point. All changes to this plan must be in the future from this point in time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="dateTime")]
        public System.DateTime DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A textual description of the purpose of the plan.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A textual description of the purpose of the plan.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Purpose", DataType="String2000")]
        public string Purpose {
            get {
                return this.purposeField;
            }
            set {
                this.purposeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Documents that a change occurred at a particular time.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ChangeLog")]
        [System.ComponentModel.DescriptionAttribute("Documents that a change occurred at a particular time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChangeLog", DataType="ProductFlowChangeLog")]
        public ProductFlowChangeLog[] ChangeLog {
            get {
                return this.changeLogField;
            }
            set {
                this.changeLogField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductFlowChangeLog {
        
        private string nameField;
        
        private System.DateTime dTimField;
        
        private string reasonField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A name assigned to the change.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A name assigned to the change.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The timestamp associated with the change. All changes must use this timestamp.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The timestamp associated with the change. All changes must use this timestamp.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="dateTime")]
        public System.DateTime DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A textual reason for the change.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A textual reason for the change.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Reason", DataType="String2000")]
        public string Reason {
            get {
                return this.reasonField;
            }
            set {
                this.reasonField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductFlowUnit {
        
        private string nameField;
        
        private string planNameField;
        
        private string internalNetworkReferenceField;
        
        private FacilityIdentifierStruct facilityField;
        
        private FacilityIdentifierStruct facilityParent1Field;
        
        private FacilityIdentifierStruct facilityParent2Field;
        
        private FacilityIdentifierStruct[] contextFacilityField;
        
        private string commentField;
        
        private ProductFlowExpectedUnitProperty[] expectedPropertyField;
        
        private ProductFlowPort[] portField;
        
        private RelativeCoordinate relativeCoordinateField;
        
        private NameStruct[] facilityAliasField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name of the ProductFlowUnit within the context of the ProductFlowNetwork.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the ProductFlowUnit within the context of the ProductFlowNetwork.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of a network plan. This indicates a planned unit. All child network components must all be planned and be part of the same plan. The parent network must either contain the plan (i.e., be an actual) or be part of the same plan. Not specified indicates an actual unit.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"The name of a network plan. This indicates a planned unit. All child network components must all be planned and be part of the same plan. The parent network must either contain the plan (i.e., be an actual) or be part of the same plan. Not specified indicates an actual unit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PlanName", DataType="String64")]
        public string PlanName {
            get {
                return this.planNameField;
            }
            set {
                this.planNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the network representing the internal behavior of this unit. The names of the external ports on the internal network must match the names of the ports on this unit. That is they are logically the same ports.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the network representing the internal behavior of this unit. The nam" +
            "es of the external ports on the internal network must match the names of the por" +
            "ts on this unit. That is they are logically the same ports.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InternalNetworkReference", DataType="String64")]
        public string InternalNetworkReference {
            get {
                return this.internalNetworkReferenceField;
            }
            set {
                this.internalNetworkReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the facility for which this Product Flow Unit describes fluid flow connection behavior. The name can be qualified by a naming system. This also defines the kind of facility.</summary>
        [System.ComponentModel.DescriptionAttribute("The name of the facility for which this Product Flow Unit describes fluid flow co" +
            "nnection behavior. The name can be qualified by a naming system. This also defin" +
            "es the kind of facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Facility", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct Facility {
            get {
                return this.facilityField;
            }
            set {
                this.facilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>For facilities whose name is unique within the context of another facility, the name of the parent facility this named facility. The name can be qualified by a naming system. This also defines the kind of facility.</summary>
        [System.ComponentModel.DescriptionAttribute("For facilities whose name is unique within the context of another facility, the n" +
            "ame of the parent facility this named facility. The name can be qualified by a n" +
            "aming system. This also defines the kind of facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityParent1", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct FacilityParent1 {
            get {
                return this.facilityParent1Field;
            }
            set {
                this.facilityParent1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>For facilities whose name is unique within the context of another facility, the name of the parent facility of facilityParent1. The name can be qualified by a naming system. This also defines the kind of facility.</summary>
        [System.ComponentModel.DescriptionAttribute("For facilities whose name is unique within the context of another facility, the n" +
            "ame of the parent facility of facilityParent1. The name can be qualified by a na" +
            "ming system. This also defines the kind of facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityParent2", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct FacilityParent2 {
            get {
                return this.facilityParent2Field;
            }
            set {
                this.facilityParent2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name and type of a facility whose context is relevant to the represented facility.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ContextFacility")]
        [System.ComponentModel.DescriptionAttribute("The name and type of a facility whose context is relevant to the represented faci" +
            "lity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContextFacility", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct[] ContextFacility {
            get {
                return this.contextFacilityField;
            }
            set {
                this.contextFacilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A descriptive remark associated with this unit.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A descriptive remark associated with this unit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines an expected property of the facility represented by this unit.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExpectedProperty")]
        [System.ComponentModel.DescriptionAttribute("Defines an expected property of the facility represented by this unit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExpectedProperty", DataType="ProductFlowExpectedUnitProperty")]
        public ProductFlowExpectedUnitProperty[] ExpectedProperty {
            get {
                return this.expectedPropertyField;
            }
            set {
                this.expectedPropertyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An inlet or outlet port associated with this unit. If there is an internal network then the name of this port must match the name of  an external port for that network. Any properties (e.g., volume, pressure, temperature) that are assigned to this port  are inherently assigned to the corresponding external port on the internal network.  That is, the ports are logically the same port. Similar to a node, there is no pressure drop across a port.   Also similar to a node, conservation of mass exists across the port and the flow direction across the port can change over time if the relative pressures across connected units change.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Port")]
        [System.ComponentModel.DescriptionAttribute(@"An inlet or outlet port associated with this unit. If there is an internal network then the name of this port must match the name of  an external port for that network. Any properties (e.g., volume, pressure, temperature) that are assigned to this port  are inherently assigned to the corresponding external port on the internal network.  That is, the ports are logically the same port. Similar to a node, there is no pressure drop across a port.   Also similar to a node, conservation of mass exists across the port and the flow direction across the port can change over time if the relative pressures across connected units change.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Port", DataType="ProductFlowPort")]
        public ProductFlowPort[] Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the relative coordinate of the unit on a display screen. This is not intended for detailed diagrams. Rather it is intended to allow different applications to present a user view which has a consistent layout.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines the relative coordinate of the unit on a display screen. This is not inte" +
            "nded for detailed diagrams. Rather it is intended to allow different application" +
            "s to present a user view which has a consistent layout.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RelativeCoordinate", DataType="RelativeCoordinate")]
        public RelativeCoordinate RelativeCoordinate {
            get {
                return this.relativeCoordinateField;
            }
            set {
                this.relativeCoordinateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("FacilityAlias")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityAlias", DataType="NameStruct")]
        public NameStruct[] FacilityAlias {
            get {
                return this.facilityAliasField;
            }
            set {
                this.facilityAliasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductFlowExpectedUnitProperty {
        
        private FacilityParameter propertyField;
        
        private string childFacilityIdentifierField;
        
        private NameStruct[] tagAliasField;
        
        private GeneralMeasureType deadbandField;
        
        private TimeMeasure maximumFrequencyField;
        
        private string commentField;
        
        private ExpectedFlowQualifier expectedFlowQualifierField;
        
        private ProductFlowQualifierExpected[] expectedFlowProductField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The expected kind of facility property. Each property is documented to have values of a particular type.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The expected kind of facility property. Each property is documented to have value" +
            "s of a particular type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Property", DataType="FacilityParameter")]
        public FacilityParameter Property {
            get {
                return this.propertyField;
            }
            set {
                this.propertyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The PRODML Relative Identifier (or URI) of a child of the parent facility. The identifier path is presumed to begin with the identity of the parent facility. This identifies a sub-facility which is identified within the context of the parent facilityParent2/facilityParent1/name identification hierarchy. The property is only expected to be defined for this child and not for the parent. For more information about URIs, see the Energistics Identifier Specification, which is available in the zip file when download PRODML.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        [System.ComponentModel.DescriptionAttribute(@"The PRODML Relative Identifier (or URI) of a child of the parent facility. The identifier path is presumed to begin with the identity of the parent facility. This identifies a sub-facility which is identified within the context of the parent facilityParent2/facilityParent1/name identification hierarchy. The property is only expected to be defined for this child and not for the parent. For more information about URIs, see the Energistics Identifier Specification, which is available in the zip file when download PRODML.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChildFacilityIdentifier", DataType="ProdmlRelativeIdentifier")]
        public string ChildFacilityIdentifier {
            get {
                return this.childFacilityIdentifierField;
            }
            set {
                this.childFacilityIdentifierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An alternative name for the sensor that  measures the property.</summary>
        [System.Xml.Serialization.XmlElementAttribute("TagAlias")]
        [System.ComponentModel.DescriptionAttribute("An alternative name for the sensor that  measures the property.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TagAlias", DataType="NameStruct")]
        public NameStruct[] TagAlias {
            get {
                return this.tagAliasField;
            }
            set {
                this.tagAliasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Difference between two consecutive readings, which must exceed deadband value to be accepted.</summary>
        [System.ComponentModel.DescriptionAttribute("Difference between two consecutive readings, which must exceed deadband value to " +
            "be accepted.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Deadband", DataType="GeneralMeasureType")]
        public GeneralMeasureType Deadband {
            get {
                return this.deadbandField;
            }
            set {
                this.deadbandField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum time difference from the last sent event before the next event is sent.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum time difference from the last sent event before the next event is sen" +
            "t.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaximumFrequency", DataType="TimeMeasure")]
        public TimeMeasure MaximumFrequency {
            get {
                return this.maximumFrequencyField;
            }
            set {
                this.maximumFrequencyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A descriptive remark associated with this property.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A descriptive remark associated with this property.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExpectedFlowQualifier", DataType="ExpectedFlowQualifier")]
        public ExpectedFlowQualifier ExpectedFlowQualifier {
            get {
                return this.expectedFlowQualifierField;
            }
            set {
                this.expectedFlowQualifierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the expected flow and product pairs to be  assigned to this port by a Product Volume report. A set of expected qualifiers can be defined for each pair. The aggregate of expectations on all properties should be a subset of  the aggregate of expectations on the port.  If no expectations are defined on the port then the port aggregate will be defined by the properties.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExpectedFlowProduct")]
        [System.ComponentModel.DescriptionAttribute(@"Defines the expected flow and product pairs to be  assigned to this port by a Product Volume report. A set of expected qualifiers can be defined for each pair. The aggregate of expectations on all properties should be a subset of  the aggregate of expectations on the port.  If no expectations are defined on the port then the port aggregate will be defined by the properties.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExpectedFlowProduct", DataType="ProductFlowQualifierExpected")]
        public ProductFlowQualifierExpected[] ExpectedFlowProduct {
            get {
                return this.expectedFlowProductField;
            }
            set {
                this.expectedFlowProductField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum FacilityParameter {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("absorbed dose class")]
        absorbeddoseclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acceleration linear class")]
        accelerationlinearclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("activity (of radioactivity) class")]
        activityofradioactivityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("alarm absolute pressure")]
        alarmabsolutepressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance class")]
        amountofsubstanceclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angle per length")]
        angleperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angle per time")]
        anglepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angle per volume")]
        anglepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angular acceleration class")]
        angularaccelerationclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("annulus inner diameter")]
        annulusinnerdiameter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("annulus outer diameter")]
        annulusouterdiameter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area class")]
        areaclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per area")]
        areaperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per volume")]
        areapervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atmospheric pressure")]
        atmosphericpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("attenuation class")]
        attenuationclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("attenuation per length")]
        attenuationperlength,
        
        /// <remarks/>
        available,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("available room")]
        availableroom,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("block valve status")]
        blockvalvestatus,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("capacitance class")]
        capacitanceclass,
        
        /// <remarks/>
        categorical,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cathodic protection output current")]
        cathodicprotectionoutputcurrent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cathodic protection output voltage")]
        cathodicprotectionoutputvoltage,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("charge density class")]
        chargedensityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chemical potential class")]
        chemicalpotentialclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("choke position")]
        chokeposition,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("choke setting")]
        chokesetting,
        
        /// <remarks/>
        code,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("compressibility class")]
        compressibilityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("concentration of B class")]
        concentrationofBclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("conductivity class")]
        conductivityclass,
        
        /// <remarks/>
        continuous,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cross section absorption class")]
        crosssectionabsorptionclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("current density class")]
        currentdensityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("darcy flow coefficient class")]
        darcyflowcoefficientclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("data transmission speed class")]
        datatransmissionspeedclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("delta temperature class")]
        deltatemperatureclass,
        
        /// <remarks/>
        density,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("density class")]
        densityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("density flow rate")]
        densityflowrate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("density standard")]
        densitystandard,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dewpoint temperature")]
        dewpointtemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("differential pressure")]
        differentialpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("differential temperature")]
        differentialtemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diffusion coefficient class")]
        diffusioncoefficientclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("digital storage class")]
        digitalstorageclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dimensionless class")]
        dimensionlessclass,
        
        /// <remarks/>
        discrete,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dose equivalent class")]
        doseequivalentclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dose equivalent rate class")]
        doseequivalentrateclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dynamic viscosity class")]
        dynamicviscosityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge class")]
        electricchargeclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric conductance class")]
        electricconductanceclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric current class")]
        electriccurrentclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric dipole moment class")]
        electricdipolemomentclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric field strength class")]
        electricfieldstrengthclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric polarization class")]
        electricpolarizationclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric potential class")]
        electricpotentialclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electrical resistivity class")]
        electricalresistivityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electrochemical equivalent class")]
        electrochemicalequivalentclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electromagnetic moment class")]
        electromagneticmomentclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy length per area")]
        energylengthperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy length per time area temperature")]
        energylengthpertimeareatemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per area")]
        energyperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per length")]
        energyperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("equivalent per mass")]
        equivalentpermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("equivalent per volume")]
        equivalentpervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("exposure (radioactivity) class")]
        exposureradioactivityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("facility uptime")]
        facilityuptime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("flow rate")]
        flowrate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("flow rate standard")]
        flowratestandard,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force area class")]
        forceareaclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force class")]
        forceclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force length per length")]
        forcelengthperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per force")]
        forceperforce,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per length")]
        forceperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per volume")]
        forcepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("frequency class")]
        frequencyclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("frequency interval class")]
        frequencyintervalclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gamma ray API unit class")]
        gammarayAPIunitclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas liquid ratio")]
        gasliquidratio,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas oil ratio")]
        gasoilratio,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gross calorific value standard")]
        grosscalorificvaluestandard,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat capacity class")]
        heatcapacityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat flow rate class")]
        heatflowrateclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat transfer coefficient class")]
        heattransfercoefficientclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("illuminance class")]
        illuminanceclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("internal control valve status")]
        internalcontrolvalvestatus,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("irradiance class")]
        irradianceclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("isothermal compressibility class")]
        isothermalcompressibilityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kinematic viscosity class")]
        kinematicviscosityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length class")]
        lengthclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per length")]
        lengthperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per temperature")]
        lengthpertemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per volume")]
        lengthpervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("level of power intensity class")]
        levelofpowerintensityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("light exposure class")]
        lightexposureclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("linear thermal expansion class")]
        linearthermalexpansionclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminance class")]
        luminanceclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous efficacy class")]
        luminousefficacyclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous flux class")]
        luminousfluxclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous intensity class")]
        luminousintensityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic dipole moment class")]
        magneticdipolemomentclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic field strength class")]
        magneticfieldstrengthclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic flux class")]
        magneticfluxclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic induction class")]
        magneticinductionclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic permeability class")]
        magneticpermeabilityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic vector potential class")]
        magneticvectorpotentialclass,
        
        /// <remarks/>
        mass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass attenuation coefficient class")]
        massattenuationcoefficientclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass class")]
        massclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass concentration")]
        massconcentration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass concentration class")]
        massconcentrationclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass flow rate class")]
        massflowrateclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass length class")]
        masslengthclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per energy")]
        massperenergy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per length")]
        massperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per time per area")]
        masspertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per time per length")]
        masspertimeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume per length")]
        masspervolumeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("measured depth")]
        measureddepth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mobility class")]
        mobilityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("modulus of compression class")]
        modulusofcompressionclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar concentration")]
        molarconcentration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar fraction")]
        molarfraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar heat capacity class")]
        molarheatcapacityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar volume class")]
        molarvolumeclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mole per area")]
        moleperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mole per time")]
        molepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mole per time per area")]
        molepertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molecular weight")]
        molecularweight,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("moment of force class")]
        momentofforceclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("moment of inertia class")]
        momentofinertiaclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("moment of section class")]
        momentofsectionclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("momentum class")]
        momentumclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("motor current")]
        motorcurrent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("motor current leakage")]
        motorcurrentleakage,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("motor speed")]
        motorspeed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("motor temperature")]
        motortemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("motor vibration")]
        motorvibration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("motor voltage")]
        motorvoltage,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("neutron API unit class")]
        neutronAPIunitclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nonDarcy flow coefficient class")]
        nonDarcyflowcoefficientclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("opening size")]
        openingsize,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("operations per time")]
        operationspertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("parachor class")]
        parachorclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("per area")]
        perarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("per electric potential")]
        perelectricpotential,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("per force")]
        perforce,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("per length")]
        perlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("per mass")]
        permass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("per volume")]
        pervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("permeability length class")]
        permeabilitylengthclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("permeability rock class")]
        permeabilityrockclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("permeance class")]
        permeanceclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("permittivity class")]
        permittivityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pH class")]
        pHclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plane angle class")]
        planeangleclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("potential difference per power drop")]
        potentialdifferenceperpowerdrop,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("power class")]
        powerclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("power per volume")]
        powerpervolume,
        
        /// <remarks/>
        pressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure class")]
        pressureclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure per time")]
        pressurepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure squared class")]
        pressuresquaredclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure squared per force time per area")]
        pressuresquaredperforcetimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure time per volume")]
        pressuretimepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("productivity index class")]
        productivityindexclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pump count online")]
        pumpcountonline,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pump status")]
        pumpstatus,
        
        /// <remarks/>
        quantity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("quantity of light class")]
        quantityoflightclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("radiance class")]
        radianceclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("radiant intensity class")]
        radiantintensityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocating speed")]
        reciprocatingspeed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rectifier structure potential")]
        rectifierstructurepotential,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reid vapor pressure")]
        reidvaporpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("relative opening size")]
        relativeopeningsize,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("relative power class")]
        relativepowerclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("relative tank level")]
        relativetanklevel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("relative time class")]
        relativetimeclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("relative valve opening")]
        relativevalveopening,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reluctance class")]
        reluctanceclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("resistance class")]
        resistanceclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("resistivity per length")]
        resistivityperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("root property")]
        rootproperty,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scheduled downtime")]
        scheduleddowntime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("second moment of area class")]
        secondmomentofareaclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shutdown order")]
        shutdownorder,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shutin pressure")]
        shutinpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shutin temperature")]
        shutintemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("solid angle class")]
        solidangleclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("specific activity (of radioactivity)")]
        specificactivityofradioactivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("specific energy class")]
        specificenergyclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("specific gravity")]
        specificgravity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("specific heat capacity class")]
        specificheatcapacityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("specific productivity index class")]
        specificproductivityindexclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("specific volume class")]
        specificvolumeclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub surface safety valve status")]
        subsurfacesafetyvalvestatus,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("surface density class")]
        surfacedensityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("surface safety valve status")]
        surfacesafetyvalvestatus,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tank fluid level")]
        tankfluidlevel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tank product standard volume")]
        tankproductstandardvolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tank product volume")]
        tankproductvolume,
        
        /// <remarks/>
        temperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature per length")]
        temperatureperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature per time")]
        temperaturepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal conductance class")]
        thermalconductanceclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal conductivity class")]
        thermalconductivityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal diffusivity class")]
        thermaldiffusivityclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal insulance class")]
        thermalinsulanceclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal resistance class")]
        thermalresistanceclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermodynamic temperature class")]
        thermodynamictemperatureclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time class")]
        timeclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per length")]
        timeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per volume")]
        timepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("true vapor pressure")]
        truevaporpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("unit productivity index class")]
        unitproductivityindexclass,
        
        /// <remarks/>
        unitless,
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("valve opening")]
        valveopening,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("valve status")]
        valvestatus,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("velocity class")]
        velocityclass,
        
        /// <remarks/>
        volume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume class")]
        volumeclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume concentration")]
        volumeconcentration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume flow rate class")]
        volumeflowrateclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume length per time")]
        volumelengthpertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per area")]
        volumeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per length")]
        volumeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per area")]
        volumepertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per length")]
        volumepertimeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per time")]
        volumepertimepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per volume")]
        volumepertimepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per volume")]
        volumepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume standard")]
        volumestandard,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volumetric efficiency")]
        volumetricefficiency,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volumetric heat transfer coefficient")]
        volumetricheattransfercoefficient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volumetric thermal expansion class")]
        volumetricthermalexpansionclass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well operating status")]
        welloperatingstatus,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well operation type")]
        welloperationtype,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wobbe index")]
        wobbeindex,
        
        /// <remarks/>
        work,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("work class")]
        workclass,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class GeneralMeasureType {
        
        private string uomField;
        
        /// <remarks/>
        /// <summary>The unit of measure.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(32)]
        [System.ComponentModel.DescriptionAttribute("The unit of measure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="UomEnum")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Qualifier))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductFlowQualifierExpected))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ExpectedFlowQualifier {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class Qualifier : ExpectedFlowQualifier {
        
        private FlowQualifier[] qualifier1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Qualifier")]
        public FlowQualifier[] Qualifier1 {
            get {
                return this.qualifier1Field;
            }
            set {
                this.qualifier1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum FlowQualifier {
        
        /// <remarks/>
        allocated,
        
        /// <remarks/>
        budget,
        
        /// <remarks/>
        constraint,
        
        /// <remarks/>
        derived,
        
        /// <remarks/>
        difference,
        
        /// <remarks/>
        estimate,
        
        /// <remarks/>
        forecast,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass adjusted")]
        massadjusted,
        
        /// <remarks/>
        measured,
        
        /// <remarks/>
        metered,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("metered - fiscal")]
        meteredfiscal,
        
        /// <remarks/>
        nominated,
        
        /// <remarks/>
        potential,
        
        /// <remarks/>
        processed,
        
        /// <remarks/>
        quota,
        
        /// <remarks/>
        recommended,
        
        /// <remarks/>
        simulated,
        
        /// <remarks/>
        target,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tariff basis")]
        tariffbasis,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("value adjusted")]
        valueadjusted,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductFlowQualifierExpected : ExpectedFlowQualifier {
        
        private ReportingFlow flowField;
        
        private ReportingProduct productField;
        
        private bool productFieldSpecified;
        
        private FlowQualifier[] qualifierField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The expected kind of flow.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The expected kind of flow.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Flow", DataType="ReportingFlow")]
        public ReportingFlow Flow {
            get {
                return this.flowField;
            }
            set {
                this.flowField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The expected kind of product within the flow.</summary>
        [System.ComponentModel.DescriptionAttribute("The expected kind of product within the flow.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Product", DataType="ReportingProduct")]
        public ReportingProduct Product {
            get {
                return this.productField;
            }
            set {
                this.productField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProductSpecified {
            get {
                return this.productFieldSpecified;
            }
            set {
                this.productFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The expected kind of qualifier of the flow.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Qualifier")]
        [System.ComponentModel.DescriptionAttribute("The expected kind of qualifier of the flow.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Qualifier", DataType="FlowQualifier")]
        public FlowQualifier[] Qualifier {
            get {
                return this.qualifierField;
            }
            set {
                this.qualifierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ReportingFlow {
        
        /// <remarks/>
        consume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("consume - black start")]
        consumeblackstart,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("consume - compressor")]
        consumecompressor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("consume - emitted")]
        consumeemitted,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("consume - flare")]
        consumeflare,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("consume - fuel")]
        consumefuel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("consume - HP flare")]
        consumeHPflare,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("consume - LP flare")]
        consumeLPflare,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("consume - non compressor")]
        consumenoncompressor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("consume - venting")]
        consumeventing,
        
        /// <remarks/>
        disposal,
        
        /// <remarks/>
        export,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("export - nominated")]
        exportnominated,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("export - requested")]
        exportrequested,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("export - shortfall")]
        exportshortfall,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas lift")]
        gaslift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hydrocarbon accounting")]
        hydrocarbonaccounting,
        
        /// <remarks/>
        import,
        
        /// <remarks/>
        injection,
        
        /// <remarks/>
        inventory,
        
        /// <remarks/>
        overboard,
        
        /// <remarks/>
        production,
        
        /// <remarks/>
        sale,
        
        /// <remarks/>
        storage,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ReportingProduct {
        
        /// <remarks/>
        aqueous,
        
        /// <remarks/>
        c10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c10-")]
        c101,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c10+")]
        c102,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c2-")]
        c2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c2+")]
        c21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c3-")]
        c3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c3+")]
        c31,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c4-")]
        c4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c4+")]
        c41,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c5-")]
        c5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c5+")]
        c51,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c6-")]
        c6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c6+")]
        c61,
        
        /// <remarks/>
        c7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c7-")]
        c71,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c7+")]
        c72,
        
        /// <remarks/>
        c8,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c8-")]
        c81,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c8+")]
        c82,
        
        /// <remarks/>
        c9,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c9-")]
        c91,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c9+")]
        c92,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("carbon dioxide gas")]
        carbondioxidegas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("carbon monoxide gas")]
        carbonmonoxidegas,
        
        /// <remarks/>
        chemical,
        
        /// <remarks/>
        condensate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("condensate - gross")]
        condensategross,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("condensate - net")]
        condensatenet,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("crude - stabilized")]
        crudestabilized,
        
        /// <remarks/>
        cuttings,
        
        /// <remarks/>
        diesel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diethylene glycol")]
        diethyleneglycol,
        
        /// <remarks/>
        dioxygen,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric power")]
        electricpower,
        
        /// <remarks/>
        ethane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ethane - component")]
        ethanecomponent,
        
        /// <remarks/>
        gas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas - component in oil")]
        gascomponentinoil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas - dry")]
        gasdry,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas - rich")]
        gasrich,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas - wet")]
        gaswet,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("helium gas")]
        heliumgas,
        
        /// <remarks/>
        heptane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hydraulic control fluid")]
        hydrauliccontrolfluid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hydrogen gas")]
        hydrogengas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hydrogen sulfide")]
        hydrogensulfide,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("i-butane - component")]
        ibutanecomponent,
        
        /// <remarks/>
        isobutane,
        
        /// <remarks/>
        isopentane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("liquefied natural gas")]
        liquefiednaturalgas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("liquefied petroleum gas")]
        liquefiedpetroleumgas,
        
        /// <remarks/>
        liquid,
        
        /// <remarks/>
        methane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("methane - component")]
        methanecomponent,
        
        /// <remarks/>
        methanol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mixed butane")]
        mixedbutane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("monoethylene glycol")]
        monoethyleneglycol,
        
        /// <remarks/>
        naphtha,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("natural gas liquid")]
        naturalgasliquid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("n-butane - component")]
        nbutanecomponent,
        
        /// <remarks/>
        neopentane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("NGL - component in gas")]
        NGLcomponentingas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nitrogen gas")]
        nitrogengas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nitrogen oxide gas")]
        nitrogenoxidegas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("normal butane")]
        normalbutane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("normal pentane")]
        normalpentane,
        
        /// <remarks/>
        oil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil - component in water")]
        oilcomponentinwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil - gross")]
        oilgross,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil - net")]
        oilnet,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil and gas")]
        oilandgas,
        
        /// <remarks/>
        oleic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pentane - component")]
        pentanecomponent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("petroleum gas liquid")]
        petroleumgasliquid,
        
        /// <remarks/>
        propane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("propane - component")]
        propanecomponent,
        
        /// <remarks/>
        salt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sand - component")]
        sandcomponent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("triethylene glycol")]
        triethyleneglycol,
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        vapor,
        
        /// <remarks/>
        water,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water - discharge")]
        waterdischarge,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water - processed")]
        waterprocessed,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductFlowPort {
        
        private ProductFlowPortType directionField;
        
        private string nameField;
        
        private string planNameField;
        
        private FacilityIdentifierStruct facilityField;
        
        private NameStruct[] facilityAliasField;
        
        private bool exposedField;
        
        private bool exposedFieldSpecified;
        
        private string commentField;
        
        private ProductFlowExpectedUnitProperty[] expectedFlowPropertyField;
        
        private ConnectedNode[] connectedNodeField;
        
        private ProductFlowQualifierExpected[] expectedFlowProductField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Defines whether this port is an inlet or outlet. This is a nominal intended direction.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Defines whether this port is an inlet or outlet. This is a nominal intended direc" +
            "tion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Direction", DataType="ProductFlowPortType")]
        public ProductFlowPortType Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the port within the context of the product flow unit.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the port within the context of the product flow unit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of a network plan. This indicates a planned port. All child network components must all be planned and be part of the same plan. The parent unit must be part of the same plan or be an actual. Not specified indicates an actual port.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of a network plan. This indicates a planned port. All child network comp" +
            "onents must all be planned and be part of the same plan. The parent unit must be" +
            " part of the same plan or be an actual. Not specified indicates an actual port.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PlanName", DataType="String64")]
        public string PlanName {
            get {
                return this.planNameField;
            }
            set {
                this.planNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the facility represented by this ProductFlowPort The name can be qualified by a naming system. The facility name is assumed to be unique within the context of the facility represented by the unit. This also defines the kind of facility.</summary>
        [System.ComponentModel.DescriptionAttribute("The name of the facility represented by this ProductFlowPort The name can be qual" +
            "ified by a naming system. The facility name is assumed to be unique within the c" +
            "ontext of the facility represented by the unit. This also defines the kind of fa" +
            "cility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Facility", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct Facility {
            get {
                return this.facilityField;
            }
            set {
                this.facilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An alternative name of a facility. This is generally unique within a naming system. The above contextually unique name should also be listed as an alias.</summary>
        [System.Xml.Serialization.XmlElementAttribute("FacilityAlias")]
        [System.ComponentModel.DescriptionAttribute("An alternative name of a facility. This is generally unique within a naming syste" +
            "m. The above contextually unique name should also be listed as an alias.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityAlias", DataType="NameStruct")]
        public NameStruct[] FacilityAlias {
            get {
                return this.facilityAliasField;
            }
            set {
                this.facilityAliasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True ("true" or "1") indicates that the port is an exposed internal port and cannot be used in a connection external to the unit. False ("false" or "0") or not given indicates a normal port.</summary>
        [System.ComponentModel.DescriptionAttribute("True (\"true\" or \"1\") indicates that the port is an exposed internal port and cann" +
            "ot be used in a connection external to the unit. False (\"false\" or \"0\") or not g" +
            "iven indicates a normal port.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Exposed", DataType="boolean")]
        public bool Exposed {
            get {
                return this.exposedField;
            }
            set {
                this.exposedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExposedSpecified {
            get {
                return this.exposedFieldSpecified;
            }
            set {
                this.exposedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A descriptive remark associated with this port.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A descriptive remark associated with this port.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the properties that are expected to be measured at this port. This can also specify the equipment tag(s) of the sensor that will read the value. Only one of each property kind should be active at any point in time.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExpectedFlowProperty")]
        [System.ComponentModel.DescriptionAttribute("Defines the properties that are expected to be measured at this port. This can al" +
            "so specify the equipment tag(s) of the sensor that will read the value. Only one" +
            " of each property kind should be active at any point in time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExpectedFlowProperty", DataType="ProductFlowExpectedUnitProperty")]
        public ProductFlowExpectedUnitProperty[] ExpectedFlowProperty {
            get {
                return this.expectedFlowPropertyField;
            }
            set {
                this.expectedFlowPropertyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the node to which this port is connected. A timestamp activates and deactivates the connection.  Only one connectedNode should be active at any one point in time. There are no semantics for the node except common connection. All ports that are connected to a node with the the same name are inherently connected to each other. The name of the node is only required to be unique within the context of the current Product Flow Network (that is, not the overall model). All ports must be connected to a node and whether or not any other port is connected to the same node depends on the requirements of the network.  Any node that is internally connected to only one port is presumably a candidate  to be connected to an external node. The behavior of ports connected at a common node is as follows:  a) There is no pressure drop across the node. All ports connected to the node have   the same pressure. That is, there is an assumption of steady state fluid flow.  b) Conservation of mass exists across the node. The mass into the node via all   connected ports equals the mass out of the node via all connected ports.  c) The flow direction of a port connected to the node may be transient. That is, flow   direction may change toward any port(s) if the relative internal pressure of  the Product Flow Units change and a new steady state is achieved.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ConnectedNode")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Defines the node to which this port is connected. A timestamp activates and deactivates the connection.  Only one connectedNode should be active at any one point in time. There are no semantics for the node except common connection. All ports that are connected to a node with the the same name are inherently connected to each other. The name of the node is only required to be unique within the context of the current Product Flow Network (that is, not the overall model). All ports must be connected to a node and whether or not any other port is connected to the same node depends on the requirements of the network.  Any node that is internally connected to only one port is presumably a candidate  to be connected to an external node. The behavior of ports connected at a common node is as follows:  a) There is no pressure drop across the node. All ports connected to the node have   the same pressure. That is, there is an assumption of steady state fluid flow.  b) Conservation of mass exists across the node. The mass into the node via all   connected ports equals the mass out of the node via all connected ports.  c) The flow direction of a port connected to the node may be transient. That is, flow   direction may change toward any port(s) if the relative internal pressure of  the Product Flow Units change and a new steady state is achieved.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConnectedNode", DataType="ConnectedNode")]
        public ConnectedNode[] ConnectedNode {
            get {
                return this.connectedNodeField;
            }
            set {
                this.connectedNodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the expected flow and product pairs to be  assigned to this port by a Product Volume report. A set of expected qualifiers can be defined for each pair.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExpectedFlowProduct")]
        [System.ComponentModel.DescriptionAttribute("Defines the expected flow and product pairs to be  assigned to this port by a Pro" +
            "duct Volume report. A set of expected qualifiers can be defined for each pair.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExpectedFlowProduct", DataType="ProductFlowQualifierExpected")]
        public ProductFlowQualifierExpected[] ExpectedFlowProduct {
            get {
                return this.expectedFlowProductField;
            }
            set {
                this.expectedFlowProductField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ConnectedNode {
        
        private string nodeField;
        
        private string planNameField;
        
        private System.DateTime dTimStartField;
        
        private bool dTimStartFieldSpecified;
        
        private System.DateTime dTimEndField;
        
        private bool dTimEndFieldSpecified;
        
        private string commentField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Defines the node to which this port is connected. Only two ports should be actively connected to the same node at the same point in time. That is, a port should only be connected to one other port. There are no semantics for the node except common connection. All ports that are connected to a node with the same name are inherently connected to each other. The name of the node is only required to be unique within the context of the current Product Flow Network (that is, not the overall model). All ports must be connected to a node and whether or not any other port is connected to the same node depends on the requirements of the network. Any node that is internally connected to only one node is presumably a candidate to be connected to an external node. The behavior of ports connected at a common node is as follows: a) There is no pressure drop across the node. All ports connected to the node have the same pressure. That is, there is an assumption of steady state fluid flow. b) Conservation of mass exists across the node. The mass into the node via all connected ports equals the mass out of the node via all connected ports. c) The flow direction of a port connected to the node may be transient. That is, flow direction may change toward any port if the relative internal pressure of the Product Flow Units change and a new steady state is achieved.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"Defines the node to which this port is connected. Only two ports should be actively connected to the same node at the same point in time. That is, a port should only be connected to one other port. There are no semantics for the node except common connection. All ports that are connected to a node with the same name are inherently connected to each other. The name of the node is only required to be unique within the context of the current Product Flow Network (that is, not the overall model). All ports must be connected to a node and whether or not any other port is connected to the same node depends on the requirements of the network. Any node that is internally connected to only one node is presumably a candidate to be connected to an external node. The behavior of ports connected at a common node is as follows: a) There is no pressure drop across the node. All ports connected to the node have the same pressure. That is, there is an assumption of steady state fluid flow. b) Conservation of mass exists across the node. The mass into the node via all connected ports equals the mass out of the node via all connected ports. c) The flow direction of a port connected to the node may be transient. That is, flow direction may change toward any port if the relative internal pressure of the Product Flow Units change and a new steady state is achieved.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Node", DataType="String64")]
        public string Node {
            get {
                return this.nodeField;
            }
            set {
                this.nodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of a network plan. This indicates a planned connection. The connected port must be part of the same plan or be an actual. Not specified indicates an actual connection.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of a network plan. This indicates a planned connection. The connected po" +
            "rt must be part of the same plan or be an actual. Not specified indicates an act" +
            "ual connection.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PlanName", DataType="String64")]
        public string PlanName {
            get {
                return this.planNameField;
            }
            set {
                this.planNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time that the connection was activated.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time that the connection was activated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="dateTime")]
        public System.DateTime DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimStartSpecified {
            get {
                return this.dTimStartFieldSpecified;
            }
            set {
                this.dTimStartFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time that the connection was terminated.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time that the connection was terminated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="dateTime")]
        public System.DateTime DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimEndSpecified {
            get {
                return this.dTimEndFieldSpecified;
            }
            set {
                this.dTimEndFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A descriptive remark associated with this connection, possibly including a reason for termination.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A descriptive remark associated with this connection, possibly including a reason" +
            " for termination.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class RelativeCoordinate {
        
        private LengthPerLengthMeasure xField;
        
        private LengthPerLengthMeasure yField;
        
        private LengthPerLengthMeasure zField;
        
        /// <remarks/>
        /// <summary>Defines the relative from-left-to-right location on a display screen. The display origin (0,0) is the upper left-hand corner of the display as viewed by the user.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines the relative from-left-to-right location on a display screen. The display" +
            " origin (0,0) is the upper left-hand corner of the display as viewed by the user" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("X", DataType="LengthPerLengthMeasure")]
        public LengthPerLengthMeasure X {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the relative from-top-to-bottom location on a display screen. The display origin (0,0) is the upper left-hand corner of the display as viewed by the user.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines the relative from-top-to-bottom location on a display screen. The display" +
            " origin (0,0) is the upper left-hand corner of the display as viewed by the user" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Y", DataType="LengthPerLengthMeasure")]
        public LengthPerLengthMeasure Y {
            get {
                return this.yField;
            }
            set {
                this.yField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the relative from-front-to-back location in a 3D system. The unrotated display origin (0,0) is the upper left-hand corner of the display as viewed by the user. The "3D picture" may be rotated on the 2D display.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines the relative from-front-to-back location in a 3D system. The unrotated di" +
            "splay origin (0,0) is the upper left-hand corner of the display as viewed by the" +
            " user. The \"3D picture\" may be rotated on the 2D display.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Z", DataType="LengthPerLengthMeasure")]
        public LengthPerLengthMeasure Z {
            get {
                return this.zField;
            }
            set {
                this.zField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberFacilityMapping {
        
        private System.DateTime timeStartField;
        
        private System.DateTime timeEndField;
        
        private bool timeEndFieldSpecified;
        
        private string commentField;
        
        private FiberFacilityMappingPart[] fiberFacilityMappingPartField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Date when the mapping between the facility and the optical path becomes effective.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Date when the mapping between the facility and the optical path becomes effective" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeStart", DataType="dateTime")]
        public System.DateTime TimeStart {
            get {
                return this.timeStartField;
            }
            set {
                this.timeStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date when the mapping between the facility and the optical path is no longer valid.</summary>
        [System.ComponentModel.DescriptionAttribute("Date when the mapping between the facility and the optical path is no longer vali" +
            "d.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeEnd", DataType="dateTime")]
        public System.DateTime TimeEnd {
            get {
                return this.timeEndField;
            }
            set {
                this.timeEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeEndSpecified {
            get {
                return this.timeEndFieldSpecified;
            }
            set {
                this.timeEndFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A descriptive remark about the facility mapping.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A descriptive remark about the facility mapping.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Relates distances measured along the optical path to specific lengths along facilities (wellbores or pipelines).</summary>
        [System.Xml.Serialization.XmlElementAttribute("FiberFacilityMappingPart")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Relates distances measured along the optical path to specific lengths along facil" +
            "ities (wellbores or pipelines).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FiberFacilityMappingPart", DataType="FiberFacilityMappingPart")]
        public FiberFacilityMappingPart[] FiberFacilityMappingPart {
            get {
                return this.fiberFacilityMappingPartField;
            }
            set {
                this.fiberFacilityMappingPartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier of this object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier of this object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberFacilityMappingPart {
        
        private LengthMeasure opticalPathDistanceStartField;
        
        private LengthMeasure opticalPathDistanceEndField;
        
        private LengthMeasure facilityLengthStartField;
        
        private LengthMeasure facilityLengthEndField;
        
        private string commentField;
        
        private AbstractFiberFacility fiberFacilityField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Distance between the beginning of the optical path to the distance where the mapping with the facility takes place.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Distance between the beginning of the optical path to the distance where the mapp" +
            "ing with the facility takes place.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpticalPathDistanceStart", DataType="LengthMeasure")]
        public LengthMeasure OpticalPathDistanceStart {
            get {
                return this.opticalPathDistanceStartField;
            }
            set {
                this.opticalPathDistanceStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance between the beginning of the optical path to the distance where the mapping with the facility ends.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Distance between the beginning of the optical path to the distance where the mapp" +
            "ing with the facility ends.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpticalPathDistanceEnd", DataType="LengthMeasure")]
        public LengthMeasure OpticalPathDistanceEnd {
            get {
                return this.opticalPathDistanceEndField;
            }
            set {
                this.opticalPathDistanceEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance between the facility datum and the distance where the mapping with the optical path takes place.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Distance between the facility datum and the distance where the mapping with the o" +
            "ptical path takes place.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityLengthStart", DataType="LengthMeasure")]
        public LengthMeasure FacilityLengthStart {
            get {
                return this.facilityLengthStartField;
            }
            set {
                this.facilityLengthStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance between the facility datum and the distance where the mapping with the optical path ends.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Distance between the facility datum and the distance where the mapping with the o" +
            "ptical path ends.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityLengthEnd", DataType="LengthMeasure")]
        public LengthMeasure FacilityLengthEnd {
            get {
                return this.facilityLengthEndField;
            }
            set {
                this.facilityLengthEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A descriptive remark about the facility mapping.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A descriptive remark about the facility mapping.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FiberFacility", DataType="AbstractFiberFacility")]
        public AbstractFiberFacility FiberFacility {
            get {
                return this.fiberFacilityField;
            }
            set {
                this.fiberFacilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier or this object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier or this object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberFacilityWell))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberFacilityPipeline))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberFacilityGeneric))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractFiberFacility {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberFacilityWell : AbstractFiberFacility {
        
        private string nameField;
        
        private WellboreDatumReference wellDatumField;
        
        private bool wellDatumFieldSpecified;
        
        private DataObjectReference wellboreReferenceField;
        
        /// <remarks/>
        /// <summary>The name of this facilityMapping instance.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of this facilityMapping instance.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to the wellDatum from which the facilityLength (i.e., in this case, depth of a wellbore being mapped) is measured from.</summary>
        [System.ComponentModel.DescriptionAttribute("A reference to the wellDatum from which the facilityLength (i.e., in this case, d" +
            "epth of a wellbore being mapped) is measured from.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellDatum", DataType="WellboreDatumReference")]
        public WellboreDatumReference WellDatum {
            get {
                return this.wellDatumField;
            }
            set {
                this.wellDatumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WellDatumSpecified {
            get {
                return this.wellDatumFieldSpecified;
            }
            set {
                this.wellDatumFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreReference", DataType="DataObjectReference")]
        public DataObjectReference WellboreReference {
            get {
                return this.wellboreReferenceField;
            }
            set {
                this.wellboreReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberFacilityPipeline : AbstractFiberFacility {
        
        private NameStruct nameField;
        
        private string datumPortReferenceField;
        
        private FacilityIdentifierStruct installationField;
        
        private string kindField;
        
        private FacilityIdentifierStruct contextFacilityField;
        
        /// <remarks/>
        /// <summary>The name of this facilityMapping instance.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The name of this facilityMapping instance.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="NameStruct")]
        public NameStruct Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A description of which "port" (i.e., connection/end or defined point on a pipeline) the facilityLength is indexed from.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A description of which \"port\" (i.e., connection/end or defined point on a pipelin" +
            "e) the facilityLength is indexed from.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DatumPortReference", DataType="String64")]
        public string DatumPortReference {
            get {
                return this.datumPortReferenceField;
            }
            set {
                this.datumPortReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the facility that is represented by this facilityMapping.</summary>
        [System.ComponentModel.DescriptionAttribute("The name of the facility that is represented by this facilityMapping.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Installation", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct Installation {
            get {
                return this.installationField;
            }
            set {
                this.installationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of facility mapped to the optical path. Expected to be a pipeline, but this element can be used to show other facilities being mapped to fiber length in future.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The kind of facility mapped to the optical path. Expected to be a pipeline, but t" +
            "his element can be used to show other facilities being mapped to fiber length in" +
            " future.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="String64")]
        public string Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name and type of a facility whose context is relevant to the represented installation.</summary>
        [System.ComponentModel.DescriptionAttribute("The name and type of a facility whose context is relevant to the represented inst" +
            "allation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContextFacility", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct ContextFacility {
            get {
                return this.contextFacilityField;
            }
            set {
                this.contextFacilityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberFacilityGeneric : AbstractFiberFacility {
        
        private string facilityNameField;
        
        private string facilityKindField;
        
        /// <remarks/>
        /// <summary>The name or description of the facility.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name or description of the facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityName", DataType="String64")]
        public string FacilityName {
            get {
                return this.facilityNameField;
            }
            set {
                this.facilityNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A comment to describe this facility.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A comment to describe this facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityKind", DataType="String64")]
        public string FacilityKind {
            get {
                return this.facilityKindField;
            }
            set {
                this.facilityKindField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberPathDefect {
        
        private LengthMeasure[] opticalPathDistanceStartField;
        
        private LengthMeasure[] opticalPathDistanceEndField;
        
        private PathDefectTypes[] defectTypeField;
        
        private System.DateTime[] timeStartField;
        
        private System.DateTime[] timeEndField;
        
        private string[] commentField;
        
        private string defectIDField;
        
        /// <remarks/>
        /// <summary>Starting point of the detected defect as distance in the optical path from the lightbox.</summary>
        [System.Xml.Serialization.XmlElementAttribute("OpticalPathDistanceStart")]
        [System.ComponentModel.DescriptionAttribute("Starting point of the detected defect as distance in the optical path from the li" +
            "ghtbox.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpticalPathDistanceStart", DataType="LengthMeasure")]
        public LengthMeasure[] OpticalPathDistanceStart {
            get {
                return this.opticalPathDistanceStartField;
            }
            set {
                this.opticalPathDistanceStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Ending point of the detected defect as distance in the optical path from the lightbox. if the defect is found at a specific location rather than a segment, then it can have the same value as the opticalPathDistanceStart.</summary>
        [System.Xml.Serialization.XmlElementAttribute("OpticalPathDistanceEnd")]
        [System.ComponentModel.DescriptionAttribute("Ending point of the detected defect as distance in the optical path from the ligh" +
            "tbox. if the defect is found at a specific location rather than a segment, then " +
            "it can have the same value as the opticalPathDistanceStart.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpticalPathDistanceEnd", DataType="LengthMeasure")]
        public LengthMeasure[] OpticalPathDistanceEnd {
            get {
                return this.opticalPathDistanceEndField;
            }
            set {
                this.opticalPathDistanceEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Enum. The type of defect on the optical path.</summary>
        [System.Xml.Serialization.XmlElementAttribute("DefectType")]
        [System.ComponentModel.DescriptionAttribute("Enum. The type of defect on the optical path.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DefectType", DataType="PathDefectTypes")]
        public PathDefectTypes[] DefectType {
            get {
                return this.defectTypeField;
            }
            set {
                this.defectTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date when the defect was detected.</summary>
        [System.Xml.Serialization.XmlElementAttribute("TimeStart")]
        [System.ComponentModel.DescriptionAttribute("Date when the defect was detected.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeStart", DataType="dateTime")]
        public System.DateTime[] TimeStart {
            get {
                return this.timeStartField;
            }
            set {
                this.timeStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date when the defect was no longer detected (or was corrected).</summary>
        [System.Xml.Serialization.XmlElementAttribute("TimeEnd")]
        [System.ComponentModel.DescriptionAttribute("Date when the defect was no longer detected (or was corrected).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeEnd", DataType="dateTime")]
        public System.DateTime[] TimeEnd {
            get {
                return this.timeEndField;
            }
            set {
                this.timeEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A descriptive remark about the defect found on this location.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Comment")]
        [System.ComponentModel.DescriptionAttribute("A descriptive remark about the defect found on this location.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string[] Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The unique identifier of this object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The unique identifier of this object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("defectID", DataType="String64")]
        public string defectID {
            get {
                return this.defectIDField;
            }
            set {
                this.defectIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum PathDefectTypes {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("darkened fiber")]
        darkenedfiber,
        
        /// <remarks/>
        other,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FiberOTDR {
        
        private string nameField;
        
        private OTDRReason reasonForRunField;
        
        private bool reasonForRunFieldSpecified;
        
        private System.DateTime dTimRunField;
        
        private string dataInOTDRFileField;
        
        private string oTDRImageFileField;
        
        private LengthMeasure opticalPathDistanceStartField;
        
        private LengthMeasure opticalPathDistanceEndField;
        
        private OTDRDirection directionField;
        
        private LengthMeasure wavelengthField;
        
        private FiberOTDRInstrumentBox fiberOTDRInstrumentBoxField;
        
        private BusinessAssociate measurementContactField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name of this object.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of this object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reason the OTDR test was run. Reasons include: - pre-installation, which is before the installation of the fiber  - post-installation, which is used to validate a successful fiber installation  - DTS run, a quality check of the fiber before a DTS run - Other</summary>
        [System.ComponentModel.DescriptionAttribute(@"The reason the OTDR test was run. Reasons include: - pre-installation, which is before the installation of the fiber  - post-installation, which is used to validate a successful fiber installation  - DTS run, a quality check of the fiber before a DTS run - Other")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReasonForRun", DataType="OTDRReason")]
        public OTDRReason ReasonForRun {
            get {
                return this.reasonForRunField;
            }
            set {
                this.reasonForRunField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReasonForRunSpecified {
            get {
                return this.reasonForRunFieldSpecified;
            }
            set {
                this.reasonForRunFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The dateTime of the run.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The dateTime of the run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimRun", DataType="dateTime")]
        public System.DateTime DTimRun {
            get {
                return this.dTimRunField;
            }
            set {
                this.dTimRunField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to the external file used to record the OTDR data. Note this file will not be in an Energistics format but likely in a special OTDR format.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A reference to the external file used to record the OTDR data. Note this file wil" +
            "l not be in an Energistics format but likely in a special OTDR format.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DataInOTDRFile", DataType="String64")]
        public string DataInOTDRFile {
            get {
                return this.dataInOTDRFileField;
            }
            set {
                this.dataInOTDRFileField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to the well log used to record the table of data.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A reference to the well log used to record the table of data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OTDRImageFile", DataType="String64")]
        public string OTDRImageFile {
            get {
                return this.oTDRImageFileField;
            }
            set {
                this.oTDRImageFileField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The point measured along the optical path at which this OTDR survey starts.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The point measured along the optical path at which this OTDR survey starts.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpticalPathDistanceStart", DataType="LengthMeasure")]
        public LengthMeasure OpticalPathDistanceStart {
            get {
                return this.opticalPathDistanceStartField;
            }
            set {
                this.opticalPathDistanceStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The point measured along the optical path at which this OTDR survey ends.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The point measured along the optical path at which this OTDR survey ends.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpticalPathDistanceEnd", DataType="LengthMeasure")]
        public LengthMeasure OpticalPathDistanceEnd {
            get {
                return this.opticalPathDistanceEndField;
            }
            set {
                this.opticalPathDistanceEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Enum. The direction of the OTDR survey. "Forward" means "in the same direction as the positive direction along the optical path".</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Enum. The direction of the OTDR survey. \"Forward\" means \"in the same direction as" +
            " the positive direction along the optical path\".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Direction", DataType="OTDRDirection")]
        public OTDRDirection Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The wavelength at which this OTDR survey was carried out.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The wavelength at which this OTDR survey was carried out.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wavelength", DataType="LengthMeasure")]
        public LengthMeasure Wavelength {
            get {
                return this.wavelengthField;
            }
            set {
                this.wavelengthField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FiberOTDRInstrumentBox", DataType="FiberOTDRInstrumentBox")]
        public FiberOTDRInstrumentBox FiberOTDRInstrumentBox {
            get {
                return this.fiberOTDRInstrumentBoxField;
            }
            set {
                this.fiberOTDRInstrumentBoxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Contact for the person who performed the OTDR reading</summary>
        [System.ComponentModel.DescriptionAttribute("Contact for the person who performed the OTDR reading")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasurementContact", DataType="BusinessAssociate")]
        public BusinessAssociate MeasurementContact {
            get {
                return this.measurementContactField;
            }
            set {
                this.measurementContactField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier of this object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier of this object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum OTDRReason {
        
        /// <remarks/>
        dts,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("post-installation")]
        postinstallation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pre-installation")]
        preinstallation,
        
        /// <remarks/>
        run,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum OTDRDirection {
        
        /// <remarks/>
        backward,
        
        /// <remarks/>
        forward,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class ProductVolume : AbstractObject {
        
        private FacilityIdentifierStruct installationField;
        
        private FacilityIdentifierStruct[] contextFacilityField;
        
        private string kindField;
        
        private ReportingDurationKind periodKindField;
        
        private bool periodKindFieldSpecified;
        
        private EndpointQualifiedDateTime dTimMinField;
        
        private EndpointQualifiedDateTime dTimMaxField;
        
        private System.DateTime dTimCurrentField;
        
        private bool dTimCurrentFieldSpecified;
        
        private CalculationMethod calculationMethodField;
        
        private bool calculationMethodFieldSpecified;
        
        private BusinessAssociate operatorField;
        
        private NameStruct titleField;
        
        private GeographicContext geographicContextField;
        
        private System.DateTime issueDateField;
        
        private bool issueDateFieldSpecified;
        
        private BusinessAssociate issuedByField;
        
        private System.DateTime approvalDateField;
        
        private bool approvalDateFieldSpecified;
        
        private BusinessAssociate approverField;
        
        private ReferenceCondition standardTempPresField;
        
        private bool standardTempPresFieldSpecified;
        
        private DataObjectReference productFlowModelField;
        
        private AbstractDateTimeClass dateTimeField;
        
        private ProductVolumeFacility[] facilityField;
        
        private ProductVolumeBusinessUnit[] businessUnitField;
        
        /// <remarks/>
        /// <summary>The name of the facility which is represented by this report. The name can be qualified by a naming system. This also defines the kind of facility.</summary>
        [System.ComponentModel.DescriptionAttribute("The name of the facility which is represented by this report. The name can be qua" +
            "lified by a naming system. This also defines the kind of facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Installation", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct Installation {
            get {
                return this.installationField;
            }
            set {
                this.installationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name and type of a facility whose context is relevant to the represented installation.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ContextFacility")]
        [System.ComponentModel.DescriptionAttribute("The name and type of a facility whose context is relevant to the represented inst" +
            "allation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContextFacility", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct[] ContextFacility {
            get {
                return this.contextFacilityField;
            }
            set {
                this.contextFacilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of report.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The type of report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="String64")]
        public string Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of period that is being reported. This value must be consistent with the reporting start and end values.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of period that is being reported. This value must be consistent with the" +
            " reporting start and end values.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PeriodKind", DataType="ReportingDurationKind")]
        public ReportingDurationKind PeriodKind {
            get {
                return this.periodKindField;
            }
            set {
                this.periodKindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PeriodKindSpecified {
            get {
                return this.periodKindFieldSpecified;
            }
            set {
                this.periodKindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The minimum time index contained within the report. For the purposes of this parameter, a "period" or "facility parameter" without any time data should be assumed to have the time associated with the overall report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a "get" result.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The minimum time index contained within the report. For the purposes of this parameter, a ""period"" or ""facility parameter"" without any time data should be assumed to have the time associated with the overall report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a ""get"" result.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimMin", DataType="EndpointQualifiedDateTime")]
        public EndpointQualifiedDateTime DTimMin {
            get {
                return this.dTimMinField;
            }
            set {
                this.dTimMinField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum time index contained within the report. For the purposes of this parameter, a "period" or "facility parameter" without any time data should be assumed to have the time associated with the overall report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a "get" result.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The maximum time index contained within the report. For the purposes of this parameter, a ""period"" or ""facility parameter"" without any time data should be assumed to have the time associated with the overall report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a ""get"" result.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimMax", DataType="EndpointQualifiedDateTime")]
        public EndpointQualifiedDateTime DTimMax {
            get {
                return this.dTimMaxField;
            }
            set {
                this.dTimMaxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The definition of the "current time" index for this report. The current time index is a server query parameter which requests the selection of a single node from a recurring "period" set (e.g., the data related to one point in a time series). For the purposes of this parameter, a "period" without any time data should be assumed to have the time associated with the overall report.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The definition of the ""current time"" index for this report. The current time index is a server query parameter which requests the selection of a single node from a recurring ""period"" set (e.g., the data related to one point in a time series). For the purposes of this parameter, a ""period"" without any time data should be assumed to have the time associated with the overall report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimCurrent", DataType="dateTime")]
        public System.DateTime DTimCurrent {
            get {
                return this.dTimCurrentField;
            }
            set {
                this.dTimCurrentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimCurrentSpecified {
            get {
                return this.dTimCurrentFieldSpecified;
            }
            set {
                this.dTimCurrentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The calculation method for  "filling in" values in an indexed set. If not given, the default is that no calculations are performed to create data where none exists within an existing set. This is not to be construed as to prevent concepts such as simulation and forecasting from being applied in order to create a new set. This is a server query parameter.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The calculation method for  ""filling in"" values in an indexed set. If not given, the default is that no calculations are performed to create data where none exists within an existing set. This is not to be construed as to prevent concepts such as simulation and forecasting from being applied in order to create a new set. This is a server query parameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalculationMethod", DataType="CalculationMethod")]
        public CalculationMethod CalculationMethod {
            get {
                return this.calculationMethodField;
            }
            set {
                this.calculationMethodField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CalculationMethodSpecified {
            get {
                return this.calculationMethodFieldSpecified;
            }
            set {
                this.calculationMethodFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The operator of the facilities in the report.</summary>
        [System.ComponentModel.DescriptionAttribute("The operator of the facilities in the report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Operator", DataType="BusinessAssociate")]
        public BusinessAssociate Operator {
            get {
                return this.operatorField;
            }
            set {
                this.operatorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The tile of the report if different from the name of the report.</summary>
        [System.ComponentModel.DescriptionAttribute("The tile of the report if different from the name of the report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Title", DataType="NameStruct")]
        public NameStruct Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The geographic context of the report.</summary>
        [System.ComponentModel.DescriptionAttribute("The geographic context of the report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeographicContext", DataType="GeographicContext")]
        public GeographicContext GeographicContext {
            get {
                return this.geographicContextField;
            }
            set {
                this.geographicContextField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date that the report was issued.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date that the report was issued.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IssueDate", DataType="date")]
        public System.DateTime IssueDate {
            get {
                return this.issueDateField;
            }
            set {
                this.issueDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IssueDateSpecified {
            get {
                return this.issueDateFieldSpecified;
            }
            set {
                this.issueDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The person or company that issued the report. This may contain the role of the person or company within the context of the report.</summary>
        [System.ComponentModel.DescriptionAttribute("The person or company that issued the report. This may contain the role of the pe" +
            "rson or company within the context of the report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IssuedBy", DataType="BusinessAssociate")]
        public BusinessAssociate IssuedBy {
            get {
                return this.issuedByField;
            }
            set {
                this.issuedByField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date that the report was approved.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date that the report was approved.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ApprovalDate", DataType="date")]
        public System.DateTime ApprovalDate {
            get {
                return this.approvalDateField;
            }
            set {
                this.approvalDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ApprovalDateSpecified {
            get {
                return this.approvalDateFieldSpecified;
            }
            set {
                this.approvalDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The person or company that approved the report. This may contain the role of the person or company within the context of the report.</summary>
        [System.ComponentModel.DescriptionAttribute("The person or company that approved the report. This may contain the role of the " +
            "person or company within the context of the report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Approver", DataType="BusinessAssociate")]
        public BusinessAssociate Approver {
            get {
                return this.approverField;
            }
            set {
                this.approverField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the default standard temperature and pressure to which all volumes, densities and flow rates in this report have been corrected. The default may be locally overridden for an individual value. If not specified, then the conditions must be presumed to be ambient conditions (i.e., uncorrected) unless otherwise specified at a local level.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Defines the default standard temperature and pressure to which all volumes, densities and flow rates in this report have been corrected. The default may be locally overridden for an individual value. If not specified, then the conditions must be presumed to be ambient conditions (i.e., uncorrected) unless otherwise specified at a local level.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StandardTempPres", DataType="ReferenceCondition")]
        public ReferenceCondition StandardTempPres {
            get {
                return this.standardTempPresField;
            }
            set {
                this.standardTempPresField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StandardTempPresSpecified {
            get {
                return this.standardTempPresFieldSpecified;
            }
            set {
                this.standardTempPresFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductFlowModel", DataType="DataObjectReference")]
        public DataObjectReference ProductFlowModel {
            get {
                return this.productFlowModelField;
            }
            set {
                this.productFlowModelField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DateTime", DataType="AbstractDateTimeClass")]
        public AbstractDateTimeClass DateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A facility for which product information is being reported.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Facility")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A facility for which product information is being reported.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Facility", DataType="ProductVolumeFacility")]
        public ProductVolumeFacility[] Facility {
            get {
                return this.facilityField;
            }
            set {
                this.facilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A business unit and related account or ownership share information.</summary>
        [System.Xml.Serialization.XmlElementAttribute("BusinessUnit")]
        [System.ComponentModel.DescriptionAttribute("A business unit and related account or ownership share information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BusinessUnit", DataType="ProductVolumeBusinessUnit")]
        public ProductVolumeBusinessUnit[] BusinessUnit {
            get {
                return this.businessUnitField;
            }
            set {
                this.businessUnitField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum CalculationMethod {
        
        /// <remarks/>
        none,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("step wise constant")]
        stepwiseconstant,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReferenceCondition {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0 degC 1 atm")]
        Item0degC1atm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0 degC 1 bar")]
        Item0degC1bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("15 degC 1 atm")]
        Item15degC1atm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("15 degC 1 bar")]
        Item15degC1bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("20 degC 1 atm")]
        Item20degC1atm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("20 degC 1 bar")]
        Item20degC1bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("25 degC 1 bar")]
        Item25degC1bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("60 degF 1 atm")]
        Item60degF1atm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("60 degF 30 in Hg")]
        Item60degF30inHg,
        
        /// <remarks/>
        ambient,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductVolumeFacility {
        
        private FacilityIdentifierStruct facilityParentField;
        
        private FacilityIdentifierStruct facilityParent2Field;
        
        private NameStruct[] facilityAliasField;
        
        private string unitField;
        
        private string netWorkField;
        
        private FacilityIdentifierStruct nameField;
        
        private WellStatus statusWellField;
        
        private bool statusWellFieldSpecified;
        
        private WellFluid fluidWellField;
        
        private bool fluidWellFieldSpecified;
        
        private WellOperationMethod operatingMethodField;
        
        private bool operatingMethodFieldSpecified;
        
        private bool wellProducingField;
        
        private bool wellProducingFieldSpecified;
        
        private bool wellInjectingField;
        
        private bool wellInjectingFieldSpecified;
        
        private VolumeMeasure capacityField;
        
        private TimeMeasure operationTimeField;
        
        private ProductVolumeFlow[] flowField;
        
        private ProductVolumeParameterSet[] parameterSetField;
        
        private DatedComment[] downtimeReasonField;
        
        private DatedComment[] commentField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Facility parent.</summary>
        [System.ComponentModel.DescriptionAttribute("Facility parent.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityParent", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct FacilityParent {
            get {
                return this.facilityParentField;
            }
            set {
                this.facilityParentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Facility parent2.</summary>
        [System.ComponentModel.DescriptionAttribute("Facility parent2.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityParent2", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct FacilityParent2 {
            get {
                return this.facilityParent2Field;
            }
            set {
                this.facilityParent2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An alternative name of a facility. This is generally unique within a naming system. The above contextually unique name (that is, within the context of a parent) should also be listed as an alias.</summary>
        [System.Xml.Serialization.XmlElementAttribute("FacilityAlias")]
        [System.ComponentModel.DescriptionAttribute("An alternative name of a facility. This is generally unique within a naming syste" +
            "m. The above contextually unique name (that is, within the context of a parent) " +
            "should also be listed as an alias.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityAlias", DataType="NameStruct")]
        public NameStruct[] FacilityAlias {
            get {
                return this.facilityAliasField;
            }
            set {
                this.facilityAliasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unit.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unit", DataType="String64")]
        public string Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Network.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Network.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NetWork", DataType="String64")]
        public string NetWork {
            get {
                return this.netWorkField;
            }
            set {
                this.netWorkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the facility. The name can be qualified by a naming system. This also defines the kind of facility.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The name of the facility. The name can be qualified by a naming system. This also" +
            " defines the kind of facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Status of the well.</summary>
        [System.ComponentModel.DescriptionAttribute("Status of the well.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StatusWell", DataType="WellStatus")]
        public WellStatus StatusWell {
            get {
                return this.statusWellField;
            }
            set {
                this.statusWellField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StatusWellSpecified {
            get {
                return this.statusWellFieldSpecified;
            }
            set {
                this.statusWellFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>POSC well fluid. The type of fluid being produced from or injected into a well facility.</summary>
        [System.ComponentModel.DescriptionAttribute("POSC well fluid. The type of fluid being produced from or injected into a well fa" +
            "cility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidWell", DataType="WellFluid")]
        public WellFluid FluidWell {
            get {
                return this.fluidWellField;
            }
            set {
                this.fluidWellField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FluidWellSpecified {
            get {
                return this.fluidWellFieldSpecified;
            }
            set {
                this.fluidWellFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The lift method being used to operate the well.</summary>
        [System.ComponentModel.DescriptionAttribute("The lift method being used to operate the well.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OperatingMethod", DataType="WellOperationMethod")]
        public WellOperationMethod OperatingMethod {
            get {
                return this.operatingMethodField;
            }
            set {
                this.operatingMethodField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OperatingMethodSpecified {
            get {
                return this.operatingMethodFieldSpecified;
            }
            set {
                this.operatingMethodFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True (or 1) indicates that the well is producing. False (or 0) or not given indicates that the well is not producing. This only applies if the facility is a well or wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("True (or 1) indicates that the well is producing. False (or 0) or not given indic" +
            "ates that the well is not producing. This only applies if the facility is a well" +
            " or wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellProducing", DataType="boolean")]
        public bool WellProducing {
            get {
                return this.wellProducingField;
            }
            set {
                this.wellProducingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WellProducingSpecified {
            get {
                return this.wellProducingFieldSpecified;
            }
            set {
                this.wellProducingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True (or 1) indicates that the well is injecting. False (or 0) or not given indicates that the well is not injecting. This only applies if the facility is a well or wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("True (or 1) indicates that the well is injecting. False (or 0) or not given indic" +
            "ates that the well is not injecting. This only applies if the facility is a well" +
            " or wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellInjecting", DataType="boolean")]
        public bool WellInjecting {
            get {
                return this.wellInjectingField;
            }
            set {
                this.wellInjectingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WellInjectingSpecified {
            get {
                return this.wellInjectingFieldSpecified;
            }
            set {
                this.wellInjectingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The storage capacity of the facility (e.g., a tank).</summary>
        [System.ComponentModel.DescriptionAttribute("The storage capacity of the facility (e.g., a tank).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Capacity", DataType="VolumeMeasure")]
        public VolumeMeasure Capacity {
            get {
                return this.capacityField;
            }
            set {
                this.capacityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of time that the facility was active during the reporting period.</summary>
        [System.ComponentModel.DescriptionAttribute("The amount of time that the facility was active during the reporting period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OperationTime", DataType="TimeMeasure")]
        public TimeMeasure OperationTime {
            get {
                return this.operationTimeField;
            }
            set {
                this.operationTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reports a flow of a product.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Flow")]
        [System.ComponentModel.DescriptionAttribute("Reports a flow of a product.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Flow", DataType="ProductVolumeFlow")]
        public ProductVolumeFlow[] Flow {
            get {
                return this.flowField;
            }
            set {
                this.flowField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ParameterSet")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParameterSet", DataType="ProductVolumeParameterSet")]
        public ProductVolumeParameterSet[] ParameterSet {
            get {
                return this.parameterSetField;
            }
            set {
                this.parameterSetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DowntimeReason")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DowntimeReason", DataType="DatedComment")]
        public DatedComment[] DowntimeReason {
            get {
                return this.downtimeReasonField;
            }
            set {
                this.downtimeReasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Comment")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="DatedComment")]
        public DatedComment[] Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum WellFluid {
        
        /// <remarks/>
        air,
        
        /// <remarks/>
        condensate,
        
        /// <remarks/>
        dry,
        
        /// <remarks/>
        gas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas-water")]
        gaswater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("non HC gas")]
        nonHCgas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("non HC gas -- CO2")]
        nonHCgasCO2,
        
        /// <remarks/>
        oil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil-gas")]
        oilgas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil-water")]
        oilwater,
        
        /// <remarks/>
        steam,
        
        /// <remarks/>
        water,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water -- brine")]
        waterbrine,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water -- fresh water")]
        waterfreshwater,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum WellOperationMethod {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("continuous gas lift")]
        continuousgaslift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric submersible pump lift")]
        electricsubmersiblepumplift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("foam lift")]
        foamlift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hydraulic pump lift")]
        hydraulicpumplift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("intermittent gas lift")]
        intermittentgaslift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("jet pump lift")]
        jetpumplift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("natural flow")]
        naturalflow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plunger gas lift")]
        plungergaslift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("progressive cavity pump lift")]
        progressivecavitypumplift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sucker rod pump lift")]
        suckerrodpumplift,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductVolumeFlow {
        
        private string nameField;
        
        private ReportingFlow kindField;
        
        private string portField;
        
        private ProductFlowPortType directionField;
        
        private bool directionFieldSpecified;
        
        private FacilityIdentifierStruct facilityField;
        
        private NameStruct[] facilityAliasField;
        
        private FlowQualifier qualifierField;
        
        private bool qualifierFieldSpecified;
        
        private FlowSubQualifier subQualifierField;
        
        private bool subQualifierFieldSpecified;
        
        private Energistics.DataAccess.Timestamp versionField;
        
        private bool versionFieldSpecified;
        
        private string versionSourceField;
        
        private string sourceFlowField;
        
        private ProductVolumeRelatedFacility relatedFacilityField;
        
        private ProductVolumeProduct[] productField;
        
        private CommonPropertiesProductVolume propertiesField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name of this flow within the context of this report. This might reflect some combination of the kind of flow, port, qualifier and related facility.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of this flow within the context of this report. This might reflect some " +
            "combination of the kind of flow, port, qualifier and related facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates the type of flow that is being reported. The type of flow is an indication of the overall source or target of the flow.  - A production flow has one or more wells as the originating source.  - An injection flow has one or more wells as the ultimate target.  - An import flow has an offsite source.  - An export flow has an offsite target. - A consumption flow generally has a kind of equipment as a target.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Indicates the type of flow that is being reported. The type of flow is an indication of the overall source or target of the flow.  - A production flow has one or more wells as the originating source.  - An injection flow has one or more wells as the ultimate target.  - An import flow has an offsite source.  - An export flow has an offsite target. - A consumption flow generally has a kind of equipment as a target.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="ReportingFlow")]
        public ReportingFlow Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Port.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Port.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Port", DataType="String64")]
        public string Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Direction.</summary>
        [System.ComponentModel.DescriptionAttribute("Direction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Direction", DataType="ProductFlowPortType")]
        public ProductFlowPortType Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectionSpecified {
            get {
                return this.directionFieldSpecified;
            }
            set {
                this.directionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Facility.</summary>
        [System.ComponentModel.DescriptionAttribute("Facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Facility", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct Facility {
            get {
                return this.facilityField;
            }
            set {
                this.facilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Facility alias.</summary>
        [System.Xml.Serialization.XmlElementAttribute("FacilityAlias")]
        [System.ComponentModel.DescriptionAttribute("Facility alias.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityAlias", DataType="NameStruct")]
        public NameStruct[] FacilityAlias {
            get {
                return this.facilityAliasField;
            }
            set {
                this.facilityAliasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Qualifies the type of flow that is being reported.</summary>
        [System.ComponentModel.DescriptionAttribute("Qualifies the type of flow that is being reported.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Qualifier", DataType="FlowQualifier")]
        public FlowQualifier Qualifier {
            get {
                return this.qualifierField;
            }
            set {
                this.qualifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QualifierSpecified {
            get {
                return this.qualifierFieldSpecified;
            }
            set {
                this.qualifierFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines a specialization of the qualifier value. This should only be given if a qualifier is given.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines a specialization of the qualifier value. This should only be given if a q" +
            "ualifier is given.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SubQualifier", DataType="FlowSubQualifier")]
        public FlowSubQualifier SubQualifier {
            get {
                return this.subQualifierField;
            }
            set {
                this.subQualifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SubQualifierSpecified {
            get {
                return this.subQualifierFieldSpecified;
            }
            set {
                this.subQualifierFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Version.</summary>
        [System.ComponentModel.DescriptionAttribute("Version.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Version", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VersionSpecified {
            get {
                return this.versionFieldSpecified;
            }
            set {
                this.versionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Identifies the source of the version. This will commonly be the name of the software which created the version.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Identifies the source of the version. This will commonly be the name of the softw" +
            "are which created the version.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VersionSource", DataType="String64")]
        public string VersionSource {
            get {
                return this.versionSourceField;
            }
            set {
                this.versionSourceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This is a pointer to the flow from which this flow was derived.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("This is a pointer to the flow from which this flow was derived.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SourceFlow", DataType="String64")]
        public string SourceFlow {
            get {
                return this.sourceFlowField;
            }
            set {
                this.sourceFlowField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RelatedFacility", DataType="ProductVolumeRelatedFacility")]
        public ProductVolumeRelatedFacility RelatedFacility {
            get {
                return this.relatedFacilityField;
            }
            set {
                this.relatedFacilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reports a product flow stream.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Product")]
        [System.ComponentModel.DescriptionAttribute("Reports a product flow stream.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Product", DataType="ProductVolumeProduct")]
        public ProductVolumeProduct[] Product {
            get {
                return this.productField;
            }
            set {
                this.productField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Properties", DataType="CommonPropertiesProductVolume")]
        public CommonPropertiesProductVolume Properties {
            get {
                return this.propertiesField;
            }
            set {
                this.propertiesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum FlowSubQualifier {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("decline curve")]
        declinecurve,
        
        /// <remarks/>
        difference,
        
        /// <remarks/>
        fiscal,
        
        /// <remarks/>
        @fixed,
        
        /// <remarks/>
        maximum,
        
        /// <remarks/>
        minimum,
        
        /// <remarks/>
        raw,
        
        /// <remarks/>
        recalibrated,
        
        /// <remarks/>
        standard,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductVolumeRelatedFacility {
        
        private ReportingFacility kindField;
        
        private bool kindFieldSpecified;
        
        private AbstractRelatedFacilityObject relatedFacilityObjectField;
        
        /// <remarks/>
        /// <summary>A kind of facility where the specific name is not relevant.</summary>
        [System.ComponentModel.DescriptionAttribute("A kind of facility where the specific name is not relevant.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="ReportingFacility")]
        public ReportingFacility Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KindSpecified {
            get {
                return this.kindFieldSpecified;
            }
            set {
                this.kindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RelatedFacilityObject", DataType="AbstractRelatedFacilityObject")]
        public AbstractRelatedFacilityObject RelatedFacilityObject {
            get {
                return this.relatedFacilityObjectField;
            }
            set {
                this.relatedFacilityObjectField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FacilityUnitPort))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FacilityParent))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractRelatedFacilityObject {
        
        private FacilityParent facilityParentField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityParent", DataType="FacilityParent")]
        public FacilityParent FacilityParent {
            get {
                return this.facilityParentField;
            }
            set {
                this.facilityParentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FacilityParent : AbstractRelatedFacilityObject {
        
        private FacilityIdentifierStruct nameField;
        
        private FacilityIdentifierStruct facilityParent1Field;
        
        private FacilityIdentifierStruct facilityParent2Field;
        
        /// <remarks/>
        /// <summary>The name of the facility. The name can be qualified by a naming system. This can also define the kind of facility.</summary>
        [System.ComponentModel.DescriptionAttribute("The name of the facility. The name can be qualified by a naming system. This can " +
            "also define the kind of facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>For facilities whose name is unique within the context of another facility, the name of the parent facility. The name can be qualified by a naming system. This also defines the kind of facility.</summary>
        [System.ComponentModel.DescriptionAttribute("For facilities whose name is unique within the context of another facility, the n" +
            "ame of the parent facility. The name can be qualified by a naming system. This a" +
            "lso defines the kind of facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityParent1", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct FacilityParent1 {
            get {
                return this.facilityParent1Field;
            }
            set {
                this.facilityParent1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>For facilities whose name is unique within the context of another facility, the name of the parent facility of parent1. The name can be qualified by a naming system. This also defines the kind of facility.</summary>
        [System.ComponentModel.DescriptionAttribute("For facilities whose name is unique within the context of another facility, the n" +
            "ame of the parent facility of parent1. The name can be qualified by a naming sys" +
            "tem. This also defines the kind of facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacilityParent2", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct FacilityParent2 {
            get {
                return this.facilityParent2Field;
            }
            set {
                this.facilityParent2Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class FacilityUnitPort : AbstractRelatedFacilityObject {
        
        private string portReferenceField;
        
        private string unitReferenceField;
        
        private string networkReferenceField;
        
        /// <remarks/>
        /// <summary>The product flow port associated with the product flow unit.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The product flow port associated with the product flow unit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PortReference", DataType="String64")]
        public string PortReference {
            get {
                return this.portReferenceField;
            }
            set {
                this.portReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The product flow unit representing the facility.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The product flow unit representing the facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UnitReference", DataType="String64")]
        public string UnitReference {
            get {
                return this.unitReferenceField;
            }
            set {
                this.unitReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The product flow network representing the facility. This is only required if the network is not the same as the primary network that represents the Product Flow Model. This must be unique within the context of the product flow model represented by this report.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"The product flow network representing the facility. This is only required if the network is not the same as the primary network that represents the Product Flow Model. This must be unique within the context of the product flow model represented by this report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NetworkReference", DataType="String64")]
        public string NetworkReference {
            get {
                return this.networkReferenceField;
            }
            set {
                this.networkReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductVolumeProduct {
        
        private ReportingProduct kindField;
        
        private NameStruct nameField;
        
        private float splitFactorField;
        
        private bool splitFactorFieldSpecified;
        
        private MassPerMassMeasure massFractionField;
        
        private AmountOfSubstancePerAmountOfSubstanceMeasure moleFractionField;
        
        private ProductVolumeComponentContent[] componentContentField;
        
        private AbstractRefProductFlow sourceFlowField;
        
        private ProductVolumePeriod[] periodField;
        
        private CommonPropertiesProductVolume propertiesField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The type of product that is being reported.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The type of product that is being reported.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="ReportingProduct")]
        public ReportingProduct Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of product that is being reported. This is reserved for generic kinds like chemical.</summary>
        [System.ComponentModel.DescriptionAttribute("The name of product that is being reported. This is reserved for generic kinds li" +
            "ke chemical.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="NameStruct")]
        public NameStruct Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This factor describes the fraction of fluid in the source flow that is allocated to this product stream. The volumes reported here are derived from the source flow based on this split factor. This should be an allocation flow.</summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(0D, 1D)]
        [System.ComponentModel.DescriptionAttribute("This factor describes the fraction of fluid in the source flow that is allocated " +
            "to this product stream. The volumes reported here are derived from the source fl" +
            "ow based on this split factor. This should be an allocation flow.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SplitFactor", DataType="NonNegativeFraction")]
        public float SplitFactor {
            get {
                return this.splitFactorField;
            }
            set {
                this.splitFactorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SplitFactorSpecified {
            get {
                return this.splitFactorFieldSpecified;
            }
            set {
                this.splitFactorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The weight fraction of the product.</summary>
        [System.ComponentModel.DescriptionAttribute("The weight fraction of the product.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassFraction", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure MassFraction {
            get {
                return this.massFractionField;
            }
            set {
                this.massFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mole fraction of the product.</summary>
        [System.ComponentModel.DescriptionAttribute("The mole fraction of the product.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MoleFraction", DataType="AmountOfSubstancePerAmountOfSubstanceMeasure")]
        public AmountOfSubstancePerAmountOfSubstanceMeasure MoleFraction {
            get {
                return this.moleFractionField;
            }
            set {
                this.moleFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The relative amount of a component product in the product stream.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ComponentContent")]
        [System.ComponentModel.DescriptionAttribute("The relative amount of a component product in the product stream.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ComponentContent", DataType="ProductVolumeComponentContent")]
        public ProductVolumeComponentContent[] ComponentContent {
            get {
                return this.componentContentField;
            }
            set {
                this.componentContentField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SourceFlow", DataType="AbstractRefProductFlow")]
        public AbstractRefProductFlow SourceFlow {
            get {
                return this.sourceFlowField;
            }
            set {
                this.sourceFlowField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Product amounts for a specific period.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Period")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Product amounts for a specific period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Period", DataType="ProductVolumePeriod")]
        public ProductVolumePeriod[] Period {
            get {
                return this.periodField;
            }
            set {
                this.periodField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Properties", DataType="CommonPropertiesProductVolume")]
        public CommonPropertiesProductVolume Properties {
            get {
                return this.propertiesField;
            }
            set {
                this.propertiesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductVolumeComponentContent {
        
        private ReportingProduct kindField;
        
        private ReportingProduct referenceKindField;
        
        private bool referenceKindFieldSpecified;
        
        private CommonPropertiesProductVolume propertiesField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The type of product whose relative content is being described. This should be a specific component (e.g., water) rather than a phase (e.g., aqueous).</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The type of product whose relative content is being described. This should be a s" +
            "pecific component (e.g., water) rather than a phase (e.g., aqueous).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="ReportingProduct")]
        public ReportingProduct Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of product to which the product is being compared. If not given then the product is being compared against the overall flow stream.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of product to which the product is being compared. If not given then the" +
            " product is being compared against the overall flow stream.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferenceKind", DataType="ReportingProduct")]
        public ReportingProduct ReferenceKind {
            get {
                return this.referenceKindField;
            }
            set {
                this.referenceKindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReferenceKindSpecified {
            get {
                return this.referenceKindFieldSpecified;
            }
            set {
                this.referenceKindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Properties", DataType="CommonPropertiesProductVolume")]
        public CommonPropertiesProductVolume Properties {
            get {
                return this.propertiesField;
            }
            set {
                this.propertiesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class CommonPropertiesProductVolume {
        
        private VolumePerVolumeMeasure gorField;
        
        private VolumePerVolumeMeasure gorMTDField;
        
        private VolumePerVolumeMeasure gasLiquidRatioField;
        
        private MassPerMassMeasure waterConcMassField;
        
        private VolumePerVolumeMeasure waterConcVolField;
        
        private PressureMeasure atmosphereField;
        
        private ThermodynamicTemperatureMeasure tempField;
        
        private PressureMeasure presField;
        
        private PressureMeasure absoluteMinPresField;
        
        private MassMeasure massField;
        
        private EnergyMeasure workField;
        
        private VolumePerVolumeMeasure efficiencyField;
        
        private PressureMeasure rvpField;
        
        private PressureMeasure tvpField;
        
        private VolumePerVolumeMeasure bswField;
        
        private VolumePerVolumeMeasure bswPreviousField;
        
        private MassPerTimeMeasure densityFlowRateField;
        
        private VolumePerVolumeMeasure concentrationField;
        
        private MolecularWeightMeasure molecularWeightField;
        
        private MassPerMassMeasure weightPercentField;
        
        private AmountOfSubstancePerAmountOfSubstanceMeasure molePercentField;
        
        private AmountOfSubstanceMeasure moleAmtField;
        
        private DimensionlessMeasure sgField;
        
        private ThermodynamicTemperatureMeasure hcDewpointField;
        
        private ThermodynamicTemperatureMeasure waterDewpointField;
        
        private IsothermalCompressibilityMeasure wobbeIndexField;
        
        private EnergyPerVolumeMeasure grossCalorificValueStdField;
        
        private PressureMeasure rvpStabilizedCrudeField;
        
        private VolumePerVolumeMeasure bswStabilizedCrudeField;
        
        private MassPerVolumeMeasure densityStabilizedCrudeField;
        
        private DensityValue[] densityValueField;
        
        private ProductVolumePortDifference[] portDiffField;
        
        private VolumeValue[] volumeValueField;
        
        private FlowRateValue[] flowRateValueField;
        
        /// <remarks/>
        /// <summary>Gas oil ratio. The ratio between the total produced gas volume and the total produced oil volume including oil and gas volumes used on the installation.</summary>
        [System.ComponentModel.DescriptionAttribute("Gas oil ratio. The ratio between the total produced gas volume and the total prod" +
            "uced oil volume including oil and gas volumes used on the installation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Gor", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Gor {
            get {
                return this.gorField;
            }
            set {
                this.gorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gas oil ratio month to date. The gas oil ratio from the beginning of the month to the end of the reporting period.</summary>
        [System.ComponentModel.DescriptionAttribute("Gas oil ratio month to date. The gas oil ratio from the beginning of the month to" +
            " the end of the reporting period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GorMTD", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure GorMTD {
            get {
                return this.gorMTDField;
            }
            set {
                this.gorMTDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volumetric ratio of gas to liquid for all products in the whole flow.</summary>
        [System.ComponentModel.DescriptionAttribute("The volumetric ratio of gas to liquid for all products in the whole flow.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasLiquidRatio", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure GasLiquidRatio {
            get {
                return this.gasLiquidRatioField;
            }
            set {
                this.gasLiquidRatioField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Water concentration mass basis. The ratio of water produced compared to the mass of total liquids produced.</summary>
        [System.ComponentModel.DescriptionAttribute("Water concentration mass basis. The ratio of water produced compared to the mass " +
            "of total liquids produced.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterConcMass", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure WaterConcMass {
            get {
                return this.waterConcMassField;
            }
            set {
                this.waterConcMassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Water concentration volume basis. The ratio of water produced compared to the mass of total liquids produced.</summary>
        [System.ComponentModel.DescriptionAttribute("Water concentration volume basis. The ratio of water produced compared to the mas" +
            "s of total liquids produced.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterConcVol", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure WaterConcVol {
            get {
                return this.waterConcVolField;
            }
            set {
                this.waterConcVolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average atmospheric pressure during the reporting period.</summary>
        [System.ComponentModel.DescriptionAttribute("The average atmospheric pressure during the reporting period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Atmosphere", DataType="PressureMeasure")]
        public PressureMeasure Atmosphere {
            get {
                return this.atmosphereField;
            }
            set {
                this.atmosphereField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Temperature of the port. Specifying the temperature here (as opposed to in Period) implies that the temperature is constant for all periods of the flow.</summary>
        [System.ComponentModel.DescriptionAttribute("Temperature of the port. Specifying the temperature here (as opposed to in Period" +
            ") implies that the temperature is constant for all periods of the flow.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Temp", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure Temp {
            get {
                return this.tempField;
            }
            set {
                this.tempField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pressure of the port. Specifying the pressure here (as opposed to in Period) implies that the pressure is constant for all periods of the flow.</summary>
        [System.ComponentModel.DescriptionAttribute("Pressure of the port. Specifying the pressure here (as opposed to in Period) impl" +
            "ies that the pressure is constant for all periods of the flow.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pres", DataType="PressureMeasure")]
        public PressureMeasure Pres {
            get {
                return this.presField;
            }
            set {
                this.presField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Absolute minimum pressure before the system will give an alarm.</summary>
        [System.ComponentModel.DescriptionAttribute("Absolute minimum pressure before the system will give an alarm.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AbsoluteMinPres", DataType="PressureMeasure")]
        public PressureMeasure AbsoluteMinPres {
            get {
                return this.absoluteMinPresField;
            }
            set {
                this.absoluteMinPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mass of the product.</summary>
        [System.ComponentModel.DescriptionAttribute("The mass of the product.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mass", DataType="MassMeasure")]
        public MassMeasure Mass {
            get {
                return this.massField;
            }
            set {
                this.massField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The electrical energy represented by the product.</summary>
        [System.ComponentModel.DescriptionAttribute("The electrical energy represented by the product.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Work", DataType="EnergyMeasure")]
        public EnergyMeasure Work {
            get {
                return this.workField;
            }
            set {
                this.workField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The actual volume divided by the potential volume.</summary>
        [System.ComponentModel.DescriptionAttribute("The actual volume divided by the potential volume.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Efficiency", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Efficiency {
            get {
                return this.efficiencyField;
            }
            set {
                this.efficiencyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reid vapor pressure of the product. The absolute vapor pressure of volatile crude oil and volatile petroleum liquids, except liquefied petroleum gases, as determined in accordance with American Society for Testing and Materials under the designation ASTM D323-56.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Reid vapor pressure of the product. The absolute vapor pressure of volatile crude oil and volatile petroleum liquids, except liquefied petroleum gases, as determined in accordance with American Society for Testing and Materials under the designation ASTM D323-56.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Rvp", DataType="PressureMeasure")]
        public PressureMeasure Rvp {
            get {
                return this.rvpField;
            }
            set {
                this.rvpField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vapor pressure of the product. The equilibrium partial pressure exerted by a petroleum liquid as determined in accordance with standard methods.</summary>
        [System.ComponentModel.DescriptionAttribute("True vapor pressure of the product. The equilibrium partial pressure exerted by a" +
            " petroleum liquid as determined in accordance with standard methods.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tvp", DataType="PressureMeasure")]
        public PressureMeasure Tvp {
            get {
                return this.tvpField;
            }
            set {
                this.tvpField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Basic sediment and water is measured from a liquid sample of the production stream. It includes free water, sediment and emulsion and is measured as a volume percentage of the production stream.</summary>
        [System.ComponentModel.DescriptionAttribute("Basic sediment and water is measured from a liquid sample of the production strea" +
            "m. It includes free water, sediment and emulsion and is measured as a volume per" +
            "centage of the production stream.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Bsw", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Bsw {
            get {
                return this.bswField;
            }
            set {
                this.bswField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The basic sediment and water as measured on the previous reporting period (e.g., day).</summary>
        [System.ComponentModel.DescriptionAttribute("The basic sediment and water as measured on the previous reporting period (e.g., " +
            "day).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BswPrevious", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure BswPrevious {
            get {
                return this.bswPreviousField;
            }
            set {
                this.bswPreviousField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mass basis flow rate of the product. This is used for things like a sand component.</summary>
        [System.ComponentModel.DescriptionAttribute("The mass basis flow rate of the product. This is used for things like a sand comp" +
            "onent.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensityFlowRate", DataType="MassPerTimeMeasure")]
        public MassPerTimeMeasure DensityFlowRate {
            get {
                return this.densityFlowRateField;
            }
            set {
                this.densityFlowRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The concentration of the product as a volume percentage of the product stream.</summary>
        [System.ComponentModel.DescriptionAttribute("The concentration of the product as a volume percentage of the product stream.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Concentration", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Concentration {
            get {
                return this.concentrationField;
            }
            set {
                this.concentrationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The molecular weight of the product.</summary>
        [System.ComponentModel.DescriptionAttribute("The molecular weight of the product.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MolecularWeight", DataType="MolecularWeightMeasure")]
        public MolecularWeightMeasure MolecularWeight {
            get {
                return this.molecularWeightField;
            }
            set {
                this.molecularWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The weight fraction of the product.</summary>
        [System.ComponentModel.DescriptionAttribute("The weight fraction of the product.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WeightPercent", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure WeightPercent {
            get {
                return this.weightPercentField;
            }
            set {
                this.weightPercentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mole fraction of the product.</summary>
        [System.ComponentModel.DescriptionAttribute("The mole fraction of the product.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MolePercent", DataType="AmountOfSubstancePerAmountOfSubstanceMeasure")]
        public AmountOfSubstancePerAmountOfSubstanceMeasure MolePercent {
            get {
                return this.molePercentField;
            }
            set {
                this.molePercentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The molar amount.</summary>
        [System.ComponentModel.DescriptionAttribute("The molar amount.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MoleAmt", DataType="AmountOfSubstanceMeasure")]
        public AmountOfSubstanceMeasure MoleAmt {
            get {
                return this.moleAmtField;
            }
            set {
                this.moleAmtField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The specific gravity of the product.</summary>
        [System.ComponentModel.DescriptionAttribute("The specific gravity of the product.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sg", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure Sg {
            get {
                return this.sgField;
            }
            set {
                this.sgField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature at which the heavier hydrocarbons come out of solution.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature at which the heavier hydrocarbons come out of solution.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HcDewpoint", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure HcDewpoint {
            get {
                return this.hcDewpointField;
            }
            set {
                this.hcDewpointField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature at which the first water comes out of solution.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature at which the first water comes out of solution.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterDewpoint", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure WaterDewpoint {
            get {
                return this.waterDewpointField;
            }
            set {
                this.waterDewpointField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicator value of the interchangeability of fuel gases.</summary>
        [System.ComponentModel.DescriptionAttribute("Indicator value of the interchangeability of fuel gases.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WobbeIndex", DataType="IsothermalCompressibilityMeasure")]
        public IsothermalCompressibilityMeasure WobbeIndex {
            get {
                return this.wobbeIndexField;
            }
            set {
                this.wobbeIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of heat that would be released by the complete combustion in air of a specific quantity of product at standard temperature and pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("The amount of heat that would be released by the complete combustion in air of a " +
            "specific quantity of product at standard temperature and pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GrossCalorificValueStd", DataType="EnergyPerVolumeMeasure")]
        public EnergyPerVolumeMeasure GrossCalorificValueStd {
            get {
                return this.grossCalorificValueStdField;
            }
            set {
                this.grossCalorificValueStdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reid vapor pressure of stabilized crude.</summary>
        [System.ComponentModel.DescriptionAttribute("Reid vapor pressure of stabilized crude.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RvpStabilizedCrude", DataType="PressureMeasure")]
        public PressureMeasure RvpStabilizedCrude {
            get {
                return this.rvpStabilizedCrudeField;
            }
            set {
                this.rvpStabilizedCrudeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Basic sediment and water content in stabilized crude.</summary>
        [System.ComponentModel.DescriptionAttribute("Basic sediment and water content in stabilized crude.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BswStabilizedCrude", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure BswStabilizedCrude {
            get {
                return this.bswStabilizedCrudeField;
            }
            set {
                this.bswStabilizedCrudeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of stabilized crude.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of stabilized crude.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensityStabilizedCrude", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensityStabilizedCrude {
            get {
                return this.densityStabilizedCrudeField;
            }
            set {
                this.densityStabilizedCrudeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DensityValue")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensityValue", DataType="DensityValue")]
        public DensityValue[] DensityValue {
            get {
                return this.densityValueField;
            }
            set {
                this.densityValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The internal differences between this port and one other port on this unit.</summary>
        [System.Xml.Serialization.XmlElementAttribute("PortDiff")]
        [System.ComponentModel.DescriptionAttribute("The internal differences between this port and one other port on this unit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PortDiff", DataType="ProductVolumePortDifference")]
        public ProductVolumePortDifference[] PortDiff {
            get {
                return this.portDiffField;
            }
            set {
                this.portDiffField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("VolumeValue")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeValue", DataType="VolumeValue")]
        public VolumeValue[] VolumeValue {
            get {
                return this.volumeValueField;
            }
            set {
                this.volumeValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("FlowRateValue")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowRateValue", DataType="FlowRateValue")]
        public FlowRateValue[] FlowRateValue {
            get {
                return this.flowRateValueField;
            }
            set {
                this.flowRateValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class IsothermalCompressibilityMeasure {
        
        private IsothermalCompressibilityUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="IsothermalCompressibilityUom")]
        public IsothermalCompressibilityUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum IsothermalCompressibilityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/(kW.h)")]
        dm3kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/MJ")]
        dm3MJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kW.h)")]
        m3kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/J")]
        m3J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm3/J")]
        mm3J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[UK]/(hp.h)")]
        ptUKhph,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class DensityValue {
        
        private MassPerVolumeMeasure densityField;
        
        private AbstractTemperaturePressure measurementPressureTemperatureField;
        
        /// <remarks/>
        /// <summary>The density of the product.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The density of the product.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Density", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Density {
            get {
                return this.densityField;
            }
            set {
                this.densityField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasurementPressureTemperature", DataType="AbstractTemperaturePressure")]
        public AbstractTemperaturePressure MeasurementPressureTemperature {
            get {
                return this.measurementPressureTemperatureField;
            }
            set {
                this.measurementPressureTemperatureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductVolumePortDifference {
        
        private string portReferenceField;
        
        private PressureMeasure presDiffField;
        
        private ThermodynamicTemperatureMeasure tempDiffField;
        
        private LengthMeasure chokeSizeField;
        
        private LengthPerLengthMeasure chokeRelativeField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A port on the other end of an internal connection. This should always be specified if a product flow network is being referenced by this report. If this is not specified then there is an assumption that there is only one other port for the unit. For example, if this end of the connection represents an inlet port then the implied other end is the outlet port for the unit.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"A port on the other end of an internal connection. This should always be specified if a product flow network is being referenced by this report. If this is not specified then there is an assumption that there is only one other port for the unit. For example, if this end of the connection represents an inlet port then the implied other end is the outlet port for the unit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PortReference", DataType="String64")]
        public string PortReference {
            get {
                return this.portReferenceField;
            }
            set {
                this.portReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The differential pressure between the ports.</summary>
        [System.ComponentModel.DescriptionAttribute("The differential pressure between the ports.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresDiff", DataType="PressureMeasure")]
        public PressureMeasure PresDiff {
            get {
                return this.presDiffField;
            }
            set {
                this.presDiffField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The differential temperature between the ports.</summary>
        [System.ComponentModel.DescriptionAttribute("The differential temperature between the ports.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempDiff", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempDiff {
            get {
                return this.tempDiffField;
            }
            set {
                this.tempDiffField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The size of the choke. This characterizes the overall unit with respect to the flow restriction between the ports. The restriction might be implemented using a valve or an actual choke.</summary>
        [System.ComponentModel.DescriptionAttribute("The size of the choke. This characterizes the overall unit with respect to the fl" +
            "ow restriction between the ports. The restriction might be implemented using a v" +
            "alve or an actual choke.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChokeSize", DataType="LengthMeasure")]
        public LengthMeasure ChokeSize {
            get {
                return this.chokeSizeField;
            }
            set {
                this.chokeSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The relative size of the choke restriction. This characterizes the overall unit with respect to the flow restriction between the ports. The restriction might be implemented using a valve or an actual choke.</summary>
        [System.ComponentModel.DescriptionAttribute("The relative size of the choke restriction. This characterizes the overall unit w" +
            "ith respect to the flow restriction between the ports. The restriction might be " +
            "implemented using a valve or an actual choke.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChokeRelative", DataType="LengthPerLengthMeasure")]
        public LengthPerLengthMeasure ChokeRelative {
            get {
                return this.chokeRelativeField;
            }
            set {
                this.chokeRelativeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class FlowRateValue {
        
        private VolumePerTimeMeasure flowRateField;
        
        private AbstractTemperaturePressure measurementPressureTemperatureField;
        
        /// <remarks/>
        /// <summary>The flow rate of the product. If the 'status' attribute is absent and the value is not "NaN", the data value can be assumed to be good with no restrictions. A value of "NaN" should be interpreted as null and should be not be given unless a status is also specified to explain why it is null.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The flow rate of the product. If the 'status' attribute is absent and the value is not ""NaN"", the data value can be assumed to be good with no restrictions. A value of ""NaN"" should be interpreted as null and should be not be given unless a status is also specified to explain why it is null.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowRate {
            get {
                return this.flowRateField;
            }
            set {
                this.flowRateField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasurementPressureTemperature", DataType="AbstractTemperaturePressure")]
        public AbstractTemperaturePressure MeasurementPressureTemperature {
            get {
                return this.measurementPressureTemperatureField;
            }
            set {
                this.measurementPressureTemperatureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReferenceFlow))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Parentfacility))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractRefProductFlow {
        
        private object itemField;
        
        /// <remarks/>
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ReferenceFlow : AbstractRefProductFlow {
        
        private string flowReferenceField;
        
        /// <remarks/>
        /// <summary>A pointer to the flow within the facility.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the flow within the facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowReference", DataType="String64")]
        public string FlowReference {
            get {
                return this.flowReferenceField;
            }
            set {
                this.flowReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class Parentfacility : AbstractRefProductFlow {
        
        private string parentfacilityReferenceField;
        
        /// <remarks/>
        /// <summary>A reference to a flow within the current product volume report. This represents a foreign key from one element to another.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A reference to a flow within the current product volume report. This represents a" +
            " foreign key from one element to another.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentfacilityReference", DataType="String64")]
        public string ParentfacilityReference {
            get {
                return this.parentfacilityReferenceField;
            }
            set {
                this.parentfacilityReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductVolumePeriod {
        
        private ReportingDurationKind kindField;
        
        private bool kindFieldSpecified;
        
        private DatedComment[] commentField;
        
        private ProductVolumeBalanceSet[] balanceSetField;
        
        private ProductVolumeComponentContent[] componentContentField;
        
        private AbstractDateTimeClass dateTimeField;
        
        private CommonPropertiesProductVolume propertiesField;
        
        private ProductVolumeAlert alertField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The type of period that is being reported. If not specified and a time is not given then the period is defined by the reporting period.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of period that is being reported. If not specified and a time is not giv" +
            "en then the period is defined by the reporting period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="ReportingDurationKind")]
        public ReportingDurationKind Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KindSpecified {
            get {
                return this.kindFieldSpecified;
            }
            set {
                this.kindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A time-stamped remark about the amounts.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Comment")]
        [System.ComponentModel.DescriptionAttribute("A time-stamped remark about the amounts.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="DatedComment")]
        public DatedComment[] Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Provides the sales context for this period.</summary>
        [System.Xml.Serialization.XmlElementAttribute("BalanceSet")]
        [System.ComponentModel.DescriptionAttribute("Provides the sales context for this period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BalanceSet", DataType="ProductVolumeBalanceSet")]
        public ProductVolumeBalanceSet[] BalanceSet {
            get {
                return this.balanceSetField;
            }
            set {
                this.balanceSetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The relative amount of a component product in the product stream.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ComponentContent")]
        [System.ComponentModel.DescriptionAttribute("The relative amount of a component product in the product stream.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ComponentContent", DataType="ProductVolumeComponentContent")]
        public ProductVolumeComponentContent[] ComponentContent {
            get {
                return this.componentContentField;
            }
            set {
                this.componentContentField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DateTime", DataType="AbstractDateTimeClass")]
        public AbstractDateTimeClass DateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Properties", DataType="CommonPropertiesProductVolume")]
        public CommonPropertiesProductVolume Properties {
            get {
                return this.propertiesField;
            }
            set {
                this.propertiesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An indication of some sort of abnormal condition relative the values in this period.</summary>
        [System.ComponentModel.DescriptionAttribute("An indication of some sort of abnormal condition relative the values in this peri" +
            "od.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Alert", DataType="ProductVolumeAlert")]
        public ProductVolumeAlert Alert {
            get {
                return this.alertField;
            }
            set {
                this.alertField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductVolumeBalanceSet {
        
        private BalanceFlowPart kindField;
        
        private bool kindFieldSpecified;
        
        private string cargoNumberField;
        
        private string cargoBatchNumberField;
        
        private string shipperField;
        
        private ProductVolumeBalanceDetail[] balanceDetailField;
        
        private ProductVolumeDestination destinationField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Defines the aspect being described.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines the aspect being described.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="BalanceFlowPart")]
        public BalanceFlowPart Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KindSpecified {
            get {
                return this.kindFieldSpecified;
            }
            set {
                this.kindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A cargo identifier for the product.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A cargo identifier for the product.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CargoNumber", DataType="String64")]
        public string CargoNumber {
            get {
                return this.cargoNumberField;
            }
            set {
                this.cargoNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A cargo batch number. Used if the vessel needs to temporarily disconnect for some reason (e.g., weather).</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DescriptionAttribute("A cargo batch number. Used if the vessel needs to temporarily disconnect for some" +
            " reason (e.g., weather).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CargoBatchNumber", DataType="nonNegativeInteger")]
        public string CargoBatchNumber {
            get {
                return this.cargoBatchNumberField;
            }
            set {
                this.cargoBatchNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the shipper</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the shipper")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Shipper", DataType="String64")]
        public string Shipper {
            get {
                return this.shipperField;
            }
            set {
                this.shipperField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BalanceDetail")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BalanceDetail", DataType="ProductVolumeBalanceDetail")]
        public ProductVolumeBalanceDetail[] BalanceDetail {
            get {
                return this.balanceDetailField;
            }
            set {
                this.balanceDetailField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Destination", DataType="ProductVolumeDestination")]
        public ProductVolumeDestination Destination {
            get {
                return this.destinationField;
            }
            set {
                this.destinationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum BalanceFlowPart {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("adjusted closing")]
        adjustedclosing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("closing balance")]
        closingbalance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("closing storage inventory")]
        closingstorageinventory,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("completed lifting")]
        completedlifting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gain/loss")]
        gainloss,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("input to storage")]
        inputtostorage,
        
        /// <remarks/>
        lifted,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lifting entitlement")]
        liftingentitlement,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lifting entitlement remaining")]
        liftingentitlementremaining,
        
        /// <remarks/>
        linepack,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("opening balance")]
        openingbalance,
        
        /// <remarks/>
        opflex,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("partial lifting")]
        partiallifting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pipeline lifting")]
        pipelinelifting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("production - mass adjustment")]
        productionmassadjustment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("production -- value adjustment")]
        productionvalueadjustment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("production imbalance")]
        productionimbalance,
        
        /// <remarks/>
        swap,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tanker lifting")]
        tankerlifting,
        
        /// <remarks/>
        transaction,
        
        /// <remarks/>
        transfer,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductVolumeBalanceDetail {
        
        private string ownerField;
        
        private string sourceUnitField;
        
        private VolumePerVolumeMeasure shareField;
        
        private string accountNumberField;
        
        private string[] sampleAnalysisResultField;
        
        private ProductVolumeComponentContent[] componentContentField;
        
        private ProductVolumeBalanceEvent[] eventField;
        
        private VolumeValue[] volumeValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A pointer to the business unit which owns the product.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the business unit which owns the product.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Owner", DataType="String64")]
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Points to the business unit from which the product originated.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Points to the business unit from which the product originated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SourceUnit", DataType="String64")]
        public string SourceUnit {
            get {
                return this.sourceUnitField;
            }
            set {
                this.sourceUnitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The owner's share of the product.</summary>
        [System.ComponentModel.DescriptionAttribute("The owner\'s share of the product.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Share", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Share {
            get {
                return this.shareField;
            }
            set {
                this.shareField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An account identifier for the balance.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("An account identifier for the balance.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AccountNumber", DataType="String64")]
        public string AccountNumber {
            get {
                return this.accountNumberField;
            }
            set {
                this.accountNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to a fluid sample analysis result object that is relevant to the balance. This sample may have been acquired previous to or after this period and is used for determining the allocated characteristics.</summary>
        [System.Xml.Serialization.XmlElementAttribute("SampleAnalysisResult")]
        [System.ComponentModel.DescriptionAttribute("A pointer to a fluid sample analysis result object that is relevant to the balanc" +
            "e. This sample may have been acquired previous to or after this period and is us" +
            "ed for determining the allocated characteristics.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleAnalysisResult", DataType="String64")]
        public string[] SampleAnalysisResult {
            get {
                return this.sampleAnalysisResultField;
            }
            set {
                this.sampleAnalysisResultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ComponentContent")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ComponentContent", DataType="ProductVolumeComponentContent")]
        public ProductVolumeComponentContent[] ComponentContent {
            get {
                return this.componentContentField;
            }
            set {
                this.componentContentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Event")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Event", DataType="ProductVolumeBalanceEvent")]
        public ProductVolumeBalanceEvent[] Event {
            get {
                return this.eventField;
            }
            set {
                this.eventField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("VolumeValue")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeValue", DataType="VolumeValue")]
        public VolumeValue[] VolumeValue {
            get {
                return this.volumeValueField;
            }
            set {
                this.volumeValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductVolumeBalanceEvent {
        
        private System.DateTime dateField;
        
        private BalanceEventKind kindField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The date of the event.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The date of the event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Date", DataType="date")]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of event.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The kind of event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="BalanceEventKind")]
        public BalanceEventKind Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum BalanceEventKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bill of lading")]
        billoflading,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("transaction date")]
        transactiondate,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductVolumeDestination {
        
        private string nameField;
        
        private BalanceDestinationType typeField;
        
        private bool typeFieldSpecified;
        
        private string countryField;
        
        /// <remarks/>
        /// <summary>The name of the destination.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the destination.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of destination.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of destination.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="BalanceDestinationType")]
        public BalanceDestinationType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                this.typeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The country of the destination.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The country of the destination.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Country", DataType="String64")]
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum BalanceDestinationType {
        
        /// <remarks/>
        harbor,
        
        /// <remarks/>
        terminal,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductVolumeAlert {
        
        private string targetField;
        
        private string levelField;
        
        private string typeField;
        
        private string descriptionField;
        
        /// <remarks/>
        /// <summary>An XPATH to the target value within the message containing this XPATH value.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("An XPATH to the target value within the message containing this XPATH value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Target", DataType="String2000")]
        public string Target {
            get {
                return this.targetField;
            }
            set {
                this.targetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The level of the alert.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The level of the alert.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Level", DataType="String64")]
        public string Level {
            get {
                return this.levelField;
            }
            set {
                this.levelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of alert. For example "off specification".</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The type of alert. For example \"off specification\".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="String64")]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A textual description of the alert.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A textual description of the alert.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductVolumeParameterSet {
        
        private FacilityParameter nameField;
        
        private string childFacilityIdentifierField;
        
        private string portField;
        
        private MeasureClass measureClassField;
        
        private bool measureClassFieldSpecified;
        
        private string coordinateReferenceSystemField;
        
        private FlowQualifier qualifierField;
        
        private bool qualifierFieldSpecified;
        
        private FlowSubQualifier subQualifierField;
        
        private bool subQualifierFieldSpecified;
        
        private System.DateTime versionField;
        
        private bool versionFieldSpecified;
        
        private string versionSourceField;
        
        private ReportingProduct productField;
        
        private bool productFieldSpecified;
        
        private ReportingDurationKind periodKindField;
        
        private bool periodKindFieldSpecified;
        
        private string commentField;
        
        private ProductVolumeParameterValue[] parameterField;
        
        private CurveDefinition[] curveDefinitionField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name of the facility parameter. This should reflect the business semantics of all values in the set and not the underlying kind. For example, specify "diameter" rather than "length" or "distance".</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The name of the facility parameter. This should reflect the business semantics of" +
            " all values in the set and not the underlying kind. For example, specify \"diamet" +
            "er\" rather than \"length\" or \"distance\".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="FacilityParameter")]
        public FacilityParameter Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The PRODML Relative Identifier (or URI) of a child of the parent facility. The identifier path is presumed to begin with the identity of the parent facility. This identifies a sub-facility which is identified within the context of the parent facilityParent2/facilityParent1/name identification hierarchy. The property is only expected to be defined for this child and not for the parent. For more information about URIs, see the Energistics Identifier Specification, which is available in the zip file when download PRODML.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        [System.ComponentModel.DescriptionAttribute(@"The PRODML Relative Identifier (or URI) of a child of the parent facility. The identifier path is presumed to begin with the identity of the parent facility. This identifies a sub-facility which is identified within the context of the parent facilityParent2/facilityParent1/name identification hierarchy. The property is only expected to be defined for this child and not for the parent. For more information about URIs, see the Energistics Identifier Specification, which is available in the zip file when download PRODML.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChildFacilityIdentifier", DataType="ProdmlRelativeIdentifier")]
        public string ChildFacilityIdentifier {
            get {
                return this.childFacilityIdentifierField;
            }
            set {
                this.childFacilityIdentifierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The port to which this parameter is assigned. This must be a port on the unit representing the parent facility of this parameter. If not specified then the parameter represents the unit.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The port to which this parameter is assigned. This must be a port on the unit rep" +
            "resenting the parent facility of this parameter. If not specified then the param" +
            "eter represents the unit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Port", DataType="String64")]
        public string Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>If the value is a measure (value with unit of measure), this defines the measurement class of the value. The units of measure for the value must conform to the list allowed by the measurement class in the unit dictionary file. Mutually exclusive with curveDefinition.</summary>
        [System.ComponentModel.DescriptionAttribute(@"If the value is a measure (value with unit of measure), this defines the measurement class of the value. The units of measure for the value must conform to the list allowed by the measurement class in the unit dictionary file. Mutually exclusive with curveDefinition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasureClass", DataType="MeasureClass")]
        public MeasureClass MeasureClass {
            get {
                return this.measureClassField;
            }
            set {
                this.measureClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MeasureClassSpecified {
            get {
                return this.measureClassFieldSpecified;
            }
            set {
                this.measureClassFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pointer to the coordinate reference system (CRS). This is needed for coordinates such as measured depth to specify the reference datum.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The pointer to the coordinate reference system (CRS). This is needed for coordina" +
            "tes such as measured depth to specify the reference datum.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CoordinateReferenceSystem", DataType="String64")]
        public string CoordinateReferenceSystem {
            get {
                return this.coordinateReferenceSystemField;
            }
            set {
                this.coordinateReferenceSystemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Qualifies the type of parameter that is being reported.</summary>
        [System.ComponentModel.DescriptionAttribute("Qualifies the type of parameter that is being reported.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Qualifier", DataType="FlowQualifier")]
        public FlowQualifier Qualifier {
            get {
                return this.qualifierField;
            }
            set {
                this.qualifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QualifierSpecified {
            get {
                return this.qualifierFieldSpecified;
            }
            set {
                this.qualifierFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines a specialization of the qualifier value. This should only be given if a qualifier is given.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines a specialization of the qualifier value. This should only be given if a q" +
            "ualifier is given.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SubQualifier", DataType="FlowSubQualifier")]
        public FlowSubQualifier SubQualifier {
            get {
                return this.subQualifierField;
            }
            set {
                this.subQualifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SubQualifierSpecified {
            get {
                return this.subQualifierFieldSpecified;
            }
            set {
                this.subQualifierFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A timestamp representing the version of this data. A parameter set with a more recent timestamp will represent the "current" version.</summary>
        [System.ComponentModel.DescriptionAttribute("A timestamp representing the version of this data. A parameter set with a more re" +
            "cent timestamp will represent the \"current\" version.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Version", DataType="dateTime")]
        public System.DateTime Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VersionSpecified {
            get {
                return this.versionFieldSpecified;
            }
            set {
                this.versionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Identifies the source of the version. This will commonly be the name of the software which created the version.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Identifies the source of the version. This will commonly be the name of the softw" +
            "are which created the version.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VersionSource", DataType="String64")]
        public string VersionSource {
            get {
                return this.versionSourceField;
            }
            set {
                this.versionSourceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of product that is being reported. This would be useful for something like specifying a tank product volume or level.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of product that is being reported. This would be useful for something li" +
            "ke specifying a tank product volume or level.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Product", DataType="ReportingProduct")]
        public ReportingProduct Product {
            get {
                return this.productField;
            }
            set {
                this.productField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProductSpecified {
            get {
                return this.productFieldSpecified;
            }
            set {
                this.productFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of period that is being reported.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of period that is being reported.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PeriodKind", DataType="ReportingDurationKind")]
        public ReportingDurationKind PeriodKind {
            get {
                return this.periodKindField;
            }
            set {
                this.periodKindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PeriodKindSpecified {
            get {
                return this.periodKindFieldSpecified;
            }
            set {
                this.periodKindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A comment about the parameter.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A comment about the parameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A parameter value, possibly at a time. If a time is not given then only one parameter should be given. If a time is specified with one value then time should be specified for all values. Each value in a time series should be of the same  underling kind of value (for example, a length measure).</summary>
        [System.Xml.Serialization.XmlElementAttribute("Parameter")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"A parameter value, possibly at a time. If a time is not given then only one parameter should be given. If a time is specified with one value then time should be specified for all values. Each value in a time series should be of the same  underling kind of value (for example, a length measure).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="ProductVolumeParameterValue")]
        public ProductVolumeParameterValue[] Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>If the value is a curve, this defines the meaning of the one column  in the table representing the curve. Mutually exclusive with measureClass.</summary>
        [System.Xml.Serialization.XmlElementAttribute("CurveDefinition")]
        [System.ComponentModel.DescriptionAttribute("If the value is a curve, this defines the meaning of the one column  in the table" +
            " representing the curve. Mutually exclusive with measureClass.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CurveDefinition", DataType="CurveDefinition")]
        public CurveDefinition[] CurveDefinition {
            get {
                return this.curveDefinitionField;
            }
            set {
                this.curveDefinitionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductVolumeParameterValue {
        
        private System.DateTime dTimField;
        
        private bool dTimFieldSpecified;
        
        private System.DateTime dTimEndField;
        
        private bool dTimEndFieldSpecified;
        
        private string portField;
        
        private string unitField;
        
        private ProductVolumeAlert alertField;
        
        private AbstractMeasureDataType[] measureDataTypeField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The date and time at which the parameter applies. If no time is specified then the value is static.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time at which the parameter applies. If no time is specified then th" +
            "e value is static.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="dateTime")]
        public System.DateTime DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimSpecified {
            get {
                return this.dTimFieldSpecified;
            }
            set {
                this.dTimFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time at which the parameter no longer applies. The "active" time interval is inclusive of this point. If dTimEnd is given then dTim shall also be given.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time at which the parameter no longer applies. The \"active\" time int" +
            "erval is inclusive of this point. If dTimEnd is given then dTim shall also be gi" +
            "ven.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="dateTime")]
        public System.DateTime DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimEndSpecified {
            get {
                return this.dTimEndFieldSpecified;
            }
            set {
                this.dTimEndFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A port related to the parameter. If a port is given then the corresponding unit usually must be given. For example, an "offset along network" parameter must specify a port from which the offset was measured.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A port related to the parameter. If a port is given then the corresponding unit u" +
            "sually must be given. For example, an \"offset along network\" parameter must spec" +
            "ify a port from which the offset was measured.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Port", DataType="String64")]
        public string Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unit related to the parameter. For example, an "offset along network" parameter must specify a port (on a unit) from which the offset was measured.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unit related to the parameter. For example, an \"offset along network\" parameter" +
            " must specify a port (on a unit) from which the offset was measured.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unit", DataType="String64")]
        public string Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An indication of some sort of abnormal condition relative this parameter.</summary>
        [System.ComponentModel.DescriptionAttribute("An indication of some sort of abnormal condition relative this parameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Alert", DataType="ProductVolumeAlert")]
        public ProductVolumeAlert Alert {
            get {
                return this.alertField;
            }
            set {
                this.alertField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MeasureDataType")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasureDataType", DataType="AbstractMeasureDataType")]
        public AbstractMeasureDataType[] MeasureDataType {
            get {
                return this.measureDataTypeField;
            }
            set {
                this.measureDataTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeneralQualifiedMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(KindQualifiedString))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerQualifiedCount))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CurveData))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public abstract partial class AbstractMeasureDataType {
        
        private object itemField;
        
        /// <remarks/>
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class GeneralQualifiedMeasure : AbstractMeasureDataType {
        
        private ValueStatus statusField;
        
        private bool statusFieldSpecified;
        
        private string componentReferenceField;
        
        private string uomField;
        
        /// <remarks/>
        /// <summary>An indicator of the quality of the value.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute("An indicator of the quality of the value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("status", DataType="ValueStatus")]
        public ValueStatus status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool statusSpecified {
            get {
                return this.statusFieldSpecified;
            }
            set {
                this.statusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of the value component. For example, "X" in a tuple of X and Y.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The kind of the value component. For example, \"X\" in a tuple of X and Y.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("componentReference", DataType="String64")]
        public string componentReference {
            get {
                return this.componentReferenceField;
            }
            set {
                this.componentReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The unit of measure for the value. This value must conform to the values allowed by the measure class.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(32)]
        [System.ComponentModel.DescriptionAttribute("The unit of measure for the value. This value must conform to the values allowed " +
            "by the measure class.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="UomEnum")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class KindQualifiedString : AbstractMeasureDataType {
        
        private ValueStatus statusField;
        
        private bool statusFieldSpecified;
        
        /// <remarks/>
        /// <summary>An indicator of the quality of the value.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute("An indicator of the quality of the value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("status", DataType="ValueStatus")]
        public ValueStatus status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool statusSpecified {
            get {
                return this.statusFieldSpecified;
            }
            set {
                this.statusFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class StringData : AbstractMeasureDataType {
        
        private KindQualifiedString stringValueField;
        
        /// <remarks/>
        /// <summary>The value of a dependent (data) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is false. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The value of a dependent (data) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is false. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StringValue", DataType="KindQualifiedString")]
        public KindQualifiedString StringValue {
            get {
                return this.stringValueField;
            }
            set {
                this.stringValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class IntegerQualifiedCount : AbstractMeasureDataType {
        
        private ValueStatus statusField;
        
        private bool statusFieldSpecified;
        
        /// <remarks/>
        /// <summary>An indicator of the quality of the value.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute("An indicator of the quality of the value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("status", DataType="ValueStatus")]
        public ValueStatus status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool statusSpecified {
            get {
                return this.statusFieldSpecified;
            }
            set {
                this.statusFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class IntegerData : AbstractMeasureDataType {
        
        private IntegerQualifiedCount integerValueField;
        
        /// <remarks/>
        /// <summary>The value of a dependent (data) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is false. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The value of a dependent (data) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is false. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IntegerValue", DataType="IntegerQualifiedCount")]
        public IntegerQualifiedCount IntegerValue {
            get {
                return this.integerValueField;
            }
            set {
                this.integerValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class CurveData : AbstractMeasureDataType {
        
        private long[] indexField;
        
        private double[] valueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The value of an independent (index) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is true. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Index")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The value of an independent (index) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is true. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="PositiveLong")]
        public long[] Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The value of a dependent (data) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is false. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Value")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The value of a dependent (data) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is false. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="double")]
        public double[] Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class CurveDefinition {
        
        private long orderField;
        
        private string parameterField;
        
        private bool isIndexField;
        
        private bool isIndexFieldSpecified;
        
        private MeasureClass measureClassField;
        
        private string unitField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The order of the value in the index or data tuple. If isIndex is true, this is the order of the (independent) index element. If isIndex is false, this is the order of the (dependent) value element.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The order of the value in the index or data tuple. If isIndex is true, this is th" +
            "e order of the (independent) index element. If isIndex is false, this is the ord" +
            "er of the (dependent) value element.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Order", DataType="NonNegativeLong")]
        public long Order {
            get {
                return this.orderField;
            }
            set {
                this.orderField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the variable in this curve.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the variable in this curve.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="String64")]
        public string Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True (equal "1" or "true") indicates that this is an independent variable in this curve. At least one column column should be flagged as independent.</summary>
        [System.ComponentModel.DescriptionAttribute("True (equal \"1\" or \"true\") indicates that this is an independent variable in this" +
            " curve. At least one column column should be flagged as independent.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsIndex", DataType="boolean")]
        public bool IsIndex {
            get {
                return this.isIndexField;
            }
            set {
                this.isIndexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsIndexSpecified {
            get {
                return this.isIndexFieldSpecified;
            }
            set {
                this.isIndexFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measure class of the variable. This defines which units of measure are valid for the value.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The measure class of the variable. This defines which units of measure are valid " +
            "for the value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasureClass", DataType="MeasureClass")]
        public MeasureClass MeasureClass {
            get {
                return this.measureClassField;
            }
            set {
                this.measureClassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The unit of measure of the variable. The unit of measure must match a unit allowed by the measure class.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(32)]
        [System.ComponentModel.DescriptionAttribute("The unit of measure of the variable. The unit of measure must match a unit allowe" +
            "d by the measure class.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unit", DataType="UomEnum")]
        public string Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for this data element. It is not globally unique (not a uuid)" +
            " and only need be unique within the context of the parent top-level object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class ProductFlowModel : AbstractObject {
        
        private FacilityIdentifierStruct installationField;
        
        private FacilityIdentifierStruct[] contextFacilityField;
        
        private System.DateTime dTimStartField;
        
        private bool dTimStartFieldSpecified;
        
        private System.DateTime dTimEndField;
        
        private bool dTimEndFieldSpecified;
        
        private EndpointQualifiedDateTime existenceTimeField;
        
        private EndpointQualifiedDateTime dTimMinField;
        
        private EndpointQualifiedDateTime dTimMaxField;
        
        private string commentField;
        
        private ProductFlowExternalReference[] externalConnectField;
        
        private ProductFlowNetwork[] networkField;
        
        /// <remarks/>
        /// <summary>The name of the facility that is represented by this model. The name can be qualified by a naming system. This also defines the kind of facility.</summary>
        [System.ComponentModel.DescriptionAttribute("The name of the facility that is represented by this model. The name can be quali" +
            "fied by a naming system. This also defines the kind of facility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Installation", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct Installation {
            get {
                return this.installationField;
            }
            set {
                this.installationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name and type of a facility whose context is relevant to the represented installation.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ContextFacility")]
        [System.ComponentModel.DescriptionAttribute("The name and type of a facility whose context is relevant to the represented inst" +
            "allation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContextFacility", DataType="FacilityIdentifierStruct")]
        public FacilityIdentifierStruct[] ContextFacility {
            get {
                return this.contextFacilityField;
            }
            set {
                this.contextFacilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time of the start of validity for this model.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time of the start of validity for this model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="dateTime")]
        public System.DateTime DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimStartSpecified {
            get {
                return this.dTimStartFieldSpecified;
            }
            set {
                this.dTimStartFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time of the termination of validity for this model.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time of the termination of validity for this model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="dateTime")]
        public System.DateTime DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DTimEndSpecified {
            get {
                return this.dTimEndFieldSpecified;
            }
            set {
                this.dTimEndFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The time for which "currently existing" data is desired from the network. All connections (and related data) existing at this time (i.e., start and end bracket this value) will  be returned if requested. The existence time is a server query parameter.</summary>
        [System.ComponentModel.DescriptionAttribute("The time for which \"currently existing\" data is desired from the network. All con" +
            "nections (and related data) existing at this time (i.e., start and end bracket t" +
            "his value) will  be returned if requested. The existence time is a server query " +
            "parameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExistenceTime", DataType="EndpointQualifiedDateTime")]
        public EndpointQualifiedDateTime ExistenceTime {
            get {
                return this.existenceTimeField;
            }
            set {
                this.existenceTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The minimum time index contained within the report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a "get" result.</summary>
        [System.ComponentModel.DescriptionAttribute("The minimum time index contained within the report. The minimum and maximum index" +
            "es are server query parameters and will be populated with valid values in a \"get" +
            "\" result.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimMin", DataType="EndpointQualifiedDateTime")]
        public EndpointQualifiedDateTime DTimMin {
            get {
                return this.dTimMinField;
            }
            set {
                this.dTimMinField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum time index contained within the report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a "get" result.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum time index contained within the report. The minimum and maximum index" +
            "es are server query parameters and will be populated with valid values in a \"get" +
            "\" result.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimMax", DataType="EndpointQualifiedDateTime")]
        public EndpointQualifiedDateTime DTimMax {
            get {
                return this.dTimMaxField;
            }
            set {
                this.dTimMaxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A descriptive remark about the model.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A descriptive remark about the model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the external port in another Product Flow Model to which  an external port in this model is connected. An external port should be connected to an external port with the opposite direction. The connected external port must be in another Product Flow Model. These connections should always be defined on a one-to-one basis. For example, if a facility may receive input from multiple other facilities then a separate input port should be defined for each of those facilities. This allows any question about mass balancing to be contained  within each individual model. The external port name must match the name of an external port on the network that represents this model.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExternalConnect")]
        [System.ComponentModel.DescriptionAttribute(@"Defines the external port in another Product Flow Model to which  an external port in this model is connected. An external port should be connected to an external port with the opposite direction. The connected external port must be in another Product Flow Model. These connections should always be defined on a one-to-one basis. For example, if a facility may receive input from multiple other facilities then a separate input port should be defined for each of those facilities. This allows any question about mass balancing to be contained  within each individual model. The external port name must match the name of an external port on the network that represents this model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExternalConnect", DataType="ProductFlowExternalReference")]
        public ProductFlowExternalReference[] ExternalConnect {
            get {
                return this.externalConnectField;
            }
            set {
                this.externalConnectField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The description of one named network within this model. Each model is self contained but may reference other newtorks for defining internal detail. One of the networks must represent this model.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Network")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The description of one named network within this model. Each model is self contai" +
            "ned but may reference other newtorks for defining internal detail. One of the ne" +
            "tworks must represent this model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Network", DataType="ProductFlowNetwork")]
        public ProductFlowNetwork[] Network {
            get {
                return this.networkField;
            }
            set {
                this.networkField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class GraphicalInformationSet : AbstractObject {
        
        private AbstractGraphicalInformation[] graphicalInformationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("GraphicalInformation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GraphicalInformation", DataType="AbstractGraphicalInformation")]
        public AbstractGraphicalInformation[] GraphicalInformation {
            get {
                return this.graphicalInformationField;
            }
            set {
                this.graphicalInformationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractGraphicalInformation {
        
        private DataObjectReference targetObjectField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TargetObject", DataType="DataObjectReference")]
        public DataObjectReference TargetObject {
            get {
                return this.targetObjectField;
            }
            set {
                this.targetObjectField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class DataAssuranceRecord : AbstractObject {
        
        private string policyIdField;
        
        private string policyNameField;
        
        private string referencedElementNameField;
        
        private string referencedElementUidField;
        
        private string originField;
        
        private bool conformanceField;
        
        private Energistics.DataAccess.Timestamp dateField;
        
        private string commentField;
        
        private IndexRange indexRangeField;
        
        private FailingRule[] failingRulesField;
        
        private DataObjectReference referencedDataField;
        
        /// <remarks/>
        /// <summary>Identifier of the policy whose conformance is being described.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Identifier of the policy whose conformance is being described.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PolicyId", DataType="String64")]
        public string PolicyId {
            get {
                return this.policyIdField;
            }
            set {
                this.policyIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Human-readable name of the policy</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Human-readable name of the policy")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PolicyName", DataType="String2000")]
        public string PolicyName {
            get {
                return this.policyNameField;
            }
            set {
                this.policyNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>If the Policy applies to a single element within the referenced data object this attribute holds its element name.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("If the Policy applies to a single element within the referenced data object this " +
            "attribute holds its element name.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferencedElementName", DataType="String64")]
        public string ReferencedElementName {
            get {
                return this.referencedElementNameField;
            }
            set {
                this.referencedElementNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>If the Policy applies to a single occurrence of a recurring element within the referenced data object this attribute holds its uid.  The name of the recurring element would be in the ReferencedElementName.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("If the Policy applies to a single occurrence of a recurring element within the re" +
            "ferenced data object this attribute holds its uid.  The name of the recurring el" +
            "ement would be in the ReferencedElementName.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferencedElementUid", DataType="String64")]
        public string ReferencedElementUid {
            get {
                return this.referencedElementUidField;
            }
            set {
                this.referencedElementUidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Agent which checked the data for conformance with the policy. This could be a person or an automated computer process or any number of other things.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Agent which checked the data for conformance with the policy. This could be a per" +
            "son or an automated computer process or any number of other things.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Origin", DataType="String2000")]
        public string Origin {
            get {
                return this.originField;
            }
            set {
                this.originField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Yes/no flag indicating whether this particular data ???? conforms with the policy or not.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Yes/no flag indicating whether this particular data ???? conforms with the policy" +
            " or not.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Conformance", DataType="boolean")]
        public bool Conformance {
            get {
                return this.conformanceField;
            }
            set {
                this.conformanceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date the policy was last checked. This is the date for which the Conformance value is valid.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Date the policy was last checked. This is the date for which the Conformance valu" +
            "e is valid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Date", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexRange", DataType="IndexRange")]
        public IndexRange IndexRange {
            get {
                return this.indexRangeField;
            }
            set {
                this.indexRangeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("FailingRules")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FailingRules", DataType="FailingRule")]
        public FailingRule[] FailingRules {
            get {
                return this.failingRulesField;
            }
            set {
                this.failingRulesField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferencedData", DataType="DataObjectReference")]
        public DataObjectReference ReferencedData {
            get {
                return this.referencedDataField;
            }
            set {
                this.referencedDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class IndexRange {
        
        private string indexMinimumField;
        
        private string indexMaximumField;
        
        /// <remarks/>
        /// <summary>The minimum index for the range over which the referenced data's conformance with the policy is being assessed.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The minimum index for the range over which the referenced data\'s conformance with" +
            " the policy is being assessed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexMinimum", DataType="String64")]
        public string IndexMinimum {
            get {
                return this.indexMinimumField;
            }
            set {
                this.indexMinimumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum index for the range over which the referenced data's conformance with the policy is being assessed.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The maximum index for the range over which the referenced data\'s conformance with" +
            " the policy is being assessed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexMaximum", DataType="String64")]
        public string IndexMaximum {
            get {
                return this.indexMaximumField;
            }
            set {
                this.indexMaximumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class FailingRule {
        
        private string ruleIdField;
        
        private string ruleNameField;
        
        private string severityField;
        
        private ExtensionNameValue[] failingRuleExtensionsField;
        
        /// <remarks/>
        /// <summary>Identifier of the atomic rule being checked against the data.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Identifier of the atomic rule being checked against the data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RuleId", DataType="String64")]
        public string RuleId {
            get {
                return this.ruleIdField;
            }
            set {
                this.ruleIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Human-readable name of the atomic rule being checked against the data.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Human-readable name of the atomic rule being checked against the data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RuleName", DataType="String2000")]
        public string RuleName {
            get {
                return this.ruleNameField;
            }
            set {
                this.ruleNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Severity of the failure. This could be used to indicate that a rule is a high-priority rule whose failure is considered as severe or could be used to indicate just how badly a rule was contravened.  The meaning of this field should be standardized within a company to maximize its utility.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"Severity of the failure. This could be used to indicate that a rule is a high-priority rule whose failure is considered as severe or could be used to indicate just how badly a rule was contravened.  The meaning of this field should be standardized within a company to maximize its utility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Severity", DataType="String64")]
        public string Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This allows extending the FailingRule class with as many arbitrary name-value pairs as is required at run-time.  Uses for this might include why the rule failed or by how much.</summary>
        [System.Xml.Serialization.XmlElementAttribute("FailingRuleExtensions")]
        [System.ComponentModel.DescriptionAttribute("This allows extending the FailingRule class with as many arbitrary name-value pai" +
            "rs as is required at run-time.  Uses for this might include why the rule failed " +
            "or by how much.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FailingRuleExtensions", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] FailingRuleExtensions {
            get {
                return this.failingRuleExtensionsField;
            }
            set {
                this.failingRuleExtensionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class ProjectedCrs : AbstractObject {
        
        private AxisOrder2d axisOrderField;
        
        private AbstractProjectedCrs abstractProjectedCrsField;
        
        private string uomField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AxisOrder", DataType="AxisOrder2d")]
        public AxisOrder2d AxisOrder {
            get {
                return this.axisOrderField;
            }
            set {
                this.axisOrderField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AbstractProjectedCrs", DataType="AbstractProjectedCrs")]
        public AbstractProjectedCrs AbstractProjectedCrs {
            get {
                return this.abstractProjectedCrsField;
            }
            set {
                this.abstractProjectedCrsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthUomExt")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AxisOrder2d {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("easting northing")]
        eastingnorthing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("northing easting")]
        northingeasting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("westing southing")]
        westingsouthing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("southing westing")]
        southingwesting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("northing westing")]
        northingwesting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("westing northing")]
        westingnorthing,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedWktCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedUnknownCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedLocalAuthorityCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedGmlCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedEpsgCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractProjectedCrs {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ProjectedWktCrs : AbstractProjectedCrs {
        
        private string wellKnownTextField;
        
        /// <remarks/>
        /// <summary>ISO 19162 compliant well known text of the CRS</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("ISO 19162 compliant well known text of the CRS")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellKnownText", DataType="string")]
        public string WellKnownText {
            get {
                return this.wellKnownTextField;
            }
            set {
                this.wellKnownTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ProjectedUnknownCrs : AbstractProjectedCrs {
        
        private string unknownField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unknown", DataType="String2000")]
        public string Unknown {
            get {
                return this.unknownField;
            }
            set {
                this.unknownField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ProjectedLocalAuthorityCrs : AbstractProjectedCrs {
        
        private AuthorityQualifiedName localAuthorityCrsNameField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocalAuthorityCrsName", DataType="AuthorityQualifiedName")]
        public AuthorityQualifiedName LocalAuthorityCrsName {
            get {
                return this.localAuthorityCrsNameField;
            }
            set {
                this.localAuthorityCrsNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ProjectedGmlCrs : AbstractProjectedCrs {
        
        private ProjectedCRSType gmlProjectedCrsDefinitionField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GmlProjectedCrsDefinition", DataType="ProjectedCRSType")]
        public ProjectedCRSType GmlProjectedCrsDefinition {
            get {
                return this.gmlProjectedCrsDefinitionField;
            }
            set {
                this.gmlProjectedCrsDefinitionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ProjectedCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class ProjectedCRSType : AbstractGeneralDerivedCRSType {
        
        private GeodeticCRSPropertyType itemField;
        
        private CartesianCSPropertyType cartesianCSField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("baseGeodeticCRS")]
        public GeodeticCRSPropertyType Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        public CartesianCSPropertyType cartesianCS {
            get {
                return this.cartesianCSField;
            }
            set {
                this.cartesianCSField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("baseGeodeticCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class GeodeticCRSPropertyType {
        
        private GeodeticCRSType geodeticCRSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public GeodeticCRSType GeodeticCRS {
            get {
                return this.geodeticCRSField;
            }
            set {
                this.geodeticCRSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("GeodeticCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class GeodeticCRSType : AbstractCRSType {
        
        private object itemField;
        
        private GeodeticDatumPropertyType geodeticDatumField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("cartesianCS", typeof(CartesianCSPropertyType))]
        [System.Xml.Serialization.XmlElementAttribute("ellipsoidalCS", typeof(EllipsoidalCSPropertyType))]
        [System.Xml.Serialization.XmlElementAttribute("sphericalCS", typeof(SphericalCSPropertyType))]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        public GeodeticDatumPropertyType geodeticDatum {
            get {
                return this.geodeticDatumField;
            }
            set {
                this.geodeticDatumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("cartesianCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CartesianCSPropertyType {
        
        private CartesianCSType cartesianCSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CartesianCSType CartesianCS {
            get {
                return this.cartesianCSField;
            }
            set {
                this.cartesianCSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("CartesianCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CartesianCSType : AbstractCoordinateSystemType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractCoordinateSystem", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractCoordinateSystemType : IdentifiedObjectType {
        
        private CoordinateSystemAxisPropertyType[] axisField;
        
        private AggregationType aggregationTypeField;
        
        private bool aggregationTypeFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("axis")]
        public CoordinateSystemAxisPropertyType[] axis {
            get {
                return this.axisField;
            }
            set {
                this.axisField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("aggregationType", DataType="AggregationType")]
        public AggregationType aggregationType {
            get {
                return this.aggregationTypeField;
            }
            set {
                this.aggregationTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool aggregationTypeSpecified {
            get {
                return this.aggregationTypeFieldSpecified;
            }
            set {
                this.aggregationTypeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("axis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CoordinateSystemAxisPropertyType {
        
        private CoordinateSystemAxisType coordinateSystemAxisField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CoordinateSystemAxisType CoordinateSystemAxis {
            get {
                return this.coordinateSystemAxisField;
            }
            set {
                this.coordinateSystemAxisField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("CoordinateSystemAxis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CoordinateSystemAxisType : IdentifiedObjectType {
        
        private CodeType axisAbbrevField;
        
        private CodeWithAuthorityType axisDirectionField;
        
        private double minimumValueField;
        
        private bool minimumValueFieldSpecified;
        
        private double maximumValueField;
        
        private bool maximumValueFieldSpecified;
        
        private CodeWithAuthorityType rangeMeaningField;
        
        /// <remarks/>
        public CodeType axisAbbrev {
            get {
                return this.axisAbbrevField;
            }
            set {
                this.axisAbbrevField = value;
            }
        }
        
        /// <remarks/>
        public CodeWithAuthorityType axisDirection {
            get {
                return this.axisDirectionField;
            }
            set {
                this.axisDirectionField = value;
            }
        }
        
        /// <remarks/>
        public double minimumValue {
            get {
                return this.minimumValueField;
            }
            set {
                this.minimumValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool minimumValueSpecified {
            get {
                return this.minimumValueFieldSpecified;
            }
            set {
                this.minimumValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double maximumValue {
            get {
                return this.maximumValueField;
            }
            set {
                this.maximumValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maximumValueSpecified {
            get {
                return this.maximumValueFieldSpecified;
            }
            set {
                this.maximumValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public CodeWithAuthorityType rangeMeaning {
            get {
                return this.rangeMeaningField;
            }
            set {
                this.rangeMeaningField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CodeWithAuthorityType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("name", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CodeType {
        
        private string codeSpaceField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("codeSpace", DataType="anyURI")]
        public string codeSpace {
            get {
                return this.codeSpaceField;
            }
            set {
                this.codeSpaceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("identifier", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CodeWithAuthorityType : CodeType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public abstract partial class IdentifiedObjectType : DefinitionType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("Definition", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class DefinitionType : DefinitionBaseType {
        
        private string remarksField;
        
        /// <remarks/>
        public string remarks {
            get {
                return this.remarksField;
            }
            set {
                this.remarksField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public partial class DefinitionBaseType : AbstractGMLType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimeObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimePrimitiveType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionBaseType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGML", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractGMLType {
        
        private StringOrRefType descriptionField;
        
        private ReferenceType descriptionReferenceField;
        
        private CodeWithAuthorityType identifierField;
        
        private CodeType[] nameField;
        
        private string idField;
        
        /// <remarks/>
        public StringOrRefType description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public ReferenceType descriptionReference {
            get {
                return this.descriptionReferenceField;
            }
            set {
                this.descriptionReferenceField = value;
            }
        }
        
        /// <remarks/>
        public CodeWithAuthorityType identifier {
            get {
                return this.identifierField;
            }
            set {
                this.identifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("name")]
        public CodeType[] name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, DataType="ID")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("description", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class StringOrRefType {
        
        private string nilReasonField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("descriptionReference", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class ReferenceType {
        
        private bool ownsField;
        
        private string nilReasonField;
        
        public ReferenceType() {
            this.ownsField = false;
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("owns", DataType="boolean")]
        public bool owns {
            get {
                return this.ownsField;
            }
            set {
                this.ownsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimePrimitiveType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractTimeObject", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractTimeObjectType : AbstractGMLType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractTimePrimitive", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractTimePrimitiveType : AbstractTimeObjectType {
        
        private RelatedTimeType[] relatedTimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("relatedTime")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("relatedTime", DataType="RelatedTimeType")]
        public RelatedTimeType[] relatedTime {
            get {
                return this.relatedTimeField;
            }
            set {
                this.relatedTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public partial class RelatedTimeType : TimePrimitivePropertyType {
        
        private RelatedTimeTypeRelativePosition relativePositionField;
        
        private bool relativePositionFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public RelatedTimeTypeRelativePosition relativePosition {
            get {
                return this.relativePositionField;
            }
            set {
                this.relativePositionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool relativePositionSpecified {
            get {
                return this.relativePositionFieldSpecified;
            }
            set {
                this.relativePositionFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.opengis.net/gml/3.2")]
    public enum RelatedTimeTypeRelativePosition {
        
        /// <remarks/>
        Before,
        
        /// <remarks/>
        After,
        
        /// <remarks/>
        Begins,
        
        /// <remarks/>
        Ends,
        
        /// <remarks/>
        During,
        
        /// <remarks/>
        Equals,
        
        /// <remarks/>
        Contains,
        
        /// <remarks/>
        Overlaps,
        
        /// <remarks/>
        Meets,
        
        /// <remarks/>
        OverlappedBy,
        
        /// <remarks/>
        MetBy,
        
        /// <remarks/>
        BegunBy,
        
        /// <remarks/>
        EndedBy,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelatedTimeType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public partial class TimePrimitivePropertyType {
        
        private AbstractTimePrimitiveType abstractTimePrimitiveField;
        
        private string nilReasonField;
        
        private bool ownsField;
        
        public TimePrimitivePropertyType() {
            this.ownsField = false;
        }
        
        /// <remarks/>
        public AbstractTimePrimitiveType AbstractTimePrimitive {
            get {
                return this.abstractTimePrimitiveField;
            }
            set {
                this.abstractTimePrimitiveField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("owns", DataType="boolean")]
        public bool owns {
            get {
                return this.ownsField;
            }
            set {
                this.ownsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractOperation", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractCoordinateOperationType : IdentifiedObjectType {
        
        private domainOfValidity domainOfValidityField;
        
        private string[] scopeField;
        
        private string operationVersionField;
        
        private coordinateOperationAccuracy[] coordinateOperationAccuracyField;
        
        private CRSPropertyType sourceCRSField;
        
        private CRSPropertyType targetCRSField;
        
        /// <remarks/>
        public domainOfValidity domainOfValidity {
            get {
                return this.domainOfValidityField;
            }
            set {
                this.domainOfValidityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("scope")]
        public string[] scope {
            get {
                return this.scopeField;
            }
            set {
                this.scopeField = value;
            }
        }
        
        /// <remarks/>
        public string operationVersion {
            get {
                return this.operationVersionField;
            }
            set {
                this.operationVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("coordinateOperationAccuracy")]
        public coordinateOperationAccuracy[] coordinateOperationAccuracy {
            get {
                return this.coordinateOperationAccuracyField;
            }
            set {
                this.coordinateOperationAccuracyField = value;
            }
        }
        
        /// <remarks/>
        public CRSPropertyType sourceCRS {
            get {
                return this.sourceCRSField;
            }
            set {
                this.sourceCRSField = value;
            }
        }
        
        /// <remarks/>
        public CRSPropertyType targetCRS {
            get {
                return this.targetCRSField;
            }
            set {
                this.targetCRSField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class domainOfValidity {
        
        private EX_Extent_Type eX_ExtentField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
        public EX_Extent_Type EX_Extent {
            get {
                return this.eX_ExtentField;
            }
            set {
                this.eX_ExtentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_Extent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class EX_Extent_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType descriptionField;
        
        private EX_GeographicExtent_PropertyType[] geographicElementField;
        
        private EX_TemporalExtent_PropertyType[] temporalElementField;
        
        private EX_VerticalExtent_PropertyType[] verticalElementField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("description", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("geographicElement")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("geographicElement", DataType="EX_GeographicExtent_PropertyType")]
        public EX_GeographicExtent_PropertyType[] geographicElement {
            get {
                return this.geographicElementField;
            }
            set {
                this.geographicElementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("temporalElement")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("temporalElement", DataType="EX_TemporalExtent_PropertyType")]
        public EX_TemporalExtent_PropertyType[] temporalElement {
            get {
                return this.temporalElementField;
            }
            set {
                this.temporalElementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("verticalElement")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("verticalElement", DataType="EX_VerticalExtent_PropertyType")]
        public EX_VerticalExtent_PropertyType[] verticalElement {
            get {
                return this.verticalElementField;
            }
            set {
                this.verticalElementField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public partial class CharacterString_PropertyType {
        
        private string characterStringField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public string CharacterString {
            get {
                return this.characterStringField;
            }
            set {
                this.characterStringField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class EX_GeographicExtent_PropertyType {
        
        private AbstractEX_GeographicExtent_Type abstractEX_GeographicExtentField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public AbstractEX_GeographicExtent_Type AbstractEX_GeographicExtent {
            get {
                return this.abstractEX_GeographicExtentField;
            }
            set {
                this.abstractEX_GeographicExtentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractEX_GeographicExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public abstract partial class AbstractEX_GeographicExtent_Type : AbstractObject_Type {
        
        private Boolean_PropertyType extentTypeCodeField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("extentTypeCode", DataType="Boolean_PropertyType")]
        public Boolean_PropertyType extentTypeCode {
            get {
                return this.extentTypeCodeField;
            }
            set {
                this.extentTypeCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public partial class Boolean_PropertyType {
        
        private bool booleanField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public bool Boolean {
            get {
                return this.booleanField;
            }
            set {
                this.booleanField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_Result_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Series_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_OnlineResource_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Address_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Telephone_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Contact_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_ResponsibleParty_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Date_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Citation_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MD_Identifier_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_Element_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_PositionalAccuracy_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_VerticalExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_TemporalExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractEX_GeographicExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_Extent_Type))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public abstract partial class AbstractObject_Type {
        
        private string idField;
        
        private string uuidField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("id", DataType="ID")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuid", DataType="string")]
        public string uuid {
            get {
                return this.uuidField;
            }
            set {
                this.uuidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_Result", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public abstract partial class AbstractDQ_Result_Type : AbstractObject_Type {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Series", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Series_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType nameField;
        
        private CharacterString_PropertyType issueIdentificationField;
        
        private CharacterString_PropertyType pageField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("name", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("issueIdentification", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType issueIdentification {
            get {
                return this.issueIdentificationField;
            }
            set {
                this.issueIdentificationField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("page", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType page {
            get {
                return this.pageField;
            }
            set {
                this.pageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_OnlineResource", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_OnlineResource_Type : AbstractObject_Type {
        
        private URL_PropertyType linkageField;
        
        private CharacterString_PropertyType protocolField;
        
        private CharacterString_PropertyType applicationProfileField;
        
        private CharacterString_PropertyType nameField;
        
        private CharacterString_PropertyType descriptionField;
        
        private CI_OnLineFunctionCode_PropertyType functionField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("linkage", DataType="URL_PropertyType")]
        public URL_PropertyType linkage {
            get {
                return this.linkageField;
            }
            set {
                this.linkageField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("protocol", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType protocol {
            get {
                return this.protocolField;
            }
            set {
                this.protocolField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("applicationProfile", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType applicationProfile {
            get {
                return this.applicationProfileField;
            }
            set {
                this.applicationProfileField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("name", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("description", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("function", DataType="CI_OnLineFunctionCode_PropertyType")]
        public CI_OnLineFunctionCode_PropertyType function {
            get {
                return this.functionField;
            }
            set {
                this.functionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class URL_PropertyType {
        
        private string uRLField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_OnLineFunctionCode_PropertyType {
        
        private CodeListValue_Type cI_OnLineFunctionCodeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CodeListValue_Type CI_OnLineFunctionCode {
            get {
                return this.cI_OnLineFunctionCodeField;
            }
            set {
                this.cI_OnLineFunctionCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    [System.Xml.Serialization.XmlRootAttribute("CI_DateTypeCode", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CodeListValue_Type {
        
        private string codeListField;
        
        private string codeListValueField;
        
        private string codeSpaceField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("codeList", DataType="anyURI")]
        public string codeList {
            get {
                return this.codeListField;
            }
            set {
                this.codeListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("codeListValue", DataType="anyURI")]
        public string codeListValue {
            get {
                return this.codeListValueField;
            }
            set {
                this.codeListValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("codeSpace", DataType="anyURI")]
        public string codeSpace {
            get {
                return this.codeSpaceField;
            }
            set {
                this.codeSpaceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Address", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Address_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType[] deliveryPointField;
        
        private CharacterString_PropertyType cityField;
        
        private CharacterString_PropertyType administrativeAreaField;
        
        private CharacterString_PropertyType postalCodeField;
        
        private CharacterString_PropertyType countryField;
        
        private CharacterString_PropertyType[] electronicMailAddressField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("deliveryPoint")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("deliveryPoint", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] deliveryPoint {
            get {
                return this.deliveryPointField;
            }
            set {
                this.deliveryPointField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("city", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType city {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("administrativeArea", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType administrativeArea {
            get {
                return this.administrativeAreaField;
            }
            set {
                this.administrativeAreaField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("postalCode", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType postalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("country", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("electronicMailAddress")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("electronicMailAddress", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] electronicMailAddress {
            get {
                return this.electronicMailAddressField;
            }
            set {
                this.electronicMailAddressField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Telephone", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Telephone_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType[] voiceField;
        
        private CharacterString_PropertyType[] facsimileField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("voice")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("voice", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] voice {
            get {
                return this.voiceField;
            }
            set {
                this.voiceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("facsimile")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("facsimile", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] facsimile {
            get {
                return this.facsimileField;
            }
            set {
                this.facsimileField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Contact", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Contact_Type : AbstractObject_Type {
        
        private CI_Telephone_PropertyType phoneField;
        
        private CI_Address_PropertyType addressField;
        
        private CI_OnlineResource_PropertyType onlineResourceField;
        
        private CharacterString_PropertyType hoursOfServiceField;
        
        private CharacterString_PropertyType contactInstructionsField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("phone", DataType="CI_Telephone_PropertyType")]
        public CI_Telephone_PropertyType phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("address", DataType="CI_Address_PropertyType")]
        public CI_Address_PropertyType address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("onlineResource", DataType="CI_OnlineResource_PropertyType")]
        public CI_OnlineResource_PropertyType onlineResource {
            get {
                return this.onlineResourceField;
            }
            set {
                this.onlineResourceField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("hoursOfService", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType hoursOfService {
            get {
                return this.hoursOfServiceField;
            }
            set {
                this.hoursOfServiceField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("contactInstructions", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType contactInstructions {
            get {
                return this.contactInstructionsField;
            }
            set {
                this.contactInstructionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Telephone_PropertyType {
        
        private CI_Telephone_Type cI_TelephoneField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Telephone_Type CI_Telephone {
            get {
                return this.cI_TelephoneField;
            }
            set {
                this.cI_TelephoneField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Address_PropertyType {
        
        private CI_Address_Type cI_AddressField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Address_Type CI_Address {
            get {
                return this.cI_AddressField;
            }
            set {
                this.cI_AddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_OnlineResource_PropertyType {
        
        private CI_OnlineResource_Type cI_OnlineResourceField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_OnlineResource_Type CI_OnlineResource {
            get {
                return this.cI_OnlineResourceField;
            }
            set {
                this.cI_OnlineResourceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_ResponsibleParty", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_ResponsibleParty_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType individualNameField;
        
        private CharacterString_PropertyType organisationNameField;
        
        private CharacterString_PropertyType positionNameField;
        
        private CI_Contact_PropertyType contactInfoField;
        
        private CI_RoleCode_PropertyType roleField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("individualName", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType individualName {
            get {
                return this.individualNameField;
            }
            set {
                this.individualNameField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("organisationName", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType organisationName {
            get {
                return this.organisationNameField;
            }
            set {
                this.organisationNameField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("positionName", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType positionName {
            get {
                return this.positionNameField;
            }
            set {
                this.positionNameField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("contactInfo", DataType="CI_Contact_PropertyType")]
        public CI_Contact_PropertyType contactInfo {
            get {
                return this.contactInfoField;
            }
            set {
                this.contactInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("role", DataType="CI_RoleCode_PropertyType")]
        public CI_RoleCode_PropertyType role {
            get {
                return this.roleField;
            }
            set {
                this.roleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Contact_PropertyType {
        
        private CI_Contact_Type cI_ContactField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Contact_Type CI_Contact {
            get {
                return this.cI_ContactField;
            }
            set {
                this.cI_ContactField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_RoleCode_PropertyType {
        
        private CodeListValue_Type cI_RoleCodeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CodeListValue_Type CI_RoleCode {
            get {
                return this.cI_RoleCodeField;
            }
            set {
                this.cI_RoleCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Date", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Date_Type : AbstractObject_Type {
        
        private Date_PropertyType dateField;
        
        private CI_DateTypeCode_PropertyType dateTypeField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("date", DataType="Date_PropertyType")]
        public Date_PropertyType date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("dateType", DataType="CI_DateTypeCode_PropertyType")]
        public CI_DateTypeCode_PropertyType dateType {
            get {
                return this.dateTypeField;
            }
            set {
                this.dateTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public partial class Date_PropertyType {
        
        private object itemField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Date", typeof(string), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("DateTime", typeof(System.DateTime))]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_DateTypeCode_PropertyType {
        
        private CodeListValue_Type cI_DateTypeCodeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CodeListValue_Type CI_DateTypeCode {
            get {
                return this.cI_DateTypeCodeField;
            }
            set {
                this.cI_DateTypeCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Citation", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Citation_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType titleField;
        
        private CharacterString_PropertyType[] alternateTitleField;
        
        private CI_Date_PropertyType[] dateField;
        
        private CharacterString_PropertyType editionField;
        
        private Date_PropertyType editionDateField;
        
        private MD_Identifier_PropertyType[] identifierField;
        
        private CI_ResponsibleParty_PropertyType[] citedResponsiblePartyField;
        
        private CI_PresentationFormCode_PropertyType[] presentationFormField;
        
        private CI_Series_PropertyType seriesField;
        
        private CharacterString_PropertyType otherCitationDetailsField;
        
        private CharacterString_PropertyType collectiveTitleField;
        
        private CharacterString_PropertyType iSBNField;
        
        private CharacterString_PropertyType iSSNField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("title", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("alternateTitle")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("alternateTitle", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] alternateTitle {
            get {
                return this.alternateTitleField;
            }
            set {
                this.alternateTitleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("date")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("date", DataType="CI_Date_PropertyType")]
        public CI_Date_PropertyType[] date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("edition", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType edition {
            get {
                return this.editionField;
            }
            set {
                this.editionField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("editionDate", DataType="Date_PropertyType")]
        public Date_PropertyType editionDate {
            get {
                return this.editionDateField;
            }
            set {
                this.editionDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("identifier")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("identifier", DataType="MD_Identifier_PropertyType")]
        public MD_Identifier_PropertyType[] identifier {
            get {
                return this.identifierField;
            }
            set {
                this.identifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("citedResponsibleParty")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("citedResponsibleParty", DataType="CI_ResponsibleParty_PropertyType")]
        public CI_ResponsibleParty_PropertyType[] citedResponsibleParty {
            get {
                return this.citedResponsiblePartyField;
            }
            set {
                this.citedResponsiblePartyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("presentationForm")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("presentationForm", DataType="CI_PresentationFormCode_PropertyType")]
        public CI_PresentationFormCode_PropertyType[] presentationForm {
            get {
                return this.presentationFormField;
            }
            set {
                this.presentationFormField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("series", DataType="CI_Series_PropertyType")]
        public CI_Series_PropertyType series {
            get {
                return this.seriesField;
            }
            set {
                this.seriesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("otherCitationDetails", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType otherCitationDetails {
            get {
                return this.otherCitationDetailsField;
            }
            set {
                this.otherCitationDetailsField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("collectiveTitle", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType collectiveTitle {
            get {
                return this.collectiveTitleField;
            }
            set {
                this.collectiveTitleField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ISBN", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType ISBN {
            get {
                return this.iSBNField;
            }
            set {
                this.iSBNField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ISSN", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType ISSN {
            get {
                return this.iSSNField;
            }
            set {
                this.iSSNField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Date_PropertyType {
        
        private CI_Date_Type cI_DateField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Date_Type CI_Date {
            get {
                return this.cI_DateField;
            }
            set {
                this.cI_DateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class MD_Identifier_PropertyType {
        
        private MD_Identifier_Type mD_IdentifierField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public MD_Identifier_Type MD_Identifier {
            get {
                return this.mD_IdentifierField;
            }
            set {
                this.mD_IdentifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("MD_Identifier", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class MD_Identifier_Type : AbstractObject_Type {
        
        private CI_Citation_PropertyType authorityField;
        
        private CharacterString_PropertyType codeField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("authority", DataType="CI_Citation_PropertyType")]
        public CI_Citation_PropertyType authority {
            get {
                return this.authorityField;
            }
            set {
                this.authorityField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("code", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Citation_PropertyType {
        
        private CI_Citation_Type cI_CitationField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Citation_Type CI_Citation {
            get {
                return this.cI_CitationField;
            }
            set {
                this.cI_CitationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_ResponsibleParty_PropertyType {
        
        private CI_ResponsibleParty_Type cI_ResponsiblePartyField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_ResponsibleParty_Type CI_ResponsibleParty {
            get {
                return this.cI_ResponsiblePartyField;
            }
            set {
                this.cI_ResponsiblePartyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_PresentationFormCode_PropertyType {
        
        private CodeListValue_Type cI_PresentationFormCodeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CodeListValue_Type CI_PresentationFormCode {
            get {
                return this.cI_PresentationFormCodeField;
            }
            set {
                this.cI_PresentationFormCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Series_PropertyType {
        
        private CI_Series_Type cI_SeriesField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Series_Type CI_Series {
            get {
                return this.cI_SeriesField;
            }
            set {
                this.cI_SeriesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_PositionalAccuracy_Type))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_Element", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public abstract partial class AbstractDQ_Element_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType[] nameOfMeasureField;
        
        private MD_Identifier_PropertyType measureIdentificationField;
        
        private CharacterString_PropertyType measureDescriptionField;
        
        private DQ_EvaluationMethodTypeCode_PropertyType evaluationMethodTypeField;
        
        private CharacterString_PropertyType evaluationMethodDescriptionField;
        
        private CI_Citation_PropertyType evaluationProcedureField;
        
        private DateTime_PropertyType[] dateTimeField;
        
        private DQ_Result_PropertyType[] resultField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("nameOfMeasure")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nameOfMeasure", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] nameOfMeasure {
            get {
                return this.nameOfMeasureField;
            }
            set {
                this.nameOfMeasureField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("measureIdentification", DataType="MD_Identifier_PropertyType")]
        public MD_Identifier_PropertyType measureIdentification {
            get {
                return this.measureIdentificationField;
            }
            set {
                this.measureIdentificationField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("measureDescription", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType measureDescription {
            get {
                return this.measureDescriptionField;
            }
            set {
                this.measureDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("evaluationMethodType", DataType="DQ_EvaluationMethodTypeCode_PropertyType")]
        public DQ_EvaluationMethodTypeCode_PropertyType evaluationMethodType {
            get {
                return this.evaluationMethodTypeField;
            }
            set {
                this.evaluationMethodTypeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("evaluationMethodDescription", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType evaluationMethodDescription {
            get {
                return this.evaluationMethodDescriptionField;
            }
            set {
                this.evaluationMethodDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("evaluationProcedure", DataType="CI_Citation_PropertyType")]
        public CI_Citation_PropertyType evaluationProcedure {
            get {
                return this.evaluationProcedureField;
            }
            set {
                this.evaluationProcedureField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("dateTime")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("dateTime", DataType="DateTime_PropertyType")]
        public DateTime_PropertyType[] dateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("result")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("result", DataType="DQ_Result_PropertyType")]
        public DQ_Result_PropertyType[] result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class DQ_EvaluationMethodTypeCode_PropertyType {
        
        private CodeListValue_Type dQ_EvaluationMethodTypeCodeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CodeListValue_Type DQ_EvaluationMethodTypeCode {
            get {
                return this.dQ_EvaluationMethodTypeCodeField;
            }
            set {
                this.dQ_EvaluationMethodTypeCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public partial class DateTime_PropertyType {
        
        private System.DateTime dateTimeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public System.DateTime DateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class DQ_Result_PropertyType {
        
        private AbstractDQ_Result_Type abstractDQ_ResultField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public AbstractDQ_Result_Type AbstractDQ_Result {
            get {
                return this.abstractDQ_ResultField;
            }
            set {
                this.abstractDQ_ResultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_PositionalAccuracy", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public abstract partial class AbstractDQ_PositionalAccuracy_Type : AbstractDQ_Element_Type {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_VerticalExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class EX_VerticalExtent_Type : AbstractObject_Type {
        
        private Real_PropertyType minimumValueField;
        
        private Real_PropertyType maximumValueField;
        
        private SC_CRS_PropertyType verticalCRSField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("minimumValue", DataType="Real_PropertyType")]
        public Real_PropertyType minimumValue {
            get {
                return this.minimumValueField;
            }
            set {
                this.minimumValueField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("maximumValue", DataType="Real_PropertyType")]
        public Real_PropertyType maximumValue {
            get {
                return this.maximumValueField;
            }
            set {
                this.maximumValueField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("verticalCRS", DataType="SC_CRS_PropertyType")]
        public SC_CRS_PropertyType verticalCRS {
            get {
                return this.verticalCRSField;
            }
            set {
                this.verticalCRSField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public partial class Real_PropertyType {
        
        private double realField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public double Real {
            get {
                return this.realField;
            }
            set {
                this.realField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gsr")]
    public partial class SC_CRS_PropertyType {
        
        private AbstractCRSType abstractCRSField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.opengis.net/gml/3.2")]
        public AbstractCRSType AbstractCRS {
            get {
                return this.abstractCRSField;
            }
            set {
                this.abstractCRSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractCRSType : IdentifiedObjectType {
        
        private domainOfValidity[] domainOfValidityField;
        
        private string[] scopeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("domainOfValidity")]
        public domainOfValidity[] domainOfValidity {
            get {
                return this.domainOfValidityField;
            }
            set {
                this.domainOfValidityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("scope")]
        public string[] scope {
            get {
                return this.scopeField;
            }
            set {
                this.scopeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class VerticalCRSType : AbstractCRSType {
        
        private VerticalCSPropertyType verticalCSField;
        
        private VerticalDatumPropertyType verticalDatumField;
        
        /// <remarks/>
        public VerticalCSPropertyType verticalCS {
            get {
                return this.verticalCSField;
            }
            set {
                this.verticalCSField = value;
            }
        }
        
        /// <remarks/>
        public VerticalDatumPropertyType verticalDatum {
            get {
                return this.verticalDatumField;
            }
            set {
                this.verticalDatumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("verticalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class VerticalCSPropertyType {
        
        private VerticalCSType verticalCSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public VerticalCSType VerticalCS {
            get {
                return this.verticalCSField;
            }
            set {
                this.verticalCSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class VerticalCSType : AbstractCoordinateSystemType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("verticalDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class VerticalDatumPropertyType {
        
        private VerticalDatumType verticalDatumField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public VerticalDatumType VerticalDatum {
            get {
                return this.verticalDatumField;
            }
            set {
                this.verticalDatumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class VerticalDatumType : AbstractDatumType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractDatumType : IdentifiedObjectType {
        
        private domainOfValidity domainOfValidityField;
        
        private string[] scopeField;
        
        private CodeType anchorDefinitionField;
        
        private System.DateTime realizationEpochField;
        
        private bool realizationEpochFieldSpecified;
        
        /// <remarks/>
        public domainOfValidity domainOfValidity {
            get {
                return this.domainOfValidityField;
            }
            set {
                this.domainOfValidityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("scope")]
        public string[] scope {
            get {
                return this.scopeField;
            }
            set {
                this.scopeField = value;
            }
        }
        
        /// <remarks/>
        public CodeType anchorDefinition {
            get {
                return this.anchorDefinitionField;
            }
            set {
                this.anchorDefinitionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        public System.DateTime realizationEpoch {
            get {
                return this.realizationEpochField;
            }
            set {
                this.realizationEpochField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool realizationEpochSpecified {
            get {
                return this.realizationEpochFieldSpecified;
            }
            set {
                this.realizationEpochFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("GeodeticDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class GeodeticDatumType : AbstractDatumType {
        
        private PrimeMeridianPropertyType primeMeridianField;
        
        private EllipsoidPropertyType ellipsoidField;
        
        /// <remarks/>
        public PrimeMeridianPropertyType primeMeridian {
            get {
                return this.primeMeridianField;
            }
            set {
                this.primeMeridianField = value;
            }
        }
        
        /// <remarks/>
        public EllipsoidPropertyType ellipsoid {
            get {
                return this.ellipsoidField;
            }
            set {
                this.ellipsoidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("primeMeridian", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class PrimeMeridianPropertyType {
        
        private PrimeMeridianType primeMeridianField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public PrimeMeridianType PrimeMeridian {
            get {
                return this.primeMeridianField;
            }
            set {
                this.primeMeridianField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("PrimeMeridian", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class PrimeMeridianType : IdentifiedObjectType {
        
        private AngleType greenwichLongitudeField;
        
        /// <remarks/>
        public AngleType greenwichLongitude {
            get {
                return this.greenwichLongitudeField;
            }
            set {
                this.greenwichLongitudeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("greenwichLongitude", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class AngleType : MeasureType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AngleType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("semiMajorAxis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class MeasureType {
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public partial class LengthType : MeasureType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ellipsoid", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class EllipsoidPropertyType {
        
        private EllipsoidType ellipsoidField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public EllipsoidType Ellipsoid {
            get {
                return this.ellipsoidField;
            }
            set {
                this.ellipsoidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("Ellipsoid", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class EllipsoidType : IdentifiedObjectType {
        
        private MeasureType semiMajorAxisField;
        
        private secondDefiningParameter secondDefiningParameterField;
        
        /// <remarks/>
        public MeasureType semiMajorAxis {
            get {
                return this.semiMajorAxisField;
            }
            set {
                this.semiMajorAxisField = value;
            }
        }
        
        /// <remarks/>
        public secondDefiningParameter secondDefiningParameter {
            get {
                return this.secondDefiningParameterField;
            }
            set {
                this.secondDefiningParameterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class secondDefiningParameter {
        
        private SecondDefiningParameter secondDefiningParameterField;
        
        /// <remarks/>
        public SecondDefiningParameter SecondDefiningParameter {
            get {
                return this.secondDefiningParameterField;
            }
            set {
                this.secondDefiningParameterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class SecondDefiningParameter {
        
        private object itemField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("inverseFlattening", typeof(MeasureType))]
        [System.Xml.Serialization.XmlElementAttribute("isSphere", typeof(bool))]
        [System.Xml.Serialization.XmlElementAttribute("semiMinorAxis", typeof(LengthType))]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGeneralDerivedCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractGeneralDerivedCRSType : AbstractCRSType {
        
        private GeneralConversionPropertyType conversionField;
        
        /// <remarks/>
        public GeneralConversionPropertyType conversion {
            get {
                return this.conversionField;
            }
            set {
                this.conversionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("conversion", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class GeneralConversionPropertyType {
        
        private AbstractGeneralConversionType abstractGeneralConversionField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public AbstractGeneralConversionType AbstractGeneralConversion {
            get {
                return this.abstractGeneralConversionField;
            }
            set {
                this.abstractGeneralConversionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGeneralConversion", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractGeneralConversionType : AbstractCoordinateOperationType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_TemporalExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class EX_TemporalExtent_Type : AbstractObject_Type {
        
        private TM_Primitive_PropertyType extentField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("extent", DataType="TM_Primitive_PropertyType")]
        public TM_Primitive_PropertyType extent {
            get {
                return this.extentField;
            }
            set {
                this.extentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gts")]
    public partial class TM_Primitive_PropertyType {
        
        private AbstractTimePrimitiveType abstractTimePrimitiveField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.opengis.net/gml/3.2")]
        public AbstractTimePrimitiveType AbstractTimePrimitive {
            get {
                return this.abstractTimePrimitiveField;
            }
            set {
                this.abstractTimePrimitiveField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class EX_TemporalExtent_PropertyType {
        
        private EX_TemporalExtent_Type eX_TemporalExtentField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public EX_TemporalExtent_Type EX_TemporalExtent {
            get {
                return this.eX_TemporalExtentField;
            }
            set {
                this.eX_TemporalExtentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class EX_VerticalExtent_PropertyType {
        
        private EX_VerticalExtent_Type eX_VerticalExtentField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public EX_VerticalExtent_Type EX_VerticalExtent {
            get {
                return this.eX_VerticalExtentField;
            }
            set {
                this.eX_VerticalExtentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class coordinateOperationAccuracy {
        
        private AbstractDQ_PositionalAccuracy_Type abstractDQ_PositionalAccuracyField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_PositionalAccuracy_Type AbstractDQ_PositionalAccuracy {
            get {
                return this.abstractDQ_PositionalAccuracyField;
            }
            set {
                this.abstractDQ_PositionalAccuracyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("sourceCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CRSPropertyType {
        
        private AbstractCRSType abstractCRSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public AbstractCRSType AbstractCRS {
            get {
                return this.abstractCRSField;
            }
            set {
                this.abstractCRSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public enum AggregationType {
        
        /// <remarks/>
        set,
        
        /// <remarks/>
        bag,
        
        /// <remarks/>
        sequence,
        
        /// <remarks/>
        array,
        
        /// <remarks/>
        record,
        
        /// <remarks/>
        table,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("SphericalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class SphericalCSType : AbstractCoordinateSystemType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("EllipsoidalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class EllipsoidalCSType : AbstractCoordinateSystemType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ellipsoidalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class EllipsoidalCSPropertyType {
        
        private EllipsoidalCSType ellipsoidalCSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public EllipsoidalCSType EllipsoidalCS {
            get {
                return this.ellipsoidalCSField;
            }
            set {
                this.ellipsoidalCSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("sphericalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class SphericalCSPropertyType {
        
        private SphericalCSType sphericalCSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public SphericalCSType SphericalCS {
            get {
                return this.sphericalCSField;
            }
            set {
                this.sphericalCSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("geodeticDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class GeodeticDatumPropertyType {
        
        private GeodeticDatumType geodeticDatumField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public GeodeticDatumType GeodeticDatum {
            get {
                return this.geodeticDatumField;
            }
            set {
                this.geodeticDatumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ProjectedEpsgCrs : AbstractProjectedCrs {
        
        private long epsgCodeField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EpsgCode", DataType="PositiveLong")]
        public long EpsgCode {
            get {
                return this.epsgCodeField;
            }
            set {
                this.epsgCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class VerticalCrs : AbstractObject {
        
        private VerticalDirection directionField;
        
        private AbstractVerticalCrs abstractVerticalCrsField;
        
        private string uomField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Direction", DataType="VerticalDirection")]
        public VerticalDirection Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AbstractVerticalCrs", DataType="AbstractVerticalCrs")]
        public AbstractVerticalCrs AbstractVerticalCrs {
            get {
                return this.abstractVerticalCrsField;
            }
            set {
                this.abstractVerticalCrsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthUomExt")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VerticalDirection {
        
        /// <remarks/>
        up,
        
        /// <remarks/>
        down,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalWktCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalUnknownCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalLocalAuthorityCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalGmlCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalEpsgCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractVerticalCrs {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VerticalWktCrs : AbstractVerticalCrs {
        
        private string wellKnownTextField;
        
        /// <remarks/>
        /// <summary>ISO 19162 compliant well known text of the CRS</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("ISO 19162 compliant well known text of the CRS")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellKnownText", DataType="string")]
        public string WellKnownText {
            get {
                return this.wellKnownTextField;
            }
            set {
                this.wellKnownTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VerticalUnknownCrs : AbstractVerticalCrs {
        
        private string unknownField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unknown", DataType="String2000")]
        public string Unknown {
            get {
                return this.unknownField;
            }
            set {
                this.unknownField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VerticalLocalAuthorityCrs : AbstractVerticalCrs {
        
        private AuthorityQualifiedName localAuthorityCrsNameField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocalAuthorityCrsName", DataType="AuthorityQualifiedName")]
        public AuthorityQualifiedName LocalAuthorityCrsName {
            get {
                return this.localAuthorityCrsNameField;
            }
            set {
                this.localAuthorityCrsNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VerticalGmlCrs : AbstractVerticalCrs {
        
        private VerticalCRSType gmlVerticalCrsDefinitionField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GmlVerticalCrsDefinition", DataType="VerticalCRSType")]
        public VerticalCRSType GmlVerticalCrsDefinition {
            get {
                return this.gmlVerticalCrsDefinitionField;
            }
            set {
                this.gmlVerticalCrsDefinitionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VerticalEpsgCrs : AbstractVerticalCrs {
        
        private long epsgCodeField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EpsgCode", DataType="PositiveLong")]
        public long EpsgCode {
            get {
                return this.epsgCodeField;
            }
            set {
                this.epsgCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class LocalEngineeringCompoundCrs : AbstractObject {
        
        private PlaneAngleMeasureExt azimuthField;
        
        private NorthReferenceKind azimuthReferenceField;
        
        private double originProjectedCoordinate1Field;
        
        private double originProjectedCoordinate2Field;
        
        private double originVerticalCoordinateField;
        
        private VerticalAxis verticalAxisField;
        
        private HorizontalAxes horizontalAxesField;
        
        private VerticalCrs verticalCrsField;
        
        private Vector originUncertaintyVectorAtSigmaXField;
        
        private ProjectedCrs projectedCrsField;
        
        /// <remarks/>
        /// <summary>Azimuth of the first axis of this Crs regarding the north kind provided in this same class.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Azimuth of the first axis of this Crs regarding the north kind provided in this s" +
            "ame class.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Azimuth", DataType="PlaneAngleMeasureExt")]
        public PlaneAngleMeasureExt Azimuth {
            get {
                return this.azimuthField;
            }
            set {
                this.azimuthField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AzimuthReference", DataType="NorthReferenceKind")]
        public NorthReferenceKind AzimuthReference {
            get {
                return this.azimuthReferenceField;
            }
            set {
                this.azimuthReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>First coordinate of the origin of the local engineering CRS in the base projected CRS (consequently in the uom of the base projected CRS)</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("First coordinate of the origin of the local engineering CRS in the base projected" +
            " CRS (consequently in the uom of the base projected CRS)")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OriginProjectedCoordinate1", DataType="double")]
        public double OriginProjectedCoordinate1 {
            get {
                return this.originProjectedCoordinate1Field;
            }
            set {
                this.originProjectedCoordinate1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Second coordinate of the origin of the local engineering CRS in the base projected CRS (consequently in the uom of the base projected CRS).</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Second coordinate of the origin of the local engineering CRS in the base projecte" +
            "d CRS (consequently in the uom of the base projected CRS).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OriginProjectedCoordinate2", DataType="double")]
        public double OriginProjectedCoordinate2 {
            get {
                return this.originProjectedCoordinate2Field;
            }
            set {
                this.originProjectedCoordinate2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Vertical coordinate of the origin of the local engineering CRS in the base vertical CRS (consequently in the uom of the base vertical CRS)</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Vertical coordinate of the origin of the local engineering CRS in the base vertic" +
            "al CRS (consequently in the uom of the base vertical CRS)")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OriginVerticalCoordinate", DataType="double")]
        public double OriginVerticalCoordinate {
            get {
                return this.originVerticalCoordinateField;
            }
            set {
                this.originVerticalCoordinateField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VerticalAxis", DataType="VerticalAxis")]
        public VerticalAxis VerticalAxis {
            get {
                return this.verticalAxisField;
            }
            set {
                this.verticalAxisField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HorizontalAxes", DataType="HorizontalAxes")]
        public HorizontalAxes HorizontalAxes {
            get {
                return this.horizontalAxesField;
            }
            set {
                this.horizontalAxesField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VerticalCrs", DataType="VerticalCrs")]
        public VerticalCrs VerticalCrs {
            get {
                return this.verticalCrsField;
            }
            set {
                this.verticalCrsField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OriginUncertaintyVectorAtSigmaX", DataType="Vector")]
        public Vector OriginUncertaintyVectorAtSigmaX {
            get {
                return this.originUncertaintyVectorAtSigmaXField;
            }
            set {
                this.originUncertaintyVectorAtSigmaXField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProjectedCrs", DataType="ProjectedCrs")]
        public ProjectedCrs ProjectedCrs {
            get {
                return this.projectedCrsField;
            }
            set {
                this.projectedCrsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class PlaneAngleMeasureExt {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="PlaneAngleUomExt")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum NorthReferenceKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("astronomic north")]
        astronomicnorth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("compass north")]
        compassnorth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("grid north")]
        gridnorth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic north")]
        magneticnorth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plant north")]
        plantnorth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("true north")]
        truenorth,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VerticalAxis {
        
        private VerticalDirection directionField;
        
        private Energistics.DataAccess.ExtensibleEnum<LengthUom> uomField;
        
        /// <remarks/>
        /// <summary>Direction of the axis. Commonly used for values such as "easting, northing, depth, etc.."</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Direction of the axis. Commonly used for values such as \"easting, northing, depth" +
            ", etc..\"")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Direction", DataType="VerticalDirection")]
        public VerticalDirection Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Uom", DataType="LengthAndTimeUomExt")]
        public Energistics.DataAccess.ExtensibleEnum<LengthUom> Uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class HorizontalAxes {
        
        private AxisDirectionKind direction1Field;
        
        private AxisDirectionKind direction2Field;
        
        private LengthMeasureExt uomField;
        
        /// <remarks/>
        /// <summary>Direction of the axis. Commonly used for values such as "easting, northing, depth, etc.."</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Direction of the axis. Commonly used for values such as \"easting, northing, depth" +
            ", etc..\"")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Direction1", DataType="AxisDirectionKind")]
        public AxisDirectionKind Direction1 {
            get {
                return this.direction1Field;
            }
            set {
                this.direction1Field = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Direction2", DataType="AxisDirectionKind")]
        public AxisDirectionKind Direction2 {
            get {
                return this.direction2Field;
            }
            set {
                this.direction2Field = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Uom", DataType="LengthMeasureExt")]
        public LengthMeasureExt Uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AxisDirectionKind {
        
        /// <remarks/>
        aft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("away-from")]
        awayfrom,
        
        /// <remarks/>
        clockwise,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("column-negative")]
        columnnegative,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("column-positive")]
        columnpositive,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("counter-clockwise")]
        counterclockwise,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("display-down")]
        displaydown,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("display-left")]
        displayleft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("display-right")]
        displayright,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("display-up")]
        displayup,
        
        /// <remarks/>
        down,
        
        /// <remarks/>
        east,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("east-north-east")]
        eastnortheast,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("east-south-east")]
        eastsoutheast,
        
        /// <remarks/>
        forward,
        
        /// <remarks/>
        future,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("geocentric x")]
        geocentricx,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("geocentric y")]
        geocentricy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("geocentric z")]
        geocentricz,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("north-east")]
        northeast,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("north-north-east")]
        northnortheast,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("north-north-west")]
        northnorthwest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("north-west")]
        northwest,
        
        /// <remarks/>
        past,
        
        /// <remarks/>
        port,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("row-negative")]
        rownegative,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("row-positive")]
        rowpositive,
        
        /// <remarks/>
        south,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("south-east")]
        southeast,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("south-south-east")]
        southsoutheast,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("south-south-west")]
        southsouthwest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("south-west")]
        southwest,
        
        /// <remarks/>
        starboard,
        
        /// <remarks/>
        towards,
        
        /// <remarks/>
        up,
        
        /// <remarks/>
        west,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("west-north-west")]
        westnorthwest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("west-south-west")]
        westsouthwest,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class LengthMeasureExt {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthUomExt")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class Vector {
        
        private double component1Field;
        
        private double component2Field;
        
        private double component3Field;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Component1", DataType="double")]
        public double Component1 {
            get {
                return this.component1Field;
            }
            set {
                this.component1Field = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Component2", DataType="double")]
        public double Component2 {
            get {
                return this.component2Field;
            }
            set {
                this.component2Field = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Component3", DataType="double")]
        public double Component3 {
            get {
                return this.component3Field;
            }
            set {
                this.component3Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class GeodeticCrs : AbstractObject {
        
        private AbstractGeodeticCrs abstractGeodeticCrsField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AbstractGeodeticCrs", DataType="AbstractGeodeticCrs")]
        public AbstractGeodeticCrs AbstractGeodeticCrs {
            get {
                return this.abstractGeodeticCrsField;
            }
            set {
                this.abstractGeodeticCrsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticWktCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticUnknownCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticLocalAuthorityCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticGmlCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticEpsgCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractGeodeticCrs {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class GeodeticWktCrs : AbstractGeodeticCrs {
        
        private string wellKnownTextField;
        
        /// <remarks/>
        /// <summary>ISO 19162 compliant well known text of the CRS</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("ISO 19162 compliant well known text of the CRS")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellKnownText", DataType="string")]
        public string WellKnownText {
            get {
                return this.wellKnownTextField;
            }
            set {
                this.wellKnownTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class GeodeticUnknownCrs : AbstractGeodeticCrs {
        
        private string unknownField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unknown", DataType="String2000")]
        public string Unknown {
            get {
                return this.unknownField;
            }
            set {
                this.unknownField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class GeodeticLocalAuthorityCrs : AbstractGeodeticCrs {
        
        private AuthorityQualifiedName localAuthorityCrsNameField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocalAuthorityCrsName", DataType="AuthorityQualifiedName")]
        public AuthorityQualifiedName LocalAuthorityCrsName {
            get {
                return this.localAuthorityCrsNameField;
            }
            set {
                this.localAuthorityCrsNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class GeodeticGmlCrs : AbstractGeodeticCrs {
        
        private GeodeticCRSType gmlGeodeticCrsDefinitionField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GmlGeodeticCrsDefinition", DataType="GeodeticCRSType")]
        public GeodeticCRSType GmlGeodeticCrsDefinition {
            get {
                return this.gmlGeodeticCrsDefinitionField;
            }
            set {
                this.gmlGeodeticCrsDefinitionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class GeodeticEpsgCrs : AbstractGeodeticCrs {
        
        private long epsgCodeField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EpsgCode", DataType="PositiveLong")]
        public long EpsgCode {
            get {
                return this.epsgCodeField;
            }
            set {
                this.epsgCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class ActivityTemplate : AbstractObject {
        
        private ParameterTemplate[] parameterField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Parameter")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="ParameterTemplate")]
        public ParameterTemplate[] Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ParameterTemplate {
        
        private ActivityParameterKind[] allowedKindField;
        
        private bool isInputField;
        
        private string[] keyConstraintField;
        
        private bool isOutputField;
        
        private string titleField;
        
        private string dataObjectContentTypeField;
        
        private long maxOccursField;
        
        private long minOccursField;
        
        private string constraintField;
        
        private AbstractActivityParameter[] defaultValueField;
        
        /// <remarks/>
        /// <summary>If no allowed type is given, then all kind of datatypes is allowed.</summary>
        [System.Xml.Serialization.XmlElementAttribute("AllowedKind")]
        [System.ComponentModel.DescriptionAttribute("If no allowed type is given, then all kind of datatypes is allowed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AllowedKind", DataType="ActivityParameterKind")]
        public ActivityParameterKind[] AllowedKind {
            get {
                return this.allowedKindField;
            }
            set {
                this.allowedKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates if the parameter is an input of the activity. If the parameter is a data object and is also an output of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Indicates if the parameter is an input of the activity. If the parameter is a data object and is also an output of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsInput", DataType="boolean")]
        public bool IsInput {
            get {
                return this.isInputField;
            }
            set {
                this.isInputField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Allows to indicate that, in the same activity, this parameter template must be associated to another parameter template identified by its title.</summary>
        [System.Xml.Serialization.XmlElementAttribute("KeyConstraint")]
        [System.ComponentModel.DescriptionAttribute("Allows to indicate that, in the same activity, this parameter template must be as" +
            "sociated to another parameter template identified by its title.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KeyConstraint", DataType="String2000")]
        public string[] KeyConstraint {
            get {
                return this.keyConstraintField;
            }
            set {
                this.keyConstraintField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates if the parameter is an output of the activity. If the parameter is a data object and is also an input of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Indicates if the parameter is an output of the activity. If the parameter is a data object and is also an input of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsOutput", DataType="boolean")]
        public bool IsOutput {
            get {
                return this.isOutputField;
            }
            set {
                this.isOutputField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the parameter in the activity. Key to identify parameter.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Name of the parameter in the activity. Key to identify parameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Title", DataType="String2000")]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>When parameter is limited to data object of given types, describe the allowed types. Used only when ParameterType is dataObject</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("When parameter is limited to data object of given types, describe the allowed typ" +
            "es. Used only when ParameterType is dataObject")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DataObjectContentType", DataType="String2000")]
        public string DataObjectContentType {
            get {
                return this.dataObjectContentTypeField;
            }
            set {
                this.dataObjectContentTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum number of parameters of this type allowed in the activity. If the maximum number of parameters is infinite, use -1 value.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Maximum number of parameters of this type allowed in the activity. If the maximum" +
            " number of parameters is infinite, use -1 value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxOccurs", DataType="long")]
        public long MaxOccurs {
            get {
                return this.maxOccursField;
            }
            set {
                this.maxOccursField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum number of parameter of this type required by the activity. If the minimum number of parameters is infinite, use -1 value.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Minimum number of parameter of this type required by the activity. If the minimum" +
            " number of parameters is infinite, use -1 value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MinOccurs", DataType="long")]
        public long MinOccurs {
            get {
                return this.minOccursField;
            }
            set {
                this.minOccursField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Textual description of additional constraint associated with the parameter. (note that it will be better to have a formal description of the constraint)</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Textual description of additional constraint associated with the parameter. (note" +
            " that it will be better to have a formal description of the constraint)")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Constraint", DataType="String2000")]
        public string Constraint {
            get {
                return this.constraintField;
            }
            set {
                this.constraintField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DefaultValue")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DefaultValue", DataType="AbstractActivityParameter")]
        public AbstractActivityParameter[] DefaultValue {
            get {
                return this.defaultValueField;
            }
            set {
                this.defaultValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ActivityParameterKind {
        
        /// <remarks/>
        dataObject,
        
        /// <remarks/>
        @double,
        
        /// <remarks/>
        integer,
        
        /// <remarks/>
        @string,
        
        /// <remarks/>
        timestamp,
        
        /// <remarks/>
        subActivity,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeIndexParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerQuantityParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleQuantityParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataObjectParameter))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractActivityParameter {
        
        private string titleField;
        
        private long indexField;
        
        private bool indexFieldSpecified;
        
        private string selectionField;
        
        private AbstractParameterKey[] keyField;
        
        /// <remarks/>
        /// <summary>Name of the parameter, used to identify it in the activity. Must have an equivalent in the activity descriptor parameters.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Name of the parameter, used to identify it in the activity. Must have an equivale" +
            "nt in the activity descriptor parameters.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Title", DataType="String2000")]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>When parameter is an array, used to indicate the index in the array</summary>
        [System.ComponentModel.DescriptionAttribute("When parameter is an array, used to indicate the index in the array")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="long")]
        public long Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IndexSpecified {
            get {
                return this.indexFieldSpecified;
            }
            set {
                this.indexFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Textual description about how this parameter was selected.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Textual description about how this parameter was selected.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Selection", DataType="String2000")]
        public string Selection {
            get {
                return this.selectionField;
            }
            set {
                this.selectionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Key")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Key", DataType="AbstractParameterKey")]
        public AbstractParameterKey[] Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeIndexParameterKey))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ObjectParameterKey))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractParameterKey {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class TimeIndexParameterKey : AbstractParameterKey {
        
        private TimeIndex timeIndexField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeIndex", DataType="TimeIndex")]
        public TimeIndex TimeIndex {
            get {
                return this.timeIndexField;
            }
            set {
                this.timeIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class TimeIndex {
        
        private long indexField;
        
        private DataObjectReference timeSeriesField;
        
        /// <remarks/>
        /// <summary>The index of the time in the time series.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The index of the time in the time series.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="NonNegativeLong")]
        public long Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeSeries", DataType="DataObjectReference")]
        public DataObjectReference TimeSeries {
            get {
                return this.timeSeriesField;
            }
            set {
                this.timeSeriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ObjectParameterKey : AbstractParameterKey {
        
        private DataObjectReference dataObjectField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DataObject", DataType="DataObjectReference")]
        public DataObjectReference DataObject {
            get {
                return this.dataObjectField;
            }
            set {
                this.dataObjectField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class TimeIndexParameter : AbstractActivityParameter {
        
        private TimeIndex timeIndexField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeIndex", DataType="TimeIndex")]
        public TimeIndex TimeIndex {
            get {
                return this.timeIndexField;
            }
            set {
                this.timeIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class StringParameter : AbstractActivityParameter {
        
        private string valueField;
        
        /// <remarks/>
        /// <summary>String value</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("String value")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="String2000")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class IntegerQuantityParameter : AbstractActivityParameter {
        
        private long valueField;
        
        /// <remarks/>
        /// <summary>Integer value</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Integer value")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="long")]
        public long Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class DoubleQuantityParameter : AbstractActivityParameter {
        
        private double valueField;
        
        private Energistics.DataAccess.ExtensibleEnum<LegacyUnitOfMeasure> uomField;
        
        private DataObjectReference customUnitDictionaryField;
        
        /// <remarks/>
        /// <summary>Double value</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Double value")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="double")]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unit of measure associated with the value</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Unit of measure associated with the value")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Uom", DataType="UnitOfMeasureExt")]
        public Energistics.DataAccess.ExtensibleEnum<LegacyUnitOfMeasure> Uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CustomUnitDictionary", DataType="DataObjectReference")]
        public DataObjectReference CustomUnitDictionary {
            get {
                return this.customUnitDictionaryField;
            }
            set {
                this.customUnitDictionaryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class DataObjectParameter : AbstractActivityParameter {
        
        private DataObjectReference dataObjectField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DataObject", DataType="DataObjectReference")]
        public DataObjectReference DataObject {
            get {
                return this.dataObjectField;
            }
            set {
                this.dataObjectField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class Activity : AbstractObject {
        
        private DataObjectReference parentField;
        
        private DataObjectReference activityDescriptorField;
        
        private AbstractActivityParameter[] parameterField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parent", DataType="DataObjectReference")]
        public DataObjectReference Parent {
            get {
                return this.parentField;
            }
            set {
                this.parentField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ActivityDescriptor", DataType="DataObjectReference")]
        public DataObjectReference ActivityDescriptor {
            get {
                return this.activityDescriptorField;
            }
            set {
                this.activityDescriptorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Parameter")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="AbstractActivityParameter")]
        public AbstractActivityParameter[] Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class EpcExternalPartReference : AbstractObject {
        
        private string filenameField;
        
        private string mimeTypeField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Filename", DataType="String2000")]
        public string Filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>IAMF registered, if one exists, or a free text field. Needs documentation on seismic especially.  MIME type for HDF proxy is : application/x-hdf5 (by convention).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("IAMF registered, if one exists, or a free text field. Needs documentation on seis" +
            "mic especially.  MIME type for HDF proxy is : application/x-hdf5 (by convention)" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MimeType", DataType="String2000")]
        public string MimeType {
            get {
                return this.mimeTypeField;
            }
            set {
                this.mimeTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public abstract partial class AbstractGrowingObject : AbstractObject {
        
        private GrowingStatusKind growingStatusField;
        
        /// <remarks/>
        /// <summary>Describes the growing status of the object, whether active, inactive or closed</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Describes the growing status of the object, whether active, inactive or closed")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GrowingStatus", DataType="GrowingStatusKind")]
        public GrowingStatusKind GrowingStatus {
            get {
                return this.growingStatusField;
            }
            set {
                this.growingStatusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum GrowingStatusKind {
        
        /// <remarks/>
        active,
        
        /// <remarks/>
        inactive,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class TimeSeries : AbstractObject {
        
        private GeologicTime[] timeField;
        
        private TimeSeriesParentage timeSeriesParentageField;
        
        /// <remarks/>
        /// <summary>Individual times composing the series. The list ordering is used by the time index.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Time")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Individual times composing the series. The list ordering is used by the time inde" +
            "x.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Time", DataType="GeologicTime")]
        public GeologicTime[] Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeSeriesParentage", DataType="TimeSeriesParentage")]
        public TimeSeriesParentage TimeSeriesParentage {
            get {
                return this.timeSeriesParentageField;
            }
            set {
                this.timeSeriesParentageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class GeologicTime {
        
        private long ageOffsetAttributeField;
        
        private bool ageOffsetAttributeFieldSpecified;
        
        private Energistics.DataAccess.Timestamp dateTimeField;
        
        /// <remarks/>
        /// <summary>A value in years of the offset between the DateTime value and the DateTime of a geologic event occurrence. This value must be POSITIVE when it represents a geological event in the past.</summary>
        [System.ComponentModel.DescriptionAttribute("A value in years of the offset between the DateTime value and the DateTime of a g" +
            "eologic event occurrence. This value must be POSITIVE when it represents a geolo" +
            "gical event in the past.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AgeOffsetAttribute", DataType="long")]
        public long AgeOffsetAttribute {
            get {
                return this.ageOffsetAttributeField;
            }
            set {
                this.ageOffsetAttributeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AgeOffsetAttributeSpecified {
            get {
                return this.ageOffsetAttributeFieldSpecified;
            }
            set {
                this.ageOffsetAttributeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A date, which can be represented according to the W3CDTF format.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A date, which can be represented according to the W3CDTF format.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DateTime", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class TimeSeriesParentage {
        
        private bool hasOverlapField;
        
        private TimeIndex parentTimeIndexField;
        
        /// <remarks/>
        /// <summary>Used to indicate that a time series overlaps with its parent time series, e.g., as may be done for simulation studies, where the end state of one calculation is the initial state of the next.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Used to indicate that a time series overlaps with its parent time series, e.g., a" +
            "s may be done for simulation studies, where the end state of one calculation is " +
            "the initial state of the next.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HasOverlap", DataType="boolean")]
        public bool HasOverlap {
            get {
                return this.hasOverlapField;
            }
            set {
                this.hasOverlapField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentTimeIndex", DataType="TimeIndex")]
        public TimeIndex ParentTimeIndex {
            get {
                return this.parentTimeIndexField;
            }
            set {
                this.parentTimeIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("PRODML", "2.1")]
    public partial class PropertyKindDictionary : AbstractObject {
        
        private PropertyKind[] propertyKindField;
        
        /// <remarks/>
        /// <summary>Defines which property kind are contained into a property kind dictionary.</summary>
        [System.Xml.Serialization.XmlElementAttribute("PropertyKind")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Defines which property kind are contained into a property kind dictionary.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PropertyKind", DataType="PropertyKind")]
        public PropertyKind[] PropertyKind {
            get {
                return this.propertyKindField;
            }
            set {
                this.propertyKindField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    public partial class WellProductionParameters : AbstractSimpleProductVolume {
        
        private System.DateTime startDateField;
        
        private bool startDateFieldSpecified;
        
        private System.DateTime endDateField;
        
        private bool endDateFieldSpecified;
        
        private Energistics.DataAccess.ExtensibleEnum<ReportingDurationKind> nominalPeriodField;
        
        private ProductionWellPeriod[] productionPeriodField;
        
        private DataObjectReference reportingEntityReferenceField;
        
        /// <remarks/>
        /// <summary>The starting date of the reporting period.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The starting date of the reporting period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartDate", DataType="date")]
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StartDateSpecified {
            get {
                return this.startDateFieldSpecified;
            }
            set {
                this.startDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ending date of the reporting period.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The ending date of the reporting period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndDate", DataType="date")]
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndDateSpecified {
            get {
                return this.endDateFieldSpecified;
            }
            set {
                this.endDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name or identifier for the reporting period to which the well production parameters apply.</summary>
        [System.ComponentModel.DescriptionAttribute("Name or identifier for the reporting period to which the well production paramete" +
            "rs apply.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NominalPeriod", DataType="ReportingDurationKindExt")]
        public Energistics.DataAccess.ExtensibleEnum<ReportingDurationKind> NominalPeriod {
            get {
                return this.nominalPeriodField;
            }
            set {
                this.nominalPeriodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Details of production at a specific choke setting.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ProductionPeriod")]
        [System.ComponentModel.DescriptionAttribute("Details of production at a specific choke setting.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductionPeriod", DataType="ProductionWellPeriod")]
        public ProductionWellPeriod[] ProductionPeriod {
            get {
                return this.productionPeriodField;
            }
            set {
                this.productionPeriodField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReportingEntityReference", DataType="DataObjectReference")]
        public DataObjectReference ReportingEntityReference {
            get {
                return this.reportingEntityReferenceField;
            }
            set {
                this.reportingEntityReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    public partial class ProductionWellTest : AbstractSimpleProductVolume {
        
        private string wellTestMethodField;
        
        private bool validateField;
        
        private bool validateFieldSpecified;
        
        private TestCondition testConditionField;
        
        private DataObjectReference reportingEntityField;
        
        /// <remarks/>
        /// <summary>Description or name of the method used to conduct the well test.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description or name of the method used to conduct the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellTestMethod", DataType="String64")]
        public string WellTestMethod {
            get {
                return this.wellTestMethodField;
            }
            set {
                this.wellTestMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Validate.</summary>
        [System.ComponentModel.DescriptionAttribute("Validate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Validate", DataType="boolean")]
        public bool Validate {
            get {
                return this.validateField;
            }
            set {
                this.validateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValidateSpecified {
            get {
                return this.validateFieldSpecified;
            }
            set {
                this.validateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestCondition", DataType="TestCondition")]
        public TestCondition TestCondition {
            get {
                return this.testConditionField;
            }
            set {
                this.testConditionField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReportingEntity", DataType="DataObjectReference")]
        public DataObjectReference ReportingEntity {
            get {
                return this.reportingEntityField;
            }
            set {
                this.reportingEntityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    public partial class TerminalLifting : AbstractSimpleProductVolume {
        
        private string certificateNumberField;
        
        private System.DateTime startTimeField;
        
        private bool startTimeFieldSpecified;
        
        private System.DateTime endTimeField;
        
        private bool endTimeFieldSpecified;
        
        private ProductFluid[] productQuantityField;
        
        private DataObjectReference loadingTerminalReferenceField;
        
        private DataObjectReference tankerReferenceField;
        
        private DataObjectReference destinationTerminalReferenceField;
        
        /// <remarks/>
        /// <summary>The certificate number for the document that defines the lifting onto the tanker.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The certificate number for the document that defines the lifting onto the tanker." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CertificateNumber", DataType="String64")]
        public string CertificateNumber {
            get {
                return this.certificateNumberField;
            }
            set {
                this.certificateNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time when the lifting began.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time when the lifting began.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartTime", DataType="dateTime")]
        public System.DateTime StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StartTimeSpecified {
            get {
                return this.startTimeFieldSpecified;
            }
            set {
                this.startTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time when the lifting ended.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time when the lifting ended.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndTime", DataType="dateTime")]
        public System.DateTime EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndTimeSpecified {
            get {
                return this.endTimeFieldSpecified;
            }
            set {
                this.endTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of product lifted.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ProductQuantity")]
        [System.ComponentModel.DescriptionAttribute("The amount of product lifted.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProductQuantity", DataType="ProductFluid")]
        public ProductFluid[] ProductQuantity {
            get {
                return this.productQuantityField;
            }
            set {
                this.productQuantityField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LoadingTerminalReference", DataType="DataObjectReference")]
        public DataObjectReference LoadingTerminalReference {
            get {
                return this.loadingTerminalReferenceField;
            }
            set {
                this.loadingTerminalReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TankerReference", DataType="DataObjectReference")]
        public DataObjectReference TankerReference {
            get {
                return this.tankerReferenceField;
            }
            set {
                this.tankerReferenceField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DestinationTerminalReference", DataType="DataObjectReference")]
        public DataObjectReference DestinationTerminalReference {
            get {
                return this.destinationTerminalReferenceField;
            }
            set {
                this.destinationTerminalReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
    public partial class AssetProductionVolumes : AbstractSimpleProductVolume {
        
        private System.DateTime startDateField;
        
        private System.DateTime endDateField;
        
        private Energistics.DataAccess.ExtensibleEnum<ReportingDurationKind> nominalPeriodField;
        
        private ReportingEntityVolumes[] reportingEntityVolumesField;
        
        /// <remarks/>
        /// <summary>The start date of the reporting period.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The start date of the reporting period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartDate", DataType="dateTime")]
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The end date of report period.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The end date of report period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndDate", DataType="dateTime")]
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Nominal period.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Nominal period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NominalPeriod", DataType="ReportingDurationKindExt")]
        public Energistics.DataAccess.ExtensibleEnum<ReportingDurationKind> NominalPeriod {
            get {
                return this.nominalPeriodField;
            }
            set {
                this.nominalPeriodField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ReportingEntityVolumes")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReportingEntityVolumes", DataType="ReportingEntityVolumes")]
        public ReportingEntityVolumes[] ReportingEntityVolumes {
            get {
                return this.reportingEntityVolumesField;
            }
            set {
                this.reportingEntityVolumesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ReportingEntityVolumes {
        
        private System.DateTime startDateField;
        
        private bool startDateFieldSpecified;
        
        private TimeMeasure durationField;
        
        private Injection[] injectionField;
        
        private AbstractDisposition[] dispositionField;
        
        private AbstractProductQuantity[] closingInventoryField;
        
        private Production[] productionField;
        
        private DeferredProductionEvent[] deferredProductionEventField;
        
        private DataObjectReference reportingEntityReferenceField;
        
        private AbstractProductQuantity[] openingInventoryField;
        
        /// <remarks/>
        /// <summary>The starting date of the month.</summary>
        [System.ComponentModel.DescriptionAttribute("The starting date of the month.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartDate", DataType="dateTime")]
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StartDateSpecified {
            get {
                return this.startDateFieldSpecified;
            }
            set {
                this.startDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>the duration of volume produced at facility</summary>
        [System.ComponentModel.DescriptionAttribute("the duration of volume produced at facility")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Duration", DataType="TimeMeasure")]
        public TimeMeasure Duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Injection")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Injection", DataType="Injection")]
        public Injection[] Injection {
            get {
                return this.injectionField;
            }
            set {
                this.injectionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Disposition")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Disposition", DataType="AbstractDisposition")]
        public AbstractDisposition[] Disposition {
            get {
                return this.dispositionField;
            }
            set {
                this.dispositionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ClosingInventory")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ClosingInventory", DataType="AbstractProductQuantity")]
        public AbstractProductQuantity[] ClosingInventory {
            get {
                return this.closingInventoryField;
            }
            set {
                this.closingInventoryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Production")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Production", DataType="Production")]
        public Production[] Production {
            get {
                return this.productionField;
            }
            set {
                this.productionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DeferredProductionEvent")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DeferredProductionEvent", DataType="DeferredProductionEvent")]
        public DeferredProductionEvent[] DeferredProductionEvent {
            get {
                return this.deferredProductionEventField;
            }
            set {
                this.deferredProductionEventField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReportingEntityReference", DataType="DataObjectReference")]
        public DataObjectReference ReportingEntityReference {
            get {
                return this.reportingEntityReferenceField;
            }
            set {
                this.reportingEntityReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("OpeningInventory")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpeningInventory", DataType="AbstractProductQuantity")]
        public AbstractProductQuantity[] OpeningInventory {
            get {
                return this.openingInventoryField;
            }
            set {
                this.openingInventoryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class Injection {
        
        private Energistics.DataAccess.ExtensibleEnum<QuantityMethod> quantityMethodField;
        
        private string remarkField;
        
        private AbstractProductQuantity[] injectionQuantityField;
        
        /// <remarks/>
        /// <summary>The method in which the quantity/volume was determined. See enum QuantityMethod.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The method in which the quantity/volume was determined. See enum QuantityMethod.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("QuantityMethod", DataType="QuantityMethodExt")]
        public Energistics.DataAccess.ExtensibleEnum<QuantityMethod> QuantityMethod {
            get {
                return this.quantityMethodField;
            }
            set {
                this.quantityMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A descriptive remark relating to any significant events.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A descriptive remark relating to any significant events.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("InjectionQuantity")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InjectionQuantity", DataType="AbstractProductQuantity")]
        public AbstractProductQuantity[] InjectionQuantity {
            get {
                return this.injectionQuantityField;
            }
            set {
                this.injectionQuantityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class TerminalLiftingDisposition : AbstractDisposition {
        
        private TerminalLifting terminalLiftingField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TerminalLifting", DataType="TerminalLifting")]
        public TerminalLifting TerminalLifting {
            get {
                return this.terminalLiftingField;
            }
            set {
                this.terminalLiftingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public partial class ProductDisposition : AbstractDisposition {
        
        private Energistics.DataAccess.ExtensibleEnum<DispositionKind> kindField;
        
        /// <remarks/>
        /// <summary>The method of disposition. See enum DispositionKind.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The method of disposition. See enum DispositionKind.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="DispositionKindExt")]
        public Energistics.DataAccess.ExtensibleEnum<DispositionKind> Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum Facet {
        
        /// <remarks/>
        I,
        
        /// <remarks/>
        J,
        
        /// <remarks/>
        K,
        
        /// <remarks/>
        X,
        
        /// <remarks/>
        Y,
        
        /// <remarks/>
        Z,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("I+")]
        I1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J+")]
        J1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K+")]
        K1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("X+")]
        X1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Y+")]
        Y1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Z+")]
        Z1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("I-")]
        I2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J-")]
        J2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K-")]
        K2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("X-")]
        X2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Y-")]
        Y2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Z-")]
        Z2,
        
        /// <remarks/>
        net,
        
        /// <remarks/>
        gross,
        
        /// <remarks/>
        plus,
        
        /// <remarks/>
        minus,
        
        /// <remarks/>
        average,
        
        /// <remarks/>
        maximum,
        
        /// <remarks/>
        minimum,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("maximum threshold")]
        maximumthreshold,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("minimum threshold")]
        minimumthreshold,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("surface condition")]
        surfacecondition,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reservoir condition")]
        reservoircondition,
        
        /// <remarks/>
        oil,
        
        /// <remarks/>
        water,
        
        /// <remarks/>
        gas,
        
        /// <remarks/>
        condensate,
        
        /// <remarks/>
        cumulative,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum FacetKind {
        
        /// <remarks/>
        conditions,
        
        /// <remarks/>
        side,
        
        /// <remarks/>
        direction,
        
        /// <remarks/>
        netgross,
        
        /// <remarks/>
        qualifier,
        
        /// <remarks/>
        statistics,
        
        /// <remarks/>
        what,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LegacyMassPerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/scm")]
        kgscm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/1000scf")]
        lbm1000scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/1E6scf")]
        lbm1E6scf,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LegacyPressurePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/scm")]
        Pascm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/1000scf")]
        psi1000scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/1E6scf")]
        psi1E6scf,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LegacyPressureUom {
        
        /// <remarks/>
        psia,
        
        /// <remarks/>
        psig,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LegacyVolumePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6stb/acre")]
        Item1E6stbacre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scf/ft2")]
        scfft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scm/m2")]
        scmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/acre")]
        stbacre,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LegacyVolumePerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000scf/d")]
        Item1000scfd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000scf/mo")]
        Item1000scfmo,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000scm/d")]
        Item1000scmd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000scm/mo")]
        Item1000scmmo,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000stb/d")]
        Item1000stbd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000stb/mo")]
        Item1000stbmo,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6scf/d")]
        Item1E6scfd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6scf/mo")]
        Item1E6scfmo,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6scm/d")]
        Item1E6scmd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6scm/mo")]
        Item1E6scmmo,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6stb/d")]
        Item1E6stbd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6stb/mo")]
        Item1E6stbmo,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scf/d")]
        scfd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scm/d")]
        scmd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scm/h")]
        scmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scm/mo")]
        scmmo,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scm/s")]
        scms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/d")]
        stbd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/mo")]
        stbmo,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LegacyVolumePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000scf/stb")]
        Item1000scfstb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6scf/stb")]
        Item1E6scfstb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6stb/acre.ft")]
        Item1E6stbacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acre.ft/1E6stb")]
        acreft1E6stb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/1000scf")]
        bbl1000scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/1E6scf")]
        bbl1E6scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/scf")]
        bblscf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/stb")]
        bblstb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/scf")]
        ft3scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/stb")]
        ft3stb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("galUS/1000scf")]
        galUS1000scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/scm")]
        m3scm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ml/scm")]
        mlscm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scf/bbl")]
        scfbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scf/ft3")]
        scfft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scf/scf")]
        scfscf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scf/stb")]
        scfstb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scm/m3")]
        scmm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scm/scm")]
        scmscm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scm/stb")]
        scmstb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/1000scf")]
        stb1000scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/1000scm")]
        stb1000scm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/1E6scf")]
        stb1E6scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/1E6scm")]
        stb1E6scm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/bbl")]
        stbbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/scm")]
        stbscm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/stb")]
        stbstb,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LegacyVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000scm")]
        Item1000scm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000stb")]
        Item1000stb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6scf")]
        Item1E6scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6scm")]
        Item1E6scm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6stb")]
        Item1E6stb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E9scf")]
        Item1E9scf,
        
        /// <remarks/>
        kscf,
        
        /// <remarks/>
        scf,
        
        /// <remarks/>
        scm,
        
        /// <remarks/>
        stb,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AbsorbedDoseUom {
        
        /// <remarks/>
        cGy,
        
        /// <remarks/>
        crd,
        
        /// <remarks/>
        dGy,
        
        /// <remarks/>
        drd,
        
        /// <remarks/>
        EGy,
        
        /// <remarks/>
        Erd,
        
        /// <remarks/>
        fGy,
        
        /// <remarks/>
        frd,
        
        /// <remarks/>
        GGy,
        
        /// <remarks/>
        Grd,
        
        /// <remarks/>
        Gy,
        
        /// <remarks/>
        kGy,
        
        /// <remarks/>
        krd,
        
        /// <remarks/>
        mGy,
        
        /// <remarks/>
        MGy,
        
        /// <remarks/>
        Mrd,
        
        /// <remarks/>
        mrd,
        
        /// <remarks/>
        nGy,
        
        /// <remarks/>
        nrd,
        
        /// <remarks/>
        pGy,
        
        /// <remarks/>
        prd,
        
        /// <remarks/>
        rd,
        
        /// <remarks/>
        TGy,
        
        /// <remarks/>
        Trd,
        
        /// <remarks/>
        uGy,
        
        /// <remarks/>
        urd,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ActivityOfRadioactivityUom {
        
        /// <remarks/>
        Bq,
        
        /// <remarks/>
        Ci,
        
        /// <remarks/>
        GBq,
        
        /// <remarks/>
        MBq,
        
        /// <remarks/>
        mCi,
        
        /// <remarks/>
        nCi,
        
        /// <remarks/>
        pCi,
        
        /// <remarks/>
        TBq,
        
        /// <remarks/>
        uCi,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstancePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/m2")]
        molm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstancePerTimePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/(h.ft2)")]
        lbmolhft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/(s.ft2)")]
        lbmolsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/(s.m2)")]
        molsm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstancePerTimeUom {
        
        /// <remarks/>
        kat,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/h")]
        kmolh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/s")]
        kmols,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/h")]
        lbmolh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/s")]
        lbmols,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/s")]
        mols,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstancePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/m3")]
        kmolm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/ft3")]
        lbmolft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/gal[UK]")]
        lbmolgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/gal[US]")]
        lbmolgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/m3")]
        molm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AnglePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 dega/ft")]
        Item001degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 dega/ft")]
        Item130degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 dega/m")]
        Item130degam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/ft")]
        degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/m")]
        degam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/ft")]
        radft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/m")]
        radm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/ft")]
        revft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/m")]
        revm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AnglePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/ft3")]
        radft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/m3")]
        radm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AngularAccelerationUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/s2")]
        rads2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rpm/s")]
        rpms,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum APIGammaRayUom {
        
        /// <remarks/>
        gAPI,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum APINeutronUom {
        
        /// <remarks/>
        nAPI,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaPerAmountOfSubstanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/mol")]
        m2mol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaPerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[area]")]
        area,
        
        /// <remarks/>
        cEuc,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/ft2")]
        in2ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/in2")]
        in2in2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/m2")]
        m2m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/mm2")]
        mm2mm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaPerCountUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("b/electron")]
        belectron,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaPerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/g")]
        cm2g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/lbm")]
        ft2lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/g")]
        m2g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/kg")]
        m2kg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaPerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/s")]
        cm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/h")]
        ft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/s")]
        ft2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/s")]
        in2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/d")]
        m2d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/h")]
        m2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/s")]
        m2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/s")]
        mm2s,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaPerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m")]
        Item1m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("b/cm3")]
        bcm3,
        
        /// <remarks/>
        cu,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/in3")]
        ft2in3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/cm3")]
        m2cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/m3")]
        m2m3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AttenuationPerFrequencyIntervalUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B/O")]
        BO,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/O")]
        dBO,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum CapacitanceUom {
        
        /// <remarks/>
        cF,
        
        /// <remarks/>
        dF,
        
        /// <remarks/>
        EF,
        
        /// <remarks/>
        F,
        
        /// <remarks/>
        fF,
        
        /// <remarks/>
        GF,
        
        /// <remarks/>
        kF,
        
        /// <remarks/>
        mF,
        
        /// <remarks/>
        MF,
        
        /// <remarks/>
        nF,
        
        /// <remarks/>
        pF,
        
        /// <remarks/>
        TF,
        
        /// <remarks/>
        uF,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum CationExchangeCapacityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute(".01 meq/g")]
        Item01meqg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DataTransferSpeedUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit/s")]
        bits,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("byte/s")]
        bytes,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DiffusionCoefficientUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/s")]
        m2s,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DiffusiveTimeOfFlightUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h(0.5)")]
        h05,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s(0.5)")]
        s05,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DigitalStorageUom {
        
        /// <remarks/>
        bit,
        
        /// <remarks/>
        @byte,
        
        /// <remarks/>
        Kibyte,
        
        /// <remarks/>
        Mibyte,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DipoleMomentUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C.m")]
        Cm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DoseEquivalentUom {
        
        /// <remarks/>
        mrem,
        
        /// <remarks/>
        mSv,
        
        /// <remarks/>
        rem,
        
        /// <remarks/>
        Sv,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricChargePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/cm2")]
        Ccm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/m2")]
        Cm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/mm2")]
        Cmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mC/m2")]
        mCm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricChargePerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s/kg")]
        Askg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/g")]
        Cg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/kg")]
        Ckg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricChargePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s/m3")]
        Asm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/cm3")]
        Ccm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/m3")]
        Cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/mm3")]
        Cmm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricChargeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.h")]
        Ah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s")]
        As,
        
        /// <remarks/>
        C,
        
        /// <remarks/>
        cC,
        
        /// <remarks/>
        dC,
        
        /// <remarks/>
        EC,
        
        /// <remarks/>
        fC,
        
        /// <remarks/>
        GC,
        
        /// <remarks/>
        kC,
        
        /// <remarks/>
        MC,
        
        /// <remarks/>
        mC,
        
        /// <remarks/>
        nC,
        
        /// <remarks/>
        pC,
        
        /// <remarks/>
        TC,
        
        /// <remarks/>
        uC,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricConductanceUom {
        
        /// <remarks/>
        cS,
        
        /// <remarks/>
        dS,
        
        /// <remarks/>
        ES,
        
        /// <remarks/>
        fS,
        
        /// <remarks/>
        GS,
        
        /// <remarks/>
        kS,
        
        /// <remarks/>
        mS,
        
        /// <remarks/>
        MS,
        
        /// <remarks/>
        nS,
        
        /// <remarks/>
        pS,
        
        /// <remarks/>
        S,
        
        /// <remarks/>
        TS,
        
        /// <remarks/>
        uS,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricCurrentDensityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/cm2")]
        Acm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/ft2")]
        Aft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/m2")]
        Am2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/mm2")]
        Amm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mA/cm2")]
        mAcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mA/ft2")]
        mAft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uA/cm2")]
        uAcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uA/in2")]
        uAin2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricFieldStrengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mV/ft")]
        mVft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mV/m")]
        mVm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uV/ft")]
        uVft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uV/m")]
        uVm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/m")]
        Vm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricPotentialDifferenceUom {
        
        /// <remarks/>
        cV,
        
        /// <remarks/>
        dV,
        
        /// <remarks/>
        fV,
        
        /// <remarks/>
        GV,
        
        /// <remarks/>
        kV,
        
        /// <remarks/>
        mV,
        
        /// <remarks/>
        MV,
        
        /// <remarks/>
        nV,
        
        /// <remarks/>
        pV,
        
        /// <remarks/>
        TV,
        
        /// <remarks/>
        uV,
        
        /// <remarks/>
        V,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricResistancePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm/m")]
        ohmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uohm/ft")]
        uohmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uohm/m")]
        uohmm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricResistanceUom {
        
        /// <remarks/>
        cohm,
        
        /// <remarks/>
        dohm,
        
        /// <remarks/>
        Eohm,
        
        /// <remarks/>
        fohm,
        
        /// <remarks/>
        Gohm,
        
        /// <remarks/>
        kohm,
        
        /// <remarks/>
        Mohm,
        
        /// <remarks/>
        mohm,
        
        /// <remarks/>
        nohm,
        
        /// <remarks/>
        ohm,
        
        /// <remarks/>
        pohm,
        
        /// <remarks/>
        Tohm,
        
        /// <remarks/>
        uohm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectromagneticMomentUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.m2")]
        Am2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyLengthPerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J.m/m2")]
        Jmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th].m/cm2")]
        kcalthmcm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyPerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/cm2")]
        ergcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/cm2")]
        Jcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m2")]
        Jm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m/cm2")]
        kgfmcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/in2")]
        lbfftin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mJ/cm2")]
        mJcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mJ/m2")]
        mJm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m")]
        Nm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m")]
        Jm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/m")]
        MJm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyPerMassPerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mrem/h")]
        mremh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mSv/h")]
        mSvh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rem/h")]
        remh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Sv/h")]
        Svh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Sv/s")]
        Svs,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForceAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne.cm2")]
        dynecm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m2")]
        kgfm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN.m2")]
        kNm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in2")]
        lbfin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN.m2")]
        mNm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m2")]
        Nm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl.cm2")]
        pdlcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK].ft2")]
        tonfUKft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].ft2")]
        tonfUSft2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForceLengthPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m/m")]
        kgfmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/in")]
        lbfftin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in/in")]
        lbfinin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m/m")]
        Nmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi/ft")]
        tonfUSmift,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForcePerForceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/kgf")]
        kgfkgf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/lbf")]
        lbflbf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/N")]
        NN,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForcePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 psi/ft")]
        Item0001psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 psi/ft")]
        Item001psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/ft")]
        atmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/hm")]
        atmhm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/m")]
        atmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/km")]
        barkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/m")]
        barm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("GPa/cm")]
        GPacm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/hm")]
        kPahm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/m")]
        kPam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft3")]
        lbfft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/gal[US]")]
        lbfgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa/m")]
        MPam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m3")]
        Nm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/m")]
        Pam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/ft")]
        psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/m")]
        psim,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 kN")]
        Item10kN,
        
        /// <remarks/>
        cN,
        
        /// <remarks/>
        daN,
        
        /// <remarks/>
        dN,
        
        /// <remarks/>
        dyne,
        
        /// <remarks/>
        EN,
        
        /// <remarks/>
        fN,
        
        /// <remarks/>
        gf,
        
        /// <remarks/>
        GN,
        
        /// <remarks/>
        hN,
        
        /// <remarks/>
        kdyne,
        
        /// <remarks/>
        kgf,
        
        /// <remarks/>
        klbf,
        
        /// <remarks/>
        kN,
        
        /// <remarks/>
        lbf,
        
        /// <remarks/>
        Mgf,
        
        /// <remarks/>
        mN,
        
        /// <remarks/>
        MN,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        nN,
        
        /// <remarks/>
        ozf,
        
        /// <remarks/>
        pdl,
        
        /// <remarks/>
        pN,
        
        /// <remarks/>
        TN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]")]
        tonfUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]")]
        tonfUS,
        
        /// <remarks/>
        uN,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum FrequencyIntervalUom {
        
        /// <remarks/>
        O,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum HeatCapacityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/deltaK")]
        JdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum HeatFlowRateUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 Btu[IT]/h")]
        Item1E6BtuITh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/h")]
        BtuITh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/min")]
        BtuITmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/s")]
        BtuITs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/h")]
        calthh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("EJ/a")]
        EJa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/a")]
        erga,
        
        /// <remarks/>
        GW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/s")]
        Js,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/h")]
        kcalthh,
        
        /// <remarks/>
        kW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/min")]
        lbfftmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/s")]
        lbffts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/a")]
        MJa,
        
        /// <remarks/>
        mW,
        
        /// <remarks/>
        MW,
        
        /// <remarks/>
        nW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("quad/a")]
        quada,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TJ/a")]
        TJa,
        
        /// <remarks/>
        TW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]/s")]
        ucalths,
        
        /// <remarks/>
        uW,
        
        /// <remarks/>
        W,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum HeatTransferCoefficientUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2.deltaF)")]
        BtuIThft2deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2.deltaR)")]
        BtuIThft2deltaR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.m2.deltaC)")]
        BtuIThm2deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft2.deltaF)")]
        BtuITsft2deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm2.deltaC)")]
        calthhcm2deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm2.deltaC)")]
        calthscm2deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(s.m2.deltaC)")]
        Jsm2deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(h.m2.deltaC)")]
        kcalthhm2deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(h.m2.deltaK)")]
        kJhm2deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/(m2.deltaK)")]
        kWm2deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m2.deltaK)")]
        Wm2deltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum IlluminanceUom {
        
        /// <remarks/>
        footcandle,
        
        /// <remarks/>
        klx,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm/m2")]
        lmm2,
        
        /// <remarks/>
        lx,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum InductanceUom {
        
        /// <remarks/>
        cH,
        
        /// <remarks/>
        dH,
        
        /// <remarks/>
        EH,
        
        /// <remarks/>
        fH,
        
        /// <remarks/>
        GH,
        
        /// <remarks/>
        H,
        
        /// <remarks/>
        kH,
        
        /// <remarks/>
        MH,
        
        /// <remarks/>
        mH,
        
        /// <remarks/>
        nH,
        
        /// <remarks/>
        TH,
        
        /// <remarks/>
        uH,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum KinematicViscosityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/s")]
        cm2s,
        
        /// <remarks/>
        cSt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/h")]
        ft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/s")]
        ft2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/s")]
        in2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/h")]
        m2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/s")]
        m2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/s")]
        mm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s.m3/kg")]
        Pasm3kg,
        
        /// <remarks/>
        St,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/lbm")]
        ftlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/kg")]
        mkg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/psi")]
        ftpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/kPa")]
        mkPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/Pa")]
        mPa,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerTemperatureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/deltaF")]
        ftdeltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/deltaK")]
        mdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/bbl")]
        ftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ft3")]
        ftft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/gal[US]")]
        ftgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/dm3")]
        kmdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/L")]
        kmL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/m3")]
        mm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/gal[UK]")]
        migalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/gal[US]")]
        migalUS,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LightExposureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("footcandle.s")]
        footcandles,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lx.s")]
        lxs,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LinearAccelerationUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/s2")]
        cms2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/s2")]
        fts2,
        
        /// <remarks/>
        Gal,
        
        /// <remarks/>
        gn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/s2")]
        ins2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/s2")]
        ms2,
        
        /// <remarks/>
        mGal,
        
        /// <remarks/>
        mgn,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LinearThermalExpansionUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/deltaK")]
        Item1deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/(in.deltaF)")]
        inindeltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/(m.deltaK)")]
        mmdeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/(mm.deltaK)")]
        mmmmdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LogarithmicPowerRatioUom {
        
        /// <remarks/>
        B,
        
        /// <remarks/>
        dB,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LuminanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cd/m2")]
        cdm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LuminousEfficacyUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm/W")]
        lmW,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LuminousFluxUom {
        
        /// <remarks/>
        lm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LuminousIntensityUom {
        
        /// <remarks/>
        cd,
        
        /// <remarks/>
        kcd,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticDipoleMomentUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb.m")]
        Wbm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticFieldStrengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/m")]
        Am,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/mm")]
        Amm,
        
        /// <remarks/>
        Oe,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticFluxDensityPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gauss/cm")]
        gausscm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mT/dm")]
        mTdm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("T/m")]
        Tm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticFluxDensityUom {
        
        /// <remarks/>
        cgauss,
        
        /// <remarks/>
        cT,
        
        /// <remarks/>
        dgauss,
        
        /// <remarks/>
        dT,
        
        /// <remarks/>
        Egauss,
        
        /// <remarks/>
        ET,
        
        /// <remarks/>
        fgauss,
        
        /// <remarks/>
        fT,
        
        /// <remarks/>
        gauss,
        
        /// <remarks/>
        Ggauss,
        
        /// <remarks/>
        GT,
        
        /// <remarks/>
        kgauss,
        
        /// <remarks/>
        kT,
        
        /// <remarks/>
        mgauss,
        
        /// <remarks/>
        Mgauss,
        
        /// <remarks/>
        mT,
        
        /// <remarks/>
        ngauss,
        
        /// <remarks/>
        nT,
        
        /// <remarks/>
        pgauss,
        
        /// <remarks/>
        pT,
        
        /// <remarks/>
        T,
        
        /// <remarks/>
        Tgauss,
        
        /// <remarks/>
        TT,
        
        /// <remarks/>
        ugauss,
        
        /// <remarks/>
        uT,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticFluxUom {
        
        /// <remarks/>
        cWb,
        
        /// <remarks/>
        dWb,
        
        /// <remarks/>
        EWb,
        
        /// <remarks/>
        fWb,
        
        /// <remarks/>
        GWb,
        
        /// <remarks/>
        kWb,
        
        /// <remarks/>
        mWb,
        
        /// <remarks/>
        MWb,
        
        /// <remarks/>
        nWb,
        
        /// <remarks/>
        pWb,
        
        /// <remarks/>
        TWb,
        
        /// <remarks/>
        uWb,
        
        /// <remarks/>
        Wb,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticPermeabilityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("H/m")]
        Hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uH/m")]
        uHm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticVectorPotentialUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb/m")]
        Wbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb/mm")]
        Wbmm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m")]
        kgm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft")]
        lbmft,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbm/ft2")]
        Item001lbmft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m2")]
        kgm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft2")]
        lbmft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/m2")]
        Mgm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/ft2")]
        tonUSft2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerEnergyUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(kW.h)")]
        kgkWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/J")]
        kgJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/MJ")]
        kgMJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(hp.h)")]
        lbmhph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/J")]
        mgJ,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m/cm2")]
        kgmcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m")]
        kgm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("klbm/in")]
        klbmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft")]
        lbmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/in")]
        Mgin,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerTimePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g.ft/(cm3.s)")]
        gftcm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g.m/(cm3.s)")]
        gmcm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(m2.s)")]
        kgm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa.s/m")]
        kPasm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft2.h)")]
        lbmft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft2.s)")]
        lbmft2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa.s/m")]
        MPasm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerTimePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(m.s)")]
        kgms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft.h)")]
        lbmfth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft.s)")]
        lbmfts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s")]
        Pas,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerVolumePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/cm4")]
        gcm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/dm4")]
        kgdm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m4")]
        kgm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(gal[UK].ft)")]
        lbmgalUKft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(gal[US].ft)")]
        lbmgalUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft4")]
        lbmft4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s2/m3")]
        Pas2m3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerVolumePerPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m3.kPa")]
        kgm3kPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lb/ft.psi")]
        lbftpsi,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerVolumePerTemperatureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m3.degC")]
        kgm3degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m3.K")]
        kgm3K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lb/ft.degF")]
        lbftdegF,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/bbl")]
        Item0001lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/gal[UK]")]
        Item0001lbmgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/gal[US]")]
        Item0001lbmgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 grain/ft3")]
        Item001grainft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 lbm/bbl")]
        Item01lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 Mg/m3")]
        Item10Mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/cm3")]
        gcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/dm3")]
        gdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/gal[UK]")]
        ggalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/gal[US]")]
        ggalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/L")]
        gL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/m3")]
        gm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("grain/ft3")]
        grainft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("grain/gal[US]")]
        graingalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/dm3")]
        kgdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/L")]
        kgL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m3")]
        kgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/bbl")]
        lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft3")]
        lbmft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/gal[UK]")]
        lbmgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/gal[US]")]
        lbmgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/in3")]
        lbmin3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/dm3")]
        mgdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/gal[US]")]
        mggalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/L")]
        mgL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/m3")]
        mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/m3")]
        Mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/m3")]
        tm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/cm3")]
        ugcm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MobilityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D/(Pa.s)")]
        DPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D/cP")]
        DcP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.ft2/(lbf.s)")]
        mDft2lbfs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.in2/(lbf.s)")]
        mDin2lbfs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD/(Pa.s)")]
        mDPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD/cP")]
        mDcP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API]/(Pa.s)")]
        TDAPIPas,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MolarHeatCapacityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbmol.deltaF)")]
        BtuITlbmoldeltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(mol.deltaC)")]
        calthmoldeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(mol.deltaK)")]
        JmoldeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(kmol.deltaK)")]
        kJkmoldeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MomentOfForceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 lbf.ft")]
        Item1000lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("daN.m")]
        daNm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dN.m")]
        dNm,
        
        /// <remarks/>
        J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m")]
        kgfm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN.m")]
        kNm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft")]
        lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in")]
        lbfin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft2/s2")]
        lbmft2s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m")]
        Nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl.ft")]
        pdlft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].ft")]
        tonfUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi")]
        tonfUSmi,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MomentOfInertiaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m2")]
        kgm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft2")]
        lbmft2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MomentumUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m/s")]
        kgms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft/s")]
        lbmfts,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum NormalizedPowerUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B.W")]
        BW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.mW")]
        dBmW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.MW")]
        dBMW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.W")]
        dBW,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PermeabilityLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D.ft")]
        Dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D.m")]
        Dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.ft")]
        mDft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.m")]
        mDm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API].m")]
        TDAPIm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PermittivityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("F/m")]
        Fm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uF/m")]
        uFm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PotentialDifferencePerPowerDropUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/B")]
        VB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/dB")]
        VdB,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PowerPerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2)")]
        BtuIThft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft2)")]
        BtuITsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm2)")]
        calthhcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp/in2")]
        hpin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[hyd]/in2")]
        hphydin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/cm2")]
        kWcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/m2")]
        kWm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mW/m2")]
        mWm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]/(s.cm2)")]
        ucalthscm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/cm2")]
        Wcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/m2")]
        Wm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/mm2")]
        Wmm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PowerPerPowerUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(hp.h)")]
        BtuIThph,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/kW")]
        WkW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/W")]
        WW,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PowerPerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft3)")]
        BtuIThft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft3)")]
        BtuITsft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm3)")]
        calthhcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm3)")]
        calthscm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp/ft3")]
        hpft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/m3")]
        kWm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uW/m3")]
        uWm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/m3")]
        Wm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PowerUom {
        
        /// <remarks/>
        cW,
        
        /// <remarks/>
        dW,
        
        /// <remarks/>
        EW,
        
        /// <remarks/>
        fW,
        
        /// <remarks/>
        GW,
        
        /// <remarks/>
        hp,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[elec]")]
        hpelec,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[hyd]")]
        hphyd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[metric]")]
        hpmetric,
        
        /// <remarks/>
        kW,
        
        /// <remarks/>
        MW,
        
        /// <remarks/>
        mW,
        
        /// <remarks/>
        nW,
        
        /// <remarks/>
        pW,
        
        /// <remarks/>
        tonRefrig,
        
        /// <remarks/>
        TW,
        
        /// <remarks/>
        uW,
        
        /// <remarks/>
        W,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressurePerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/h")]
        atmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/h")]
        barh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/h")]
        kPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/min")]
        kPamin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa/h")]
        MPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/h")]
        Pah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/s")]
        Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/h")]
        psih,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/min")]
        psimin,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressurePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/m3")]
        Pam3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi2.d/(cP.ft3)")]
        psi2dcPft3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressureSquaredPerForceTimePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 kPa2/cP")]
        Item0001kPa2cP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar2/cP")]
        bar2cP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa2/cP")]
        kPa2cP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa2/(Pa.s)")]
        Pa2Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi2/cP")]
        psi2cP,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressureSquaredUom {
        
        /// <remarks/>
        bar2,
        
        /// <remarks/>
        GPa2,
        
        /// <remarks/>
        kPa2,
        
        /// <remarks/>
        kpsi2,
        
        /// <remarks/>
        Pa2,
        
        /// <remarks/>
        psi2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressureTimePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s/m3")]
        Pasm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi.d/bbl")]
        psidbbl,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum QuantityOfLightUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm.s")]
        lms,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum RadianceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m2.sr)")]
        Wm2sr,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum RadiantIntensityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/sr")]
        Wsr,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft2")]
        Item1ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/km2")]
        Item1km2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m2")]
        Item1m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mi2")]
        Item1mi2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalElectricPotentialDifferenceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/uV")]
        Item1uV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/V")]
        Item1V,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalForceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/lbf")]
        Item1lbf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/N")]
        Item1N,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/angstrom")]
        Item1angstrom,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/cm")]
        Item1cm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft")]
        Item1ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/in")]
        Item1in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m")]
        Item1m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mi")]
        Item1mi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mm")]
        Item1mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/nm")]
        Item1nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/yd")]
        Item1yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-9 1/ft")]
        Item1E91ft,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalMassTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/(kg.s)")]
        Item1kgs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Bq/kg")]
        Bqkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pCi/g")]
        pCig,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/g")]
        Item1g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/kg")]
        Item1kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/lbm")]
        Item1lbm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/a")]
        Item1a,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/d")]
        Item1d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/h")]
        Item1h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/min")]
        Item1min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ms")]
        Item1ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/s")]
        Item1s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/us")]
        Item1us,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/wk")]
        Item1wk,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/bbl")]
        Item1bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft3")]
        Item1ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/gal[UK]")]
        Item1galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/gal[US]")]
        Item1galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/L")]
        Item1L,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m3")]
        Item1m3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReluctanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/H")]
        Item1H,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum SecondMomentOfAreaUom {
        
        /// <remarks/>
        cm4,
        
        /// <remarks/>
        in4,
        
        /// <remarks/>
        m4,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum SignalingEventPerTimeUom {
        
        /// <remarks/>
        Bd,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum SolidAngleUom {
        
        /// <remarks/>
        sr,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum SpecificHeatCapacityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbm.deltaF)")]
        BtuITlbmdeltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbm.deltaR)")]
        BtuITlbmdeltaR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(g.deltaK)")]
        calthgdeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(g.deltaK)")]
        JgdeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(kg.deltaK)")]
        JkgdeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(kg.deltaC)")]
        kcalthkgdeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(kg.deltaK)")]
        kJkgdeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/(kg.deltaC)")]
        kWhkgdeltaC,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TemperatureIntervalPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 deltaF/ft")]
        Item001deltaFft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/ft")]
        deltaCft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/hm")]
        deltaChm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/km")]
        deltaCkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/m")]
        deltaCm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/ft")]
        deltaFft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/m")]
        deltaFm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK/km")]
        deltaKkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK/m")]
        deltaKm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TemperatureIntervalPerPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/kPa")]
        deltaCkPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/psi")]
        deltaFpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK/Pa")]
        deltaKPa,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TemperatureIntervalPerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/h")]
        deltaCh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/min")]
        deltaCmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/s")]
        deltaCs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/h")]
        deltaFh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/min")]
        deltaFmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/s")]
        deltaFs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK/s")]
        deltaKs,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TemperatureIntervalUom {
        
        /// <remarks/>
        deltaC,
        
        /// <remarks/>
        deltaF,
        
        /// <remarks/>
        deltaK,
        
        /// <remarks/>
        deltaR,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermalConductanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/deltaK")]
        WdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermalConductivityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft.deltaF)")]
        BtuIThftdeltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm.deltaC)")]
        calthhcmdeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm.deltaC)")]
        calthscmdeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(h.m.deltaC)")]
        kcalthhmdeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m.deltaK)")]
        WmdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermalDiffusivityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/s")]
        cm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/h")]
        ft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/s")]
        ft2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/s")]
        in2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/h")]
        m2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/s")]
        m2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/s")]
        mm2s,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermalInsulanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC.m2.h/kcal[th]")]
        deltaCm2hkcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF.ft2.h/Btu[IT]")]
        deltaFft2hBtuIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK.m2/kW")]
        deltaKm2kW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK.m2/W")]
        deltaKm2W,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermalResistanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK/W")]
        deltaKW,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TimePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 h/ft")]
        Item0001hft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/km")]
        hkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("min/ft")]
        minft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("min/m")]
        minm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/cm")]
        mscm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/ft")]
        msft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/in")]
        msin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/m")]
        msm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ns/ft")]
        nsft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ns/m")]
        nsm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/cm")]
        scm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/ft")]
        sft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/in")]
        sin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/m")]
        sm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/ft")]
        usft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/in")]
        usin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/m")]
        usm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TimePerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/kg")]
        skg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TimePerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/s")]
        mss,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/s")]
        ss,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TimePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 d/ft3")]
        Item0001dft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/bbl")]
        dbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/ft3")]
        dft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/m3")]
        dm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/ft3")]
        hft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/m3")]
        hm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/ft3")]
        sft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/L")]
        sL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/m3")]
        sm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/qt[UK]")]
        sqtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/qt[US]")]
        sqtUS,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumeFlowRatePerVolumeFlowRateUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(bbl/d)/(bbl/d)")]
        bbldbbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(m3/d)/(m3/d)")]
        m3dm3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(m3/s)/(m3/s)")]
        m3sm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 (ft3/d)/(bbl/d)")]
        Item1E6ft3dbbld,
        
        /// <remarks/>
        Euc,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/acre")]
        Item1E6bblacre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/acre")]
        bblacre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft2")]
        ft3ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m2")]
        m3m2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 dm3/km")]
        Item001dm3km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 L/km")]
        Item001Lkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ft")]
        bblft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/in")]
        bblin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/mi")]
        bblmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/m")]
        dm3m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft")]
        ft3ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/mi")]
        galUKmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ft")]
        galUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/mi")]
        galUSmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in3/ft")]
        in3ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/m")]
        Lm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/km")]
        m3km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m")]
        m3m,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/psi")]
        bblpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kPa")]
        m3kPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/Pa")]
        m3Pa,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerRotationUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/rad")]
        ft3rad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/rad")]
        m3rad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/rev")]
        m3rev,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimeLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl.ft/d")]
        Item1000bblftd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m4/d")]
        Item1000m4d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m4/s")]
        m4s,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(min.ft2)")]
        ft3minft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(s.ft2)")]
        ft3sft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.ft2)")]
        galUKhft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.in2)")]
        galUKhin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(min.ft2)")]
        galUKminft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.ft2)")]
        galUShft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.in2)")]
        galUShin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(min.ft2)")]
        galUSminft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m2)")]
        m3sm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/(d.ft)")]
        Item1000ft3dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/(d.m)")]
        Item1000m3dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/(h.m)")]
        Item1000m3hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(d.ft)")]
        bbldft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(d.ft)")]
        ft3dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.ft)")]
        galUKhft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.in)")]
        galUKhin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(min.ft)")]
        galUKminft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.ft)")]
        galUShft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.in)")]
        galUShin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(min.ft)")]
        galUSminft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(d.m)")]
        m3dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(h.m)")]
        m3hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.ft)")]
        m3sft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m)")]
        m3sm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerPressureLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(ft.psi.d)")]
        bblftpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(ft.psi.d)")]
        ft3ftpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/(kPa.d)")]
        m2kPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/(Pa.s)")]
        m2Pas,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/d2")]
        bbld2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/h2")]
        bblh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/s2")]
        dm3s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/d2")]
        ft3d2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/h2")]
        ft3h2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/min2")]
        ft3min2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/s2")]
        ft3s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/h2")]
        galUKh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/min2")]
        galUKmin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/h2")]
        galUSh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/min2")]
        galUSmin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/s2")]
        Ls2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/d2")]
        m3d2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/s2")]
        m3s2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(d.acre.ft)")]
        bbldacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m3)")]
        m3sm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 cm3/min")]
        Item130cm3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl/d")]
        Item1000bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/d")]
        Item1000ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/d")]
        Item1000m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/h")]
        Item1000m3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/d")]
        Item1E6bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/d")]
        Item1E6ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 m3/d")]
        Item1E6m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/d")]
        bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/h")]
        bblh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/min")]
        bblmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/h")]
        cm3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/min")]
        cm3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/s")]
        cm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/s")]
        dm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/d")]
        ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/h")]
        ft3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/min")]
        ft3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/s")]
        ft3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/d")]
        galUKd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/h")]
        galUKh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/min")]
        galUKmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/d")]
        galUSd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/h")]
        galUSh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/min")]
        galUSmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/h")]
        Lh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/min")]
        Lmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/s")]
        Ls,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/d")]
        m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/h")]
        m3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/min")]
        m3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/s")]
        m3s,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[vol]")]
        vol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 bbl/ft3")]
        Item0001bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 bbl/m3")]
        Item0001bblm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[UK]/bbl")]
        Item0001galUKbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[UK]/gal[UK]")]
        Item0001galUKgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/bbl")]
        Item0001galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/ft3")]
        Item0001galUSft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/gal[US]")]
        Item0001galUSgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 pt[UK]/bbl")]
        Item0001ptUKbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 bbl/bbl")]
        Item001bblbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 gal[US]/bbl")]
        Item01galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 L/bbl")]
        Item01Lbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 pt[US]/bbl")]
        Item01ptUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/bbl")]
        Item1000ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/m3")]
        Item1000m3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 acre.ft/bbl")]
        Item1E6acreftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 bbl/ft3")]
        Item1E6bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 bbl/m3")]
        Item1E6bblm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/(acre.ft)")]
        Item1E6bblacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/(acre.ft)")]
        Item1E6ft3acreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/bbl")]
        Item1E6ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(acre.ft)")]
        bblacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/bbl")]
        bblbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ft3")]
        bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/m3")]
        bblm3,
        
        /// <remarks/>
        cEuc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/cm3")]
        cm3cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/L")]
        cm3L,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/m3")]
        cm3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/m3")]
        dm3m3,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/bbl")]
        ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft3")]
        ft3ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/ft3")]
        galUKft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/bbl")]
        galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ft3")]
        galUSft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/m3")]
        Lm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(ha.m)")]
        m3ham,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/bbl")]
        m3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m3")]
        m3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/gal[UK]")]
        mLgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/gal[US]")]
        mLgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/mL")]
        mLmL,
        
        /// <remarks/>
        ppk,
        
        /// <remarks/>
        ppm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]")]
        ppmvol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumetricHeatTransferCoefficientUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft3.deltaF)")]
        BtuIThft3deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft3.deltaF)")]
        BtuITsft3deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/(m3.deltaK)")]
        kWm3deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m3.deltaK)")]
        Wm3deltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl")]
        Item1000bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3")]
        Item1000ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 gal[UK]")]
        Item1000galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 gal[US]")]
        Item1000galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3")]
        Item1000m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 gal[US]")]
        Item1E6galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E12 ft3")]
        Item1E12ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl")]
        Item1E6bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3")]
        Item1E6ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 m3")]
        Item1E6m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E9 bbl")]
        Item1E9bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E9 ft3")]
        Item1E9ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acre.ft")]
        acreft,
        
        /// <remarks/>
        bbl,
        
        /// <remarks/>
        cm3,
        
        /// <remarks/>
        dm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("floz[UK]")]
        flozUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("floz[US]")]
        flozUS,
        
        /// <remarks/>
        ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]")]
        galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]")]
        galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ha.m")]
        ham,
        
        /// <remarks/>
        hL,
        
        /// <remarks/>
        in3,
        
        /// <remarks/>
        km3,
        
        /// <remarks/>
        L,
        
        /// <remarks/>
        m3,
        
        /// <remarks/>
        mi3,
        
        /// <remarks/>
        mL,
        
        /// <remarks/>
        mm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[UK]")]
        ptUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[US]")]
        ptUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("qt[UK]")]
        qtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("qt[US]")]
        qtUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("um2.m")]
        um2m,
        
        /// <remarks/>
        yd3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ChannelStatusKind {
        
        /// <remarks/>
        active,
        
        /// <remarks/>
        closed,
        
        /// <remarks/>
        inactive,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum GeochronologicalRank {
        
        /// <remarks/>
        eon,
        
        /// <remarks/>
        era,
        
        /// <remarks/>
        period,
        
        /// <remarks/>
        epoch,
        
        /// <remarks/>
        age,
        
        /// <remarks/>
        chron,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LegacyUnitOfMeasure {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000scf/d")]
        Item1000scfd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000scf/mo")]
        Item1000scfmo,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000scf/stb")]
        Item1000scfstb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000scm")]
        Item1000scm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000scm/d")]
        Item1000scmd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000scm/mo")]
        Item1000scmmo,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000stb")]
        Item1000stb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000stb/d")]
        Item1000stbd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000stb/mo")]
        Item1000stbmo,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6scf")]
        Item1E6scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6scf/d")]
        Item1E6scfd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6scf/mo")]
        Item1E6scfmo,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6scf/stb")]
        Item1E6scfstb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6scm")]
        Item1E6scm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6scm/d")]
        Item1E6scmd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6scm/mo")]
        Item1E6scmmo,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6stb")]
        Item1E6stb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6stb/acre")]
        Item1E6stbacre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6stb/acre.ft")]
        Item1E6stbacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6stb/d")]
        Item1E6stbd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6stb/mo")]
        Item1E6stbmo,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E9scf")]
        Item1E9scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acre.ft/1E6stb")]
        acreft1E6stb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/1000scf")]
        bbl1000scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/1E6scf")]
        bbl1E6scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/scf")]
        bblscf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/stb")]
        bblstb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/scf")]
        ft3scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/stb")]
        ft3stb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("galUS/1000scf")]
        galUS1000scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/scm")]
        kgscm,
        
        /// <remarks/>
        kscf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/1000scf")]
        lbm1000scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/1E6scf")]
        lbm1E6scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/scm")]
        m3scm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ml/scm")]
        mlscm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/scm")]
        Pascm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/1000scf")]
        psi1000scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/1E6scf")]
        psi1E6scf,
        
        /// <remarks/>
        psia,
        
        /// <remarks/>
        psig,
        
        /// <remarks/>
        scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scf/bbl")]
        scfbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scf/d")]
        scfd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scf/ft2")]
        scfft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scf/ft3")]
        scfft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scf/scf")]
        scfscf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scf/stb")]
        scfstb,
        
        /// <remarks/>
        scm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scm/d")]
        scmd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scm/h")]
        scmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scm/m2")]
        scmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scm/m3")]
        scmm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scm/mo")]
        scmmo,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scm/s")]
        scms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scm/scm")]
        scmscm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scm/stb")]
        scmstb,
        
        /// <remarks/>
        stb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/1000scf")]
        stb1000scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/1000scm")]
        stb1000scm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/1E6scf")]
        stb1E6scf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/1E6scm")]
        stb1E6scm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/acre")]
        stbacre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/bbl")]
        stbbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/d")]
        stbd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/mo")]
        stbmo,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/scm")]
        stbscm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stb/stb")]
        stbstb,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LithologyKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("alkali feldspar rhyolite")]
        alkalifeldsparrhyolite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("alkali olivine basalt")]
        alkaliolivinebasalt,
        
        /// <remarks/>
        amphibolite,
        
        /// <remarks/>
        andesite,
        
        /// <remarks/>
        anhydrite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("anorthositic rock")]
        anorthositicrock,
        
        /// <remarks/>
        anthracite,
        
        /// <remarks/>
        aplite,
        
        /// <remarks/>
        arenite,
        
        /// <remarks/>
        argillaceous,
        
        /// <remarks/>
        arkose,
        
        /// <remarks/>
        basalt,
        
        /// <remarks/>
        basanite,
        
        /// <remarks/>
        bauxite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bituminous coal")]
        bituminouscoal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("blueschist metamorphic rock")]
        blueschistmetamorphicrock,
        
        /// <remarks/>
        boninite,
        
        /// <remarks/>
        breccia,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("carbonate ooze")]
        carbonateooze,
        
        /// <remarks/>
        carbonatite,
        
        /// <remarks/>
        chalk,
        
        /// <remarks/>
        chert,
        
        /// <remarks/>
        clay,
        
        /// <remarks/>
        claystone,
        
        /// <remarks/>
        coal,
        
        /// <remarks/>
        conglomerate,
        
        /// <remarks/>
        dacite,
        
        /// <remarks/>
        diabase,
        
        /// <remarks/>
        diamictite,
        
        /// <remarks/>
        diorite,
        
        /// <remarks/>
        dioritoid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("doleritic rock")]
        doleriticrock,
        
        /// <remarks/>
        dolomite,
        
        /// <remarks/>
        dolomitic,
        
        /// <remarks/>
        eclogite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("exotic alkaline rock")]
        exoticalkalinerock,
        
        /// <remarks/>
        feldspar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("feldspathic arenite")]
        feldspathicarenite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fine grained igneous rock")]
        finegrainedigneousrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("foid dioritoid")]
        foiddioritoid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("foid gabbroid")]
        foidgabbroid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("foid syenitoid")]
        foidsyenitoid,
        
        /// <remarks/>
        foidite,
        
        /// <remarks/>
        foiditoid,
        
        /// <remarks/>
        foidolite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("foliated metamorphic rock")]
        foliatedmetamorphicrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fragmental igneous rock")]
        fragmentaligneousrock,
        
        /// <remarks/>
        gabbro,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gabbroic rock")]
        gabbroicrock,
        
        /// <remarks/>
        gabbroid,
        
        /// <remarks/>
        glauconite,
        
        /// <remarks/>
        gneiss,
        
        /// <remarks/>
        granite,
        
        /// <remarks/>
        granodiorite,
        
        /// <remarks/>
        granofels,
        
        /// <remarks/>
        granulite,
        
        /// <remarks/>
        gravel,
        
        /// <remarks/>
        greenstone,
        
        /// <remarks/>
        gumbo,
        
        /// <remarks/>
        gypsum,
        
        /// <remarks/>
        halite,
        
        /// <remarks/>
        hornfels,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("igneous rock")]
        igneousrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("impact generated material")]
        impactgeneratedmaterial,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("impure dolomite")]
        impuredolomite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("impure limestone")]
        impurelimestone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("intrusive rock (plutonic)")]
        intrusiverockplutonic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("iron rich sedimentary rock")]
        ironrichsedimentaryrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kalsilitic and melilitic rocks")]
        kalsiliticandmeliliticrocks,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("komatiitic rock")]
        komatiiticrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("latitic rock")]
        latiticrock,
        
        /// <remarks/>
        lignite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime boundstone")]
        limeboundstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime framestone")]
        limeframestone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime grainstone")]
        limegrainstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime mudstone")]
        limemudstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime packstone")]
        limepackstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime wackestone")]
        limewackestone,
        
        /// <remarks/>
        limestone,
        
        /// <remarks/>
        marble,
        
        /// <remarks/>
        marl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("metamorphic rock")]
        metamorphicrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mica schist")]
        micaschist,
        
        /// <remarks/>
        migmatite,
        
        /// <remarks/>
        monzogabbro,
        
        /// <remarks/>
        mud,
        
        /// <remarks/>
        mudstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mylonitic rock")]
        myloniticrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("no description")]
        nodescription,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("no sample")]
        nosample,
        
        /// <remarks/>
        ooze,
        
        /// <remarks/>
        ophiolite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("organic bearing mudstone")]
        organicbearingmudstone,
        
        /// <remarks/>
        peat,
        
        /// <remarks/>
        pegmatite,
        
        /// <remarks/>
        peridotite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("phaneritic igneous rock")]
        phaneriticigneousrock,
        
        /// <remarks/>
        phonolite,
        
        /// <remarks/>
        phonolitoid,
        
        /// <remarks/>
        phosphate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("phosphate rock")]
        phosphaterock,
        
        /// <remarks/>
        phyllite,
        
        /// <remarks/>
        porphyry,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("potassium and magnesium salts")]
        potassiumandmagnesiumsalts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pyroclastic breccia")]
        pyroclasticbreccia,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pyroclastic rock")]
        pyroclasticrock,
        
        /// <remarks/>
        pyroxenite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("quartz arenite")]
        quartzarenite,
        
        /// <remarks/>
        quartzite,
        
        /// <remarks/>
        rhyolite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rock salt")]
        rocksalt,
        
        /// <remarks/>
        sand,
        
        /// <remarks/>
        sandstone,
        
        /// <remarks/>
        sandy,
        
        /// <remarks/>
        sapropel,
        
        /// <remarks/>
        schist,
        
        /// <remarks/>
        serpentinite,
        
        /// <remarks/>
        shale,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("siliceous ooze")]
        siliceousooze,
        
        /// <remarks/>
        silt,
        
        /// <remarks/>
        siltstone,
        
        /// <remarks/>
        skarn,
        
        /// <remarks/>
        slate,
        
        /// <remarks/>
        spilite,
        
        /// <remarks/>
        syenite,
        
        /// <remarks/>
        syenitoid,
        
        /// <remarks/>
        sylvite,
        
        /// <remarks/>
        tephrite,
        
        /// <remarks/>
        tephritoid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tholeiitic basalt")]
        tholeiiticbasalt,
        
        /// <remarks/>
        tonalite,
        
        /// <remarks/>
        trachyte,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("trachytic rock")]
        trachyticrock,
        
        /// <remarks/>
        trachytoid,
        
        /// <remarks/>
        travertine,
        
        /// <remarks/>
        tuff,
        
        /// <remarks/>
        tuffite,
        
        /// <remarks/>
        ultrabasic,
        
        /// <remarks/>
        undifferentiated,
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        wacke,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LithologyQualifierKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("alkali feldspar rhyolite")]
        alkalifeldsparrhyolite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("alkali olivine basalt")]
        alkaliolivinebasalt,
        
        /// <remarks/>
        amphibolite,
        
        /// <remarks/>
        amphibolitic,
        
        /// <remarks/>
        andesite,
        
        /// <remarks/>
        andesitic,
        
        /// <remarks/>
        anhydrite,
        
        /// <remarks/>
        anhydritic,
        
        /// <remarks/>
        ankerite,
        
        /// <remarks/>
        ankeritic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("anorthositic rock")]
        anorthositicrock,
        
        /// <remarks/>
        anthracite,
        
        /// <remarks/>
        anthracitic,
        
        /// <remarks/>
        aplite,
        
        /// <remarks/>
        aplitic,
        
        /// <remarks/>
        arenite,
        
        /// <remarks/>
        arenitic,
        
        /// <remarks/>
        argillaceous,
        
        /// <remarks/>
        arkose,
        
        /// <remarks/>
        arkosic,
        
        /// <remarks/>
        barite,
        
        /// <remarks/>
        baritic,
        
        /// <remarks/>
        basalt,
        
        /// <remarks/>
        basaltic,
        
        /// <remarks/>
        basanite,
        
        /// <remarks/>
        basanitic,
        
        /// <remarks/>
        bauxite,
        
        /// <remarks/>
        bauxitic,
        
        /// <remarks/>
        belemnites,
        
        /// <remarks/>
        belemnitic,
        
        /// <remarks/>
        bioturbated,
        
        /// <remarks/>
        bioturbation,
        
        /// <remarks/>
        bitumen,
        
        /// <remarks/>
        bituminous,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bituminous coal")]
        bituminouscoal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("blueschist metamorphic rock")]
        blueschistmetamorphicrock,
        
        /// <remarks/>
        boninite,
        
        /// <remarks/>
        breccia,
        
        /// <remarks/>
        brecciated,
        
        /// <remarks/>
        bryozoan,
        
        /// <remarks/>
        bryozoans,
        
        /// <remarks/>
        burrowed,
        
        /// <remarks/>
        burrows,
        
        /// <remarks/>
        calcareous,
        
        /// <remarks/>
        calcite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("calcite concretion")]
        calciteconcretion,
        
        /// <remarks/>
        calcitic,
        
        /// <remarks/>
        carbonaceous,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("carbonate ooze")]
        carbonateooze,
        
        /// <remarks/>
        carbonatite,
        
        /// <remarks/>
        carbonatitic,
        
        /// <remarks/>
        chalk,
        
        /// <remarks/>
        chalky,
        
        /// <remarks/>
        chamosite,
        
        /// <remarks/>
        chamositic,
        
        /// <remarks/>
        chert,
        
        /// <remarks/>
        cherty,
        
        /// <remarks/>
        chlorite,
        
        /// <remarks/>
        chloritic,
        
        /// <remarks/>
        clay,
        
        /// <remarks/>
        claystone,
        
        /// <remarks/>
        coal,
        
        /// <remarks/>
        concretionary,
        
        /// <remarks/>
        concretions,
        
        /// <remarks/>
        conglomerate,
        
        /// <remarks/>
        conglomeratic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coral fragments")]
        coralfragments,
        
        /// <remarks/>
        coralline,
        
        /// <remarks/>
        crinoidal,
        
        /// <remarks/>
        crinoids,
        
        /// <remarks/>
        dacite,
        
        /// <remarks/>
        dacitic,
        
        /// <remarks/>
        diabase,
        
        /// <remarks/>
        diabasic,
        
        /// <remarks/>
        diamictite,
        
        /// <remarks/>
        diamictitic,
        
        /// <remarks/>
        diatomaceous,
        
        /// <remarks/>
        diatoms,
        
        /// <remarks/>
        diorite,
        
        /// <remarks/>
        dioritic,
        
        /// <remarks/>
        dioritoid,
        
        /// <remarks/>
        dioritoidic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("doleritic rock")]
        doleriticrock,
        
        /// <remarks/>
        dolomite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dolomite concretion")]
        dolomiteconcretion,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dolomite stringer")]
        dolomitestringer,
        
        /// <remarks/>
        dolomitic,
        
        /// <remarks/>
        eclogite,
        
        /// <remarks/>
        eclogitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("exotic alkaline rock")]
        exoticalkalinerock,
        
        /// <remarks/>
        feldspar,
        
        /// <remarks/>
        feldsparic,
        
        /// <remarks/>
        feldspathic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("feldspathic arenite")]
        feldspathicarenite,
        
        /// <remarks/>
        ferruginous,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fine grained igneous rock")]
        finegrainedigneousrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("foid dioritoid")]
        foiddioritoid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("foid gabbroid")]
        foidgabbroid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("foid syenitoid")]
        foidsyenitoid,
        
        /// <remarks/>
        foidite,
        
        /// <remarks/>
        foiditic,
        
        /// <remarks/>
        foiditoid,
        
        /// <remarks/>
        foidolite,
        
        /// <remarks/>
        foidolitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("foliated metamorphic rock")]
        foliatedmetamorphicrock,
        
        /// <remarks/>
        foraminifera,
        
        /// <remarks/>
        foraminiferous,
        
        /// <remarks/>
        forams,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fossil fragments")]
        fossilfragments,
        
        /// <remarks/>
        fossiliferous,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fossils undifferentiated")]
        fossilsundifferentiated,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fragmental igneous rock")]
        fragmentaligneousrock,
        
        /// <remarks/>
        gabbro,
        
        /// <remarks/>
        gabbroic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gabbroic rock")]
        gabbroicrock,
        
        /// <remarks/>
        gabbroid,
        
        /// <remarks/>
        gabbroidic,
        
        /// <remarks/>
        gilsonite,
        
        /// <remarks/>
        gilsonitic,
        
        /// <remarks/>
        glauconite,
        
        /// <remarks/>
        glauconitic,
        
        /// <remarks/>
        gneiss,
        
        /// <remarks/>
        gneissic,
        
        /// <remarks/>
        granite,
        
        /// <remarks/>
        granitic,
        
        /// <remarks/>
        granodiorite,
        
        /// <remarks/>
        granodioritic,
        
        /// <remarks/>
        granofels,
        
        /// <remarks/>
        granulite,
        
        /// <remarks/>
        granulitic,
        
        /// <remarks/>
        gravel,
        
        /// <remarks/>
        gravelly,
        
        /// <remarks/>
        greenstone,
        
        /// <remarks/>
        gumbo,
        
        /// <remarks/>
        gypsiferous,
        
        /// <remarks/>
        gypsum,
        
        /// <remarks/>
        halite,
        
        /// <remarks/>
        halitic,
        
        /// <remarks/>
        hornfels,
        
        /// <remarks/>
        hornfelsic,
        
        /// <remarks/>
        igneous,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("igneous rock")]
        igneousrock,
        
        /// <remarks/>
        illite,
        
        /// <remarks/>
        illitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("impact generated material")]
        impactgeneratedmaterial,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("impure dolomite")]
        impuredolomite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("impure limestone")]
        impurelimestone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("intrusive rock (plutonic)")]
        intrusiverockplutonic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("iron rich sedimentary rock")]
        ironrichsedimentaryrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kalsilitic and melilitic rocks")]
        kalsiliticandmeliliticrocks,
        
        /// <remarks/>
        kaolinite,
        
        /// <remarks/>
        kaolinitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("komatiitic rock")]
        komatiiticrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("latitic rock")]
        latiticrock,
        
        /// <remarks/>
        lignite,
        
        /// <remarks/>
        lignitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime boundstone")]
        limeboundstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime framestone")]
        limeframestone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime grainstone")]
        limegrainstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime mudstone")]
        limemudstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime packstone")]
        limepackstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime wackestone")]
        limewackestone,
        
        /// <remarks/>
        limestone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("limestone stringer")]
        limestonestringer,
        
        /// <remarks/>
        lithic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lithic fragments")]
        lithicfragments,
        
        /// <remarks/>
        marble,
        
        /// <remarks/>
        marcasite,
        
        /// <remarks/>
        marcasitic,
        
        /// <remarks/>
        marl,
        
        /// <remarks/>
        marly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("metamorphic rock")]
        metamorphicrock,
        
        /// <remarks/>
        mica,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mica schist")]
        micaschist,
        
        /// <remarks/>
        micaceous,
        
        /// <remarks/>
        microfossiliferous,
        
        /// <remarks/>
        microfossils,
        
        /// <remarks/>
        migmatite,
        
        /// <remarks/>
        migmatitic,
        
        /// <remarks/>
        monzogabbro,
        
        /// <remarks/>
        monzogabbroic,
        
        /// <remarks/>
        mud,
        
        /// <remarks/>
        muddy,
        
        /// <remarks/>
        mudstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mylonitic rock")]
        myloniticrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("no sample")]
        nosample,
        
        /// <remarks/>
        oncolite,
        
        /// <remarks/>
        oncoliths,
        
        /// <remarks/>
        oncolitic,
        
        /// <remarks/>
        ooids,
        
        /// <remarks/>
        ooliths,
        
        /// <remarks/>
        oolitic,
        
        /// <remarks/>
        ooze,
        
        /// <remarks/>
        ophiolite,
        
        /// <remarks/>
        ophiolitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("organic bearing mudstone")]
        organicbearingmudstone,
        
        /// <remarks/>
        ostracodal,
        
        /// <remarks/>
        ostracods,
        
        /// <remarks/>
        peat,
        
        /// <remarks/>
        peaty,
        
        /// <remarks/>
        pebble,
        
        /// <remarks/>
        pebbly,
        
        /// <remarks/>
        pegmatite,
        
        /// <remarks/>
        pegmatitic,
        
        /// <remarks/>
        pelletal,
        
        /// <remarks/>
        pellets,
        
        /// <remarks/>
        peloidal,
        
        /// <remarks/>
        peloids,
        
        /// <remarks/>
        peridotite,
        
        /// <remarks/>
        peridotitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("phaneritic igneous rock")]
        phaneriticigneousrock,
        
        /// <remarks/>
        phonolite,
        
        /// <remarks/>
        phonolitic,
        
        /// <remarks/>
        phonolitoid,
        
        /// <remarks/>
        phosphate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("phosphate rock")]
        phosphaterock,
        
        /// <remarks/>
        phosphatic,
        
        /// <remarks/>
        phyllite,
        
        /// <remarks/>
        phyllitic,
        
        /// <remarks/>
        pisolite,
        
        /// <remarks/>
        pisoliths,
        
        /// <remarks/>
        pisolitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plant remains")]
        plantremains,
        
        /// <remarks/>
        porphyritic,
        
        /// <remarks/>
        porphyry,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("potassium and magnesium salts")]
        potassiumandmagnesiumsalts,
        
        /// <remarks/>
        pyrite,
        
        /// <remarks/>
        pyritic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pyroclastic breccia")]
        pyroclasticbreccia,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pyroclastic rock")]
        pyroclasticrock,
        
        /// <remarks/>
        pyroxenite,
        
        /// <remarks/>
        pyroxenitic,
        
        /// <remarks/>
        quartiferous,
        
        /// <remarks/>
        quartz,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("quartz arenite")]
        quartzarenite,
        
        /// <remarks/>
        quartzite,
        
        /// <remarks/>
        quartzitic,
        
        /// <remarks/>
        radiolaria,
        
        /// <remarks/>
        radiolarian,
        
        /// <remarks/>
        rhyolite,
        
        /// <remarks/>
        rhyolitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rock salt")]
        rocksalt,
        
        /// <remarks/>
        rootlets,
        
        /// <remarks/>
        salty,
        
        /// <remarks/>
        sand,
        
        /// <remarks/>
        sandstone,
        
        /// <remarks/>
        sandy,
        
        /// <remarks/>
        sapropel,
        
        /// <remarks/>
        sapropelic,
        
        /// <remarks/>
        schist,
        
        /// <remarks/>
        schisty,
        
        /// <remarks/>
        sepentinitic,
        
        /// <remarks/>
        serpentinite,
        
        /// <remarks/>
        shale,
        
        /// <remarks/>
        shaly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shell fragments")]
        shellfragments,
        
        /// <remarks/>
        shelly,
        
        /// <remarks/>
        siderite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("siderite concretion")]
        sideriteconcretion,
        
        /// <remarks/>
        sideritic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("siliceous ooze")]
        siliceousooze,
        
        /// <remarks/>
        silt,
        
        /// <remarks/>
        siltstone,
        
        /// <remarks/>
        silty,
        
        /// <remarks/>
        skarn,
        
        /// <remarks/>
        skarny,
        
        /// <remarks/>
        slate,
        
        /// <remarks/>
        slaty,
        
        /// <remarks/>
        smectite,
        
        /// <remarks/>
        smectitic,
        
        /// <remarks/>
        spicular,
        
        /// <remarks/>
        spicules,
        
        /// <remarks/>
        spilite,
        
        /// <remarks/>
        spilitic,
        
        /// <remarks/>
        stylolites,
        
        /// <remarks/>
        stylolitic,
        
        /// <remarks/>
        syenite,
        
        /// <remarks/>
        syenitic,
        
        /// <remarks/>
        syenitoid,
        
        /// <remarks/>
        sylvite,
        
        /// <remarks/>
        sylvitic,
        
        /// <remarks/>
        tarry,
        
        /// <remarks/>
        tephrite,
        
        /// <remarks/>
        tephritic,
        
        /// <remarks/>
        tephritoid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tholeiitic basalt")]
        tholeiiticbasalt,
        
        /// <remarks/>
        tonalite,
        
        /// <remarks/>
        tonalitic,
        
        /// <remarks/>
        trachyte,
        
        /// <remarks/>
        trachytic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("trachytic rock")]
        trachyticrock,
        
        /// <remarks/>
        trachytoid,
        
        /// <remarks/>
        travertine,
        
        /// <remarks/>
        tuff,
        
        /// <remarks/>
        tuffaceous,
        
        /// <remarks/>
        tuffite,
        
        /// <remarks/>
        tuffitic,
        
        /// <remarks/>
        ultrabasic,
        
        /// <remarks/>
        undifferentiated,
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        wacke,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LithostratigraphicRank {
        
        /// <remarks/>
        group,
        
        /// <remarks/>
        formation,
        
        /// <remarks/>
        member,
        
        /// <remarks/>
        bed,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MatrixCementKind {
        
        /// <remarks/>
        ankerite,
        
        /// <remarks/>
        calcite,
        
        /// <remarks/>
        chlorite,
        
        /// <remarks/>
        dolomite,
        
        /// <remarks/>
        illite,
        
        /// <remarks/>
        kaolinite,
        
        /// <remarks/>
        quartz,
        
        /// <remarks/>
        siderite,
        
        /// <remarks/>
        smectite,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum QuantityClassKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("absorbed dose")]
        absorbeddose,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("activity of radioactivity")]
        activityofradioactivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance")]
        amountofsubstance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per amount of substance")]
        amountofsubstanceperamountofsubstance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per area")]
        amountofsubstanceperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per time")]
        amountofsubstancepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per time per area")]
        amountofsubstancepertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per volume")]
        amountofsubstancepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angle per length")]
        angleperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angle per volume")]
        anglepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angular acceleration")]
        angularacceleration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angular velocity")]
        angularvelocity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("api gamma ray")]
        apigammaray,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("api gravity")]
        apigravity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("api neutron")]
        apineutron,
        
        /// <remarks/>
        area,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per amount of substance")]
        areaperamountofsubstance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per area")]
        areaperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per count")]
        areapercount,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per mass")]
        areapermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per time")]
        areapertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per volume")]
        areapervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("attenuation per frequency interval")]
        attenuationperfrequencyinterval,
        
        /// <remarks/>
        capacitance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cation exchange capacity")]
        cationexchangecapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("data transfer speed")]
        datatransferspeed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diffusion coefficient")]
        diffusioncoefficient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diffusive time of flight")]
        diffusivetimeofflight,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("digital storage")]
        digitalstorage,
        
        /// <remarks/>
        dimensionless,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dipole moment")]
        dipolemoment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dose equivalent")]
        doseequivalent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dynamic viscosity")]
        dynamicviscosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge")]
        electriccharge,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge per area")]
        electricchargeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge per mass")]
        electricchargepermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge per volume")]
        electricchargepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric conductance")]
        electricconductance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric conductivity")]
        electricconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric current")]
        electriccurrent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric current density")]
        electriccurrentdensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric field strength")]
        electricfieldstrength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric potential difference")]
        electricpotentialdifference,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric resistance")]
        electricresistance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric resistance per length")]
        electricresistanceperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electrical resistivity")]
        electricalresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electromagnetic moment")]
        electromagneticmoment,
        
        /// <remarks/>
        energy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy length per area")]
        energylengthperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy length per time area temperature")]
        energylengthpertimeareatemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per area")]
        energyperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per length")]
        energyperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per mass")]
        energypermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per mass per time")]
        energypermasspertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per volume")]
        energypervolume,
        
        /// <remarks/>
        force,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force area")]
        forcearea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force length per length")]
        forcelengthperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per force")]
        forceperforce,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per length")]
        forceperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per volume")]
        forcepervolume,
        
        /// <remarks/>
        frequency,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("frequency interval")]
        frequencyinterval,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat capacity")]
        heatcapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat flow rate")]
        heatflowrate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat transfer coefficient")]
        heattransfercoefficient,
        
        /// <remarks/>
        illuminance,
        
        /// <remarks/>
        inductance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("isothermal compressibility")]
        isothermalcompressibility,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kinematic viscosity")]
        kinematicviscosity,
        
        /// <remarks/>
        length,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per length")]
        lengthperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per mass")]
        lengthpermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per pressure")]
        lengthperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per temperature")]
        lengthpertemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per time")]
        lengthpertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per volume")]
        lengthpervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("light exposure")]
        lightexposure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("linear acceleration")]
        linearacceleration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("linear thermal expansion")]
        linearthermalexpansion,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("logarithmic power ratio")]
        logarithmicpowerratio,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("logarithmic power ratio per length")]
        logarithmicpowerratioperlength,
        
        /// <remarks/>
        luminance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous efficacy")]
        luminousefficacy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous flux")]
        luminousflux,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous intensity")]
        luminousintensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic dipole moment")]
        magneticdipolemoment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic field strength")]
        magneticfieldstrength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic flux")]
        magneticflux,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic flux density")]
        magneticfluxdensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic flux density per length")]
        magneticfluxdensityperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic permeability")]
        magneticpermeability,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic vector potential")]
        magneticvectorpotential,
        
        /// <remarks/>
        mass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass length")]
        masslength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per area")]
        massperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per energy")]
        massperenergy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per length")]
        massperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per mass")]
        masspermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per time")]
        masspertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per time per area")]
        masspertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per time per length")]
        masspertimeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume")]
        masspervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume per length")]
        masspervolumeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume per pressure")]
        masspervolumeperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume per temperature")]
        masspervolumepertemperature,
        
        /// <remarks/>
        mobility,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar energy")]
        molarenergy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar heat capacity")]
        molarheatcapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar volume")]
        molarvolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molecular weight")]
        molecularweight,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("moment of force")]
        momentofforce,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("moment of inertia")]
        momentofinertia,
        
        /// <remarks/>
        momentum,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("normalized power")]
        normalizedpower,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("permeability length")]
        permeabilitylength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("permeability rock")]
        permeabilityrock,
        
        /// <remarks/>
        permittivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plane angle")]
        planeangle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("potential difference per power drop")]
        potentialdifferenceperpowerdrop,
        
        /// <remarks/>
        power,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("power per area")]
        powerperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("power per power")]
        powerperpower,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("power per volume")]
        powerpervolume,
        
        /// <remarks/>
        pressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure per pressure")]
        pressureperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure per time")]
        pressurepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure per volume")]
        pressurepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure squared")]
        pressuresquared,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure squared per force time per area")]
        pressuresquaredperforcetimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure time per volume")]
        pressuretimepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("quantity of light")]
        quantityoflight,
        
        /// <remarks/>
        radiance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("radiant intensity")]
        radiantintensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal area")]
        reciprocalarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal electric potential difference")]
        reciprocalelectricpotentialdifference,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal force")]
        reciprocalforce,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal length")]
        reciprocallength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal mass")]
        reciprocalmass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal mass time")]
        reciprocalmasstime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal pressure")]
        reciprocalpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal time")]
        reciprocaltime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal volume")]
        reciprocalvolume,
        
        /// <remarks/>
        reluctance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("second moment of area")]
        secondmomentofarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("signaling event per time")]
        signalingeventpertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("solid angle")]
        solidangle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("specific heat capacity")]
        specificheatcapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature interval")]
        temperatureinterval,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature interval per length")]
        temperatureintervalperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature interval per pressure")]
        temperatureintervalperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature interval per time")]
        temperatureintervalpertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal conductance")]
        thermalconductance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal conductivity")]
        thermalconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal diffusivity")]
        thermaldiffusivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal insulance")]
        thermalinsulance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal resistance")]
        thermalresistance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermodynamic temperature")]
        thermodynamictemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermodynamic temperature per thermodynamic temperature")]
        thermodynamictemperatureperthermodynamictemperature,
        
        /// <remarks/>
        time,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per length")]
        timeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per mass")]
        timepermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per time")]
        timepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per volume")]
        timepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("vertical coordinate")]
        verticalcoordinate,
        
        /// <remarks/>
        volume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume flow rate per volume flow rate")]
        volumeflowratepervolumeflowrate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per area")]
        volumeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per length")]
        volumeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per mass")]
        volumepermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per pressure")]
        volumeperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per rotation")]
        volumeperrotation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time")]
        volumepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time length")]
        volumepertimelength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per area")]
        volumepertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per length")]
        volumepertimeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per pressure")]
        volumepertimeperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per pressure length")]
        volumepertimeperpressurelength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per time")]
        volumepertimepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per volume")]
        volumepertimepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per volume")]
        volumepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volumetric heat transfer coefficient")]
        volumetricheattransfercoefficient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volumetric thermal expansion")]
        volumetricthermalexpansion,
        
        /// <remarks/>
        unitless,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("not a measure")]
        notameasure,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum UnitOfMeasure {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[area]")]
        area,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[mass]")]
        mass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[molar]")]
        molar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[vol]")]
        vol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(bbl/d)/(bbl/d)")]
        bbldbbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(m3/d)/(m3/d)")]
        m3dm3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(m3/s)/(m3/s)")]
        m3sm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 bbl/ft3")]
        Item0001bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 bbl/m3")]
        Item0001bblm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 d/ft3")]
        Item0001dft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[UK]/bbl")]
        Item0001galUKbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[UK]/gal[UK]")]
        Item0001galUKgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/bbl")]
        Item0001galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/ft3")]
        Item0001galUSft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/gal[US]")]
        Item0001galUSgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 h/ft")]
        Item0001hft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 kPa2/cP")]
        Item0001kPa2cP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/bbl")]
        Item0001lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/gal[UK]")]
        Item0001lbmgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/gal[US]")]
        Item0001lbmgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 psi/ft")]
        Item0001psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 pt[UK]/bbl")]
        Item0001ptUKbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 seca")]
        Item0001seca,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 bbl/bbl")]
        Item001bblbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 dega/ft")]
        Item001degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 degF/ft")]
        Item001degFft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 dm3/km")]
        Item001dm3km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 ft/ft")]
        Item001ftft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 grain/ft3")]
        Item001grainft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 L/kg")]
        Item001Lkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 L/km")]
        Item001Lkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbf/ft")]
        Item001lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbf/ft2")]
        Item001lbfft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbm/ft2")]
        Item001lbmft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 psi/ft")]
        Item001psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 ft")]
        Item01ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 ft[US]")]
        Item01ftUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 gal[US]/bbl")]
        Item01galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 in")]
        Item01in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 L/bbl")]
        Item01Lbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 lbm/bbl")]
        Item01lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 pt[US]/bbl")]
        Item01ptUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 yd")]
        Item01yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/(kg.s)")]
        Item1kgs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/16 in")]
        Item116in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/2 ft")]
        Item12ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/2 ms")]
        Item12ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 cm3/min")]
        Item130cm3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 dega/ft")]
        Item130degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 dega/m")]
        Item130degam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 lbf/m")]
        Item130lbfm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 m/m")]
        Item130mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 N/m")]
        Item130Nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/32 in")]
        Item132in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/64 in")]
        Item164in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/a")]
        Item1a,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/angstrom")]
        Item1angstrom,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/bar")]
        Item1bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/bbl")]
        Item1bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/cm")]
        Item1cm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/d")]
        Item1d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/degC")]
        Item1degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/degF")]
        Item1degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/degR")]
        Item1degR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft")]
        Item1ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft2")]
        Item1ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft3")]
        Item1ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/g")]
        Item1g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/gal[UK]")]
        Item1galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/gal[US]")]
        Item1galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/H")]
        Item1H,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/h")]
        Item1h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/in")]
        Item1in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/K")]
        Item1K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/kg")]
        Item1kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/km2")]
        Item1km2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/kPa")]
        Item1kPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/L")]
        Item1L,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/lbf")]
        Item1lbf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/lbm")]
        Item1lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m")]
        Item1m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m2")]
        Item1m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m3")]
        Item1m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mi")]
        Item1mi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mi2")]
        Item1mi2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/min")]
        Item1min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mm")]
        Item1mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ms")]
        Item1ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/N")]
        Item1N,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/nm")]
        Item1nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/Pa")]
        Item1Pa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/pPa")]
        Item1pPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/psi")]
        Item1psi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/s")]
        Item1s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/upsi")]
        Item1upsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/us")]
        Item1us,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/uV")]
        Item1uV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/V")]
        Item1V,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/wk")]
        Item1wk,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/yd")]
        Item1yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 ft")]
        Item10ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 in")]
        Item10in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 km")]
        Item10km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 kN")]
        Item10kN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 Mg/m3")]
        Item10Mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 ft")]
        Item100ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 ka[t]")]
        Item100kat,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 km")]
        Item100km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl")]
        Item1000bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl.ft/d")]
        Item1000bblftd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl/d")]
        Item1000bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft")]
        Item1000ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft/h")]
        Item1000fth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft/s")]
        Item1000fts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3")]
        Item1000ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/(d.ft)")]
        Item1000ft3dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/(psi.d)")]
        Item1000ft3psid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/bbl")]
        Item1000ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/d")]
        Item1000ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 gal[UK]")]
        Item1000galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 gal[US]")]
        Item1000galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 lbf.ft")]
        Item1000lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3")]
        Item1000m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/(d.m)")]
        Item1000m3dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/(h.m)")]
        Item1000m3hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/d")]
        Item1000m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/h")]
        Item1000m3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/m3")]
        Item1000m3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m4/d")]
        Item1000m4d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E12 ft3")]
        Item1E12ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 (ft3/d)/(bbl/d)")]
        Item1E6ft3dbbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 acre.ft/bbl")]
        Item1E6acreftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl")]
        Item1E6bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/(acre.ft)")]
        Item1E6bblacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/acre")]
        Item1E6bblacre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/d")]
        Item1E6bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 bbl/ft3")]
        Item1E6bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 bbl/m3")]
        Item1E6bblm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 Btu[IT]")]
        Item1E6BtuIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 Btu[IT]/h")]
        Item1E6BtuITh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3")]
        Item1E6ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/(acre.ft)")]
        Item1E6ft3acreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/bbl")]
        Item1E6ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/d")]
        Item1E6ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 gal[US]")]
        Item1E6galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 lbm/a")]
        Item1E6lbma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 m3")]
        Item1E6m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 m3/(m3.degC)")]
        Item1E6m3m3degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 m3/(m3.degF)")]
        Item1E6m3m3degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 m3/d")]
        Item1E6m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-9 1/ft")]
        Item1E91ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E9 bbl")]
        Item1E9bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E9 ft3")]
        Item1E9ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("30 ft")]
        Item30ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("30 m")]
        Item30m,
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        a,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.h")]
        Ah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.m2")]
        Am2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s")]
        As,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s/kg")]
        Askg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s/m3")]
        Asm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/cm2")]
        Acm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/ft2")]
        Aft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/m")]
        Am,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/m2")]
        Am21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/mm")]
        Amm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/mm2")]
        Amm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("a[t]")]
        at,
        
        /// <remarks/>
        acre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acre.ft")]
        acreft,
        
        /// <remarks/>
        ag,
        
        /// <remarks/>
        aJ,
        
        /// <remarks/>
        angstrom,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("at")]
        at1,
        
        /// <remarks/>
        atm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/ft")]
        atmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/h")]
        atmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/hm")]
        atmhm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/m")]
        atmm,
        
        /// <remarks/>
        B,
        
        /// <remarks/>
        b,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B.W")]
        BW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("b/cm3")]
        bcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B/m")]
        Bm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B/O")]
        BO,
        
        /// <remarks/>
        bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/h")]
        barh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/km")]
        barkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/m")]
        barm,
        
        /// <remarks/>
        bar2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar2/cP")]
        bar2cP,
        
        /// <remarks/>
        bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(acre.ft)")]
        bblacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(d.acre.ft)")]
        bbldacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(d.ft)")]
        bbldft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(ft.psi.d)")]
        bblftpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(kPa.d)")]
        bblkPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(psi.d)")]
        bblpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/acre")]
        bblacre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/bbl")]
        bblbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/d")]
        bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/d2")]
        bbld2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ft")]
        bblft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ft3")]
        bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/h")]
        bblh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/h2")]
        bblh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/in")]
        bblin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/m3")]
        bblm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/mi")]
        bblmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/min")]
        bblmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/psi")]
        bblpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ton[UK]")]
        bbltonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ton[US]")]
        bbltonUS,
        
        /// <remarks/>
        Bd,
        
        /// <remarks/>
        bit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit/s")]
        bits,
        
        /// <remarks/>
        Bq,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Bq/kg")]
        Bqkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]")]
        BtuIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT].in/(h.ft2.degF)")]
        BtuITinhft2degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft.degF)")]
        BtuIThftdegF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2)")]
        BtuIThft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2.degF)")]
        BtuIThft2degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2.degR)")]
        BtuIThft2degR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft3)")]
        BtuIThft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft3.degF)")]
        BtuIThft3degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.m2.degC)")]
        BtuIThm2degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(hp.h)")]
        BtuIThph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbm.degF)")]
        BtuITlbmdegF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbm.degR)")]
        BtuITlbmdegR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbmol.degF)")]
        BtuITlbmoldegF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft2)")]
        BtuITsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft2.degF)")]
        BtuITsft2degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft3)")]
        BtuITsft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft3.degF)")]
        BtuITsft3degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/bbl")]
        BtuITbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/ft3")]
        BtuITft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/gal[UK]")]
        BtuITgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/gal[US]")]
        BtuITgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/h")]
        BtuITh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/lbm")]
        BtuITlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/lbmol")]
        BtuITlbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/min")]
        BtuITmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/s")]
        BtuITs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[th]")]
        Btuth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[UK]")]
        BtuUK,
        
        /// <remarks/>
        @byte,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("byte/s")]
        bytes,
        
        /// <remarks/>
        C,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C.m")]
        Cm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/cm2")]
        Ccm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/cm3")]
        Ccm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/g")]
        Cg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/kg")]
        Ckg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/m2")]
        Cm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/m3")]
        Cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/mm2")]
        Cmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/mm3")]
        Cmm3,
        
        /// <remarks/>
        ca,
        
        /// <remarks/>
        cA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[IT]")]
        calIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]")]
        calth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(g.K)")]
        calthgK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm.degC)")]
        calthhcmdegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm2)")]
        calthhcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm2.degC)")]
        calthhcm2degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm3)")]
        calthhcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(mol.degC)")]
        calthmoldegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm.degC)")]
        calthscmdegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm2.degC)")]
        calthscm2degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm3)")]
        calthscm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/cm3")]
        calthcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/g")]
        calthg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/h")]
        calthh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/kg")]
        calthkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/lbm")]
        calthlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/mL")]
        calthmL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/mm3")]
        calthmm3,
        
        /// <remarks/>
        cC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ccal[th]")]
        ccalth,
        
        /// <remarks/>
        ccgr,
        
        /// <remarks/>
        cd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cd/m2")]
        cdm2,
        
        /// <remarks/>
        cEuc,
        
        /// <remarks/>
        ceV,
        
        /// <remarks/>
        cF,
        
        /// <remarks/>
        cg,
        
        /// <remarks/>
        cgauss,
        
        /// <remarks/>
        cgr,
        
        /// <remarks/>
        cGy,
        
        /// <remarks/>
        cH,
        
        /// <remarks/>
        chain,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[BnA]")]
        chainBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[BnB]")]
        chainBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Cla]")]
        chainCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Ind37]")]
        chainInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Se]")]
        chainSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[SeT]")]
        chainSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[US]")]
        chainUS,
        
        /// <remarks/>
        cHz,
        
        /// <remarks/>
        Ci,
        
        /// <remarks/>
        cJ,
        
        /// <remarks/>
        cm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/a")]
        cma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/s")]
        cms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/s2")]
        cms2,
        
        /// <remarks/>
        cm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/g")]
        cm2g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/s")]
        cm2s,
        
        /// <remarks/>
        cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/cm3")]
        cm3cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/g")]
        cm3g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/h")]
        cm3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/L")]
        cm3L,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/m3")]
        cm3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/min")]
        cm3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/s")]
        cm3s,
        
        /// <remarks/>
        cm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cmH2O[4degC]")]
        cmH2O4degC,
        
        /// <remarks/>
        cN,
        
        /// <remarks/>
        cohm,
        
        /// <remarks/>
        cP,
        
        /// <remarks/>
        cPa,
        
        /// <remarks/>
        crd,
        
        /// <remarks/>
        cS,
        
        /// <remarks/>
        cs,
        
        /// <remarks/>
        cSt,
        
        /// <remarks/>
        cT,
        
        /// <remarks/>
        ct,
        
        /// <remarks/>
        cu,
        
        /// <remarks/>
        cV,
        
        /// <remarks/>
        cW,
        
        /// <remarks/>
        cWb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cwt[UK]")]
        cwtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cwt[US]")]
        cwtUS,
        
        /// <remarks/>
        d,
        
        /// <remarks/>
        D,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D.ft")]
        Dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D.m")]
        Dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D/(Pa.s)")]
        DPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/bbl")]
        dbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D/cP")]
        DcP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/ft3")]
        dft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/m3")]
        dm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D[API]")]
        DAPI,
        
        /// <remarks/>
        dA,
        
        /// <remarks/>
        dam,
        
        /// <remarks/>
        daN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("daN.m")]
        daNm,
        
        /// <remarks/>
        dAPI,
        
        /// <remarks/>
        dB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.mW")]
        dBmW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.MW")]
        dBMW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.W")]
        dBW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/ft")]
        dBft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/km")]
        dBkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/m")]
        dBm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/O")]
        dBO,
        
        /// <remarks/>
        dC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dcal[th]")]
        dcalth,
        
        /// <remarks/>
        dega,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/ft")]
        degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/h")]
        degah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/m")]
        degam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/min")]
        degamin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/s")]
        degas,
        
        /// <remarks/>
        degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC.m2.h/kcal[th]")]
        degCm2hkcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/ft")]
        degCft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/h")]
        degCh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/hm")]
        degChm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/km")]
        degCkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/kPa")]
        degCkPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/m")]
        degCm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/min")]
        degCmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/s")]
        degCs,
        
        /// <remarks/>
        degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF.ft2.h/Btu[IT]")]
        degFft2hBtuIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/ft")]
        degFft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/h")]
        degFh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/m")]
        degFm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/min")]
        degFmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/psi")]
        degFpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/s")]
        degFs,
        
        /// <remarks/>
        degR,
        
        /// <remarks/>
        dEuc,
        
        /// <remarks/>
        deV,
        
        /// <remarks/>
        dF,
        
        /// <remarks/>
        dgauss,
        
        /// <remarks/>
        dGy,
        
        /// <remarks/>
        dH,
        
        /// <remarks/>
        dHz,
        
        /// <remarks/>
        dJ,
        
        /// <remarks/>
        dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm/s")]
        dms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3")]
        dm31,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/(kW.h)")]
        dm3kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/kg")]
        dm3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/kmol")]
        dm3kmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/m")]
        dm3m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/m3")]
        dm3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/MJ")]
        dm3MJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/s")]
        dm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/s2")]
        dm3s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/t")]
        dm3t,
        
        /// <remarks/>
        dN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dN.m")]
        dNm,
        
        /// <remarks/>
        dohm,
        
        /// <remarks/>
        dP,
        
        /// <remarks/>
        dPa,
        
        /// <remarks/>
        drd,
        
        /// <remarks/>
        dS,
        
        /// <remarks/>
        ds,
        
        /// <remarks/>
        dT,
        
        /// <remarks/>
        dV,
        
        /// <remarks/>
        dW,
        
        /// <remarks/>
        dWb,
        
        /// <remarks/>
        dyne,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne.cm2")]
        dynecm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne.s/cm2")]
        dynescm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne/cm")]
        dynecm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne/cm2")]
        dynecm21,
        
        /// <remarks/>
        EA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ea[t]")]
        Eat,
        
        /// <remarks/>
        EC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ecal[th]")]
        Ecalth,
        
        /// <remarks/>
        EEuc,
        
        /// <remarks/>
        EeV,
        
        /// <remarks/>
        EF,
        
        /// <remarks/>
        Eg,
        
        /// <remarks/>
        Egauss,
        
        /// <remarks/>
        EGy,
        
        /// <remarks/>
        EH,
        
        /// <remarks/>
        EHz,
        
        /// <remarks/>
        EJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("EJ/a")]
        EJa,
        
        /// <remarks/>
        Em,
        
        /// <remarks/>
        EN,
        
        /// <remarks/>
        Eohm,
        
        /// <remarks/>
        EP,
        
        /// <remarks/>
        EPa,
        
        /// <remarks/>
        Erd,
        
        /// <remarks/>
        erg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/a")]
        erga,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/cm2")]
        ergcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/cm3")]
        ergcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/g")]
        ergg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/kg")]
        ergkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/m3")]
        ergm3,
        
        /// <remarks/>
        ES,
        
        /// <remarks/>
        ET,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        eV,
        
        /// <remarks/>
        EW,
        
        /// <remarks/>
        EWb,
        
        /// <remarks/>
        F,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("F/m")]
        Fm,
        
        /// <remarks/>
        fa,
        
        /// <remarks/>
        fA,
        
        /// <remarks/>
        fathom,
        
        /// <remarks/>
        fC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fcal[th]")]
        fcalth,
        
        /// <remarks/>
        fEuc,
        
        /// <remarks/>
        feV,
        
        /// <remarks/>
        fF,
        
        /// <remarks/>
        fg,
        
        /// <remarks/>
        fgauss,
        
        /// <remarks/>
        fGy,
        
        /// <remarks/>
        fH,
        
        /// <remarks/>
        fHz,
        
        /// <remarks/>
        fJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("floz[UK]")]
        flozUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("floz[US]")]
        flozUS,
        
        /// <remarks/>
        fm,
        
        /// <remarks/>
        fN,
        
        /// <remarks/>
        fohm,
        
        /// <remarks/>
        footcandle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("footcandle.s")]
        footcandles,
        
        /// <remarks/>
        fP,
        
        /// <remarks/>
        fPa,
        
        /// <remarks/>
        frd,
        
        /// <remarks/>
        fS,
        
        /// <remarks/>
        ft,
        
        /// <remarks/>
        fT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/bbl")]
        ftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/d")]
        ftd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/degF")]
        ftdegF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ft")]
        ftft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ft3")]
        ftft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/gal[US]")]
        ftgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/h")]
        fth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/in")]
        ftin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/lbm")]
        ftlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/m")]
        ftm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/mi")]
        ftmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/min")]
        ftmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ms")]
        ftms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/psi")]
        ftpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/s")]
        fts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/s2")]
        fts2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/us")]
        ftus,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[BnA]")]
        ftBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[BnB]")]
        ftBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Br36]")]
        ftBr36,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Br65]")]
        ftBr65,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Cla]")]
        ftCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[GC]")]
        ftGC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind]")]
        ftInd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind37]")]
        ftInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind62]")]
        ftInd62,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind75]")]
        ftInd75,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Se]")]
        ftSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[SeT]")]
        ftSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[US]")]
        ftUS,
        
        /// <remarks/>
        ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/h")]
        ft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/in3")]
        ft2in3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/lbm")]
        ft2lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/s")]
        ft2s,
        
        /// <remarks/>
        ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(d.ft)")]
        ft3dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(ft.psi.d)")]
        ft3ftpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(min.ft2)")]
        ft3minft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(s.ft2)")]
        ft3sft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/bbl")]
        ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/d")]
        ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/d2")]
        ft3d2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft")]
        ft3ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft2")]
        ft3ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft3")]
        ft3ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/h")]
        ft3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/h2")]
        ft3h2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/kg")]
        ft3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/lbm")]
        ft3lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/lbmol")]
        ft3lbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/min")]
        ft3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/min2")]
        ft3min2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/rad")]
        ft3rad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/s")]
        ft3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/s2")]
        ft3s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/sack[94lbm]")]
        ft3sack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fur[US]")]
        furUS,
        
        /// <remarks/>
        fV,
        
        /// <remarks/>
        fW,
        
        /// <remarks/>
        fWb,
        
        /// <remarks/>
        g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g.ft/(cm3.s)")]
        gftcm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g.m/(cm3.s)")]
        gmcm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/cm3")]
        gcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/cm4")]
        gcm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/dm3")]
        gdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/gal[UK]")]
        ggalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/gal[US]")]
        ggalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/kg")]
        gkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/L")]
        gL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/m3")]
        gm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/mol")]
        gmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/s")]
        gs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/t")]
        gt,
        
        /// <remarks/>
        GA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ga[t]")]
        Gat,
        
        /// <remarks/>
        Gal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]")]
        galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.ft)")]
        galUKhft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.ft2)")]
        galUKhft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.in)")]
        galUKhin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.in2)")]
        galUKhin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(min.ft)")]
        galUKminft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(min.ft2)")]
        galUKminft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/d")]
        galUKd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/ft3")]
        galUKft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/h")]
        galUKh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/h2")]
        galUKh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/lbm")]
        galUKlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/mi")]
        galUKmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/min")]
        galUKmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/min2")]
        galUKmin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]")]
        galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.ft)")]
        galUShft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.ft2)")]
        galUShft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.in)")]
        galUShin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.in2)")]
        galUShin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(min.ft)")]
        galUSminft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(min.ft2)")]
        galUSminft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/bbl")]
        galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/d")]
        galUSd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ft")]
        galUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ft3")]
        galUSft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/h")]
        galUSh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/h2")]
        galUSh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/lbm")]
        galUSlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/mi")]
        galUSmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/min")]
        galUSmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/min2")]
        galUSmin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/sack[94lbm]")]
        galUSsack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ton[UK]")]
        galUStonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ton[US]")]
        galUStonUS,
        
        /// <remarks/>
        gAPI,
        
        /// <remarks/>
        gauss,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gauss/cm")]
        gausscm,
        
        /// <remarks/>
        GBq,
        
        /// <remarks/>
        GC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Gcal[th]")]
        Gcalth,
        
        /// <remarks/>
        GEuc,
        
        /// <remarks/>
        GeV,
        
        /// <remarks/>
        gf,
        
        /// <remarks/>
        GF,
        
        /// <remarks/>
        Gg,
        
        /// <remarks/>
        Ggauss,
        
        /// <remarks/>
        GGy,
        
        /// <remarks/>
        GH,
        
        /// <remarks/>
        GHz,
        
        /// <remarks/>
        GJ,
        
        /// <remarks/>
        Gm,
        
        /// <remarks/>
        GN,
        
        /// <remarks/>
        gn,
        
        /// <remarks/>
        Gohm,
        
        /// <remarks/>
        gon,
        
        /// <remarks/>
        GP,
        
        /// <remarks/>
        GPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("GPa/cm")]
        GPacm,
        
        /// <remarks/>
        GPa2,
        
        /// <remarks/>
        grain,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("grain/ft3")]
        grainft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("grain/gal[US]")]
        graingalUS,
        
        /// <remarks/>
        Grd,
        
        /// <remarks/>
        GS,
        
        /// <remarks/>
        GT,
        
        /// <remarks/>
        GV,
        
        /// <remarks/>
        GW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("GW.h")]
        GWh,
        
        /// <remarks/>
        GWb,
        
        /// <remarks/>
        Gy,
        
        /// <remarks/>
        H,
        
        /// <remarks/>
        h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/ft3")]
        hft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/km")]
        hkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("H/m")]
        Hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/m3")]
        hm3,
        
        /// <remarks/>
        ha,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ha.m")]
        ham,
        
        /// <remarks/>
        hbar,
        
        /// <remarks/>
        hg,
        
        /// <remarks/>
        hL,
        
        /// <remarks/>
        hm,
        
        /// <remarks/>
        hN,
        
        /// <remarks/>
        hp,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h")]
        hph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h/bbl")]
        hphbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h/lbm")]
        hphlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp/ft3")]
        hpft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp/in2")]
        hpin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[elec]")]
        hpelec,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[hyd]")]
        hphyd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[hyd]/in2")]
        hphydin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[metric]")]
        hpmetric,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[metric].h")]
        hpmetrich,
        
        /// <remarks/>
        hs,
        
        /// <remarks/>
        Hz,
        
        /// <remarks/>
        @in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/(in.degF)")]
        inindegF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/a")]
        ina,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/min")]
        inmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/s")]
        ins,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/s2")]
        ins2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in[US]")]
        inUS,
        
        /// <remarks/>
        in2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/ft2")]
        in2ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/in2")]
        in2in2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/s")]
        in2s,
        
        /// <remarks/>
        in3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in3/ft")]
        in3ft,
        
        /// <remarks/>
        in4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inH2O[39degF]")]
        inH2O39degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inH2O[60degF]")]
        inH2O60degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inHg[32degF]")]
        inHg32degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inHg[60degF]")]
        inHg60degF,
        
        /// <remarks/>
        J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J.m/(s.m2.K)")]
        Jmsm2K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J.m/m2")]
        Jmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(g.K)")]
        JgK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(kg.K)")]
        JkgK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(mol.K)")]
        JmolK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(s.m2.degC)")]
        Jsm2degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/cm2")]
        Jcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/dm3")]
        Jdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/g")]
        Jg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/K")]
        JK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/kg")]
        Jkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m")]
        Jm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m2")]
        Jm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m3")]
        Jm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/mol")]
        Jmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/s")]
        Js,
        
        /// <remarks/>
        K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K.m2/kW")]
        Km2kW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K.m2/W")]
        Km2W,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K/km")]
        Kkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K/m")]
        Km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K/Pa")]
        KPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K/s")]
        Ks,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K/W")]
        KW,
        
        /// <remarks/>
        kA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ka[t]")]
        kat,
        
        /// <remarks/>
        kC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]")]
        kcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th].m/cm2")]
        kcalthmcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(h.m.degC)")]
        kcalthhmdegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(h.m2.degC)")]
        kcalthhm2degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(kg.degC)")]
        kcalthkgdegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/cm3")]
        kcalthcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/g")]
        kcalthg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/h")]
        kcalthh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/kg")]
        kcalthkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/m3")]
        kcalthm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/mol")]
        kcalthmol,
        
        /// <remarks/>
        kcd,
        
        /// <remarks/>
        kdyne,
        
        /// <remarks/>
        kEuc,
        
        /// <remarks/>
        keV,
        
        /// <remarks/>
        kF,
        
        /// <remarks/>
        kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m")]
        kgm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m/cm2")]
        kgmcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m/s")]
        kgms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m2")]
        kgm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(kW.h)")]
        kgkWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(m.s)")]
        kgms1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(m2.s)")]
        kgm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/d")]
        kgd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/dm3")]
        kgdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/dm4")]
        kgdm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/h")]
        kgh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/J")]
        kgJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/kg")]
        kgkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/L")]
        kgL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m")]
        kgm1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m2")]
        kgm21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m3")]
        kgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m4")]
        kgm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/min")]
        kgmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/MJ")]
        kgMJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/mol")]
        kgmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/s")]
        kgs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/sack[94lbm]")]
        kgsack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/t")]
        kgt,
        
        /// <remarks/>
        kgauss,
        
        /// <remarks/>
        kgf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m")]
        kgfm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m/cm2")]
        kgfmcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m/m")]
        kgfmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m2")]
        kgfm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.s/m2")]
        kgfsm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/cm")]
        kgfcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/cm2")]
        kgfcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/kgf")]
        kgfkgf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/m2")]
        kgfm21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/mm2")]
        kgfmm2,
        
        /// <remarks/>
        kGy,
        
        /// <remarks/>
        kH,
        
        /// <remarks/>
        kHz,
        
        /// <remarks/>
        Kibyte,
        
        /// <remarks/>
        kJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ.m/(h.m2.K)")]
        kJmhm2K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(h.m2.K)")]
        kJhm2K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(kg.K)")]
        kJkgK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(kmol.K)")]
        kJkmolK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/dm3")]
        kJdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/kg")]
        kJkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/kmol")]
        kJkmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/m3")]
        kJm3,
        
        /// <remarks/>
        klbf,
        
        /// <remarks/>
        klbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("klbm/in")]
        klbmin,
        
        /// <remarks/>
        klx,
        
        /// <remarks/>
        km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/cm")]
        kmcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/dm3")]
        kmdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/h")]
        kmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/L")]
        kmL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/s")]
        kms,
        
        /// <remarks/>
        km2,
        
        /// <remarks/>
        km3,
        
        /// <remarks/>
        kmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/h")]
        kmolh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/m3")]
        kmolm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/s")]
        kmols,
        
        /// <remarks/>
        kN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN.m")]
        kNm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN.m2")]
        kNm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN/m")]
        kNm1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN/m2")]
        kNm21,
        
        /// <remarks/>
        knot,
        
        /// <remarks/>
        kohm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kohm.m")]
        kohmm,
        
        /// <remarks/>
        kP,
        
        /// <remarks/>
        kPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa.s/m")]
        kPasm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/h")]
        kPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/hm")]
        kPahm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/m")]
        kPam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/min")]
        kPamin,
        
        /// <remarks/>
        kPa2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa2/cP")]
        kPa2cP,
        
        /// <remarks/>
        kpsi,
        
        /// <remarks/>
        kpsi2,
        
        /// <remarks/>
        krad,
        
        /// <remarks/>
        krd,
        
        /// <remarks/>
        kS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kS/m")]
        kSm,
        
        /// <remarks/>
        kT,
        
        /// <remarks/>
        kV,
        
        /// <remarks/>
        kW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h")]
        kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/(kg.degC)")]
        kWhkgdegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/dm3")]
        kWhdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/kg")]
        kWhkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/m3")]
        kWhm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/(m2.K)")]
        kWm2K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/(m3.K)")]
        kWm3K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/cm2")]
        kWcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/m2")]
        kWm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/m3")]
        kWm3,
        
        /// <remarks/>
        kWb,
        
        /// <remarks/>
        L,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/(bar.min)")]
        Lbarmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/h")]
        Lh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/kg")]
        Lkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/kmol")]
        Lkmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/m")]
        Lm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/m3")]
        Lm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/min")]
        Lmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/mol")]
        Lmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/s")]
        Ls,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/s2")]
        Ls2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/t")]
        Lt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/ton[UK]")]
        LtonUK,
        
        /// <remarks/>
        lbf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft")]
        lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/bbl")]
        lbfftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/gal[US]")]
        lbfftgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/in")]
        lbfftin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/in2")]
        lbfftin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/lbm")]
        lbfftlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/min")]
        lbfftmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/s")]
        lbffts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in")]
        lbfin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in/in")]
        lbfinin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in2")]
        lbfin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.s/ft2")]
        lbfsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.s/in2")]
        lbfsin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft")]
        lbfft1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft2")]
        lbfft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft3")]
        lbfft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/gal[US]")]
        lbfgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/in")]
        lbfin1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/lbf")]
        lbflbf,
        
        /// <remarks/>
        lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft")]
        lbmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft/s")]
        lbmfts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft2")]
        lbmft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft2/s2")]
        lbmft2s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft.h)")]
        lbmfth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft.s)")]
        lbmfts1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft2.h)")]
        lbmft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft2.s)")]
        lbmft2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(gal[UK].ft)")]
        lbmgalUKft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(gal[US].ft)")]
        lbmgalUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(hp.h)")]
        lbmhph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/bbl")]
        lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/d")]
        lbmd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft")]
        lbmft1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft2")]
        lbmft21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft3")]
        lbmft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft4")]
        lbmft4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/gal[UK]")]
        lbmgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/gal[US]")]
        lbmgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/h")]
        lbmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/in3")]
        lbmin3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/lbmol")]
        lbmlbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/min")]
        lbmmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/s")]
        lbms,
        
        /// <remarks/>
        lbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/(h.ft2)")]
        lbmolhft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/(s.ft2)")]
        lbmolsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/ft3")]
        lbmolft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/gal[UK]")]
        lbmolgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/gal[US]")]
        lbmolgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/h")]
        lbmolh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/s")]
        lbmols,
        
        /// <remarks/>
        link,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[BnA]")]
        linkBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[BnB]")]
        linkBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[Cla]")]
        linkCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[Se]")]
        linkSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[SeT]")]
        linkSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[US]")]
        linkUS,
        
        /// <remarks/>
        lm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm.s")]
        lms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm/m2")]
        lmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm/W")]
        lmW,
        
        /// <remarks/>
        lx,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lx.s")]
        lxs,
        
        /// <remarks/>
        m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/(m.K)")]
        mmK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/cm")]
        mcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/d")]
        md,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/h")]
        mh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/K")]
        mK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/kg")]
        mkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/km")]
        mkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/kPa")]
        mkPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/m")]
        mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/m3")]
        mm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/min")]
        mmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/ms")]
        mms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/Pa")]
        mPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/s")]
        ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/s2")]
        ms2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m[Ger]")]
        mGer,
        
        /// <remarks/>
        m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/(kPa.d)")]
        m2kPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/(Pa.s)")]
        m2Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/cm3")]
        m2cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/d")]
        m2d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/g")]
        m2g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/h")]
        m2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/kg")]
        m2kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/m2")]
        m2m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/m3")]
        m2m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/mol")]
        m2mol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/s")]
        m2s,
        
        /// <remarks/>
        m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.d)")]
        m3bard,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.h)")]
        m3barh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.min)")]
        m3barmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(d.m)")]
        m3dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(h.m)")]
        m3hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(ha.m)")]
        m3ham,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kPa.d)")]
        m3kPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kPa.h)")]
        m3kPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kW.h)")]
        m3kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(m3.K)")]
        m3m3K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(Pa.s)")]
        m3Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(psi.d)")]
        m3psid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.ft)")]
        m3sft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m)")]
        m3sm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m2)")]
        m3sm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m3)")]
        m3sm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/bbl")]
        m3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/d")]
        m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/d2")]
        m3d2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/g")]
        m3g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/h")]
        m3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/J")]
        m3J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kg")]
        m3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/km")]
        m3km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kmol")]
        m3kmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kPa")]
        m3kPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m")]
        m3m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m2")]
        m3m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m3")]
        m3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/min")]
        m3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/mol")]
        m3mol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/Pa")]
        m3Pa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/rad")]
        m3rad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/rev")]
        m3rev,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/s")]
        m3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/s2")]
        m3s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/t")]
        m3t,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/ton[UK]")]
        m3tonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/ton[US]")]
        m3tonUS,
        
        /// <remarks/>
        m4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m4/s")]
        m4s,
        
        /// <remarks/>
        MA,
        
        /// <remarks/>
        mA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mA/cm2")]
        mAcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mA/ft2")]
        mAft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ma[t]")]
        Mat,
        
        /// <remarks/>
        mbar,
        
        /// <remarks/>
        MBq,
        
        /// <remarks/>
        MC,
        
        /// <remarks/>
        mC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mC/m2")]
        mCm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mcal[th]")]
        Mcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mcal[th]")]
        mcalth,
        
        /// <remarks/>
        mCi,
        
        /// <remarks/>
        mD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.ft")]
        mDft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.ft2/(lbf.s)")]
        mDft2lbfs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.in2/(lbf.s)")]
        mDin2lbfs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.m")]
        mDm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD/(Pa.s)")]
        mDPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD/cP")]
        mDcP,
        
        /// <remarks/>
        mEuc,
        
        /// <remarks/>
        MEuc,
        
        /// <remarks/>
        MeV,
        
        /// <remarks/>
        meV,
        
        /// <remarks/>
        MF,
        
        /// <remarks/>
        mF,
        
        /// <remarks/>
        mg,
        
        /// <remarks/>
        Mg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/a")]
        Mga,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/d")]
        Mgd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/dm3")]
        mgdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/g")]
        mgg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/gal[US]")]
        mggalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/h")]
        Mgh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/in")]
        Mgin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/J")]
        mgJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/kg")]
        mgkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/L")]
        mgL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/m2")]
        Mgm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/m3")]
        mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/m3")]
        Mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/min")]
        Mgmin,
        
        /// <remarks/>
        mGal,
        
        /// <remarks/>
        mgauss,
        
        /// <remarks/>
        Mgauss,
        
        /// <remarks/>
        Mgf,
        
        /// <remarks/>
        mgn,
        
        /// <remarks/>
        MGy,
        
        /// <remarks/>
        mGy,
        
        /// <remarks/>
        MH,
        
        /// <remarks/>
        mH,
        
        /// <remarks/>
        MHz,
        
        /// <remarks/>
        mHz,
        
        /// <remarks/>
        mi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/gal[UK]")]
        migalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/gal[US]")]
        migalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/h")]
        mih,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/in")]
        miin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[naut]")]
        minaut,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[nautUK]")]
        minautUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[US]")]
        miUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[US]2")]
        miUS2,
        
        /// <remarks/>
        mi2,
        
        /// <remarks/>
        mi3,
        
        /// <remarks/>
        Mibyte,
        
        /// <remarks/>
        mil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mil/a")]
        mila,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mila")]
        mila1,
        
        /// <remarks/>
        min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("min/ft")]
        minft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("min/m")]
        minm,
        
        /// <remarks/>
        mina,
        
        /// <remarks/>
        MJ,
        
        /// <remarks/>
        mJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/a")]
        MJa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mJ/cm2")]
        mJcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/kg")]
        MJkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/kmol")]
        MJkmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/m")]
        MJm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mJ/m2")]
        mJm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/m3")]
        MJm3,
        
        /// <remarks/>
        mL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/gal[UK]")]
        mLgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/gal[US]")]
        mLgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/mL")]
        mLmL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm")]
        mm1,
        
        /// <remarks/>
        Mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/(mm.K)")]
        mmmmK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/a")]
        mma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/s")]
        mms1,
        
        /// <remarks/>
        mm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/mm2")]
        mm2mm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/s")]
        mm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm3")]
        mm31,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm3/J")]
        mm3J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mmHg[0degC]")]
        mmHg0degC,
        
        /// <remarks/>
        mmol,
        
        /// <remarks/>
        MN,
        
        /// <remarks/>
        mN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN.m2")]
        mNm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN/km")]
        mNkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN/m")]
        mNm,
        
        /// <remarks/>
        Mohm,
        
        /// <remarks/>
        mohm,
        
        /// <remarks/>
        mol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol.m2/(mol.s)")]
        molm2mols,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/(s.m2)")]
        molsm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/m2")]
        molm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/m3")]
        molm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/mol")]
        molmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/s")]
        mols,
        
        /// <remarks/>
        MP,
        
        /// <remarks/>
        mP,
        
        /// <remarks/>
        MPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mPa")]
        mPa1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mPa.s")]
        mPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa.s/m")]
        MPasm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa/h")]
        MPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa/m")]
        MPam,
        
        /// <remarks/>
        Mpsi,
        
        /// <remarks/>
        mrad,
        
        /// <remarks/>
        Mrad,
        
        /// <remarks/>
        Mrd,
        
        /// <remarks/>
        mrd,
        
        /// <remarks/>
        mrem,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mrem/h")]
        mremh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms")]
        ms1,
        
        /// <remarks/>
        MS,
        
        /// <remarks/>
        mS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/cm")]
        mscm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mS/cm")]
        mScm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/ft")]
        msft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/in")]
        msin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mS/m")]
        mSm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/m")]
        msm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/s")]
        mss,
        
        /// <remarks/>
        mSv,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mSv/h")]
        mSvh,
        
        /// <remarks/>
        mT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mT/dm")]
        mTdm,
        
        /// <remarks/>
        mV,
        
        /// <remarks/>
        MV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mV/ft")]
        mVft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mV/m")]
        mVm,
        
        /// <remarks/>
        mW,
        
        /// <remarks/>
        MW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h")]
        MWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h/kg")]
        MWhkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h/m3")]
        MWhm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mW/m2")]
        mWm2,
        
        /// <remarks/>
        mWb,
        
        /// <remarks/>
        MWb,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m")]
        Nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m/m")]
        Nmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m2")]
        Nm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.s/m2")]
        Nsm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m")]
        Nm1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m2")]
        Nm21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m3")]
        Nm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/mm2")]
        Nmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/N")]
        NN,
        
        /// <remarks/>
        nA,
        
        /// <remarks/>
        na,
        
        /// <remarks/>
        nAPI,
        
        /// <remarks/>
        nC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ncal[th]")]
        ncalth,
        
        /// <remarks/>
        nCi,
        
        /// <remarks/>
        nEuc,
        
        /// <remarks/>
        neV,
        
        /// <remarks/>
        nF,
        
        /// <remarks/>
        ng,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ng/g")]
        ngg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ng/mg")]
        ngmg,
        
        /// <remarks/>
        ngauss,
        
        /// <remarks/>
        nGy,
        
        /// <remarks/>
        nH,
        
        /// <remarks/>
        nHz,
        
        /// <remarks/>
        nJ,
        
        /// <remarks/>
        nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nm/s")]
        nms,
        
        /// <remarks/>
        nN,
        
        /// <remarks/>
        nohm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nohm.mil2/ft")]
        nohmmil2ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nohm.mm2/m")]
        nohmmm2m,
        
        /// <remarks/>
        nP,
        
        /// <remarks/>
        nPa,
        
        /// <remarks/>
        nrd,
        
        /// <remarks/>
        nS,
        
        /// <remarks/>
        ns,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ns/ft")]
        nsft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ns/m")]
        nsm,
        
        /// <remarks/>
        nT,
        
        /// <remarks/>
        nV,
        
        /// <remarks/>
        nW,
        
        /// <remarks/>
        nWb,
        
        /// <remarks/>
        O,
        
        /// <remarks/>
        Oe,
        
        /// <remarks/>
        ohm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.cm")]
        ohmcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.m")]
        ohmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.m2/m")]
        ohmm2m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm/m")]
        ohmm1,
        
        /// <remarks/>
        ozf,
        
        /// <remarks/>
        ozm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ozm[troy]")]
        ozmtroy,
        
        /// <remarks/>
        P,
        
        /// <remarks/>
        pA,
        
        /// <remarks/>
        Pa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s")]
        Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s.m3/kg")]
        Pasm3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s/m3")]
        Pasm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s2/m3")]
        Pas2m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/h")]
        Pah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/m")]
        Pam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/m3")]
        Pam3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/s")]
        Pas1,
        
        /// <remarks/>
        Pa2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa2/(Pa.s)")]
        Pa2Pas,
        
        /// <remarks/>
        pC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pcal[th]")]
        pcalth,
        
        /// <remarks/>
        pCi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pCi/g")]
        pCig,
        
        /// <remarks/>
        pdl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl.cm2")]
        pdlcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl.ft")]
        pdlft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl/cm")]
        pdlcm,
        
        /// <remarks/>
        pEuc,
        
        /// <remarks/>
        peV,
        
        /// <remarks/>
        pF,
        
        /// <remarks/>
        pg,
        
        /// <remarks/>
        pgauss,
        
        /// <remarks/>
        pGy,
        
        /// <remarks/>
        pHz,
        
        /// <remarks/>
        pJ,
        
        /// <remarks/>
        pm,
        
        /// <remarks/>
        pN,
        
        /// <remarks/>
        pohm,
        
        /// <remarks/>
        pP,
        
        /// <remarks/>
        pPa,
        
        /// <remarks/>
        ppk,
        
        /// <remarks/>
        ppm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[mass]")]
        ppmmass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]")]
        ppmvol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]/degC")]
        ppmvoldegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]/degF")]
        ppmvoldegF,
        
        /// <remarks/>
        prd,
        
        /// <remarks/>
        pS,
        
        /// <remarks/>
        ps,
        
        /// <remarks/>
        psi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi.d/bbl")]
        psidbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi.s")]
        psis,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/ft")]
        psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/h")]
        psih,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/m")]
        psim,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/min")]
        psimin,
        
        /// <remarks/>
        psi2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi2.d/(cP.ft3)")]
        psi2dcPft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi2/cP")]
        psi2cP,
        
        /// <remarks/>
        pT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[UK]")]
        ptUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[UK]/(hp.h)")]
        ptUKhph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[US]")]
        ptUS,
        
        /// <remarks/>
        pV,
        
        /// <remarks/>
        pW,
        
        /// <remarks/>
        pWb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("qt[UK]")]
        qtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("qt[US]")]
        qtUS,
        
        /// <remarks/>
        quad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("quad/a")]
        quada,
        
        /// <remarks/>
        rad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/ft")]
        radft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/ft3")]
        radft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/m")]
        radm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/m3")]
        radm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/s")]
        rads,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/s2")]
        rads2,
        
        /// <remarks/>
        rd,
        
        /// <remarks/>
        rem,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rem/h")]
        remh,
        
        /// <remarks/>
        rev,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/ft")]
        revft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/m")]
        revm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/s")]
        revs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rod[US]")]
        rodUS,
        
        /// <remarks/>
        rpm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rpm/s")]
        rpms,
        
        /// <remarks/>
        S,
        
        /// <remarks/>
        s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/cm")]
        scm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/ft")]
        sft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/ft3")]
        sft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/in")]
        sin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/kg")]
        skg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/L")]
        sL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("S/m")]
        Sm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/m")]
        sm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/m3")]
        sm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/qt[UK]")]
        sqtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/qt[US]")]
        sqtUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/s")]
        ss,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sack[94lbm]")]
        sack94lbm,
        
        /// <remarks/>
        seca,
        
        /// <remarks/>
        section,
        
        /// <remarks/>
        sr,
        
        /// <remarks/>
        St,
        
        /// <remarks/>
        Sv,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Sv/h")]
        Svh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Sv/s")]
        Svs,
        
        /// <remarks/>
        t,
        
        /// <remarks/>
        T,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/a")]
        ta,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/d")]
        td,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/h")]
        th,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("T/m")]
        Tm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/m3")]
        tm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/min")]
        tmin,
        
        /// <remarks/>
        TA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ta[t]")]
        Tat,
        
        /// <remarks/>
        TBq,
        
        /// <remarks/>
        TC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Tcal[th]")]
        Tcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API]")]
        TDAPI,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API].m")]
        TDAPIm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API]/(Pa.s)")]
        TDAPIPas,
        
        /// <remarks/>
        TEuc,
        
        /// <remarks/>
        TeV,
        
        /// <remarks/>
        TF,
        
        /// <remarks/>
        Tg,
        
        /// <remarks/>
        Tgauss,
        
        /// <remarks/>
        TGy,
        
        /// <remarks/>
        TH,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[EC]")]
        thermEC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[UK]")]
        thermUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[US]")]
        thermUS,
        
        /// <remarks/>
        THz,
        
        /// <remarks/>
        TJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TJ/a")]
        TJa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Tm")]
        Tm1,
        
        /// <remarks/>
        TN,
        
        /// <remarks/>
        Tohm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]")]
        tonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/a")]
        tonUKa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/d")]
        tonUKd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/h")]
        tonUKh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/min")]
        tonUKmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]")]
        tonUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/a")]
        tonUSa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/d")]
        tonUSd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/ft2")]
        tonUSft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/h")]
        tonUSh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/min")]
        tonUSmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]")]
        tonfUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK].ft2")]
        tonfUKft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]/ft")]
        tonfUKft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]/ft2")]
        tonfUKft21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]")]
        tonfUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].ft")]
        tonfUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].ft2")]
        tonfUSft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi")]
        tonfUSmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi/bbl")]
        tonfUSmibbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi/ft")]
        tonfUSmift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/ft")]
        tonfUSft1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/ft2")]
        tonfUSft21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/in2")]
        tonfUSin2,
        
        /// <remarks/>
        tonRefrig,
        
        /// <remarks/>
        torr,
        
        /// <remarks/>
        TP,
        
        /// <remarks/>
        TPa,
        
        /// <remarks/>
        Trd,
        
        /// <remarks/>
        TS,
        
        /// <remarks/>
        TT,
        
        /// <remarks/>
        TV,
        
        /// <remarks/>
        TW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TW.h")]
        TWh,
        
        /// <remarks/>
        TWb,
        
        /// <remarks/>
        uA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uA/cm2")]
        uAcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uA/in2")]
        uAin2,
        
        /// <remarks/>
        ubar,
        
        /// <remarks/>
        uC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]")]
        ucalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]/(s.cm2)")]
        ucalthscm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]/s")]
        ucalths,
        
        /// <remarks/>
        uCi,
        
        /// <remarks/>
        uEuc,
        
        /// <remarks/>
        ueV,
        
        /// <remarks/>
        uF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uF/m")]
        uFm,
        
        /// <remarks/>
        ug,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/cm3")]
        ugcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/g")]
        ugg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/mg")]
        ugmg,
        
        /// <remarks/>
        ugauss,
        
        /// <remarks/>
        uGy,
        
        /// <remarks/>
        uH,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uH/m")]
        uHm,
        
        /// <remarks/>
        uHz,
        
        /// <remarks/>
        uJ,
        
        /// <remarks/>
        um,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("um/s")]
        ums,
        
        /// <remarks/>
        um2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("um2.m")]
        um2m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("umHg[0degC]")]
        umHg0degC,
        
        /// <remarks/>
        umol,
        
        /// <remarks/>
        uN,
        
        /// <remarks/>
        uohm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uohm/ft")]
        uohmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uohm/m")]
        uohmm,
        
        /// <remarks/>
        uP,
        
        /// <remarks/>
        uPa,
        
        /// <remarks/>
        upsi,
        
        /// <remarks/>
        urad,
        
        /// <remarks/>
        urd,
        
        /// <remarks/>
        us,
        
        /// <remarks/>
        uS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/ft")]
        usft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/in")]
        usin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/m")]
        usm,
        
        /// <remarks/>
        uT,
        
        /// <remarks/>
        uV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uV/ft")]
        uVft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uV/m")]
        uVm,
        
        /// <remarks/>
        uW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uW/m3")]
        uWm3,
        
        /// <remarks/>
        uWb,
        
        /// <remarks/>
        V,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/B")]
        VB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/dB")]
        VdB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/m")]
        Vm,
        
        /// <remarks/>
        W,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W.m2.K/(J.K)")]
        Wm2KJK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m.K)")]
        WmK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m2.K)")]
        Wm2K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m2.sr)")]
        Wm2sr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m3.K)")]
        Wm3K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/cm2")]
        Wcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/K")]
        WK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/kW")]
        WkW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/m2")]
        Wm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/m3")]
        Wm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/mm2")]
        Wmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/sr")]
        Wsr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/W")]
        WW,
        
        /// <remarks/>
        Wb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb.m")]
        Wbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb/m")]
        Wbm1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb/mm")]
        Wbmm,
        
        /// <remarks/>
        wk,
        
        /// <remarks/>
        yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[BnA]")]
        ydBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[BnB]")]
        ydBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Cla]")]
        ydCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind]")]
        ydInd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind37]")]
        ydInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind62]")]
        ydInd62,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind75]")]
        ydInd75,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Se]")]
        ydSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[SeT]")]
        ydSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[US]")]
        ydUS,
        
        /// <remarks/>
        yd2,
        
        /// <remarks/>
        yd3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EastOrWest {
        
        /// <remarks/>
        east,
        
        /// <remarks/>
        west,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum NorthOrSouth {
        
        /// <remarks/>
        north,
        
        /// <remarks/>
        south,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PrincipalMeridian {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1st Principal Meridian")]
        Item1stPrincipalMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2nd Principal Meridian")]
        Item2ndPrincipalMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3rd Principal Meridian")]
        Item3rdPrincipalMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4th Principal Meridian")]
        Item4thPrincipalMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5th Principal Meridian")]
        Item5thPrincipalMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6th Principal Meridian")]
        Item6thPrincipalMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Black Hills Meridian")]
        BlackHillsMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Boise Meridian")]
        BoiseMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Chickasaw Meridian")]
        ChickasawMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Choctaw Meridian")]
        ChoctawMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Cimarron Meridian")]
        CimarronMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Copper River Meridian")]
        CopperRiverMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Fairbanks Meridian")]
        FairbanksMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Gila and Salt River Meridian")]
        GilaandSaltRiverMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Humboldt Meridian")]
        HumboldtMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Huntsville Meridian")]
        HuntsvilleMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Indian Meridian")]
        IndianMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Kateel River Meridian")]
        KateelRiverMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Lousiana Meridian")]
        LousianaMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Michigan Meridian")]
        MichiganMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Montana Meridian")]
        MontanaMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mount Diablo Meridian")]
        MountDiabloMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Navajo Meridian")]
        NavajoMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("New Mexico Meridian")]
        NewMexicoMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Saint Helena Meridian")]
        SaintHelenaMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Saint Stephens Meridian")]
        SaintStephensMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Salt Lake Meridian")]
        SaltLakeMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("San Bernardo Meridian")]
        SanBernardoMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Seward Meridian")]
        SewardMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Tallahassee Meridian")]
        TallahasseeMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Uintah Meridian")]
        UintahMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Umiat Meridian")]
        UmiatMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ute Meridian")]
        UteMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Washington Meridian")]
        WashingtonMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Williamette Meridian")]
        WilliametteMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wind River Meridian")]
        WindRiverMeridian,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum FluidComponentBasis {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1-dimethylcyclopentane")]
        Item1dimethylcyclopentane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2 dimethylbenzene")]
        Item2dimethylbenzene,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2 dimethylpropane")]
        Item2dimethylpropane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2-dimethylbutane")]
        Item2dimethylbutane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2-dimethylcyclopentane")]
        Item2dimethylcyclopentane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2-dimethylhexane")]
        Item2dimethylhexane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2-dimethylpentane")]
        Item2dimethylpentane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2-methylbutane")]
        Item2methylbutane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2-methylhexane")]
        Item2methylhexane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2-methylpentane")]
        Item2methylpentane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2-methylpropane")]
        Item2methylpropane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3 dimethylbenzene")]
        Item3dimethylbenzene,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3-dimethylbutane")]
        Item3dimethylbutane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3-dimethylcyclopentane")]
        Item3dimethylcyclopentane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3-dimethylpentane")]
        Item3dimethylpentane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3-ethylpentane")]
        Item3ethylpentane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3-methylhexane")]
        Item3methylhexane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3-methylpentane")]
        Item3methylpentane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3-trimethylbutane")]
        Item3trimethylbutane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3-trimethylpentane")]
        Item3trimethylpentane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4-dimethylbenzene")]
        Item4dimethylbenzene,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4-dimethylhexane")]
        Item4dimethylhexane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4-Dimethylpentane")]
        Item4Dimethylpentane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4-trimethylbenzene")]
        Item4trimethylbenzene,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5-dimethylhexane")]
        Item5dimethylhexane,
        
        /// <remarks/>
        argon,
        
        /// <remarks/>
        benzene,
        
        /// <remarks/>
        butane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c11 fraction")]
        c11fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c12 fraction")]
        c12fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c13 fraction")]
        c13fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c14 fraction")]
        c14fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c15 fraction")]
        c15fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c16 fraction")]
        c16fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c17 fraction")]
        c17fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c18 fraction")]
        c18fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c19 fraction")]
        c19fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c20 fraction")]
        c20fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c21 fraction")]
        c21fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c22 fraction")]
        c22fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c23 fraction")]
        c23fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c24 fraction")]
        c24fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c25 fraction")]
        c25fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c26 fraction")]
        c26fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c27 fraction")]
        c27fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c28 fraction")]
        c28fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c29 fraction")]
        c29fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c30 fraction")]
        c30fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c31 fraction")]
        c31fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c32 fraction")]
        c32fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c33 fraction")]
        c33fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c34 fraction")]
        c34fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c35 fraction")]
        c35fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c36 fraction")]
        c36fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c37 fraction")]
        c37fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c38 fraction")]
        c38fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c39 fraction")]
        c39fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c40 fraction")]
        c40fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c41 fraction")]
        c41fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c42 fraction")]
        c42fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c43 fraction")]
        c43fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c44 fraction")]
        c44fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c45 fraction")]
        c45fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c46 fraction")]
        c46fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c47 fraction")]
        c47fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c48 fraction")]
        c48fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c49 fraction")]
        c49fraction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("carbon dioxide")]
        carbondioxide,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cis-1")]
        cis1,
        
        /// <remarks/>
        cyclohexane,
        
        /// <remarks/>
        cyclopentane,
        
        /// <remarks/>
        decanes,
        
        /// <remarks/>
        ethane,
        
        /// <remarks/>
        ethylbenzene,
        
        /// <remarks/>
        ethylcyclopentane,
        
        /// <remarks/>
        heptanes,
        
        /// <remarks/>
        hexane,
        
        /// <remarks/>
        hexanes,
        
        /// <remarks/>
        hydrogen,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hydrogen sulfide")]
        hydrogensulfide,
        
        /// <remarks/>
        methane,
        
        /// <remarks/>
        methylbenzene,
        
        /// <remarks/>
        methylcyclohexane,
        
        /// <remarks/>
        methylcyclopentane,
        
        /// <remarks/>
        nitrogen,
        
        /// <remarks/>
        nonanes,
        
        /// <remarks/>
        octanes,
        
        /// <remarks/>
        oxygen,
        
        /// <remarks/>
        pentane,
        
        /// <remarks/>
        propane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("trans-1")]
        trans1,
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        water,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum GeologyType {
        
        /// <remarks/>
        aquifer,
        
        /// <remarks/>
        reservoir,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum PlusComponentEnum {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c10+")]
        c10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c11+")]
        c11,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c12+")]
        c12,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c20+")]
        c20,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c25+")]
        c25,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c30+")]
        c30,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c36+")]
        c36,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c5+")]
        c5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c6+")]
        c6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c7+")]
        c7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c8+")]
        c8,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c9+")]
        c9,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ProductFluidKind {
        
        /// <remarks/>
        condensate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("condensate - gross")]
        condensategross,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("condensate - net")]
        condensatenet,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("crude - stabilized")]
        crudestabilized,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas - component in oil")]
        gascomponentinoil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas - dry")]
        gasdry,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas - rich")]
        gasrich,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas - wet")]
        gaswet,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("liquefied natural gas")]
        liquefiednaturalgas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("liquefied petroleum gas")]
        liquefiedpetroleumgas,
        
        /// <remarks/>
        liquid,
        
        /// <remarks/>
        naphtha,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("natural gas liquid")]
        naturalgasliquid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("NGL - component in gas")]
        NGLcomponentingas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil - component in water")]
        oilcomponentinwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil - gross")]
        oilgross,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil - net")]
        oilnet,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil and gas")]
        oilandgas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("petroleum gas liquid")]
        petroleumgasliquid,
        
        /// <remarks/>
        vapor,
        
        /// <remarks/>
        sand,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water - discharge")]
        waterdischarge,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water - processed")]
        waterprocessed,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum PseudoComponentEnum {
        
        /// <remarks/>
        c10,
        
        /// <remarks/>
        c11,
        
        /// <remarks/>
        c12,
        
        /// <remarks/>
        c13,
        
        /// <remarks/>
        c14,
        
        /// <remarks/>
        c15,
        
        /// <remarks/>
        c16,
        
        /// <remarks/>
        c17,
        
        /// <remarks/>
        c18,
        
        /// <remarks/>
        c19,
        
        /// <remarks/>
        c20,
        
        /// <remarks/>
        c21,
        
        /// <remarks/>
        c22,
        
        /// <remarks/>
        c23,
        
        /// <remarks/>
        c24,
        
        /// <remarks/>
        c25,
        
        /// <remarks/>
        c26,
        
        /// <remarks/>
        c27,
        
        /// <remarks/>
        c28,
        
        /// <remarks/>
        c29,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("c2-c4+n2")]
        c2c4n2,
        
        /// <remarks/>
        c30,
        
        /// <remarks/>
        c31,
        
        /// <remarks/>
        c32,
        
        /// <remarks/>
        c33,
        
        /// <remarks/>
        c34,
        
        /// <remarks/>
        c35,
        
        /// <remarks/>
        c4,
        
        /// <remarks/>
        c5,
        
        /// <remarks/>
        c6,
        
        /// <remarks/>
        c7,
        
        /// <remarks/>
        c8,
        
        /// <remarks/>
        c9,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum PureComponentEnum {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1-2-4-trimethylbenzene")]
        Item124trimethylbenzene,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2-dimethylbutane")]
        Item2dimethylbutane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3-dimethylbutane")]
        Item3dimethylbutane,
        
        /// <remarks/>
        ar,
        
        /// <remarks/>
        c1,
        
        /// <remarks/>
        c2,
        
        /// <remarks/>
        c3,
        
        /// <remarks/>
        co2,
        
        /// <remarks/>
        h2,
        
        /// <remarks/>
        h2o,
        
        /// <remarks/>
        h2s,
        
        /// <remarks/>
        he,
        
        /// <remarks/>
        hg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("i-c4")]
        ic4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("i-c5")]
        ic5,
        
        /// <remarks/>
        n2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("n-c10")]
        nc10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("n-c4")]
        nc4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("n-c5")]
        nc5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("n-c6")]
        nc6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("n-c7")]
        nc7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("n-c8")]
        nc8,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("n-c9")]
        nc9,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("neo-c5")]
        neoc5,
        
        /// <remarks/>
        benzene,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2-methylpentane")]
        Item2methylpentane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3-methylpentane")]
        Item3methylpentane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2-methylhexane")]
        Item2methylhexane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3-methylhexane")]
        Item3methylhexane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2-methylheptane")]
        Item2methylheptane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3-methylheptane")]
        Item3methylheptane,
        
        /// <remarks/>
        cyclohexane,
        
        /// <remarks/>
        ethylbenzene,
        
        /// <remarks/>
        ethylcyclohexane,
        
        /// <remarks/>
        methylcyclohexane,
        
        /// <remarks/>
        methylcyclopentane,
        
        /// <remarks/>
        toluene,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m-xylene")]
        mxylene,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("o-xylene")]
        oxylene,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("p-xylene")]
        pxylene,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum ServiceFluidKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("alkaline solutions")]
        alkalinesolutions,
        
        /// <remarks/>
        biocide,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("carbon dioxide")]
        carbondioxide,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("carbon monoxide")]
        carbonmonoxide,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("corrosion inhibitor")]
        corrosioninhibitor,
        
        /// <remarks/>
        demulsifier,
        
        /// <remarks/>
        diesel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diethylene glycol")]
        diethyleneglycol,
        
        /// <remarks/>
        dispersant,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drag reducing agent")]
        dragreducingagent,
        
        /// <remarks/>
        emulsifier,
        
        /// <remarks/>
        flocculant,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hydraulic control fluid")]
        hydrauliccontrolfluid,
        
        /// <remarks/>
        isopropanol,
        
        /// <remarks/>
        lubricant,
        
        /// <remarks/>
        methanol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("monoethylene glycol")]
        monoethyleneglycol,
        
        /// <remarks/>
        oil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("other chemical")]
        otherchemical,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("other hydrate inhibitor")]
        otherhydrateinhibitor,
        
        /// <remarks/>
        polymer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scale inhibitor")]
        scaleinhibitor,
        
        /// <remarks/>
        solvent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stabilizing agent")]
        stabilizingagent,
        
        /// <remarks/>
        surfactant,
        
        /// <remarks/>
        thinner,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("triethylene glycol")]
        triethyleneglycol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum WellDirection {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("huff-n-puff")]
        huffnpuff,
        
        /// <remarks/>
        injector,
        
        /// <remarks/>
        producer,
        
        /// <remarks/>
        uncertain,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum DasCalibrationType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("last locus to end of fiber")]
        lastlocustoendoffiber,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("locus calibration")]
        locuscalibration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tap test")]
        taptest,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum OutputFluidProperty {
        
        /// <remarks/>
        Compressibility,
        
        /// <remarks/>
        Density,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Derivative of Density w.r.t Pressure")]
        DerivativeofDensitywrtPressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Derivative of Density w.r.t Temperature")]
        DerivativeofDensitywrtTemperature,
        
        /// <remarks/>
        Enthalpy,
        
        /// <remarks/>
        Entropy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Expansion Factor")]
        ExpansionFactor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Formation Volume Factor")]
        FormationVolumeFactor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Gas-Oil Interfacial Tension")]
        GasOilInterfacialTension,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Gas-Water Interfacial Tension")]
        GasWaterInterfacialTension,
        
        /// <remarks/>
        Index,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K value")]
        Kvalue,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Misc Bank Critical Solvent Saturation")]
        MiscBankCriticalSolventSaturation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Misc Bank Phase Density")]
        MiscBankPhaseDensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Misc Bank Phase Viscosity")]
        MiscBankPhaseViscosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Miscibility Parameter (Alpha)")]
        MiscibilityParameterAlpha,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mixing Parameter Oil-Gas")]
        MixingParameterOilGas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Oil-Gas Ratio")]
        OilGasRatio,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Oil-Water Interfacial Tension")]
        OilWaterInterfacialTension,
        
        /// <remarks/>
        Parachor,
        
        /// <remarks/>
        Pressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("P-T Cross Term")]
        PTCrossTerm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Saturation Pressure")]
        SaturationPressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Solution GOR")]
        SolutionGOR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Solvent Density")]
        SolventDensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Specific Heat")]
        SpecificHeat,
        
        /// <remarks/>
        Temperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Thermal Conductivity")]
        ThermalConductivity,
        
        /// <remarks/>
        Viscosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Viscosity Compressibility")]
        ViscosityCompressibility,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Water vapor mass fraction in gas phase")]
        Watervapormassfractioningasphase,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Z Factor")]
        ZFactor,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum PvtModelParameterKind {
        
        /// <remarks/>
        b0,
        
        /// <remarks/>
        b1,
        
        /// <remarks/>
        b2,
        
        /// <remarks/>
        c1,
        
        /// <remarks/>
        c2,
        
        /// <remarks/>
        d1,
        
        /// <remarks/>
        d2,
        
        /// <remarks/>
        e1,
        
        /// <remarks/>
        e2,
        
        /// <remarks/>
        f1,
        
        /// <remarks/>
        f2,
        
        /// <remarks/>
        g1,
        
        /// <remarks/>
        g2,
        
        /// <remarks/>
        h1,
        
        /// <remarks/>
        h2,
        
        /// <remarks/>
        a0,
        
        /// <remarks/>
        a1,
        
        /// <remarks/>
        a2,
        
        /// <remarks/>
        a3,
        
        /// <remarks/>
        a4,
        
        /// <remarks/>
        a5,
        
        /// <remarks/>
        a6,
        
        /// <remarks/>
        a7,
        
        /// <remarks/>
        a8,
        
        /// <remarks/>
        a9,
        
        /// <remarks/>
        a10,
        
        /// <remarks/>
        c0,
        
        /// <remarks/>
        d0,
        
        /// <remarks/>
        e0,
        
        /// <remarks/>
        f0,
        
        /// <remarks/>
        g0,
        
        /// <remarks/>
        h0,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum DispositionKind {
        
        /// <remarks/>
        flared,
        
        /// <remarks/>
        sold,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("used on-site")]
        usedonsite,
        
        /// <remarks/>
        fuel,
        
        /// <remarks/>
        vented,
        
        /// <remarks/>
        disposal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas lift")]
        gaslift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lost or stolen")]
        lostorstolen,
        
        /// <remarks/>
        other,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum EstimationMethod {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("analytics model")]
        analyticsmodel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("decline curve")]
        declinecurve,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("expert recommendation")]
        expertrecommendation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("flowing material balance")]
        flowingmaterialbalance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("from last allocated volume")]
        fromlastallocatedvolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("numerical reservoir simulation")]
        numericalreservoirsimulation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("production profile")]
        productionprofile,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rate transient analysis")]
        ratetransientanalysis,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ratio analysis")]
        ratioanalysis,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reservoir model")]
        reservoirmodel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well model")]
        wellmodel,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    public enum QuantityMethod {
        
        /// <remarks/>
        allocated,
        
        /// <remarks/>
        allowed,
        
        /// <remarks/>
        estimated,
        
        /// <remarks/>
        target,
        
        /// <remarks/>
        measured,
        
        /// <remarks/>
        budget,
        
        /// <remarks/>
        constraint,
        
        /// <remarks/>
        forecast,
    }
}
