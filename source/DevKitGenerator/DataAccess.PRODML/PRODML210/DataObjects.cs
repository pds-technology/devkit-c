
//This code was generated using the Energistics Generator tool.  Direct changes to this code will be lost
//during regeneration.

using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;

using Energistics.DataAccess.PRODML210.ComponentSchemas;
using Energistics.DataAccess.PRODML210.ReferenceData;
using Energistics.DataAccess.Reflection;
using Energistics.DataAccess.Validation;

namespace Energistics.DataAccess.PRODML210
{
    #region Classes
    /// <summary>
    /// This class represents the PropertyKind xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the PropertyKind xsd type.")]
    public partial class PropertyKind : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// IsAbstract property
        /// </summary>
		[Required]
        [Description("This boolean indicates whether the PropertyKind should be used as a real property or not.  If the Is Abstract flag is set, then this entry should be used only as the parent of a real property. For example, the PropertyKind of \"force per length\" shouldn't be used directly, as it is really just a description of some units of measure. This entry should only be used as the parent of the real physical property \"surface tension\".")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsAbstract")]
        public bool? IsAbstract {
            get {
                return IsAbstractField;
            } 
            set {
                IsAbstractField = value;
                NotifyPropertyChanged("IsAbstract");
            }
        }

        private bool? IsAbstractField; 

        /// <summary>
        /// DeprecationDate property
        /// </summary>
		[Description("Date at which this property dictionary entry must no longer be used. Files generated before this date would have used this entry so it is left here for reference.   A null value means the property kind is still valid.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DeprecationDate")]
        public Timestamp? DeprecationDate {
            get {
                return DeprecationDateField;
            } 
            set {
                DeprecationDateField = value;
                 this.DeprecationDateSpecified = true;
                NotifyPropertyChanged("DeprecationDate");
            }
        }

        private Timestamp? DeprecationDateField; 

        /// <summary>
        /// DeprecationDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DeprecationDateSpecified {
            get {
                return DeprecationDateSpecifiedField;
            } 
            set {
                DeprecationDateSpecifiedField = value;
                NotifyPropertyChanged("DeprecationDateSpecified");
            }
        }

        private bool DeprecationDateSpecifiedField; 

        /// <summary>
        /// QuantityClass property
        /// </summary>
		[Required]
        [Description("A reference to the name of a quantity class in the Energistics Unit of Measure Dictionary. If there is no match in the Energistics Unit of Measure Dictionary, then this attribute is purely for human information.")]
        [EnergisticsDataTypeAttribute(DataType = "QuantityClassKindExt")]
		[XmlElement("QuantityClass")]
        public ExtensibleEnum<QuantityClassKind>? QuantityClass {
            get {
                return QuantityClassField;
            } 
            set {
                QuantityClassField = value;
                NotifyPropertyChanged("QuantityClass");
            }
        }

        private ExtensibleEnum<QuantityClassKind>? QuantityClassField; 

        /// <summary>
        /// Parent property
        /// </summary>
		[Description("Indicates the parent of this property kind. BUSINESS RULE : Only the top root abstract property kind has not to define a parent property kind.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Parent")]
        public DataObjectReference Parent {
            get {
                return ParentField;
            } 
            set {
                ParentField = value;
                NotifyPropertyChanged("Parent");
            }
        }

        private DataObjectReference ParentField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DataObjectReference xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DataObjectReference", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DataObjectReference xsd type.")]
    public partial class DataObjectReference : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ContentType property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("The content type of the referenced element.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("ContentType")]
        public string ContentType {
            get {
                return ContentTypeField;
            } 
            set {
                ContentTypeField = value;
                NotifyPropertyChanged("ContentType");
            }
        }

        private string ContentTypeField; 

        /// <summary>
        /// Title property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("The Title of the referenced object. The Title of a top level element would be inherited from AbstractObject and must be present on any referenced object.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Title")]
        public string Title {
            get {
                return TitleField;
            } 
            set {
                TitleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private string TitleField; 

        /// <summary>
        /// Uuid property
        /// </summary>
		[Required]
        [RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("Reference to an object using its global UID.")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
		[XmlElement("Uuid")]
        public string Uuid {
            get {
                return UuidField;
            } 
            set {
                UuidField = value;
                NotifyPropertyChanged("Uuid");
            }
        }

        private string UuidField; 

        /// <summary>
        /// UuidAuthority property
        /// </summary>
		[StringLength(64)]
        [Description("The authority that issued and maintains the uuid of the referenced object. Used mainly in alias context.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("UuidAuthority")]
        public string UuidAuthority {
            get {
                return UuidAuthorityField;
            } 
            set {
                UuidAuthorityField = value;
                NotifyPropertyChanged("UuidAuthority");
            }
        }

        private string UuidAuthorityField; 

        /// <summary>
        /// Uri property
        /// </summary>
		[Description("This is the URI of a referenced object.   Do not use this to store the path and file names of an external object - that is done through the External Dataset machinery.  This element is intended for use with the Energistics Transfer Protocol.")]
        [EnergisticsDataTypeAttribute(DataType = "anyURI")]
		[XmlElement("Uri", DataType="anyURI")]
        public string Uri {
            get {
                return UriField;
            } 
            set {
                UriField = value;
                NotifyPropertyChanged("Uri");
            }
        }

        private string UriField; 

        /// <summary>
        /// ObjectVersion property
        /// </summary>
		[StringLength(64)]
        [Description("Indicates the version of the object which is referenced. This must be identical to the objectVersion (inherited from AbstractObject) attribute of the object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ObjectVersion")]
        public string ObjectVersion {
            get {
                return ObjectVersionField;
            } 
            set {
                ObjectVersionField = value;
                NotifyPropertyChanged("ObjectVersion");
            }
        }

        private string ObjectVersionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellTestValidationOperation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellTestValidationOperation", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WellTestValidationOperation xsd type.")]
    public partial class WellTestValidationOperation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The kind of validation operation. See enum ValidationOperation.
        /// </summary>
		[Required]
        [Description("The kind of validation operation. See enum ValidationOperation.")]
        [EnergisticsDataTypeAttribute(DataType = "ValidationOperation")]
		[XmlElement("Kind")]
        public ValidationOperation? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        
        private bool KindSpecifiedField = false;
        
        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }
        
        private ValidationOperation? KindField; 

        /// <summary>
        /// The result of the validation operation. See enum ValidationResult. 
        /// </summary>
		[Required]
        [Description("The result of the validation operation. See enum ValidationResult.")]
        [EnergisticsDataTypeAttribute(DataType = "ValidationResult")]
		[XmlElement("Result")]
        public Energistics.DataAccess.PRODML210.ReferenceData.ValidationResult? Result {
            get {
                return ResultField;
            } 
            set {
                ResultField = value;
                 this.ResultSpecified = true;
                NotifyPropertyChanged("Result");
            }
        }

        
        private bool ResultSpecifiedField = false;
        
        /// <summary>
        /// ResultSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ResultSpecified {
            get {
                return ResultSpecifiedField;
            } 
            set {
                ResultSpecifiedField = value;
                NotifyPropertyChanged("ResultSpecified");
            }
        }
        
        private Energistics.DataAccess.PRODML210.ReferenceData.ValidationResult? ResultField; 

        /// <summary>
        /// The date of the validation operation.
        /// </summary>
		[Description("The date of the validation operation.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("Date", DataType="date")]
        public DateTime? Date {
            get {
                return DateField;
            } 
            set {
                DateField = value;
                 this.DateSpecified = true;
                NotifyPropertyChanged("Date");
            }
        }

        private DateTime? DateField; 

        /// <summary>
        /// DateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateSpecified {
            get {
                return DateSpecifiedField;
            } 
            set {
                DateSpecifiedField = value;
                NotifyPropertyChanged("DateSpecified");
            }
        }

        private bool DateSpecifiedField; 

        /// <summary>
        /// The tool used for the validation operation.
        /// </summary>
		[StringLength(64)]
        [Description("The tool used for the validation operation.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Tool")]
        public string Tool {
            get {
                return ToolField;
            } 
            set {
                ToolField = value;
                NotifyPropertyChanged("Tool");
            }
        }

        private string ToolField; 

        /// <summary>
        /// The method used for the validation operation..
        /// </summary>
		[StringLength(64)]
        [Description("The method used for the validation operation..")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Method")]
        public string Method {
            get {
                return MethodField;
            } 
            set {
                MethodField = value;
                NotifyPropertyChanged("Method");
            }
        }

        private string MethodField; 

        /// <summary>
        /// A comment about the operation.
        /// </summary>
		[StringLength(2000)]
        [Description("A comment about the operation.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellTestSeparatorData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellTestSeparatorData", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WellTestSeparatorData xsd type.")]
    public partial class WellTestSeparatorData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The pressure measured at the separator during the well test.
        /// </summary>
		[Description("The pressure measured at the separator during the well test.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("SeparatorPressure")]
        public AbstractPressureValue SeparatorPressure {
            get {
                return SeparatorPressureField;
            } 
            set {
                SeparatorPressureField = value;
                NotifyPropertyChanged("SeparatorPressure");
            }
        }

        private AbstractPressureValue SeparatorPressureField; 

        /// <summary>
        /// The temperature measured at the separator during the well test.
        /// </summary>
		[Description("The temperature measured at the separator during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("SeparatorTemperature")]
        public ThermodynamicTemperatureMeasure SeparatorTemperature {
            get {
                return SeparatorTemperatureField;
            } 
            set {
                SeparatorTemperatureField = value;
                NotifyPropertyChanged("SeparatorTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure SeparatorTemperatureField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractPressureValue xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelativePressure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GaugePressure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbsolutePressure))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractPressureValue", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractPressureValue xsd type.")]
    public abstract partial class AbstractPressureValue : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RelativePressure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RelativePressure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the RelativePressure xsd type.")]
    public partial class RelativePressure : AbstractPressureValue, INotifyPropertyChanged
    {

        /// <summary>
        /// RelativePressure1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("RelativePressure")]
        public PressureMeasure RelativePressure1 {
            get {
                return RelativePressure1Field;
            } 
            set {
                RelativePressure1Field = value;
                NotifyPropertyChanged("RelativePressure1");
            }
        }

        private PressureMeasure RelativePressure1Field; 

        /// <summary>
        /// ReferencePressure property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ReferencePressure")]
		[XmlElement("ReferencePressure")]
        public ReferencePressure ReferencePressure {
            get {
                return ReferencePressureField;
            } 
            set {
                ReferencePressureField = value;
                NotifyPropertyChanged("ReferencePressure");
            }
        }

        private ReferencePressure ReferencePressureField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PressureMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PressureMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PressureMeasure xsd type.")]
    public partial class PressureMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PressureMeasure class.
        /// </summary>
        public PressureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PressureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PressureMeasure(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PressureUomWithLegacy")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ReferencePressure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ReferencePressure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ReferencePressure xsd type.")]
    public partial class ReferencePressure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ReferencePressure class.
        /// </summary>
        public ReferencePressure() {}

        /// <summary>
        /// Initializes a new instance of the ReferencePressure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ReferencePressure(double value, PressureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PressureUom")]
        [XmlAttribute("uom")]
		
        public PressureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PressureUom uomField; 

		/// <summary>
        /// referencePressureKind property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "ReferencePressureKind")]
        [XmlAttribute("referencePressureKind")]
		
        public ReferencePressureKind ReferencePressureKind {
            get {
                return referencePressureKindField;
            } 
            set {
                referencePressureKindField = value;
                 this.ReferencePressureKindSpecified = true;
                NotifyPropertyChanged("ReferencePressureKind");
            }
        }

        private ReferencePressureKind referencePressureKindField; 

        /// <summary>
        /// referencePressureKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReferencePressureKindSpecified {
            get {
                return referencePressureKindSpecifiedField;
            } 
            set {
                referencePressureKindSpecifiedField = value;
                NotifyPropertyChanged("ReferencePressureKindSpecified");
            }
        }

        private bool referencePressureKindSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GaugePressure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GaugePressure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GaugePressure xsd type.")]
    public partial class GaugePressure : AbstractPressureValue, INotifyPropertyChanged
    {

        /// <summary>
        /// GaugePressure1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("GaugePressure")]
        public PressureMeasureExt GaugePressure1 {
            get {
                return GaugePressure1Field;
            } 
            set {
                GaugePressure1Field = value;
                NotifyPropertyChanged("GaugePressure1");
            }
        }

        private PressureMeasureExt GaugePressure1Field; 

        /// <summary>
        /// ReferencePressure property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ReferencePressure")]
		[XmlElement("ReferencePressure")]
        public ReferencePressure ReferencePressure {
            get {
                return ReferencePressureField;
            } 
            set {
                ReferencePressureField = value;
                NotifyPropertyChanged("ReferencePressure");
            }
        }

        private ReferencePressure ReferencePressureField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PressureMeasureExt xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SaturationPressure))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PressureMeasureExt", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PressureMeasureExt xsd type.")]
    public partial class PressureMeasureExt : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PressureMeasureExt class.
        /// </summary>
        public PressureMeasureExt() {}

        /// <summary>
        /// Initializes a new instance of the PressureMeasureExt class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PressureMeasureExt(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PressureUomExt")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SaturationPressure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SaturationPressure", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the SaturationPressure xsd type.")]
    public partial class SaturationPressure : PressureMeasureExt, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the SaturationPressure class.
        /// </summary>
        public SaturationPressure() {}

        /// <summary>
        /// Initializes a new instance of the SaturationPressure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public SaturationPressure(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The kind of saturation point whose pressure is being measured. Enum. See saturationpointkind.
        /// </summary>
		[Required]
        [Description("The kind of saturation point whose pressure is being measured. Enum. See saturationpointkind.")]
        [EnergisticsDataTypeAttribute(DataType = "SaturationPointKind")]
        [XmlAttribute("kind")]
		
        public SaturationPointKind Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private SaturationPointKind kindField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbsolutePressure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbsolutePressure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbsolutePressure xsd type.")]
    public partial class AbsolutePressure : AbstractPressureValue, INotifyPropertyChanged
    {

        /// <summary>
        /// AbsolutePressure1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbsolutePressure")]
        public PressureMeasureExt AbsolutePressure1 {
            get {
                return AbsolutePressure1Field;
            } 
            set {
                AbsolutePressure1Field = value;
                NotifyPropertyChanged("AbsolutePressure1");
            }
        }

        private PressureMeasureExt AbsolutePressure1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ThermodynamicTemperatureMeasure xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SaturationTemperature))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ThermodynamicTemperatureMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ThermodynamicTemperatureMeasure xsd type.")]
    public partial class ThermodynamicTemperatureMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperatureMeasure class.
        /// </summary>
        public ThermodynamicTemperatureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperatureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ThermodynamicTemperatureMeasure(double value, ThermodynamicTemperatureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureUom")]
        [XmlAttribute("uom")]
		
        public ThermodynamicTemperatureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ThermodynamicTemperatureUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SaturationTemperature xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SaturationTemperature", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the SaturationTemperature xsd type.")]
    public partial class SaturationTemperature : ThermodynamicTemperatureMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the SaturationTemperature class.
        /// </summary>
        public SaturationTemperature() {}

        /// <summary>
        /// Initializes a new instance of the SaturationTemperature class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public SaturationTemperature(double value, ThermodynamicTemperatureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The kind of saturation point whose temperature is being measured. Enum. See saturationpointkind.
        /// </summary>
		[Required]
        [Description("The kind of saturation point whose temperature is being measured. Enum. See saturationpointkind.")]
        [EnergisticsDataTypeAttribute(DataType = "SaturationPointKind")]
        [XmlAttribute("kind")]
		
        public SaturationPointKind Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private SaturationPointKind kindField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellTestWellheadData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellTestWellheadData", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WellTestWellheadData xsd type.")]
    public partial class WellTestWellheadData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The temperature measured at the wellhead during the well test.
        /// </summary>
		[Description("The temperature measured at the wellhead during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("Temperature")]
        public ThermodynamicTemperatureMeasure Temperature {
            get {
                return TemperatureField;
            } 
            set {
                TemperatureField = value;
                NotifyPropertyChanged("Temperature");
            }
        }

        private ThermodynamicTemperatureMeasure TemperatureField; 

        /// <summary>
        /// The flowing pressure measured at the wellhead during the well test.
        /// </summary>
		[Description("The flowing pressure measured at the wellhead during the well test.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("FlowingPressure")]
        public AbstractPressureValue FlowingPressure {
            get {
                return FlowingPressureField;
            } 
            set {
                FlowingPressureField = value;
                NotifyPropertyChanged("FlowingPressure");
            }
        }

        private AbstractPressureValue FlowingPressureField; 

        /// <summary>
        /// The shut-in pressure measured at the wellhead during the well test.
        /// </summary>
		[Description("The shut-in pressure measured at the wellhead during the well test.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("ShutInPressure")]
        public AbstractPressureValue ShutInPressure {
            get {
                return ShutInPressureField;
            } 
            set {
                ShutInPressureField = value;
                NotifyPropertyChanged("ShutInPressure");
            }
        }

        private AbstractPressureValue ShutInPressureField; 

        /// <summary>
        /// The pressure measured at the flow line connected to the wellhead during this well test.
        /// </summary>
		[Description("The pressure measured at the flow line connected to the wellhead during this well test.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("FlowLinePressure")]
        public AbstractPressureValue FlowLinePressure {
            get {
                return FlowLinePressureField;
            } 
            set {
                FlowLinePressureField = value;
                NotifyPropertyChanged("FlowLinePressure");
            }
        }

        private AbstractPressureValue FlowLinePressureField; 

        /// <summary>
        /// The size of the choke opening at the wellhead.
        /// </summary>
		[Description("The size of the choke opening at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("ChokeOrificeSize")]
        public LengthMeasure ChokeOrificeSize {
            get {
                return ChokeOrificeSizeField;
            } 
            set {
                ChokeOrificeSizeField = value;
                NotifyPropertyChanged("ChokeOrificeSize");
            }
        }

        private LengthMeasure ChokeOrificeSizeField; 

        /// <summary>
        /// The pressure of the lift gas at the wellhead.
        /// </summary>
		[Description("The pressure of the lift gas at the wellhead.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("GasLiftPres")]
        public AbstractPressureValue GasLiftPres {
            get {
                return GasLiftPresField;
            } 
            set {
                GasLiftPresField = value;
                NotifyPropertyChanged("GasLiftPres");
            }
        }

        private AbstractPressureValue GasLiftPresField; 

        /// <summary>
        /// The temperature of the lift gas at the wellhead.
        /// </summary>
		[Description("The temperature of the lift gas at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("GasLiftTemp")]
        public ThermodynamicTemperatureMeasure GasLiftTemp {
            get {
                return GasLiftTempField;
            } 
            set {
                GasLiftTempField = value;
                NotifyPropertyChanged("GasLiftTemp");
            }
        }

        private ThermodynamicTemperatureMeasure GasLiftTempField; 

        /// <summary>
        /// The size of the gas lift choke opening.
        /// </summary>
		[Description("The size of the gas lift choke opening.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("GasLiftchokeOrificeSize")]
        public LengthMeasure GasLiftchokeOrificeSize {
            get {
                return GasLiftchokeOrificeSizeField;
            } 
            set {
                GasLiftchokeOrificeSizeField = value;
                NotifyPropertyChanged("GasLiftchokeOrificeSize");
            }
        }

        private LengthMeasure GasLiftchokeOrificeSizeField; 

        /// <summary>
        /// Lift gas volumes injected during the well test at the wellhead.
        /// </summary>
		[Description("Lift gas volumes injected during the well test at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestTestVolume")]
		[XmlElement("GasLiftVolume")]
        public WellTestTestVolume GasLiftVolume {
            get {
                return GasLiftVolumeField;
            } 
            set {
                GasLiftVolumeField = value;
                NotifyPropertyChanged("GasLiftVolume");
            }
        }

        private WellTestTestVolume GasLiftVolumeField; 

        /// <summary>
        /// Lift gas rates injected during the well test at the wellhead.
        /// </summary>
		[Description("Lift gas rates injected during the well test at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestFluidRate")]
		[XmlElement("GasLiftRate")]
        public WellTestFluidRate GasLiftRate {
            get {
                return GasLiftRateField;
            } 
            set {
                GasLiftRateField = value;
                NotifyPropertyChanged("GasLiftRate");
            }
        }

        private WellTestFluidRate GasLiftRateField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the LengthMeasure xsd type.")]
    public partial class LengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthMeasure class.
        /// </summary>
        public LengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthMeasure(double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LengthUom")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellTestTestVolume xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellTestTestVolume", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WellTestTestVolume xsd type.")]
    public partial class WellTestTestVolume : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The volume is the fluid, corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("The volume is the fluid, corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolumeStdTempPres")]
        public VolumeMeasure VolumeStdTempPres {
            get {
                return VolumeStdTempPresField;
            } 
            set {
                VolumeStdTempPresField = value;
                NotifyPropertyChanged("VolumeStdTempPres");
            }
        }

        private VolumeMeasure VolumeStdTempPresField; 

        /// <summary>
        /// The volume, uncorrected. This volume is generally reported at reservoir conditions.
        /// </summary>
		[Description("The volume, uncorrected. This volume is generally reported at reservoir conditions.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("Volume")]
        public VolumeMeasure Volume {
            get {
                return VolumeField;
            } 
            set {
                VolumeField = value;
                NotifyPropertyChanged("Volume");
            }
        }

        private VolumeMeasure VolumeField; 

        /// <summary>
        /// The density of the fluid, corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("The density of the fluid, corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensityStdTempPres")]
        public MassPerVolumeMeasure DensityStdTempPres {
            get {
                return DensityStdTempPresField;
            } 
            set {
                DensityStdTempPresField = value;
                NotifyPropertyChanged("DensityStdTempPres");
            }
        }

        private MassPerVolumeMeasure DensityStdTempPresField; 

        /// <summary>
        /// The density of the fluid, uncorrected.
        /// </summary>
		[Description("The density of the fluid, uncorrected.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Density")]
        public MassPerVolumeMeasure Density {
            get {
                return DensityField;
            } 
            set {
                DensityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private MassPerVolumeMeasure DensityField; 

        /// <summary>
        /// Class for natural gas. This is not valid for oil or water.
        /// </summary>
		[StringLength(64)]
        [Description("Class for natural gas. This is not valid for oil or water.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("GasClass")]
        public string GasClass {
            get {
                return GasClassField;
            } 
            set {
                GasClassField = value;
                NotifyPropertyChanged("GasClass");
            }
        }

        private string GasClassField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumeMeasure xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LostVolumeAndReason))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumeMeasure xsd type.")]
    public partial class VolumeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumeMeasure class.
        /// </summary>
        public VolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumeMeasure(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumeUomWithLegacy")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LostVolumeAndReason xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LostVolumeAndReason", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the LostVolumeAndReason xsd type.")]
    public partial class LostVolumeAndReason : VolumeMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LostVolumeAndReason class.
        /// </summary>
        public LostVolumeAndReason() {}

        /// <summary>
        /// Initializes a new instance of the LostVolumeAndReason class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LostVolumeAndReason(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// Defines why the volume was lost.
        /// </summary>
		[Required]
        [Description("Defines why the volume was lost.")]
        [EnergisticsDataTypeAttribute(DataType = "ReasonLost")]
        [XmlAttribute("reasonLost")]
		
        public ReasonLost ReasonLost {
            get {
                return reasonLostField;
            } 
            set {
                reasonLostField = value;
                NotifyPropertyChanged("ReasonLost");
            }
        }

        private ReasonLost reasonLostField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassPerVolumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassPerVolumeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MassPerVolumeMeasure xsd type.")]
    public partial class MassPerVolumeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassPerVolumeMeasure class.
        /// </summary>
        public MassPerVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassPerVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassPerVolumeMeasure(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeUomWithLegacy")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellTestFluidRate xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellTestFluidRate", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WellTestFluidRate xsd type.")]
    public partial class WellTestFluidRate : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The fluid flow rate.
        /// </summary>
		[Description("The fluid flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FluidRate")]
        public VolumePerTimeMeasure FluidRate {
            get {
                return FluidRateField;
            } 
            set {
                FluidRateField = value;
                NotifyPropertyChanged("FluidRate");
            }
        }

        private VolumePerTimeMeasure FluidRateField; 

        /// <summary>
        /// The fluid flow rate that has been corrected to standard temperature and pressure.
        /// </summary>
		[Description("The fluid flow rate that has been corrected to standard temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FluidRateStdTempPres")]
        public VolumePerTimeMeasure FluidRateStdTempPres {
            get {
                return FluidRateStdTempPresField;
            } 
            set {
                FluidRateStdTempPresField = value;
                NotifyPropertyChanged("FluidRateStdTempPres");
            }
        }

        private VolumePerTimeMeasure FluidRateStdTempPresField; 

        /// <summary>
        /// Class for natural gas. This is not valid for oil or water.
        /// </summary>
		[StringLength(64)]
        [Description("Class for natural gas. This is not valid for oil or water.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("GasClass")]
        public string GasClass {
            get {
                return GasClassField;
            } 
            set {
                GasClassField = value;
                NotifyPropertyChanged("GasClass");
            }
        }

        private string GasClassField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumePerTimeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumePerTimeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumePerTimeMeasure xsd type.")]
    public partial class VolumePerTimeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerTimeMeasure class.
        /// </summary>
        public VolumePerTimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerTimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerTimeMeasure(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeUomWithLegacy")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumePerTimePerPressureMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumePerTimePerPressureMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumePerTimePerPressureMeasure xsd type.")]
    public partial class VolumePerTimePerPressureMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerTimePerPressureMeasure class.
        /// </summary>
        public VolumePerTimePerPressureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerTimePerPressureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerTimePerPressureMeasure(double value, VolumePerTimePerPressureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimePerPressureUom")]
        [XmlAttribute("uom")]
		
        public VolumePerTimePerPressureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerTimePerPressureUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellTestProductionTestResults xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellTestProductionTestResults", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WellTestProductionTestResults xsd type.")]
    public partial class WellTestProductionTestResults : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The ratio of the volume of gas and the volume of oil that was produced.
        /// </summary>
		[Description("The ratio of the volume of gas and the volume of oil that was produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("GasOilRatio")]
        public VolumePerVolumeMeasure GasOilRatio {
            get {
                return GasOilRatioField;
            } 
            set {
                GasOilRatioField = value;
                NotifyPropertyChanged("GasOilRatio");
            }
        }

        private VolumePerVolumeMeasure GasOilRatioField; 

        /// <summary>
        /// The ratio of water produced compared to the volume of total liquids produced.
        /// </summary>
		[Description("The ratio of water produced compared to the volume of total liquids produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("WaterCut")]
        public VolumePerVolumeMeasure WaterCut {
            get {
                return WaterCutField;
            } 
            set {
                WaterCutField = value;
                NotifyPropertyChanged("WaterCut");
            }
        }

        private VolumePerVolumeMeasure WaterCutField; 

        /// <summary>
        /// The density of the fluid mixture.
        /// </summary>
		[Description("The density of the fluid mixture.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Density")]
        public MassPerVolumeMeasure Density {
            get {
                return DensityField;
            } 
            set {
                DensityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private MassPerVolumeMeasure DensityField; 

        /// <summary>
        /// The velocity of the overall fluid mixture.
        /// </summary>
		[Description("The velocity of the overall fluid mixture.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityMeasure")]
		[XmlElement("FluidVelocity")]
        public AngularVelocityMeasure FluidVelocity {
            get {
                return FluidVelocityField;
            } 
            set {
                FluidVelocityField = value;
                NotifyPropertyChanged("FluidVelocity");
            }
        }

        private AngularVelocityMeasure FluidVelocityField; 

        /// <summary>
        /// This is the condensate yield, which describes the amount of condensate per unit of natural gas produced
        /// </summary>
		[Description("This is the condensate yield, which describes the amount of condensate per unit of natural gas produced")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("CondensateYield")]
        public VolumePerVolumeMeasure CondensateYield {
            get {
                return CondensateYieldField;
            } 
            set {
                CondensateYieldField = value;
                NotifyPropertyChanged("CondensateYield");
            }
        }

        private VolumePerVolumeMeasure CondensateYieldField; 

        /// <summary>
        /// This is the measured of impurities present in crude oil as it comes from the well. BSandW content is commonly used as a measure for treating performance of hydrocarbon liquids
        /// </summary>
		[Description("This is the measured of impurities present in crude oil as it comes from the well. BSandW content is commonly used as a measure for treating performance of hydrocarbon liquids")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("BasicSedimentAndWater")]
        public VolumePerVolumeMeasure BasicSedimentAndWater {
            get {
                return BasicSedimentAndWaterField;
            } 
            set {
                BasicSedimentAndWaterField = value;
                NotifyPropertyChanged("BasicSedimentAndWater");
            }
        }

        private VolumePerVolumeMeasure BasicSedimentAndWaterField; 

        /// <summary>
        /// This is the potential of the well to produce crude oil. This represents the flow rate that could be achieved under maximum drawdown.
        /// </summary>
		[Description("This is the potential of the well to produce crude oil. This represents the flow rate that could be achieved under maximum drawdown.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("OilPotential")]
        public VolumePerTimeMeasure OilPotential {
            get {
                return OilPotentialField;
            } 
            set {
                OilPotentialField = value;
                NotifyPropertyChanged("OilPotential");
            }
        }

        private VolumePerTimeMeasure OilPotentialField; 

        /// <summary>
        /// This is the potential of the well to produce natural gas. This represents the flow rate that could be achieved under maximum drawdown.
        /// </summary>
		[Description("This is the potential of the well to produce natural gas. This represents the flow rate that could be achieved under maximum drawdown.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("GasPotential")]
        public VolumePerTimeMeasure GasPotential {
            get {
                return GasPotentialField;
            } 
            set {
                GasPotentialField = value;
                NotifyPropertyChanged("GasPotential");
            }
        }

        private VolumePerTimeMeasure GasPotentialField; 

        /// <summary>
        /// The volume of sand that was produced.
        /// </summary>
		[Description("The volume of sand that was produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("SandVolume")]
        public VolumeMeasure SandVolume {
            get {
                return SandVolumeField;
            } 
            set {
                SandVolumeField = value;
                NotifyPropertyChanged("SandVolume");
            }
        }

        private VolumeMeasure SandVolumeField; 

        /// <summary>
        /// True ("true" or "1") indicates that the split factors are allocated as opposed to measured. False ("false" or "0") or not given indicates otherwise.
        /// </summary>
		[Description("True (\"true\" or \"1\") indicates that the split factors are allocated as opposed to measured. False (\"false\" or \"0\") or not given indicates otherwise.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("AllocatedSplit")]
        public bool? AllocatedSplit {
            get {
                return AllocatedSplitField;
            } 
            set {
                AllocatedSplitField = value;
                 this.AllocatedSplitSpecified = true;
                NotifyPropertyChanged("AllocatedSplit");
            }
        }

        private bool? AllocatedSplitField; 

        /// <summary>
        /// AllocatedSplitSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AllocatedSplitSpecified {
            get {
                return AllocatedSplitSpecifiedField;
            } 
            set {
                AllocatedSplitSpecifiedField = value;
                NotifyPropertyChanged("AllocatedSplitSpecified");
            }
        }

        private bool AllocatedSplitSpecifiedField; 

        /// <summary>
        /// The split factor for oil relative to the overall volume of the test.
        /// </summary>
		[Description("The split factor for oil relative to the overall volume of the test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("OilSplitFactor")]
        public VolumePerVolumeMeasure OilSplitFactor {
            get {
                return OilSplitFactorField;
            } 
            set {
                OilSplitFactorField = value;
                NotifyPropertyChanged("OilSplitFactor");
            }
        }

        private VolumePerVolumeMeasure OilSplitFactorField; 

        /// <summary>
        /// The split factor for gas relative to the overall volume of the test.
        /// </summary>
		[Description("The split factor for gas relative to the overall volume of the test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("GasSplitFactor")]
        public VolumePerVolumeMeasure GasSplitFactor {
            get {
                return GasSplitFactorField;
            } 
            set {
                GasSplitFactorField = value;
                NotifyPropertyChanged("GasSplitFactor");
            }
        }

        private VolumePerVolumeMeasure GasSplitFactorField; 

        /// <summary>
        /// The split factor for water relative to the overall volume of the test.
        /// </summary>
		[Description("The split factor for water relative to the overall volume of the test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("WaterSplitFactor")]
        public VolumePerVolumeMeasure WaterSplitFactor {
            get {
                return WaterSplitFactorField;
            } 
            set {
                WaterSplitFactorField = value;
                NotifyPropertyChanged("WaterSplitFactor");
            }
        }

        private VolumePerVolumeMeasure WaterSplitFactorField; 

        /// <summary>
        /// The split factor for condensate relative to the overall volume of the test.
        /// </summary>
		[Description("The split factor for condensate relative to the overall volume of the test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("CondensateSplitFactor")]
        public VolumePerVolumeMeasure CondensateSplitFactor {
            get {
                return CondensateSplitFactorField;
            } 
            set {
                CondensateSplitFactorField = value;
                NotifyPropertyChanged("CondensateSplitFactor");
            }
        }

        private VolumePerVolumeMeasure CondensateSplitFactorField; 

        /// <summary>
        /// Productivity index (PI) is an expression which defines the pressure drop in the reservoir to produce a unit of oil per day. That is, the energy to produce a unit of oil. The value was defined at ambient temperature and pressure.
        /// </summary>
		[Description("Productivity index (PI) is an expression which defines the pressure drop in the reservoir to produce a unit of oil per day. That is, the energy to produce a unit of oil. The value was defined at ambient temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimePerPressureMeasure")]
		[XmlElement("ProductivityIndex")]
        public VolumePerTimePerPressureMeasure ProductivityIndex {
            get {
                return ProductivityIndexField;
            } 
            set {
                ProductivityIndexField = value;
                NotifyPropertyChanged("ProductivityIndex");
            }
        }

        private VolumePerTimePerPressureMeasure ProductivityIndexField; 

        /// <summary>
        /// Productivity index (PI) is an expression which defines the pressure drop in the reservoir to produce a unit of oil per day. That is, the energy to produce a unit of oil. The value has been converted to the declared conditions of standard temperature and pressure.
        /// </summary>
		[Description("Productivity index (PI) is an expression which defines the pressure drop in the reservoir to produce a unit of oil per day. That is, the energy to produce a unit of oil. The value has been converted to the declared conditions of standard temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimePerPressureMeasure")]
		[XmlElement("ProductivityIndexStdTempPres")]
        public VolumePerTimePerPressureMeasure ProductivityIndexStdTempPres {
            get {
                return ProductivityIndexStdTempPresField;
            } 
            set {
                ProductivityIndexStdTempPresField = value;
                NotifyPropertyChanged("ProductivityIndexStdTempPres");
            }
        }

        private VolumePerTimePerPressureMeasure ProductivityIndexStdTempPresField; 

        /// <summary>
        /// Water volumes measured during the well test.
        /// </summary>
		[Description("Water volumes measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestTestVolume")]
		[XmlElement("WaterVolume")]
        public WellTestTestVolume WaterVolume {
            get {
                return WaterVolumeField;
            } 
            set {
                WaterVolumeField = value;
                NotifyPropertyChanged("WaterVolume");
            }
        }

        private WellTestTestVolume WaterVolumeField; 

        /// <summary>
        /// condensate volumes measured during the well test.
        /// </summary>
		[Description("condensate volumes measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestTestVolume")]
		[XmlElement("CondensateVolume")]
        public WellTestTestVolume CondensateVolume {
            get {
                return CondensateVolumeField;
            } 
            set {
                CondensateVolumeField = value;
                NotifyPropertyChanged("CondensateVolume");
            }
        }

        private WellTestTestVolume CondensateVolumeField; 

        /// <summary>
        /// Oil volumes measured during the well test.
        /// </summary>
		[Description("Oil volumes measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestTestVolume")]
		[XmlElement("OilVolume")]
        public WellTestTestVolume OilVolume {
            get {
                return OilVolumeField;
            } 
            set {
                OilVolumeField = value;
                NotifyPropertyChanged("OilVolume");
            }
        }

        private WellTestTestVolume OilVolumeField; 

        /// <summary>
        /// Gas volumes measured during the well test.
        /// </summary>
		[Description("Gas volumes measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestTestVolume")]
		[XmlElement("GasVolume")]
        public WellTestTestVolume GasVolume {
            get {
                return GasVolumeField;
            } 
            set {
                GasVolumeField = value;
                NotifyPropertyChanged("GasVolume");
            }
        }

        private WellTestTestVolume GasVolumeField; 

        /// <summary>
        /// Oil rates measured during the well test.
        /// </summary>
		[Description("Oil rates measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestFluidRate")]
		[XmlElement("OilRate")]
        public WellTestFluidRate OilRate {
            get {
                return OilRateField;
            } 
            set {
                OilRateField = value;
                NotifyPropertyChanged("OilRate");
            }
        }

        private WellTestFluidRate OilRateField; 

        /// <summary>
        /// Water rates measured during the well test.
        /// </summary>
		[Description("Water rates measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestFluidRate")]
		[XmlElement("WaterRate")]
        public WellTestFluidRate WaterRate {
            get {
                return WaterRateField;
            } 
            set {
                WaterRateField = value;
                NotifyPropertyChanged("WaterRate");
            }
        }

        private WellTestFluidRate WaterRateField; 

        /// <summary>
        /// Gas rates measured during the well test.
        /// </summary>
		[Description("Gas rates measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestFluidRate")]
		[XmlElement("GasRate")]
        public WellTestFluidRate GasRate {
            get {
                return GasRateField;
            } 
            set {
                GasRateField = value;
                NotifyPropertyChanged("GasRate");
            }
        }

        private WellTestFluidRate GasRateField; 

        /// <summary>
        /// Condensate rates measured during the well test.
        /// </summary>
		[Description("Condensate rates measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestFluidRate")]
		[XmlElement("CondensateRate")]
        public WellTestFluidRate CondensateRate {
            get {
                return CondensateRateField;
            } 
            set {
                CondensateRateField = value;
                NotifyPropertyChanged("CondensateRate");
            }
        }

        private WellTestFluidRate CondensateRateField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumePerVolumeMeasure xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelativeVolumeRatio))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumePerVolumeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumePerVolumeMeasure xsd type.")]
    public partial class VolumePerVolumeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasure class.
        /// </summary>
        public VolumePerVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerVolumeMeasure(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeUomWithLegacy")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RelativeVolumeRatio xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RelativeVolumeRatio", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the RelativeVolumeRatio xsd type.")]
    public partial class RelativeVolumeRatio : VolumePerVolumeMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RelativeVolumeRatio class.
        /// </summary>
        public RelativeVolumeRatio() {}

        /// <summary>
        /// Initializes a new instance of the RelativeVolumeRatio class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public RelativeVolumeRatio(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// Reference to a fluid volume.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Reference to a fluid volume.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("fluidVolumeReference")]
		
        public string FluidVolumeReference {
            get {
                return fluidVolumeReferenceField;
            } 
            set {
                fluidVolumeReferenceField = value;
                NotifyPropertyChanged("FluidVolumeReference");
            }
        }

        private string fluidVolumeReferenceField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AngularVelocityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AngularVelocityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AngularVelocityMeasure xsd type.")]
    public partial class AngularVelocityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AngularVelocityMeasure class.
        /// </summary>
        public AngularVelocityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AngularVelocityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AngularVelocityMeasure(double value, AngularVelocityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityUom")]
        [XmlAttribute("uom")]
		
        public AngularVelocityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AngularVelocityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ElectricCurrentMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ElectricCurrentMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ElectricCurrentMeasure xsd type.")]
    public partial class ElectricCurrentMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ElectricCurrentMeasure class.
        /// </summary>
        public ElectricCurrentMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ElectricCurrentMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ElectricCurrentMeasure(double value, ElectricCurrentUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ElectricCurrentUom")]
        [XmlAttribute("uom")]
		
        public ElectricCurrentUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ElectricCurrentUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellTestElectricSubmersiblePumpData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellTestElectricSubmersiblePumpData", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WellTestElectricSubmersiblePumpData xsd type.")]
    public partial class WellTestElectricSubmersiblePumpData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The average electric current of the ESP during the test. The presumption is that only one pump per well is operational during each test.
        /// </summary>
		[Description("The average electric current of the ESP during the test. The presumption is that only one pump per well is operational during each test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ElectricCurrentMeasure")]
		[XmlElement("ElectricCurrent")]
        public ElectricCurrentMeasure ElectricCurrent {
            get {
                return ElectricCurrentField;
            } 
            set {
                ElectricCurrentField = value;
                NotifyPropertyChanged("ElectricCurrent");
            }
        }

        private ElectricCurrentMeasure ElectricCurrentField; 

        /// <summary>
        /// The average frequency of the ESP during the test. The presumption is that only one pump per well is operational during each test.
        /// </summary>
		[Description("The average frequency of the ESP during the test. The presumption is that only one pump per well is operational during each test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FrequencyMeasure")]
		[XmlElement("Frequency")]
        public FrequencyMeasure Frequency {
            get {
                return FrequencyField;
            } 
            set {
                FrequencyField = value;
                NotifyPropertyChanged("Frequency");
            }
        }

        private FrequencyMeasure FrequencyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FrequencyMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FrequencyMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the FrequencyMeasure xsd type.")]
    public partial class FrequencyMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the FrequencyMeasure class.
        /// </summary>
        public FrequencyMeasure() {}

        /// <summary>
        /// Initializes a new instance of the FrequencyMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public FrequencyMeasure(double value, FrequencyUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "FrequencyUom")]
        [XmlAttribute("uom")]
		
        public FrequencyUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private FrequencyUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellTestPointData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellTestPointData", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WellTestPointData xsd type.")]
    public partial class WellTestPointData : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The pressure at the point.
        /// </summary>
		[Description("The pressure at the point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Pres")]
        public PressureMeasure Pres {
            get {
                return PresField;
            } 
            set {
                PresField = value;
                NotifyPropertyChanged("Pres");
            }
        }

        private PressureMeasure PresField; 

        /// <summary>
        /// The temperature at the point.
        /// </summary>
		[Description("The temperature at the point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("Temp")]
        public ThermodynamicTemperatureMeasure Temp {
            get {
                return TempField;
            } 
            set {
                TempField = value;
                NotifyPropertyChanged("Temp");
            }
        }

        private ThermodynamicTemperatureMeasure TempField; 

        /// <summary>
        /// The P/Z value at the point. This is P/Z, pressure over gas compressibility factor (z). Note that the UOM is units of pressure., because Z is dimensionless.
        /// </summary>
		[Description("The P/Z value at the point. This is P/Z, pressure over gas compressibility factor (z). Note that the UOM is units of pressure., because Z is dimensionless.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("POverZ")]
        public PressureMeasure POverZ {
            get {
                return POverZField;
            } 
            set {
                POverZField = value;
                NotifyPropertyChanged("POverZ");
            }
        }

        private PressureMeasure POverZField; 

        /// <summary>
        /// The measured depth of the point being tested. 
        /// </summary>
		[Description("The measured depth of the point being tested.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Defines the wellbore (sidetract) represented by the measured depth. This must be given when the well has multiple wellbores and the measured depth value is deeper than the first kickoff point. It is recommended that it always be given.
        /// </summary>
		[Description("Defines the wellbore (sidetract) represented by the measured depth. This must be given when the well has multiple wellbores and the measured depth value is deeper than the first kickoff point. It is recommended that it always be given.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WellboreReference")]
        public DataObjectReference WellboreReference {
            get {
                return WellboreReferenceField;
            } 
            set {
                WellboreReferenceField = value;
                NotifyPropertyChanged("WellboreReference");
            }
        }

        private DataObjectReference WellboreReferenceField; 

        /// <summary>
        /// A value of true (1 or "true") indicates that the point is at the bottomhole. A value of false (0 or "false") or not given indicates otherwise.
        /// </summary>
		[Description("A value of true (1 or \"true\") indicates that the point is at the bottomhole. A value of false (0 or \"false\") or not given indicates otherwise.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Bottomhole")]
        public bool? Bottomhole {
            get {
                return BottomholeField;
            } 
            set {
                BottomholeField = value;
                 this.BottomholeSpecified = true;
                NotifyPropertyChanged("Bottomhole");
            }
        }

        private bool? BottomholeField; 

        /// <summary>
        /// BottomholeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BottomholeSpecified {
            get {
                return BottomholeSpecifiedField;
            } 
            set {
                BottomholeSpecifiedField = value;
                NotifyPropertyChanged("BottomholeSpecified");
            }
        }

        private bool BottomholeSpecifiedField; 

        /// <summary>
        /// A value of true (1 or "true") indicates a static (non-flowing) pressure. A value of false (0 or "false") or not given indicates otherwise. The pressure may be measured (e.g., shut-in well) or calculated.
        /// </summary>
		[Description("A value of true (1 or \"true\") indicates a static (non-flowing) pressure. A value of false (0 or \"false\") or not given indicates otherwise. The pressure may be measured (e.g., shut-in well) or calculated.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Static")]
        public bool? Static {
            get {
                return StaticField;
            } 
            set {
                StaticField = value;
                 this.StaticSpecified = true;
                NotifyPropertyChanged("Static");
            }
        }

        private bool? StaticField; 

        /// <summary>
        /// StaticSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StaticSpecified {
            get {
                return StaticSpecifiedField;
            } 
            set {
                StaticSpecifiedField = value;
                NotifyPropertyChanged("StaticSpecified");
            }
        }

        private bool StaticSpecifiedField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MeasuredDepthCoord xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MeasuredDepthCoord", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the MeasuredDepthCoord xsd type.")]
    public partial class MeasuredDepthCoord : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasuredDepthCoord class.
        /// </summary>
        public MeasuredDepthCoord() {}

        /// <summary>
        /// Initializes a new instance of the MeasuredDepthCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MeasuredDepthCoord(double value, VerticalCoordinateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the measured depth coordinate.
        /// </summary>
		[Required]
        [Description("The unit of measure of the measured depth coordinate.")]
        [EnergisticsDataTypeAttribute(DataType = "VerticalCoordinateUom")]
        [XmlAttribute("uom")]
		
        public VerticalCoordinateUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VerticalCoordinateUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellTestBottomholeData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellTestBottomholeData", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WellTestBottomholeData xsd type.")]
    public partial class WellTestBottomholeData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The pressure at the bottomhole of the well.
        /// </summary>
		[Description("The pressure at the bottomhole of the well.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("BottomholePres")]
        public PressureMeasure BottomholePres {
            get {
                return BottomholePresField;
            } 
            set {
                BottomholePresField = value;
                NotifyPropertyChanged("BottomholePres");
            }
        }

        private PressureMeasure BottomholePresField; 

        /// <summary>
        /// The temperature at the bottomhole of the well.
        /// </summary>
		[Description("The temperature at the bottomhole of the well.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("BottomholeTemp")]
        public ThermodynamicTemperatureMeasure BottomholeTemp {
            get {
                return BottomholeTempField;
            } 
            set {
                BottomholeTempField = value;
                NotifyPropertyChanged("BottomholeTemp");
            }
        }

        private ThermodynamicTemperatureMeasure BottomholeTempField; 

        /// <summary>
        /// The P/Z value at the bottomhole. This is P/Z, pressure over gas compressibility factor (z), at the bottomhole of the well. Note that the UOM is units of pressure, because Z is dimensionless.
        /// </summary>
		[Description("The P/Z value at the bottomhole. This is P/Z, pressure over gas compressibility factor (z), at the bottomhole of the well. Note that the UOM is units of pressure,  because Z is dimensionless.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("BottomholePOverZ")]
        public PressureMeasure BottomholePOverZ {
            get {
                return BottomholePOverZField;
            } 
            set {
                BottomholePOverZField = value;
                NotifyPropertyChanged("BottomholePOverZ");
            }
        }

        private PressureMeasure BottomholePOverZField; 

        /// <summary>
        /// The measured depth of the bottomhole.
        /// </summary>
		[Description("The measured depth of the bottomhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("BottomholeMD")]
        public MeasuredDepthCoord BottomholeMD {
            get {
                return BottomholeMDField;
            } 
            set {
                BottomholeMDField = value;
                NotifyPropertyChanged("BottomholeMD");
            }
        }

        private MeasuredDepthCoord BottomholeMDField; 

        /// <summary>
        /// Defines the wellbore (sidetract) represented by the measured depth. This must be given when the well has multiple wellbores and the measured depth value is deeper than the first kickoff point. It is recommended that it always be given.
        /// </summary>
		[Description("Defines the wellbore (sidetract) represented by the measured depth. This must be given when the well has multiple wellbores and the measured depth value is deeper than the first kickoff point. It is recommended that it always be given.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WellboreReference")]
        public DataObjectReference WellboreReference {
            get {
                return WellboreReferenceField;
            } 
            set {
                WellboreReferenceField = value;
                NotifyPropertyChanged("WellboreReference");
            }
        }

        private DataObjectReference WellboreReferenceField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellTestCumulative xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellTestCumulative", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WellTestCumulative xsd type.")]
    public partial class WellTestCumulative : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The cumulative amount of oil.
        /// </summary>
		[Description("The cumulative amount of oil.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("CumulativeOil")]
        public VolumeMeasure CumulativeOil {
            get {
                return CumulativeOilField;
            } 
            set {
                CumulativeOilField = value;
                NotifyPropertyChanged("CumulativeOil");
            }
        }

        private VolumeMeasure CumulativeOilField; 

        /// <summary>
        /// The cumulative amount of gas.
        /// </summary>
		[Description("The cumulative amount of gas.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("CumulativeGas")]
        public VolumeMeasure CumulativeGas {
            get {
                return CumulativeGasField;
            } 
            set {
                CumulativeGasField = value;
                NotifyPropertyChanged("CumulativeGas");
            }
        }

        private VolumeMeasure CumulativeGasField; 

        /// <summary>
        /// The cumulative amount of water.
        /// </summary>
		[Description("The cumulative amount of water.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("CumulativeWater")]
        public VolumeMeasure CumulativeWater {
            get {
                return CumulativeWaterField;
            } 
            set {
                CumulativeWaterField = value;
                NotifyPropertyChanged("CumulativeWater");
            }
        }

        private VolumeMeasure CumulativeWaterField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellTestInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellTestInterval", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WellTestInterval xsd type.")]
    public partial class WellTestInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The measured depth to the top of the interval.
        /// </summary>
		[Required]
        [Description("The measured depth to the top of the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return MdTopField;
            } 
            set {
                MdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord MdTopField; 

        /// <summary>
        /// The measured depth to the bottom of the interval.
        /// </summary>
		[Required]
        [Description("The measured depth to the bottom of the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdBase")]
        public MeasuredDepthCoord MDBase {
            get {
                return MdBaseField;
            } 
            set {
                MdBaseField = value;
                NotifyPropertyChanged("MDBase");
            }
        }

        private MeasuredDepthCoord MdBaseField; 

        /// <summary>
        /// Defines the wellbore (sidetract) represented by the measured depth. This must be given when the well has multiple wellbores and the measured depth value is deeper than the first kickoff point. It is recommended that it always be given.
        /// </summary>
		[Description("Defines the wellbore (sidetract) represented by the measured depth. This must be given when the well has multiple wellbores and the measured depth value is deeper than the first kickoff point. It is recommended that it always be given.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WellboreReference")]
        public DataObjectReference WellboreReference {
            get {
                return WellboreReferenceField;
            } 
            set {
                WellboreReferenceField = value;
                NotifyPropertyChanged("WellboreReference");
            }
        }

        private DataObjectReference WellboreReferenceField; 

        /// <summary>
        /// The formation that was tested.
        /// </summary>
		[Description("The formation that was tested.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TestedFormation")]
        public List<string> TestedFormation {
            get {
                return TestedFormationField;
            } 
            set {
                TestedFormationField = value;
                NotifyPropertyChanged("TestedFormation");
            }
        }

         /// <summary>
         /// bool to indicate if TestedFormation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TestedFormationSpecified
         {
             get {
             if(TestedFormationField!=null)
                 return TestedFormationField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> TestedFormationField; 

        /// <summary>
        /// The relative opening of the downhole control valve for the tested zone. This is for surface controllable valves.
        /// </summary>
		[Description("The relative opening of the downhole control valve for the tested zone. This is for surface controllable valves.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerLengthMeasure")]
		[XmlElement("ValvePosition")]
        public LengthPerLengthMeasure ValvePosition {
            get {
                return ValvePositionField;
            } 
            set {
                ValvePositionField = value;
                NotifyPropertyChanged("ValvePosition");
            }
        }

        private LengthPerLengthMeasure ValvePositionField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthPerLengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthPerLengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the LengthPerLengthMeasure xsd type.")]
    public partial class LengthPerLengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthPerLengthMeasure class.
        /// </summary>
        public LengthPerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthPerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthPerLengthMeasure(double value, LengthPerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerLengthUom")]
        [XmlAttribute("uom")]
		
        public LengthPerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthPerLengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractWellTest xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellTestProductionTestData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellTestInjectionTestData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellTestFluidLevelTest))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractWellTest", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractWellTest xsd type.")]
    public abstract partial class AbstractWellTest : Object, IUniqueId, INotifyPropertyChanged
    {

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellTestProductionTestData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellTestProductionTestData", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WellTestProductionTestData xsd type.")]
    public partial class WellTestProductionTestData : AbstractWellTest, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The length of time (with UOM) of the well test.
        /// </summary>
		[Description("The length of time (with UOM) of the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("TestDuration")]
        public TimeMeasure TestDuration {
            get {
                return TestDurationField;
            } 
            set {
                TestDurationField = value;
                NotifyPropertyChanged("TestDuration");
            }
        }

        private TimeMeasure TestDurationField; 

        /// <summary>
        /// The method being used to operate the well. Examples are 'flowing', 'pumping', 'gas lifted'.
        /// </summary>
		[StringLength(64)]
        [Description("The method being used to operate the well. Examples are 'flowing', 'pumping', 'gas lifted'.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("OperatingMethod")]
        public string OperatingMethod {
            get {
                return OperatingMethodField;
            } 
            set {
                OperatingMethodField = value;
                NotifyPropertyChanged("OperatingMethod");
            }
        }

        private string OperatingMethodField; 

        /// <summary>
        /// DEPRECATED - Use pointData instead. This element records measurements made at the bottomhole.
        /// </summary>
		[Description("DEPRECATED - Use pointData instead. This element records measurements made at the bottomhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestBottomholeData")]
		[XmlElement("BottomholeData")]
        public WellTestBottomholeData BottomholeData {
            get {
                return BottomholeDataField;
            } 
            set {
                BottomholeDataField = value;
                NotifyPropertyChanged("BottomholeData");
            }
        }

        private WellTestBottomholeData BottomholeDataField; 

        /// <summary>
        /// This element records temperature and pressure at points in the wellbore.
        /// </summary>
		[Description("This element records temperature and pressure at points in the wellbore.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestPointData")]
		[XmlElement("PointData")]
        public List<WellTestPointData> PointData {
            get {
                return PointDataField;
            } 
            set {
                PointDataField = value;
                NotifyPropertyChanged("PointData");
            }
        }

         /// <summary>
         /// bool to indicate if PointData has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PointDataSpecified
         {
             get {
             if(PointDataField!=null)
                 return PointDataField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellTestPointData> PointDataField; 

        /// <summary>
        /// Frequency and electric current measured during the well test for electric submersible pump (ESP) wells. The presumption is that only one pump per well is operational during each test.
        /// </summary>
		[Description("Frequency and electric current measured during the  well test for electric submersible pump (ESP) wells. The presumption is that only one pump per well is operational during each test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestElectricSubmersiblePumpData")]
		[XmlElement("EspData")]
        public WellTestElectricSubmersiblePumpData EspData {
            get {
                return EspDataField;
            } 
            set {
                EspDataField = value;
                NotifyPropertyChanged("EspData");
            }
        }

        private WellTestElectricSubmersiblePumpData EspDataField; 

        /// <summary>
        /// The cumulative volumes of fluids at the time of the well test. The fluids are oil, gas, and water.
        /// </summary>
		[Description("The cumulative volumes of fluids at the time of the well test. The fluids are oil, gas, and water.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestCumulative")]
		[XmlElement("WellTestCumulative")]
        public WellTestCumulative WellTestCumulative {
            get {
                return WellTestCumulativeField;
            } 
            set {
                WellTestCumulativeField = value;
                NotifyPropertyChanged("WellTestCumulative");
            }
        }

        private WellTestCumulative WellTestCumulativeField; 

        /// <summary>
        /// The interval tested. This element includes a top and base depth, and the formation(s) tested. It also includes control data for the tested interval.
        /// </summary>
		[Description("The interval tested. This element includes a top and base depth,  and the formation(s) tested. It also includes control data for the tested interval.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestInterval")]
		[XmlElement("TestInterval")]
        public List<WellTestInterval> TestInterval {
            get {
                return TestIntervalField;
            } 
            set {
                TestIntervalField = value;
                NotifyPropertyChanged("TestInterval");
            }
        }

         /// <summary>
         /// bool to indicate if TestInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TestIntervalSpecified
         {
             get {
             if(TestIntervalField!=null)
                 return TestIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellTestInterval> TestIntervalField; 

        /// <summary>
        /// The production results of the test.
        /// </summary>
		[Description("The production results of the test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestProductionTestResults")]
		[XmlElement("ProductionTestResults")]
        public WellTestProductionTestResults ProductionTestResults {
            get {
                return ProductionTestResultsField;
            } 
            set {
                ProductionTestResultsField = value;
                NotifyPropertyChanged("ProductionTestResults");
            }
        }

        private WellTestProductionTestResults ProductionTestResultsField; 

        /// <summary>
        /// This element records measurements made and settings made at the wellhead.
        /// </summary>
		[Description("This element records measurements made and settings made at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestWellheadData")]
		[XmlElement("WellheadData")]
        public WellTestWellheadData WellheadData {
            get {
                return WellheadDataField;
            } 
            set {
                WellheadDataField = value;
                NotifyPropertyChanged("WellheadData");
            }
        }

        private WellTestWellheadData WellheadDataField; 

        /// <summary>
        /// This element records the measurements (pressure and temperature) at the separator.
        /// </summary>
		[Description("This element records the measurements (pressure and temperature) at the separator.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestSeparatorData")]
		[XmlElement("SeparatorData")]
        public WellTestSeparatorData SeparatorData {
            get {
                return SeparatorDataField;
            } 
            set {
                SeparatorDataField = value;
                NotifyPropertyChanged("SeparatorData");
            }
        }

        private WellTestSeparatorData SeparatorDataField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the TimeMeasure xsd type.")]
    public partial class TimeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TimeMeasure class.
        /// </summary>
        public TimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the TimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public TimeMeasure(double value, TimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "TimeUom")]
        [XmlAttribute("uom")]
		
        public TimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private TimeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellTestInjectionTestData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellTestInjectionTestData", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WellTestInjectionTestData xsd type.")]
    public partial class WellTestInjectionTestData : AbstractWellTest, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The fluid that is being injected.
        /// </summary>
		[Description("The fluid that is being injected.")]
        [EnergisticsDataTypeAttribute(DataType = "InjectionFluid")]
		[XmlElement("InjectedFluid")]
        public InjectionFluid? InjectedFluid {
            get {
                return InjectedFluidField;
            } 
            set {
                InjectedFluidField = value;
                 this.InjectedFluidSpecified = true;
                NotifyPropertyChanged("InjectedFluid");
            }
        }

        private InjectionFluid? InjectedFluidField; 

        /// <summary>
        /// InjectedFluidSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InjectedFluidSpecified {
            get {
                return InjectedFluidSpecifiedField;
            } 
            set {
                InjectedFluidSpecifiedField = value;
                NotifyPropertyChanged("InjectedFluidSpecified");
            }
        }

        private bool InjectedFluidSpecifiedField; 

        /// <summary>
        /// The time length (with UOM) of the well test.
        /// </summary>
		[Description("The time length (with UOM) of the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("TestDuration")]
        public TimeMeasure TestDuration {
            get {
                return TestDurationField;
            } 
            set {
                TestDurationField = value;
                NotifyPropertyChanged("TestDuration");
            }
        }

        private TimeMeasure TestDurationField; 

        /// <summary>
        /// The size of the opening in the flow choke at the wellhead.
        /// </summary>
		[Description("The size of the opening in the flow choke at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("ChokeOrificeSize")]
        public LengthMeasure ChokeOrificeSize {
            get {
                return ChokeOrificeSizeField;
            } 
            set {
                ChokeOrificeSizeField = value;
                NotifyPropertyChanged("ChokeOrificeSize");
            }
        }

        private LengthMeasure ChokeOrificeSizeField; 

        /// <summary>
        /// The minimum pressure measured at the annulus.
        /// </summary>
		[Description("The minimum pressure measured at the annulus.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("MinimumAnnularPressure")]
        public AbstractPressureValue MinimumAnnularPressure {
            get {
                return MinimumAnnularPressureField;
            } 
            set {
                MinimumAnnularPressureField = value;
                NotifyPropertyChanged("MinimumAnnularPressure");
            }
        }

        private AbstractPressureValue MinimumAnnularPressureField; 

        /// <summary>
        /// The maximum pressure measured at the annulus.
        /// </summary>
		[Description("The maximum pressure measured at the annulus.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("MaximumAnnularPressure")]
        public AbstractPressureValue MaximumAnnularPressure {
            get {
                return MaximumAnnularPressureField;
            } 
            set {
                MaximumAnnularPressureField = value;
                NotifyPropertyChanged("MaximumAnnularPressure");
            }
        }

        private AbstractPressureValue MaximumAnnularPressureField; 

        /// <summary>
        /// The flowing pressure measured at the wellhead during the test.
        /// </summary>
		[Description("The flowing pressure measured at the wellhead during the test.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("WellheadFlowingPressure")]
        public AbstractPressureValue WellheadFlowingPressure {
            get {
                return WellheadFlowingPressureField;
            } 
            set {
                WellheadFlowingPressureField = value;
                NotifyPropertyChanged("WellheadFlowingPressure");
            }
        }

        private AbstractPressureValue WellheadFlowingPressureField; 

        /// <summary>
        /// The maximum pressure measured at the wellhead during the well test.
        /// </summary>
		[Description("The maximum pressure measured at the wellhead during the well test.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("WellheadMaximumPressure")]
        public AbstractPressureValue WellheadMaximumPressure {
            get {
                return WellheadMaximumPressureField;
            } 
            set {
                WellheadMaximumPressureField = value;
                NotifyPropertyChanged("WellheadMaximumPressure");
            }
        }

        private AbstractPressureValue WellheadMaximumPressureField; 

        /// <summary>
        /// The interval tested. This element includes a top and base depth, and the formation tested.
        /// </summary>
		[Description("The interval tested. This element includes a top and base  depth, and the formation tested.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestInterval")]
		[XmlElement("TestInterval")]
        public WellTestInterval TestInterval {
            get {
                return TestIntervalField;
            } 
            set {
                TestIntervalField = value;
                NotifyPropertyChanged("TestInterval");
            }
        }

        private WellTestInterval TestIntervalField; 

        /// <summary>
        /// The cumulative volumes of fluids at the time of the well test. The fluids are oil, gas, and water.
        /// </summary>
		[Description("The cumulative volumes of fluids at the time of the  well test. The fluids are oil, gas, and water.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestCumulative")]
		[XmlElement("WellTestCumulative")]
        public WellTestCumulative WellTestCumulative {
            get {
                return WellTestCumulativeField;
            } 
            set {
                WellTestCumulativeField = value;
                NotifyPropertyChanged("WellTestCumulative");
            }
        }

        private WellTestCumulative WellTestCumulativeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellTestFluidLevelTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellTestFluidLevelTest", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WellTestFluidLevelTest xsd type.")]
    public partial class WellTestFluidLevelTest : AbstractWellTest, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The fluid level achieved in the well. The value is given as length units from the top of the well.
        /// </summary>
		[Required]
        [Description("The fluid level achieved in the well. The value is given as length units from the top of the well.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("FluidLevel")]
        public LengthMeasure FluidLevel {
            get {
                return FluidLevelField;
            } 
            set {
                FluidLevelField = value;
                NotifyPropertyChanged("FluidLevel");
            }
        }

        private LengthMeasure FluidLevelField; 

        /// <summary>
        /// The lowest usable water depth as measured from the surface. See TxRRC H-15.
        /// </summary>
		[Description("The lowest usable water depth as measured from the surface. See TxRRC H-15.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("BaseUsableWater")]
        public LengthMeasure BaseUsableWater {
            get {
                return BaseUsableWaterField;
            } 
            set {
                BaseUsableWaterField = value;
                NotifyPropertyChanged("BaseUsableWater");
            }
        }

        private LengthMeasure BaseUsableWaterField; 

        /// <summary>
        /// The business associate that conducted the test. This is generally a person.
        /// </summary>
		[StringLength(64)]
        [Description("The business associate that conducted the test. This is generally a person.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TestedBy")]
        public string TestedBy {
            get {
                return TestedByField;
            } 
            set {
                TestedByField = value;
                NotifyPropertyChanged("TestedBy");
            }
        }

        private string TestedByField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EndpointDateTime xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EndpointDateTime", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the EndpointDateTime xsd type.")]
    public partial class EndpointDateTime : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// Defines the semantics (inclusive or exclusive) of the endpoint within the context of the interval.
        /// </summary>
		[Required]
        [Description("Defines the semantics (inclusive or exclusive) of the endpoint within the context of the interval.")]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQualifierInterval")]
        [XmlAttribute("endpoint")]
		
        public EndpointQualifierInterval Endpoint {
            get {
                return endpointField;
            } 
            set {
                endpointField = value;
                NotifyPropertyChanged("Endpoint");
            }
        }

        private EndpointQualifierInterval endpointField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EndpointQuantity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EndpointQuantity", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the EndpointQuantity xsd type.")]
    public partial class EndpointQuantity : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EndpointQuantity class.
        /// </summary>
        public EndpointQuantity() {}

        /// <summary>
        /// Initializes a new instance of the EndpointQuantity class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public EndpointQuantity(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// Defines the semantics (inclusive or exclusive) of the endpoint within the context of the interval.
        /// </summary>
		[Required]
        [Description("Defines the semantics (inclusive or exclusive) of the endpoint within the context of the interval.")]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQualifierInterval")]
        [XmlAttribute("endpoint")]
		
        public EndpointQualifierInterval Endpoint {
            get {
                return endpointField;
            } 
            set {
                endpointField = value;
                NotifyPropertyChanged("Endpoint");
            }
        }

        private EndpointQualifierInterval endpointField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeSeriesThreshold xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeSeriesThreshold", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the TimeSeriesThreshold xsd type.")]
    public partial class TimeSeriesThreshold : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The lower bound of the threshold for testing whether values are within a specific range.The element "unit" defines the unit of measure of this value. At least one of minimumValue and maximumValue must be specified. The thresholdMinimum must be less than thresholdMaximum. If thresholdMinimum is not specified then the minimum shall be assumed to be minus infinity.
        /// </summary>
		[Description("The lower bound of the threshold for testing whether values are within a specific range.The element \"unit\" defines the unit of measure of this value. At least one of minimumValue and maximumValue must be specified. The thresholdMinimum must be less than thresholdMaximum. If thresholdMinimum is not specified then the minimum shall be assumed to be minus infinity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQuantity")]
		[XmlElement("ThresholdMinimum")]
        public EndpointQuantity ThresholdMinimum {
            get {
                return ThresholdMinimumField;
            } 
            set {
                ThresholdMinimumField = value;
                NotifyPropertyChanged("ThresholdMinimum");
            }
        }

        private EndpointQuantity ThresholdMinimumField; 

        /// <summary>
        /// The upper bound of the threshold for testing whether values are within a specific range. Element "unit" defines the unit of measure of this value. At least one of minimumValue and maximumValue must be specified. The thresholdMaximum must be greater than thresholdMinimum. If thresholdMaximum is not specified then the maximum shall be assumed to be plus infinity.
        /// </summary>
		[Description("The upper bound of the threshold for testing whether values are within a specific range. Element \"unit\" defines the unit of measure of this value. At least one of minimumValue and maximumValue must be specified. The thresholdMaximum must be greater than thresholdMinimum. If thresholdMaximum is not specified then the maximum shall be assumed to be plus infinity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQuantity")]
		[XmlElement("ThresholdMaximum")]
        public EndpointQuantity ThresholdMaximum {
            get {
                return ThresholdMaximumField;
            } 
            set {
                ThresholdMaximumField = value;
                NotifyPropertyChanged("ThresholdMaximum");
            }
        }

        private EndpointQuantity ThresholdMaximumField; 

        /// <summary>
        /// The sum of the time intervals over the range of dTimMin to dTimMax during which the values were within the specified threshold range.
        /// </summary>
		[Required]
        [Description("The sum of the time intervals over the range of dTimMin to dTimMax during which the values were within the specified threshold range.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("Duration")]
        public TimeMeasure Duration {
            get {
                return DurationField;
            } 
            set {
                DurationField = value;
                NotifyPropertyChanged("Duration");
            }
        }

        private TimeMeasure DurationField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeSeriesStringSample xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeSeriesStringSample", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the TimeSeriesStringSample xsd type.")]
    public partial class TimeSeriesStringSample : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TimeSeriesStringSample class.
        /// </summary>
        public TimeSeriesStringSample() {}

        /// <summary>
        /// Initializes a new instance of the TimeSeriesStringSample class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public TimeSeriesStringSample(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The date and time at which the value applies. If no time is specified then the value is static and only one sample can be defined. Either dTim or value or both must be specified. If the status attribute is absent and the value is not "NaN", the data value can be assumed to be good with no restrictions.
        /// </summary>
		[Description("The date and time at which the value applies. If no time is specified then the value is static and only one sample can be defined. Either dTim or value or both must be specified. If the status attribute is absent and the value is not \"NaN\", the data value can be assumed to be good with no restrictions.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
        [XmlAttribute("dTim")]
		
        public DateTime DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeSeriesDoubleSample xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeSeriesDoubleSample", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the TimeSeriesDoubleSample xsd type.")]
    public partial class TimeSeriesDoubleSample : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TimeSeriesDoubleSample class.
        /// </summary>
        public TimeSeriesDoubleSample() {}

        /// <summary>
        /// Initializes a new instance of the TimeSeriesDoubleSample class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public TimeSeriesDoubleSample(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The date and time at which the value applies. If no time is specified then the value is static and only one sample can be defined. Either dTim or value or both must be specified. If the status attribute is absent and the value is not "NaN", the data value can be assumed to be good with no restrictions.
        /// </summary>
		[Description("The date and time at which the value applies. If no time is specified then the value is static and only one sample can be defined. Either dTim or value or both must be specified. If the status attribute is absent and the value is not \"NaN\", the data value can be assumed to be good with no restrictions.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
        [XmlAttribute("dTim")]
		
        public DateTime DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

		/// <summary>
        /// An indicator of the quality of the value.
        /// </summary>
		[Description("An indicator of the quality of the value.")]
        [EnergisticsDataTypeAttribute(DataType = "ValueStatus")]
        [XmlAttribute("status")]
		
        public ValueStatus Status {
            get {
                return statusField;
            } 
            set {
                statusField = value;
                 this.StatusSpecified = true;
                NotifyPropertyChanged("Status");
            }
        }

        private ValueStatus statusField; 

        /// <summary>
        /// statusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusSpecified {
            get {
                return statusSpecifiedField;
            } 
            set {
                statusSpecifiedField = value;
                NotifyPropertyChanged("StatusSpecified");
            }
        }

        private bool statusSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractValue xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleValue))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractValue", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractValue xsd type.")]
    public abstract partial class AbstractValue : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StringValue xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StringValue", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the StringValue xsd type.")]
    public partial class StringValue : AbstractValue, INotifyPropertyChanged
    {

        /// <summary>
        /// StringValue1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("StringValue")]
        public TimeSeriesStringSample StringValue1 {
            get {
                return StringValue1Field;
            } 
            set {
                StringValue1Field = value;
                NotifyPropertyChanged("StringValue1");
            }
        }

        private TimeSeriesStringSample StringValue1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DoubleValue xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DoubleValue", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DoubleValue xsd type.")]
    public partial class DoubleValue : AbstractValue, INotifyPropertyChanged
    {

        /// <summary>
        /// DoubleValue1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("DoubleValue")]
        public TimeSeriesDoubleSample DoubleValue1 {
            get {
                return DoubleValue1Field;
            } 
            set {
                DoubleValue1Field = value;
                NotifyPropertyChanged("DoubleValue1");
            }
        }

        private TimeSeriesDoubleSample DoubleValue1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the KeywordValueStruct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="KeywordValueStruct", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the KeywordValueStruct xsd type.")]
    public partial class KeywordValueStruct : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the KeywordValueStruct class.
        /// </summary>
        public KeywordValueStruct() {}

        /// <summary>
        /// Initializes a new instance of the KeywordValueStruct class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public KeywordValueStruct(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The keyword within which the value is unique. The concept of a keyword is very close to the concept of a classification system.
        /// </summary>
		[Required]
        [Description("The keyword within which the value is unique. The concept of a keyword is very close to the concept of a classification system.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeSeriesKeyword")]
        [XmlAttribute("keyword")]
		
        public TimeSeriesKeyword Keyword {
            get {
                return keywordField;
            } 
            set {
                keywordField = value;
                NotifyPropertyChanged("Keyword");
            }
        }

        private TimeSeriesKeyword keywordField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SafetyCount xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SafetyCount", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the SafetyCount xsd type.")]
    public partial class SafetyCount : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the SafetyCount class.
        /// </summary>
        public SafetyCount() {}

        /// <summary>
        /// Initializes a new instance of the SafetyCount class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public SafetyCount(long value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The type of safety issue for which a count is being defined.
        /// </summary>
		[Description("The type of safety issue for which a count is being defined.")]
        [EnergisticsDataTypeAttribute(DataType = "SafetyType")]
        [XmlAttribute("type")]
		
        public SafetyType Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        private SafetyType typeField; 

        /// <summary>
        /// typeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSpecified {
            get {
                return typeSpecifiedField;
            } 
            set {
                typeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }

        private bool typeSpecifiedField; 

		/// <summary>
        /// The type of period being reported by this count.
        /// </summary>
		[Description("The type of period being reported by this count.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingDurationKind")]
        [XmlAttribute("period")]
		
        public ReportingDurationKind Period {
            get {
                return periodField;
            } 
            set {
                periodField = value;
                 this.PeriodSpecified = true;
                NotifyPropertyChanged("Period");
            }
        }

        private ReportingDurationKind periodField; 

        /// <summary>
        /// periodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PeriodSpecified {
            get {
                return periodSpecifiedField;
            } 
            set {
                periodSpecifiedField = value;
                NotifyPropertyChanged("PeriodSpecified");
            }
        }

        private bool periodSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public long Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private long ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductionOperationSafety xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductionOperationSafety", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductionOperationSafety xsd type.")]
    public partial class ProductionOperationSafety : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// MeantimeIncident property
        /// </summary>
		[Description("The mean time between safety incidents.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("MeantimeIncident")]
        public TimeMeasure MeantimeIncident {
            get {
                return MeantimeIncidentField;
            } 
            set {
                MeantimeIncidentField = value;
                NotifyPropertyChanged("MeantimeIncident");
            }
        }

        private TimeMeasure MeantimeIncidentField; 

        /// <summary>
        /// SafetyCount property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "SafetyCount")]
		[XmlElement("SafetyCount")]
        public List<SafetyCount> SafetyCount {
            get {
                return SafetyCountField;
            } 
            set {
                SafetyCountField = value;
                NotifyPropertyChanged("SafetyCount");
            }
        }

         /// <summary>
         /// bool to indicate if SafetyCount has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SafetyCountSpecified
         {
             get {
             if(SafetyCountField!=null)
                 return SafetyCountField.Count>0?true:false;
             else return false;
             }
         }
        private List<SafetyCount> SafetyCountField; 

        /// <summary>
        /// Safety related comment. 
        /// </summary>
		[Description("Safety related comment.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DatedComment")]
		[XmlElement("Comment")]
        public List<DatedComment> Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(CommentField!=null)
                 return CommentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> CommentField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DatedComment xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DatedComment", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DatedComment xsd type.")]
    public partial class DatedComment : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the person providing the comment.
        /// </summary>
		[StringLength(64)]
        [Description("The name of the person providing the comment.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Who")]
        public string Who {
            get {
                return WhoField;
            } 
            set {
                WhoField = value;
                NotifyPropertyChanged("Who");
            }
        }

        private string WhoField; 

        /// <summary>
        /// The role of the person providing the comment. This is the role of the person within the context of comment.
        /// </summary>
		[StringLength(64)]
        [Description("The role of the person providing the comment. This is the role of the person within the context of comment.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Role")]
        public string Role {
            get {
                return RoleField;
            } 
            set {
                RoleField = value;
                NotifyPropertyChanged("Role");
            }
        }

        private string RoleField; 

        /// <summary>
        /// The date and time where the comment begins to be valid.
        /// </summary>
		[Description("The date and time where the comment begins to be valid.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("StartTime")]
        public DateTime? StartTime {
            get {
                return StartTimeField;
            } 
            set {
                StartTimeField = value;
                 this.StartTimeSpecified = true;
                NotifyPropertyChanged("StartTime");
            }
        }

        private DateTime? StartTimeField; 

        /// <summary>
        /// StartTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartTimeSpecified {
            get {
                return StartTimeSpecifiedField;
            } 
            set {
                StartTimeSpecifiedField = value;
                NotifyPropertyChanged("StartTimeSpecified");
            }
        }

        private bool StartTimeSpecifiedField; 

        /// <summary>
        /// The date and time where the comment is no longer valid.
        /// </summary>
		[Description("The date and time where the comment is no longer valid.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("EndTime")]
        public DateTime? EndTime {
            get {
                return EndTimeField;
            } 
            set {
                EndTimeField = value;
                 this.EndTimeSpecified = true;
                NotifyPropertyChanged("EndTime");
            }
        }

        private DateTime? EndTimeField; 

        /// <summary>
        /// EndTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndTimeSpecified {
            get {
                return EndTimeSpecifiedField;
            } 
            set {
                EndTimeSpecifiedField = value;
                NotifyPropertyChanged("EndTimeSpecified");
            }
        }

        private bool EndTimeSpecifiedField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PlaneAngleMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PlaneAngleMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PlaneAngleMeasure xsd type.")]
    public partial class PlaneAngleMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasure class.
        /// </summary>
        public PlaneAngleMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PlaneAngleMeasure(double value, PlaneAngleUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleUom")]
        [XmlAttribute("uom")]
		
        public PlaneAngleUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PlaneAngleUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductionOperationWeather xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductionOperationWeather", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductionOperationWeather xsd type.")]
    public partial class ProductionOperationWeather : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time the information is related to.
        /// </summary>
		[Required]
        [Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTim")]
        public DateTime? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? DTimField; 

        /// <summary>
        /// Name of company that supplied the data.
        /// </summary>
		[StringLength(64)]
        [Description("Name of company that supplied the data.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Agency")]
        public string Agency {
            get {
                return AgencyField;
            } 
            set {
                AgencyField = value;
                NotifyPropertyChanged("Agency");
            }
        }

        private string AgencyField; 

        /// <summary>
        /// Atmospheric pressure.
        /// </summary>
		[Description("Atmospheric pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("BarometricPressure")]
        public PressureMeasure BarometricPressure {
            get {
                return BarometricPressureField;
            } 
            set {
                BarometricPressureField = value;
                NotifyPropertyChanged("BarometricPressure");
            }
        }

        private PressureMeasure BarometricPressureField; 

        /// <summary>
        /// The Beaufort wind scale is a system used to estimate and report wind speeds when no measuring apparatus is available. It was invented in the early 19th Century by Admiral Sir Francis Beaufort of the British Navy as a way to interpret winds from conditions.
        /// </summary>
		[Description("The Beaufort wind scale is a system used to estimate and report wind speeds when no measuring apparatus is available. It was invented in the early 19th Century by Admiral Sir Francis Beaufort of the British Navy as a way to interpret winds from conditions.")]
        [EnergisticsDataTypeAttribute(DataType = "BeaufortScaleIntegerCode")]
		[XmlElement("BeaufortScaleNumber")]
        public short? BeaufortScaleNumber {
            get {
                return BeaufortScaleNumberField;
            } 
            set {
                BeaufortScaleNumberField = value;
                 this.BeaufortScaleNumberSpecified = true;
                NotifyPropertyChanged("BeaufortScaleNumber");
            }
        }

        private short? BeaufortScaleNumberField; 

        /// <summary>
        /// BeaufortScaleNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BeaufortScaleNumberSpecified {
            get {
                return BeaufortScaleNumberSpecifiedField;
            } 
            set {
                BeaufortScaleNumberSpecifiedField = value;
                NotifyPropertyChanged("BeaufortScaleNumberSpecified");
            }
        }

        private bool BeaufortScaleNumberSpecifiedField; 

        /// <summary>
        /// Average temperature above ground for the period. Temperature of the atmosphere.
        /// </summary>
		[Description("Average temperature above ground for the period. Temperature of the atmosphere.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempSurface")]
        public ThermodynamicTemperatureMeasure TempSurface {
            get {
                return TempSurfaceField;
            } 
            set {
                TempSurfaceField = value;
                NotifyPropertyChanged("TempSurface");
            }
        }

        private ThermodynamicTemperatureMeasure TempSurfaceField; 

        /// <summary>
        /// Minimum temperature above ground. Temperature of the atmosphere.
        /// </summary>
		[Description("Minimum temperature above ground. Temperature of the atmosphere.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempSurfaceMn")]
        public ThermodynamicTemperatureMeasure TempSurfaceMin {
            get {
                return TempSurfaceMnField;
            } 
            set {
                TempSurfaceMnField = value;
                NotifyPropertyChanged("TempSurfaceMin");
            }
        }

        private ThermodynamicTemperatureMeasure TempSurfaceMnField; 

        /// <summary>
        /// Maximum temperature above ground.
        /// </summary>
		[Description("Maximum temperature above ground.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempSurfaceMx")]
        public ThermodynamicTemperatureMeasure TempSurfaceMax {
            get {
                return TempSurfaceMxField;
            } 
            set {
                TempSurfaceMxField = value;
                NotifyPropertyChanged("TempSurfaceMax");
            }
        }

        private ThermodynamicTemperatureMeasure TempSurfaceMxField; 

        /// <summary>
        /// A measure of the combined chilling effect of wind and low temperature on living things, also named chill factor, e.g., according to US Weather Service table, an air temperature of 30 degF with a 10 mph wind corresponds to a wind chill of 22 degF.
        /// </summary>
		[Description("A measure of the combined chilling effect of wind and low temperature on living things, also named chill factor, e.g., according to US Weather Service table, an air temperature of 30 degF with a 10 mph wind corresponds to a wind chill of 22 degF.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempWindChill")]
        public ThermodynamicTemperatureMeasure TempWindChill {
            get {
                return TempWindChillField;
            } 
            set {
                TempWindChillField = value;
                NotifyPropertyChanged("TempWindChill");
            }
        }

        private ThermodynamicTemperatureMeasure TempWindChillField; 

        /// <summary>
        /// Sea temperature.
        /// </summary>
		[Description("Sea temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("Tempsea")]
        public ThermodynamicTemperatureMeasure Tempsea {
            get {
                return TempseaField;
            } 
            set {
                TempseaField = value;
                NotifyPropertyChanged("Tempsea");
            }
        }

        private ThermodynamicTemperatureMeasure TempseaField; 

        /// <summary>
        /// Horizontal visibility.
        /// </summary>
		[Description("Horizontal visibility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Visibility")]
        public LengthMeasure Visibility {
            get {
                return VisibilityField;
            } 
            set {
                VisibilityField = value;
                NotifyPropertyChanged("Visibility");
            }
        }

        private LengthMeasure VisibilityField; 

        /// <summary>
        /// The direction from which the waves are coming, measured from true north.
        /// </summary>
		[Description("The direction from which the waves are coming, measured from true north.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("AziWave")]
        public PlaneAngleMeasure AziWave {
            get {
                return AziWaveField;
            } 
            set {
                AziWaveField = value;
                NotifyPropertyChanged("AziWave");
            }
        }

        private PlaneAngleMeasure AziWaveField; 

        /// <summary>
        /// Average height of the waves.
        /// </summary>
		[Description("Average height of the waves.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("HtWave")]
        public LengthMeasure HeightWave {
            get {
                return HtWaveField;
            } 
            set {
                HtWaveField = value;
                NotifyPropertyChanged("HeightWave");
            }
        }

        private LengthMeasure HtWaveField; 

        /// <summary>
        /// An average of the higher 1/3 of the wave heights passing during a sample period (typically 20 to 30 minutes).
        /// </summary>
		[Description("An average of the higher 1/3 of the wave heights passing during a sample period (typically 20 to 30 minutes).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SignificantWave")]
        public LengthMeasure SignificantWave {
            get {
                return SignificantWaveField;
            } 
            set {
                SignificantWaveField = value;
                NotifyPropertyChanged("SignificantWave");
            }
        }

        private LengthMeasure SignificantWaveField; 

        /// <summary>
        /// The maximum wave height.
        /// </summary>
		[Description("The maximum wave height.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MaxWave")]
        public LengthMeasure MaxWave {
            get {
                return MaxWaveField;
            } 
            set {
                MaxWaveField = value;
                NotifyPropertyChanged("MaxWave");
            }
        }

        private LengthMeasure MaxWaveField; 

        /// <summary>
        /// The elapsed time between the passing of two wave tops.
        /// </summary>
		[Description("The elapsed time between the passing of two wave tops.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("PeriodWave")]
        public TimeMeasure PeriodWave {
            get {
                return PeriodWaveField;
            } 
            set {
                PeriodWaveField = value;
                NotifyPropertyChanged("PeriodWave");
            }
        }

        private TimeMeasure PeriodWaveField; 

        /// <summary>
        /// The direction from which the wind is blowing, measured from true north.
        /// </summary>
		[Description("The direction from which the wind is blowing, measured from true north.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("AziWind")]
        public PlaneAngleMeasure AziWind {
            get {
                return AziWindField;
            } 
            set {
                AziWindField = value;
                NotifyPropertyChanged("AziWind");
            }
        }

        private PlaneAngleMeasure AziWindField; 

        /// <summary>
        /// Wind speed.
        /// </summary>
		[Description("Wind speed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityMeasure")]
		[XmlElement("VelWind")]
        public AngularVelocityMeasure VelWind {
            get {
                return VelWindField;
            } 
            set {
                VelWindField = value;
                NotifyPropertyChanged("VelWind");
            }
        }

        private AngularVelocityMeasure VelWindField; 

        /// <summary>
        /// Type of precipitation.
        /// </summary>
		[StringLength(64)]
        [Description("Type of precipitation.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypePrecip")]
        public string TypePrecip {
            get {
                return TypePrecipField;
            } 
            set {
                TypePrecipField = value;
                NotifyPropertyChanged("TypePrecip");
            }
        }

        private string TypePrecipField; 

        /// <summary>
        /// Amount of precipitation.
        /// </summary>
		[Description("Amount of precipitation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("AmtPrecip")]
        public LengthMeasure AmtPrecip {
            get {
                return AmtPrecipField;
            } 
            set {
                AmtPrecipField = value;
                NotifyPropertyChanged("AmtPrecip");
            }
        }

        private LengthMeasure AmtPrecipField; 

        /// <summary>
        /// Description of cloud cover.
        /// </summary>
		[StringLength(64)]
        [Description("Description of cloud cover.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CoverCloud")]
        public string CoverCloud {
            get {
                return CoverCloudField;
            } 
            set {
                CoverCloudField = value;
                NotifyPropertyChanged("CoverCloud");
            }
        }

        private string CoverCloudField; 

        /// <summary>
        /// Height of cloud cover.
        /// </summary>
		[Description("Height of cloud cover.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("CeilingCloud")]
        public LengthMeasure CeilingCloud {
            get {
                return CeilingCloudField;
            } 
            set {
                CeilingCloudField = value;
                NotifyPropertyChanged("CeilingCloud");
            }
        }

        private LengthMeasure CeilingCloudField; 

        /// <summary>
        /// Current speed.
        /// </summary>
		[Description("Current speed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityMeasure")]
		[XmlElement("CurrentSea")]
        public AngularVelocityMeasure CurrentSea {
            get {
                return CurrentSeaField;
            } 
            set {
                CurrentSeaField = value;
                NotifyPropertyChanged("CurrentSea");
            }
        }

        private AngularVelocityMeasure CurrentSeaField; 

        /// <summary>
        /// Azimuth of current.
        /// </summary>
		[Description("Azimuth of current.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("AziCurrentSea")]
        public PlaneAngleMeasure AziCurrentSea {
            get {
                return AziCurrentSeaField;
            } 
            set {
                AziCurrentSeaField = value;
                NotifyPropertyChanged("AziCurrentSea");
            }
        }

        private PlaneAngleMeasure AziCurrentSeaField; 

        /// <summary>
        /// Comments and remarks.
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comments")]
        public string Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string CommentsField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductionOperationHSE xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductionOperationHSE", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductionOperationHSE xsd type.")]
    public partial class ProductionOperationHSE : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The number of incidents or accidents and injuries that were reported.
        /// </summary>
		[Description("The number of incidents or accidents and injuries that were reported.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("IncidentCount", DataType="nonNegativeInteger")]
        public string IncidentCount {
            get {
                return IncidentCountField;
            } 
            set {
                IncidentCountField = value;
                NotifyPropertyChanged("IncidentCount");
            }
        }

        private string IncidentCountField; 

        /// <summary>
        /// The amount of time since the most recent lost-time accident.
        /// </summary>
		[Description("The amount of time since the most recent lost-time accident.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("SinceLostTime")]
        public TimeMeasure SinceLostTime {
            get {
                return SinceLostTimeField;
            } 
            set {
                SinceLostTimeField = value;
                NotifyPropertyChanged("SinceLostTime");
            }
        }

        private TimeMeasure SinceLostTimeField; 

        /// <summary>
        /// The amount of time since the most recent accident-prevention exercise.
        /// </summary>
		[Description("The amount of time since the most recent accident-prevention exercise.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("SincePreventionExercise")]
        public TimeMeasure SincePreventionExercise {
            get {
                return SincePreventionExerciseField;
            } 
            set {
                SincePreventionExerciseField = value;
                NotifyPropertyChanged("SincePreventionExercise");
            }
        }

        private TimeMeasure SincePreventionExerciseField; 

        /// <summary>
        /// The amount of time since the most recent defined hazard and accident situation (Norwegian DFU).
        /// </summary>
		[Description("The amount of time since the most recent defined hazard and accident situation (Norwegian DFU).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("SinceDefinedSituation")]
        public TimeMeasure SinceDefinedSituation {
            get {
                return SinceDefinedSituationField;
            } 
            set {
                SinceDefinedSituationField = value;
                NotifyPropertyChanged("SinceDefinedSituation");
            }
        }

        private TimeMeasure SinceDefinedSituationField; 

        /// <summary>
        /// The number of medical treatments that have occurred.
        /// </summary>
		[Description("The number of medical treatments that have occurred.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("MedicalTreatmentCount", DataType="nonNegativeInteger")]
        public string MedicalTreatmentCount {
            get {
                return MedicalTreatmentCountField;
            } 
            set {
                MedicalTreatmentCountField = value;
                NotifyPropertyChanged("MedicalTreatmentCount");
            }
        }

        private string MedicalTreatmentCountField; 

        /// <summary>
        /// The number of system alarms that have occurred.
        /// </summary>
		[Description("The number of system alarms that have occurred.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("AlarmCount", DataType="nonNegativeInteger")]
        public string AlarmCount {
            get {
                return AlarmCountField;
            } 
            set {
                AlarmCountField = value;
                NotifyPropertyChanged("AlarmCount");
            }
        }

        private string AlarmCountField; 

        /// <summary>
        /// The number of personnel safety introductions that have occurred.
        /// </summary>
		[Description("The number of personnel safety introductions that have occurred.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("SafetyIntroCount", DataType="nonNegativeInteger")]
        public string SafetyIntroCount {
            get {
                return SafetyIntroCountField;
            } 
            set {
                SafetyIntroCountField = value;
                NotifyPropertyChanged("SafetyIntroCount");
            }
        }

        private string SafetyIntroCountField; 

        /// <summary>
        /// A textual description of safety considerations.
        /// </summary>
		[StringLength(2000)]
        [Description("A textual description of safety considerations.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("SafetyDescription")]
        public string SafetyDescription {
            get {
                return SafetyDescriptionField;
            } 
            set {
                SafetyDescriptionField = value;
                NotifyPropertyChanged("SafetyDescription");
            }
        }

        private string SafetyDescriptionField; 

        /// <summary>
        /// Information about the weather at a point in time.
        /// </summary>
		[Description("Information about the weather at a point in time.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductionOperationWeather")]
		[XmlElement("Weather")]
        public List<ProductionOperationWeather> Weather {
            get {
                return WeatherField;
            } 
            set {
                WeatherField = value;
                NotifyPropertyChanged("Weather");
            }
        }

         /// <summary>
         /// bool to indicate if Weather has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WeatherSpecified
         {
             get {
             if(WeatherField!=null)
                 return WeatherField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationWeather> WeatherField; 

        /// <summary>
        /// Safety information at a specific installatino.
        /// </summary>
		[Description("Safety information at a specific installatino.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductionOperationSafety")]
		[XmlElement("Safety")]
        public List<ProductionOperationSafety> Safety {
            get {
                return SafetyField;
            } 
            set {
                SafetyField = value;
                NotifyPropertyChanged("Safety");
            }
        }

         /// <summary>
         /// bool to indicate if Safety has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SafetySpecified
         {
             get {
             if(SafetyField!=null)
                 return SafetyField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationSafety> SafetyField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductionOperationThirdPartyProcessing xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductionOperationThirdPartyProcessing", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductionOperationThirdPartyProcessing xsd type.")]
    public partial class ProductionOperationThirdPartyProcessing : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the installation which performed the processing. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("The name of the installation which performed the processing. The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("Installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return InstallationField;
            } 
            set {
                InstallationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct InstallationField; 

        /// <summary>
        /// The estimated amount of oil lost. This volume has been corrected to standard conditions of temperature and pressure
        /// </summary>
		[Description("The estimated amount of oil lost. This volume has been corrected to standard conditions of temperature and pressure")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("OilStdTempPres")]
        public VolumeMeasure OilStdTempPres {
            get {
                return OilStdTempPresField;
            } 
            set {
                OilStdTempPresField = value;
                NotifyPropertyChanged("OilStdTempPres");
            }
        }

        private VolumeMeasure OilStdTempPresField; 

        /// <summary>
        /// The estimated amount of gas lost. This volume has been corrected to standard conditions of temperature and pressure
        /// </summary>
		[Description("The estimated amount of gas lost. This volume has been corrected to standard conditions of temperature and pressure")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("GasStdTempPres")]
        public VolumeMeasure GasStdTempPres {
            get {
                return GasStdTempPresField;
            } 
            set {
                GasStdTempPresField = value;
                NotifyPropertyChanged("GasStdTempPres");
            }
        }

        private VolumeMeasure GasStdTempPresField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FacilityIdentifierStruct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FacilityIdentifierStruct", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FacilityIdentifierStruct xsd type.")]
    public partial class FacilityIdentifierStruct : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Text property
        /// </summary>
        [RecurringElement]
        [XmlText]
        public List<string> Text {
            get {
                return TextField;
            } 
            set {
                TextField = value;
                NotifyPropertyChanged("Text");
            }
        }

         /// <summary>
         /// bool to indicate if Text has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TextSpecified
         {
             get {
             if(TextField!=null)
                 return TextField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> TextField; 

		/// <summary>
        /// The kind of facility.
        /// </summary>
		[Description("The kind of facility.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingFacility")]
        [XmlAttribute("kind")]
		
        public ReportingFacility Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private ReportingFacility kindField; 

        /// <summary>
        /// kindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return kindSpecifiedField;
            } 
            set {
                kindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool kindSpecifiedField; 

		/// <summary>
        /// A custom sub-categorization of facility kind. This attribute is free-form text and allows implementers to provide a more specific or specialized description of the facility kind.
        /// </summary>
		[StringLength(64)]
        [Description("A custom sub-categorization of facility kind. This attribute is free-form text and allows implementers to provide a more specific or specialized description of the facility kind.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("siteKind")]
		
        public string SiteKind {
            get {
                return siteKindField;
            } 
            set {
                siteKindField = value;
                NotifyPropertyChanged("SiteKind");
            }
        }

        private string siteKindField; 

		/// <summary>
        /// The naming system within which the name is unique. For example, API or NPD.
        /// </summary>
		[StringLength(64)]
        [Description("The naming system within which the name is unique. For example, API or NPD.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("namingSystem")]
		
        public string NamingSystem {
            get {
                return namingSystemField;
            } 
            set {
                namingSystemField = value;
                NotifyPropertyChanged("NamingSystem");
            }
        }

        private string namingSystemField; 

		/// <summary>
        /// The referencing uid.
        /// </summary>
		[StringLength(64)]
        [Description("The referencing uid.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uidRef")]
		
        public string UidRef {
            get {
                return uidRefField;
            } 
            set {
                uidRefField = value;
                NotifyPropertyChanged("UidRef");
            }
        }

        private string uidRefField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductionOperationLostProduction xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductionOperationLostProduction", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductionOperationLostProduction xsd type.")]
    public partial class ProductionOperationLostProduction : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ThirdPartyProcessing property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductionOperationThirdPartyProcessing")]
		[XmlElement("ThirdPartyProcessing")]
        public List<ProductionOperationThirdPartyProcessing> ThirdPartyProcessing {
            get {
                return ThirdPartyProcessingField;
            } 
            set {
                ThirdPartyProcessingField = value;
                NotifyPropertyChanged("ThirdPartyProcessing");
            }
        }

         /// <summary>
         /// bool to indicate if ThirdPartyProcessing has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ThirdPartyProcessingSpecified
         {
             get {
             if(ThirdPartyProcessingField!=null)
                 return ThirdPartyProcessingField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationThirdPartyProcessing> ThirdPartyProcessingField; 

        /// <summary>
        /// VolumeAndReason property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "LostVolumeAndReason")]
		[XmlElement("VolumeAndReason")]
        public List<LostVolumeAndReason> VolumeAndReason {
            get {
                return VolumeAndReasonField;
            } 
            set {
                VolumeAndReasonField = value;
                NotifyPropertyChanged("VolumeAndReason");
            }
        }

         /// <summary>
         /// bool to indicate if VolumeAndReason has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VolumeAndReasonSpecified
         {
             get {
             if(VolumeAndReasonField!=null)
                 return VolumeAndReasonField.Count>0?true:false;
             else return false;
             }
         }
        private List<LostVolumeAndReason> VolumeAndReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductionOperationAlarm xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductionOperationAlarm", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductionOperationAlarm xsd type.")]
    public partial class ProductionOperationAlarm : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The date and time when the alarms sounded.
        /// </summary>
		[Description("The date and time when the alarms sounded.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTim")]
        public DateTime? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? DTimField; 

        /// <summary>
        /// DTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DTimSpecifiedField;
            } 
            set {
                DTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool DTimSpecifiedField; 

        /// <summary>
        /// The area where the alarm sounded.
        /// </summary>
		[StringLength(64)]
        [Description("The area where the alarm sounded.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Area")]
        public string Area {
            get {
                return AreaField;
            } 
            set {
                AreaField = value;
                NotifyPropertyChanged("Area");
            }
        }

        private string AreaField; 

        /// <summary>
        /// The type of alarm that sounded.
        /// </summary>
		[StringLength(64)]
        [Description("The type of alarm that sounded.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Type")]
        public string Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string TypeField; 

        /// <summary>
        /// The reason the alarm sounded.
        /// </summary>
		[StringLength(2000)]
        [Description("The reason the alarm sounded.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Reason")]
        public string Reason {
            get {
                return ReasonField;
            } 
            set {
                ReasonField = value;
                NotifyPropertyChanged("Reason");
            }
        }

        private string ReasonField; 

        /// <summary>
        /// A general comment about the alarm.
        /// </summary>
		[StringLength(2000)]
        [Description("A general comment about the alarm.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductionOperationOperationalComment xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductionOperationOperationalComment", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductionOperationOperationalComment xsd type.")]
    public partial class ProductionOperationOperationalComment : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The kind of operation.
        /// </summary>
		[Description("The kind of operation.")]
        [EnergisticsDataTypeAttribute(DataType = "OperationKind")]
		[XmlElement("Type")]
        public OperationKind? Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        private OperationKind? TypeField; 

        /// <summary>
        /// TypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSpecified {
            get {
                return TypeSpecifiedField;
            } 
            set {
                TypeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }

        private bool TypeSpecifiedField; 

        /// <summary>
        /// The beginning date and time that the comment represents.
        /// </summary>
		[Description("The beginning date and time that the comment represents.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimStart")]
        public DateTime? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? DTimStartField; 

        /// <summary>
        /// DTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DTimStartSpecifiedField;
            } 
            set {
                DTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool DTimStartSpecifiedField; 

        /// <summary>
        /// The ending date and time that the comment represents.
        /// </summary>
		[Description("The ending date and time that the comment represents.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? DTimEndField; 

        /// <summary>
        /// DTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DTimEndSpecifiedField;
            } 
            set {
                DTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool DTimEndSpecifiedField; 

        /// <summary>
        /// A comment about the operation and/or the activities within the operation.
        /// </summary>
		[Description("A comment about the operation and/or the activities within the operation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public List<string> Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(CommentField!=null)
                 return CommentField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> CommentField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductionOperationShutdown xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductionOperationShutdown", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductionOperationShutdown xsd type.")]
    public partial class ProductionOperationShutdown : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the installation which was shut down. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("The name of the installation which was shut down. The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("Installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return InstallationField;
            } 
            set {
                InstallationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct InstallationField; 

        /// <summary>
        /// A general description of the shutdown with reason and other relevant information.
        /// </summary>
		[StringLength(2000)]
        [Description("A general description of the shutdown with reason and other relevant information.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// The time the shutdown started.
        /// </summary>
		[Description("The time the shutdown started.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimStart")]
        public DateTime? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? DTimStartField; 

        /// <summary>
        /// DTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DTimStartSpecifiedField;
            } 
            set {
                DTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool DTimStartSpecifiedField; 

        /// <summary>
        /// The time the shutdown ended.
        /// </summary>
		[Description("The time the shutdown ended.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? DTimEndField; 

        /// <summary>
        /// DTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DTimEndSpecifiedField;
            } 
            set {
                DTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool DTimEndSpecifiedField; 

        /// <summary>
        /// Downtime when the installation is unable to produce 100% of its capability.
        /// </summary>
		[Description("Downtime when the installation is unable to produce 100% of its capability.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("VolumetricDownTime")]
        public TimeMeasure VolumetricDownTime {
            get {
                return VolumetricDownTimeField;
            } 
            set {
                VolumetricDownTimeField = value;
                NotifyPropertyChanged("VolumetricDownTime");
            }
        }

        private TimeMeasure VolumetricDownTimeField; 

        /// <summary>
        /// Estimated loss of oil deliveries because of the shutdown. This volume has been corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("Estimated loss of oil deliveries because of the shutdown. This volume has been corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("LossOilStdTempPres")]
        public VolumeMeasure LossOilStdTempPres {
            get {
                return LossOilStdTempPresField;
            } 
            set {
                LossOilStdTempPresField = value;
                NotifyPropertyChanged("LossOilStdTempPres");
            }
        }

        private VolumeMeasure LossOilStdTempPresField; 

        /// <summary>
        /// Estimated loss of gas deliveries because of the shutdown. This volume has been corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("Estimated loss of gas deliveries because of the shutdown. This volume has been corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("LossGasStdTempPres")]
        public VolumeMeasure LossGasStdTempPres {
            get {
                return LossGasStdTempPresField;
            } 
            set {
                LossGasStdTempPresField = value;
                NotifyPropertyChanged("LossGasStdTempPres");
            }
        }

        private VolumeMeasure LossGasStdTempPresField; 

        /// <summary>
        /// A description of main activities from time to time during the shutdown period. 
        /// </summary>
		[Description("A description of main activities from time to time during the shutdown period.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DatedComment")]
		[XmlElement("Activity")]
        public List<DatedComment> Activity {
            get {
                return ActivityField;
            } 
            set {
                ActivityField = value;
                NotifyPropertyChanged("Activity");
            }
        }

         /// <summary>
         /// bool to indicate if Activity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ActivitySpecified
         {
             get {
             if(ActivityField!=null)
                 return ActivityField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> ActivityField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductionOperationCargoShipOperation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductionOperationCargoShipOperation", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductionOperationCargoShipOperation xsd type.")]
    public partial class ProductionOperationCargoShipOperation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name of the cargo vessel.
        /// </summary>
		[StringLength(64)]
        [Description("Name of the cargo vessel.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("VesselName")]
        public string VesselName {
            get {
                return VesselNameField;
            } 
            set {
                VesselNameField = value;
                NotifyPropertyChanged("VesselName");
            }
        }

        private string VesselNameField; 

        /// <summary>
        /// The date and time that the vessel arrived.
        /// </summary>
		[Description("The date and time that the vessel arrived.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimStart")]
        public DateTime? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? DTimStartField; 

        /// <summary>
        /// DTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DTimStartSpecifiedField;
            } 
            set {
                DTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool DTimStartSpecifiedField; 

        /// <summary>
        /// The date and time that the vessel left.
        /// </summary>
		[Description("The date and time that the vessel left.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? DTimEndField; 

        /// <summary>
        /// DTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DTimEndSpecifiedField;
            } 
            set {
                DTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool DTimEndSpecifiedField; 

        /// <summary>
        /// Name of the captain of the vessel.
        /// </summary>
		[StringLength(64)]
        [Description("Name of the captain of the vessel.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Captain")]
        public string Captain {
            get {
                return CaptainField;
            } 
            set {
                CaptainField = value;
                NotifyPropertyChanged("Captain");
            }
        }

        private string CaptainField; 

        /// <summary>
        /// The cargo identifier.
        /// </summary>
		[StringLength(64)]
        [Description("The cargo identifier.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CargoNumber")]
        public string CargoNumber {
            get {
                return CargoNumberField;
            } 
            set {
                CargoNumberField = value;
                NotifyPropertyChanged("CargoNumber");
            }
        }

        private string CargoNumberField; 

        /// <summary>
        /// The cargo batch number. Used if the vessel needs to temporarily disconnect for some reason (e.g., weather).
        /// </summary>
		[Description("The cargo batch number. Used if the vessel needs to temporarily disconnect for some reason (e.g., weather).")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("CargoBatchNumber", DataType="nonNegativeInteger")]
        public string CargoBatchNumber {
            get {
                return CargoBatchNumberField;
            } 
            set {
                CargoBatchNumberField = value;
                NotifyPropertyChanged("CargoBatchNumber");
            }
        }

        private string CargoBatchNumberField; 

        /// <summary>
        /// Description of cargo on the vessel.
        /// </summary>
		[StringLength(2000)]
        [Description("Description of cargo on the vessel.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Cargo")]
        public string Cargo {
            get {
                return CargoField;
            } 
            set {
                CargoField = value;
                NotifyPropertyChanged("Cargo");
            }
        }

        private string CargoField; 

        /// <summary>
        /// Gross oil loaded to the ship during the report period. Gross oil includes BS and W. This volume has been corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("Gross oil loaded to the ship during the report period. Gross oil includes BS and W. This volume has been corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("OilGrossStdTempPres")]
        public VolumeMeasure OilGrossStdTempPres {
            get {
                return OilGrossStdTempPresField;
            } 
            set {
                OilGrossStdTempPresField = value;
                NotifyPropertyChanged("OilGrossStdTempPres");
            }
        }

        private VolumeMeasure OilGrossStdTempPresField; 

        /// <summary>
        /// Gross oil loaded to the ship in total during the operation. Gross oil includes BS and W. This volume has been corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("Gross oil loaded to the ship in total during the operation. Gross oil includes BS and W. This volume has been corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("OilGrossTotalStdTempPres")]
        public VolumeMeasure OilGrossTotalStdTempPres {
            get {
                return OilGrossTotalStdTempPresField;
            } 
            set {
                OilGrossTotalStdTempPresField = value;
                NotifyPropertyChanged("OilGrossTotalStdTempPres");
            }
        }

        private VolumeMeasure OilGrossTotalStdTempPresField; 

        /// <summary>
        /// Net oil loaded to the ship during the report period. Net oil excludes BS and W, fuel, spills, and leaks. This volume has been corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("Net oil loaded to the ship during the report period. Net oil excludes BS and W, fuel, spills, and leaks. This volume has been corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("OilNetStdTempPres")]
        public VolumeMeasure OilNetStdTempPres {
            get {
                return OilNetStdTempPresField;
            } 
            set {
                OilNetStdTempPresField = value;
                NotifyPropertyChanged("OilNetStdTempPres");
            }
        }

        private VolumeMeasure OilNetStdTempPresField; 

        /// <summary>
        /// Net oil loaded to the ship from the beginning of the month to the end of the reporting period. Net oil excludes BS and W, fuel, spills, and leaks. This volume has been corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("Net oil loaded to the ship from the beginning of the month to the end of the reporting period. Net oil excludes BS and W, fuel, spills, and leaks. This volume has been corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("OilNetMonthToDateStdTempPres")]
        public VolumeMeasure OilNetMonthToDateStdTempPres {
            get {
                return OilNetMonthToDateStdTempPresField;
            } 
            set {
                OilNetMonthToDateStdTempPresField = value;
                NotifyPropertyChanged("OilNetMonthToDateStdTempPres");
            }
        }

        private VolumeMeasure OilNetMonthToDateStdTempPresField; 

        /// <summary>
        /// Density of the liquid loaded to the tanker. This density has been corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("Density of the liquid loaded to the tanker. This density has been corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensityStdTempPres")]
        public MassPerVolumeMeasure DensityStdTempPres {
            get {
                return DensityStdTempPresField;
            } 
            set {
                DensityStdTempPresField = value;
                NotifyPropertyChanged("DensityStdTempPres");
            }
        }

        private MassPerVolumeMeasure DensityStdTempPresField; 

        /// <summary>
        /// Density of the liquid loaded to the tanker.
        /// </summary>
		[Description("Density of the liquid loaded to the tanker.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Density")]
        public MassPerVolumeMeasure Density {
            get {
                return DensityField;
            } 
            set {
                DensityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private MassPerVolumeMeasure DensityField; 

        /// <summary>
        /// Reid vapor pressure of the liquid.
        /// </summary>
		[Description("Reid vapor pressure of the liquid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Rvp")]
        public PressureMeasure Rvp {
            get {
                return RvpField;
            } 
            set {
                RvpField = value;
                NotifyPropertyChanged("Rvp");
            }
        }

        private PressureMeasure RvpField; 

        /// <summary>
        /// Basic sediment and water is measured from a liquid sample the production stream. It includes free water, sediment and emulsion and is measured as a volume percentage of the liquid.
        /// </summary>
		[Description("Basic sediment and water is measured from a liquid sample the production stream. It includes free water, sediment and emulsion and is measured as a volume percentage of the liquid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Bsw")]
        public VolumePerVolumeMeasure Bsw {
            get {
                return BswField;
            } 
            set {
                BswField = value;
                NotifyPropertyChanged("Bsw");
            }
        }

        private VolumePerVolumeMeasure BswField; 

        /// <summary>
        /// Salt content. The product formed by neutralization of an acid and a base. The term is more specifically applied to sodium chloride.
        /// </summary>
		[Description("Salt content. The product formed by neutralization of an acid and a base. The term is more specifically applied to sodium chloride.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Salt")]
        public MassPerVolumeMeasure Salt {
            get {
                return SaltField;
            } 
            set {
                SaltField = value;
                NotifyPropertyChanged("Salt");
            }
        }

        private MassPerVolumeMeasure SaltField; 

        /// <summary>
        /// A commnet about the operation.
        /// </summary>
		[Description("A commnet about the operation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DatedComment")]
		[XmlElement("Comment")]
        public List<DatedComment> Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(CommentField!=null)
                 return CommentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> CommentField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductionOperationMarineOperation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductionOperationMarineOperation", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductionOperationMarineOperation xsd type.")]
    public partial class ProductionOperationMarineOperation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The beginning date and time that the comment represents.
        /// </summary>
		[Description("The beginning date and time that the comment represents.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimStart")]
        public DateTime? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? DTimStartField; 

        /// <summary>
        /// DTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DTimStartSpecifiedField;
            } 
            set {
                DTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool DTimStartSpecifiedField; 

        /// <summary>
        /// The ending date and time that the comment represents.
        /// </summary>
		[Description("The ending date and time that the comment represents.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? DTimEndField; 

        /// <summary>
        /// DTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DTimEndSpecifiedField;
            } 
            set {
                DTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool DTimEndSpecifiedField; 

        /// <summary>
        /// A general comment on marine activity in the area.
        /// </summary>
		[StringLength(2000)]
        [Description("A general comment on marine activity in the area.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("GeneralComment")]
        public string GeneralComment {
            get {
                return GeneralCommentField;
            } 
            set {
                GeneralCommentField = value;
                NotifyPropertyChanged("GeneralComment");
            }
        }

        private string GeneralCommentField; 

        /// <summary>
        /// Name of the supply vessel for the installation.
        /// </summary>
		[StringLength(64)]
        [Description("Name of the supply vessel for the installation.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SupplyShip")]
        public string SupplyShip {
            get {
                return SupplyShipField;
            } 
            set {
                SupplyShipField = value;
                NotifyPropertyChanged("SupplyShip");
            }
        }

        private string SupplyShipField; 

        /// <summary>
        /// Name of the standby vessel for the installation.
        /// </summary>
		[StringLength(64)]
        [Description("Name of the standby vessel for the installation.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("StandbyVessel")]
        public string StandbyVessel {
            get {
                return StandbyVesselField;
            } 
            set {
                StandbyVesselField = value;
                NotifyPropertyChanged("StandbyVessel");
            }
        }

        private string StandbyVesselField; 

        /// <summary>
        /// Comment regarding the supply ship.
        /// </summary>
		[Description("Comment regarding the supply ship.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DatedComment")]
		[XmlElement("SupplyShipComment")]
        public List<DatedComment> SupplyShipComment {
            get {
                return SupplyShipCommentField;
            } 
            set {
                SupplyShipCommentField = value;
                NotifyPropertyChanged("SupplyShipComment");
            }
        }

         /// <summary>
         /// bool to indicate if SupplyShipComment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SupplyShipCommentSpecified
         {
             get {
             if(SupplyShipCommentField!=null)
                 return SupplyShipCommentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> SupplyShipCommentField; 

        /// <summary>
        /// Comment regarding the standby vessel.
        /// </summary>
		[Description("Comment regarding the standby vessel.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DatedComment")]
		[XmlElement("StandbyVesselComment")]
        public List<DatedComment> StandbyVesselComment {
            get {
                return StandbyVesselCommentField;
            } 
            set {
                StandbyVesselCommentField = value;
                NotifyPropertyChanged("StandbyVesselComment");
            }
        }

         /// <summary>
         /// bool to indicate if StandbyVesselComment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StandbyVesselCommentSpecified
         {
             get {
             if(StandbyVesselCommentField!=null)
                 return StandbyVesselCommentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> StandbyVesselCommentField; 

        /// <summary>
        /// A comment on a special event in the marine area.
        /// </summary>
		[Description("A comment on a special event in the marine area.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DatedComment")]
		[XmlElement("Activity")]
        public List<DatedComment> Activity {
            get {
                return ActivityField;
            } 
            set {
                ActivityField = value;
                NotifyPropertyChanged("Activity");
            }
        }

         /// <summary>
         /// bool to indicate if Activity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ActivitySpecified
         {
             get {
             if(ActivityField!=null)
                 return ActivityField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> ActivityField; 

        /// <summary>
        /// Report of any basket movement to and from the installation.
        /// </summary>
		[Description("Report of any basket movement to and from the installation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DatedComment")]
		[XmlElement("BasketMovement")]
        public List<DatedComment> BasketMovement {
            get {
                return BasketMovementField;
            } 
            set {
                BasketMovementField = value;
                NotifyPropertyChanged("BasketMovement");
            }
        }

         /// <summary>
         /// bool to indicate if BasketMovement has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BasketMovementSpecified
         {
             get {
             if(BasketMovementField!=null)
                 return BasketMovementField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> BasketMovementField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductionOperationWaterCleaningQuality xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductionOperationWaterCleaningQuality", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductionOperationWaterCleaningQuality xsd type.")]
    public partial class ProductionOperationWaterCleaningQuality : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// An identifier of the point from which the sample was taken. This is an uncontrolled string value, which should be as descriptive as possible.
        /// </summary>
		[StringLength(64)]
        [Description("An identifier of the point from which the sample was taken. This is an uncontrolled string value, which should be as descriptive as possible.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SamplePoint")]
        public string SamplePoint {
            get {
                return SamplePointField;
            } 
            set {
                SamplePointField = value;
                NotifyPropertyChanged("SamplePoint");
            }
        }

        private string SamplePointField; 

        /// <summary>
        /// Total measured oil in the water after the water cleaning process, but before it is discharged from the installation.
        /// </summary>
		[Description("Total measured oil in the water after the water cleaning process, but before it is discharged from the installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("OilInWaterProduced")]
        public MassPerMassMeasure OilInWaterProduced {
            get {
                return OilInWaterProducedField;
            } 
            set {
                OilInWaterProducedField = value;
                NotifyPropertyChanged("OilInWaterProduced");
            }
        }

        private MassPerMassMeasure OilInWaterProducedField; 

        /// <summary>
        /// Total measured oil in the water after the water cleaning process, but before it is discharged from the installation
        /// </summary>
		[Description("Total measured oil in the water after the water cleaning process, but before it is discharged from the installation")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("AmountOfOil")]
        public MassMeasure AmountOfOil {
            get {
                return AmountOfOilField;
            } 
            set {
                AmountOfOilField = value;
                NotifyPropertyChanged("AmountOfOil");
            }
        }

        private MassMeasure AmountOfOilField; 

        /// <summary>
        /// The amount of ammonium found in the water sample.
        /// </summary>
		[Description("The amount of ammonium found in the water sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Ammonium")]
        public MassPerVolumeMeasure Ammonium {
            get {
                return AmmoniumField;
            } 
            set {
                AmmoniumField = value;
                NotifyPropertyChanged("Ammonium");
            }
        }

        private MassPerVolumeMeasure AmmoniumField; 

        /// <summary>
        /// The amount of total organic carbon found in the water. The water is under high temperature and the carbon left is measured.
        /// </summary>
		[Description("The amount of total organic carbon found in the water. The water is under high temperature and the carbon left is measured.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("TotalOrganicCarbon")]
        public MassPerMassMeasure TotalOrganicCarbon {
            get {
                return TotalOrganicCarbonField;
            } 
            set {
                TotalOrganicCarbonField = value;
                NotifyPropertyChanged("TotalOrganicCarbon");
            }
        }

        private MassPerMassMeasure TotalOrganicCarbonField; 

        /// <summary>
        /// The amount of phenol found in the water sample.
        /// </summary>
		[Description("The amount of phenol found in the water sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Phenol")]
        public MassPerVolumeMeasure Phenol {
            get {
                return PhenolField;
            } 
            set {
                PhenolField = value;
                NotifyPropertyChanged("Phenol");
            }
        }

        private MassPerVolumeMeasure PhenolField; 

        /// <summary>
        /// The amount of glycol found in the water sample.
        /// </summary>
		[Description("The amount of glycol found in the water sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Glycol")]
        public MassPerVolumeMeasure Glycol {
            get {
                return GlycolField;
            } 
            set {
                GlycolField = value;
                NotifyPropertyChanged("Glycol");
            }
        }

        private MassPerVolumeMeasure GlycolField; 

        /// <summary>
        /// The pH value of the treated water. The pH value is best given as a value, with no unit of measure, since there are no variations from the pH.
        /// </summary>
		[Description("The pH value of the treated water. The pH value is best given as a value, with no unit of measure, since there are no variations from the pH.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("PhValue")]
        public DimensionlessMeasure PHValue {
            get {
                return PhValueField;
            } 
            set {
                PhValueField = value;
                NotifyPropertyChanged("PHValue");
            }
        }

        private DimensionlessMeasure PhValueField; 

        /// <summary>
        /// The temperature of the water before it is discharged.
        /// </summary>
		[Description("The temperature of the water before it is discharged.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("WaterTemperature")]
        public ThermodynamicTemperatureMeasure WaterTemperature {
            get {
                return WaterTemperatureField;
            } 
            set {
                WaterTemperatureField = value;
                NotifyPropertyChanged("WaterTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure WaterTemperatureField; 

        /// <summary>
        /// Total measured residual chlorides in the water after the water cleaning process, but before it is discharged from the installation.
        /// </summary>
		[Description("Total measured residual chlorides in the water after the water cleaning process, but before it is discharged from the installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("ResidualChloride")]
        public MassPerMassMeasure ResidualChloride {
            get {
                return ResidualChlorideField;
            } 
            set {
                ResidualChlorideField = value;
                NotifyPropertyChanged("ResidualChloride");
            }
        }

        private MassPerMassMeasure ResidualChlorideField; 

        /// <summary>
        /// Total measured oxygen in the water after the water cleaning process, but before it is discharged from the installation.
        /// </summary>
		[Description("Total measured oxygen in the water after the water cleaning process, but before it is discharged from the installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("Oxygen")]
        public MassPerMassMeasure Oxygen {
            get {
                return OxygenField;
            } 
            set {
                OxygenField = value;
                NotifyPropertyChanged("Oxygen");
            }
        }

        private MassPerMassMeasure OxygenField; 

        /// <summary>
        /// A measure of the cloudiness of water caused by suspended particles.
        /// </summary>
		[Description("A measure of the cloudiness of water caused by suspended particles.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("Turbidity")]
        public DimensionlessMeasure Turbidity {
            get {
                return TurbidityField;
            } 
            set {
                TurbidityField = value;
                NotifyPropertyChanged("Turbidity");
            }
        }

        private DimensionlessMeasure TurbidityField; 

        /// <summary>
        /// A measure of the number of particles in water as measured by a coulter counter.
        /// </summary>
		[Description("A measure of the number of particles in water as measured by a coulter counter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("CoulterCounter")]
        public MassPerMassMeasure CoulterCounter {
            get {
                return CoulterCounterField;
            } 
            set {
                CoulterCounterField = value;
                NotifyPropertyChanged("CoulterCounter");
            }
        }

        private MassPerMassMeasure CoulterCounterField; 

        /// <summary>
        /// Any comment that may be useful in describing the water quality. There can be multiple comments.
        /// </summary>
		[Description("Any comment that may be useful in describing the water quality.  There can be multiple comments.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DatedComment")]
		[XmlElement("Comment")]
        public List<DatedComment> Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(CommentField!=null)
                 return CommentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> CommentField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassPerMassMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassPerMassMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MassPerMassMeasure xsd type.")]
    public partial class MassPerMassMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassPerMassMeasure class.
        /// </summary>
        public MassPerMassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassPerMassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassPerMassMeasure(double value, MassPerMassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassUom")]
        [XmlAttribute("uom")]
		
        public MassPerMassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassPerMassUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MassMeasure xsd type.")]
    public partial class MassMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassMeasure class.
        /// </summary>
        public MassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassMeasure(double value, MassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MassUom")]
        [XmlAttribute("uom")]
		
        public MassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DimensionlessMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DimensionlessMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DimensionlessMeasure xsd type.")]
    public partial class DimensionlessMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DimensionlessMeasure class.
        /// </summary>
        public DimensionlessMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DimensionlessMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DimensionlessMeasure(double value, DimensionlessUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessUom")]
        [XmlAttribute("uom")]
		
        public DimensionlessUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DimensionlessUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductionOperationActivity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductionOperationActivity", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductionOperationActivity xsd type.")]
    public partial class ProductionOperationActivity : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the contaminants in water, and the general water quality.
        /// </summary>
		[Description("Information about the contaminants in water, and the general water quality.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductionOperationWaterCleaningQuality")]
		[XmlElement("WaterCleaningQuality")]
        public List<ProductionOperationWaterCleaningQuality> WaterCleaningQuality {
            get {
                return WaterCleaningQualityField;
            } 
            set {
                WaterCleaningQualityField = value;
                NotifyPropertyChanged("WaterCleaningQuality");
            }
        }

         /// <summary>
         /// bool to indicate if WaterCleaningQuality has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WaterCleaningQualitySpecified
         {
             get {
             if(WaterCleaningQualityField!=null)
                 return WaterCleaningQualityField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationWaterCleaningQuality> WaterCleaningQualityField; 

        /// <summary>
        /// Information about a marine operation.
        /// </summary>
		[Description("Information about a marine operation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductionOperationMarineOperation")]
		[XmlElement("MarineOperation")]
        public List<ProductionOperationMarineOperation> MarineOperation {
            get {
                return MarineOperationField;
            } 
            set {
                MarineOperationField = value;
                NotifyPropertyChanged("MarineOperation");
            }
        }

         /// <summary>
         /// bool to indicate if MarineOperation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MarineOperationSpecified
         {
             get {
             if(MarineOperationField!=null)
                 return MarineOperationField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationMarineOperation> MarineOperationField; 

        /// <summary>
        /// Information about a cargo operation.
        /// </summary>
		[Description("Information about a cargo operation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductionOperationCargoShipOperation")]
		[XmlElement("CargoShipOperation")]
        public List<ProductionOperationCargoShipOperation> CargoShipOperation {
            get {
                return CargoShipOperationField;
            } 
            set {
                CargoShipOperationField = value;
                NotifyPropertyChanged("CargoShipOperation");
            }
        }

         /// <summary>
         /// bool to indicate if CargoShipOperation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CargoShipOperationSpecified
         {
             get {
             if(CargoShipOperationField!=null)
                 return CargoShipOperationField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationCargoShipOperation> CargoShipOperationField; 

        /// <summary>
        /// Infomation about a shutdown event.
        /// </summary>
		[Description("Infomation about a shutdown event.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductionOperationShutdown")]
		[XmlElement("Shutdown")]
        public List<ProductionOperationShutdown> Shutdown {
            get {
                return ShutdownField;
            } 
            set {
                ShutdownField = value;
                NotifyPropertyChanged("Shutdown");
            }
        }

         /// <summary>
         /// bool to indicate if Shutdown has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ShutdownSpecified
         {
             get {
             if(ShutdownField!=null)
                 return ShutdownField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationShutdown> ShutdownField; 

        /// <summary>
        /// A comment about a kind of operation. The time of the operation can be specified.
        /// </summary>
		[Description("A comment about a kind of operation. The time of the operation can be specified.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductionOperationOperationalComment")]
		[XmlElement("OperationalComment")]
        public List<ProductionOperationOperationalComment> OperationalComment {
            get {
                return OperationalCommentField;
            } 
            set {
                OperationalCommentField = value;
                NotifyPropertyChanged("OperationalComment");
            }
        }

         /// <summary>
         /// bool to indicate if OperationalComment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OperationalCommentSpecified
         {
             get {
             if(OperationalCommentField!=null)
                 return OperationalCommentField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationOperationalComment> OperationalCommentField; 

        /// <summary>
        /// Infomation about an alarm.
        /// </summary>
		[Description("Infomation about an alarm.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductionOperationAlarm")]
		[XmlElement("Alarm")]
        public List<ProductionOperationAlarm> Alarm {
            get {
                return AlarmField;
            } 
            set {
                AlarmField = value;
                NotifyPropertyChanged("Alarm");
            }
        }

         /// <summary>
         /// bool to indicate if Alarm has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AlarmSpecified
         {
             get {
             if(AlarmField!=null)
                 return AlarmField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationAlarm> AlarmField; 

        /// <summary>
        /// Infomation about a lost production.
        /// </summary>
		[Description("Infomation about a lost production.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductionOperationLostProduction")]
		[XmlElement("LostProduction")]
        public ProductionOperationLostProduction LostProduction {
            get {
                return LostProductionField;
            } 
            set {
                LostProductionField = value;
                NotifyPropertyChanged("LostProduction");
            }
        }

        private ProductionOperationLostProduction LostProductionField; 

        /// <summary>
        /// Infomation about a lost injection.
        /// </summary>
		[Description("Infomation about a lost injection.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductionOperationLostProduction")]
		[XmlElement("LostInjection")]
        public ProductionOperationLostProduction LostInjection {
            get {
                return LostInjectionField;
            } 
            set {
                LostInjectionField = value;
                NotifyPropertyChanged("LostInjection");
            }
        }

        private ProductionOperationLostProduction LostInjectionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CrewCount xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CrewCount", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the CrewCount xsd type.")]
    public partial class CrewCount : Object, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CrewCount class.
        /// </summary>
        public CrewCount() {}

        /// <summary>
        /// Initializes a new instance of the CrewCount class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CrewCount(long value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The type of crew for which a count is being defined.
        /// </summary>
		[Description("The type of crew for which a count is being defined.")]
        [EnergisticsDataTypeAttribute(DataType = "CrewType")]
        [XmlAttribute("type")]
		
        public CrewType Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        private CrewType typeField; 

        /// <summary>
        /// typeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSpecified {
            get {
                return typeSpecifiedField;
            } 
            set {
                typeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }

        private bool typeSpecifiedField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public long Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private long ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductionOperationInstallationReport xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductionOperationInstallationReport", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductionOperationInstallationReport xsd type.")]
    public partial class ProductionOperationInstallationReport : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Installation property
        /// </summary>
		[Description("The installation represented by this report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("Installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return InstallationField;
            } 
            set {
                InstallationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct InstallationField; 

        /// <summary>
        /// BedsAvailable property
        /// </summary>
		[Description("Total count of beds available on the installation.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("BedsAvailable", DataType="nonNegativeInteger")]
        public string BedsAvailable {
            get {
                return BedsAvailableField;
            } 
            set {
                BedsAvailableField = value;
                NotifyPropertyChanged("BedsAvailable");
            }
        }

        private string BedsAvailableField; 

        /// <summary>
        /// Work property
        /// </summary>
		[Description("The total cumulative amount of time worked during the reporting period. Commonly specified in units of hours. Note that a day unit translates to 24 hours worked.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("Work")]
        public TimeMeasure Work {
            get {
                return WorkField;
            } 
            set {
                WorkField = value;
                NotifyPropertyChanged("Work");
            }
        }

        private TimeMeasure WorkField; 

        /// <summary>
        /// WorkMonthToDate property
        /// </summary>
		[Description("The total cumulative amount of time worked from the beginning of the month to the end of reporting period. Commonly specified in units of hours. Note that a day unit translates to 24 hours worked.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("WorkMonthToDate")]
        public TimeMeasure WorkMonthToDate {
            get {
                return WorkMonthToDateField;
            } 
            set {
                WorkMonthToDateField = value;
                NotifyPropertyChanged("WorkMonthToDate");
            }
        }

        private TimeMeasure WorkMonthToDateField; 

        /// <summary>
        /// WorkYearToDate property
        /// </summary>
		[Description("The total cumulative amount of time worked from the beginning of the year to the end of reporting period. Commonly specified in units of hours. Note that a day unit translates to 24 hours worked.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("WorkYearToDate")]
        public TimeMeasure WorkYearToDate {
            get {
                return WorkYearToDateField;
            } 
            set {
                WorkYearToDateField = value;
                NotifyPropertyChanged("WorkYearToDate");
            }
        }

        private TimeMeasure WorkYearToDateField; 

        /// <summary>
        /// CrewCount property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CrewCount")]
		[XmlElement("CrewCount")]
        public List<CrewCount> CrewCount {
            get {
                return CrewCountField;
            } 
            set {
                CrewCountField = value;
                NotifyPropertyChanged("CrewCount");
            }
        }

         /// <summary>
         /// bool to indicate if CrewCount has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CrewCountSpecified
         {
             get {
             if(CrewCountField!=null)
                 return CrewCountField.Count>0?true:false;
             else return false;
             }
         }
        private List<CrewCount> CrewCountField; 

        /// <summary>
        /// Production activities.
        /// </summary>
		[Description("Production activities.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductionOperationActivity")]
		[XmlElement("ProductionActivity")]
        public ProductionOperationActivity ProductionActivity {
            get {
                return ProductionActivityField;
            } 
            set {
                ProductionActivityField = value;
                NotifyPropertyChanged("ProductionActivity");
            }
        }

        private ProductionOperationActivity ProductionActivityField; 

        /// <summary>
        /// Health, Safety and Environmenal information.
        /// </summary>
		[Description("Health, Safety and Environmenal information.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductionOperationHSE")]
		[XmlElement("OperationalHSE")]
        public List<ProductionOperationHSE> OperationalHSE {
            get {
                return OperationalHSEField;
            } 
            set {
                OperationalHSEField = value;
                NotifyPropertyChanged("OperationalHSE");
            }
        }

         /// <summary>
         /// bool to indicate if OperationalHSE has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OperationalHSESpecified
         {
             get {
             if(OperationalHSEField!=null)
                 return OperationalHSEField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationHSE> OperationalHSEField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WftTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WftTest", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WftTest xsd type.")]
    public partial class WftTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Describes whether the test is associated with a pressure buildup or a drawdown. See enum WftTestKind.
        /// </summary>
		[Required]
        [Description("Describes whether the test is associated with a pressure buildup or a drawdown. See enum WftTestKind.")]
        [EnergisticsDataTypeAttribute(DataType = "WftTestKind")]
		[XmlElement("TestKind")]
        public WftTestKind? TestKind {
            get {
                return TestKindField;
            } 
            set {
                TestKindField = value;
                 this.TestKindSpecified = true;
                NotifyPropertyChanged("TestKind");
            }
        }

        
        private bool TestKindSpecifiedField = false;
        
        /// <summary>
        /// TestKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TestKindSpecified {
            get {
                return TestKindSpecifiedField;
            } 
            set {
                TestKindSpecifiedField = value;
                NotifyPropertyChanged("TestKindSpecified");
            }
        }
        
        private WftTestKind? TestKindField; 

        /// <summary>
        /// The date and time when the data collection started for this test.
        /// </summary>
		[Description("The date and time when the data collection started for this test.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimStart")]
        public DateTime? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? DTimStartField; 

        /// <summary>
        /// DTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DTimStartSpecifiedField;
            } 
            set {
                DTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool DTimStartSpecifiedField; 

        /// <summary>
        /// The date and time when the data collection ended for this test.
        /// </summary>
		[Description("The date and time when the data collection ended for this test.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? DTimEndField; 

        /// <summary>
        /// DTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DTimEndSpecifiedField;
            } 
            set {
                DTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool DTimEndSpecifiedField; 

        /// <summary>
        /// A result of formation tester analysis that applies to this test.
        /// </summary>
		[Description("A result of formation tester analysis that applies to this test.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WftTestResult")]
		[XmlElement("Result")]
        public List<WftTestResult> Result {
            get {
                return ResultField;
            } 
            set {
                ResultField = value;
                NotifyPropertyChanged("Result");
            }
        }

         /// <summary>
         /// bool to indicate if Result has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ResultSpecified
         {
             get {
             if(ResultField!=null)
                 return ResultField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftTestResult> ResultField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WftTestResult xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WftTestResult", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WftTestResult xsd type.")]
    public partial class WftTestResult : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The kind of result represents a combination of test kind and analysis method applied. See enum WftTestKindResult. 
        /// </summary>
		[Required]
        [Description("The kind of result represents a combination of test kind and analysis method applied. See enum WftTestKindResult.")]
        [EnergisticsDataTypeAttribute(DataType = "WftTestResultKind")]
		[XmlElement("Kind")]
        public WftTestResultKind? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        
        private bool KindSpecifiedField = false;
        
        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }
        
        private WftTestResultKind? KindField; 

        /// <summary>
        /// The name of a proprietary, method which generally represents a specialization of a result kind.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of a proprietary, method which generally represents a specialization of a result kind.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Method")]
        public string Method {
            get {
                return MethodField;
            } 
            set {
                MethodField = value;
                NotifyPropertyChanged("Method");
            }
        }

        private string MethodField; 

        /// <summary>
        /// The top of the interval to which this result applies.
        /// </summary>
		[Required]
        [Description("The top of the interval to which this result applies.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return MdTopField;
            } 
            set {
                MdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord MdTopField; 

        /// <summary>
        /// The bottom of the interval to which this result applies.
        /// </summary>
		[Required]
        [Description("The bottom of the interval to which this result applies.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return MdBottomField;
            } 
            set {
                MdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord MdBottomField; 

        /// <summary>
        /// A reference to the formation tester data used to derive this result.
        /// </summary>
		[Description("A reference to the formation tester data used to derive this result.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WftTestData")]
		[XmlElement("TestData")]
        public List<WftTestData> TestData {
            get {
                return TestDataField;
            } 
            set {
                TestDataField = value;
                NotifyPropertyChanged("TestData");
            }
        }

         /// <summary>
         /// bool to indicate if TestData has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TestDataSpecified
         {
             get {
             if(TestDataField!=null)
                 return TestDataField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftTestData> TestDataField; 

        /// <summary>
        /// A reference to an outputParameter of another result which was used as an input to this result. For a test result, the other result will be in the same test (i.e., ../result). For a station result, the other result will be in the same station (i.e., ../result) or will be a test result in the same station (../test/result) or will be an sampleAcquisition in the same station (i.e., ../sampleAcquisition/result). For a wftRun result, the other result will be in the same wftRun (i.e., ../result) or will be a result in a station (i.e., ../station/result) or will be a result in a station's test (i.e., ../station/test/result) or will be a result in a station's sampleAcquisition (i.e., ../station/sampleAcquisition/result). The "../result" notation means: starting in the parent node, traverse down to the appropriate child result using the provided pointers.
        /// </summary>
		[Description("A reference to an outputParameter of another result which was used as an input to this result. For a test result, the other result will be in the same test (i.e., ../result). For a station result, the other result will be in the same station (i.e., ../result) or  will be a test result in the same station (../test/result) or  will be an sampleAcquisition in the same station (i.e., ../sampleAcquisition/result). For a wftRun result, the other result will be in the same wftRun (i.e., ../result) or will be a result in a station (i.e., ../station/result) or will be a result in a station's test (i.e., ../station/test/result) or  will be a result in a station's sampleAcquisition (i.e., ../station/sampleAcquisition/result). The \"../result\" notation means: starting in the parent node, traverse down to the  appropriate child result using the provided pointers.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WftResultReference")]
		[XmlElement("InputResultReference")]
        public List<WftResultReference> InputResultReference {
            get {
                return InputResultReferenceField;
            } 
            set {
                InputResultReferenceField = value;
                NotifyPropertyChanged("InputResultReference");
            }
        }

         /// <summary>
         /// bool to indicate if InputResultReference has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InputResultReferenceSpecified
         {
             get {
             if(InputResultReferenceField!=null)
                 return InputResultReferenceField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftResultReference> InputResultReferenceField; 

        /// <summary>
        /// An input parameter to the analysis method.
        /// </summary>
		[Description("An input parameter to the analysis method.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WftInOutParameter")]
		[XmlElement("InputParameter")]
        public List<WftInOutParameter> InputParameter {
            get {
                return InputParameterField;
            } 
            set {
                InputParameterField = value;
                NotifyPropertyChanged("InputParameter");
            }
        }

         /// <summary>
         /// bool to indicate if InputParameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InputParameterSpecified
         {
             get {
             if(InputParameterField!=null)
                 return InputParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftInOutParameter> InputParameterField; 

        /// <summary>
        /// An output (result) parameter from the analysis of the test. The aggregate of parameters might represent something like the simulated response of the test, to compare with actual.
        /// </summary>
		[Description("An output (result) parameter from the analysis of the test. The aggregate of parameters might represent something like the simulated response  of the test, to compare with actual.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WftInOutParameter")]
		[XmlElement("OutputParameter")]
        public List<WftInOutParameter> OutputParameter {
            get {
                return OutputParameterField;
            } 
            set {
                OutputParameterField = value;
                NotifyPropertyChanged("OutputParameter");
            }
        }

         /// <summary>
         /// bool to indicate if OutputParameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OutputParameterSpecified
         {
             get {
             if(OutputParameterField!=null)
                 return OutputParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftInOutParameter> OutputParameterField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WftTestData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WftTestData", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WftTestData xsd type.")]
    public partial class WftTestData : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The role of the test data. The role applies either to a curve or to a point parameter. See enum WftTestRoleData. 
        /// </summary>
		[Required]
        [Description("The role of the test data. The role applies either to a curve or to a point parameter. See enum WftTestRoleData.")]
        [EnergisticsDataTypeAttribute(DataType = "WftTestDataRole")]
		[XmlElement("Role")]
        public WftTestDataRole? Role {
            get {
                return RoleField;
            } 
            set {
                RoleField = value;
                 this.RoleSpecified = true;
                NotifyPropertyChanged("Role");
            }
        }

        
        private bool RoleSpecifiedField = false;
        
        /// <summary>
        /// RoleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RoleSpecified {
            get {
                return RoleSpecifiedField;
            } 
            set {
                RoleSpecifiedField = value;
                NotifyPropertyChanged("RoleSpecified");
            }
        }
        
        private WftTestDataRole? RoleField; 

        /// <summary>
        /// A reference to a specific interval of a specific curve in a specific log.
        /// </summary>
		[Description("A reference to a specific interval of a specific curve in a specific log.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WftCurveSection")]
		[XmlElement("CurveSection")]
        public List<WftCurveSection> CurveSection {
            get {
                return CurveSectionField;
            } 
            set {
                CurveSectionField = value;
                NotifyPropertyChanged("CurveSection");
            }
        }

         /// <summary>
         /// bool to indicate if CurveSection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CurveSectionSpecified
         {
             get {
             if(CurveSectionField!=null)
                 return CurveSectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftCurveSection> CurveSectionField; 

        /// <summary>
        /// Test parameters used here are either control parameters used to govern the test or are single value parameters measured by the test (and not by subsequent analysis).
        /// </summary>
		[Description("Test parameters used here are either control parameters used to govern  the test or are single value parameters measured by the test (and not by subsequent analysis).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WftInOutParameter")]
		[XmlElement("Parameter")]
        public List<WftInOutParameter> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(ParameterField!=null)
                 return ParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftInOutParameter> ParameterField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WftCurveSection xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WftCurveSection", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WftCurveSection xsd type.")]
    public partial class WftCurveSection : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to a specific channel that contains the curve.
        /// </summary>
		[Required]
        [Description("A pointer to a specific channel that contains the curve.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ChannelReference")]
        public DataObjectReference ChannelReference {
            get {
                return ChannelReferenceField;
            } 
            set {
                ChannelReferenceField = value;
                NotifyPropertyChanged("ChannelReference");
            }
        }

        private DataObjectReference ChannelReferenceField; 

        /// <summary>
        /// The curve mnemonic name.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The curve mnemonic name.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Mnemonic")]
        public string Mnemonic {
            get {
                return MnemonicField;
            } 
            set {
                MnemonicField = value;
                NotifyPropertyChanged("Mnemonic");
            }
        }

        private string MnemonicField; 

        /// <summary>
        /// The date and time of the start of the relevant interval. If not specified then the beginning of the curve is assumed.
        /// </summary>
		[Description("The date and time of the start of the relevant interval. If not specified then the beginning of the curve is assumed.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimStart")]
        public DateTime? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? DTimStartField; 

        /// <summary>
        /// DTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DTimStartSpecifiedField;
            } 
            set {
                DTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool DTimStartSpecifiedField; 

        /// <summary>
        /// The date and time of the end of the relevant interval. If not specified then the end of the curve is assumed.
        /// </summary>
		[Description("The date and time of the end of the relevant interval. If not specified then the end of the curve is assumed.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? DTimEndField; 

        /// <summary>
        /// DTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DTimEndSpecifiedField;
            } 
            set {
                DTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool DTimEndSpecifiedField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WftInOutParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WftInOutParameter", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WftInOutParameter xsd type.")]
    public partial class WftInOutParameter : Object, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the WftInOutParameter class.
        /// </summary>
        public WftInOutParameter() {}

        /// <summary>
        /// Initializes a new instance of the WftInOutParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public WftInOutParameter(MeasureOrQuantity value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// The name of the parameter.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// The value of the parameter. If the value represents a measure, then the UOM attribute and the corresponding measureClass must be specified.
        /// </summary>
		[Required]
        [Description("The value of the parameter. If the value represents a measure, then the UOM attribute and the corresponding measureClass must be specified.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasureOrQuantity")]
		[XmlElement("Value")]
        public MeasureOrQuantity Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private MeasureOrQuantity ValueField; 

        /// <summary>
        /// The kind of the measure. For example, "length". If the value requires a unit of measure, this must be specified.
        /// </summary>
		[Description("The kind of the measure. For example, \"length\". If the value requires a unit of measure, this must be specified.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasureClass")]
		[XmlElement("MeasureClass")]
        public MeasureClass? MeasureClass {
            get {
                return MeasureClassField;
            } 
            set {
                MeasureClassField = value;
                 this.MeasureClassSpecified = true;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private MeasureClass? MeasureClassField; 

        /// <summary>
        /// MeasureClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasureClassSpecified {
            get {
                return MeasureClassSpecifiedField;
            } 
            set {
                MeasureClassSpecifiedField = value;
                NotifyPropertyChanged("MeasureClassSpecified");
            }
        }

        private bool MeasureClassSpecifiedField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MeasureOrQuantity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MeasureOrQuantity", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the MeasureOrQuantity xsd type.")]
    public partial class MeasureOrQuantity : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasureOrQuantity class.
        /// </summary>
        public MeasureOrQuantity() {}

        /// <summary>
        /// Initializes a new instance of the MeasureOrQuantity class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MeasureOrQuantity(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure for the quantity. This value must conform to the values allowed by a measure class. If the value is a measure, then the UOM must be specified.
        /// </summary>
		[StringLength(32)]
        [Description("The unit of measure for the quantity. This value must conform to the values allowed by a measure class. If the value is a measure, then the UOM must be specified.")]
        [EnergisticsDataTypeAttribute(DataType = "UomEnum")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WftResultReference xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WftResultReference", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WftResultReference xsd type.")]
    public partial class WftResultReference : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// StationReference property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the station node containing the specified nodes.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("StationReference")]
        public string StationReference {
            get {
                return StationReferenceField;
            } 
            set {
                StationReferenceField = value;
                NotifyPropertyChanged("StationReference");
            }
        }

        private string StationReferenceField; 

        /// <summary>
        /// Test property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the test node containing the specified nodes.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Test")]
        public string Test {
            get {
                return TestField;
            } 
            set {
                TestField = value;
                NotifyPropertyChanged("Test");
            }
        }

        private string TestField; 

        /// <summary>
        /// ResultReference property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A pointer to the desired result containing the outputParameter.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ResultReference")]
        public string ResultReference {
            get {
                return ResultReferenceField;
            } 
            set {
                ResultReferenceField = value;
                NotifyPropertyChanged("ResultReference");
            }
        }

        private string ResultReferenceField; 

        /// <summary>
        /// OutputParameterReference property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A pointer to the desired outputParameter.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("OutputParameterReference")]
        public string OutputParameterReference {
            get {
                return OutputParameterReferenceField;
            } 
            set {
                OutputParameterReferenceField = value;
                NotifyPropertyChanged("OutputParameterReference");
            }
        }

        private string OutputParameterReferenceField; 

        /// <summary>
        /// SampleAcquisition property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("SampleAcquisition")]
        public DataObjectReference SampleAcquisition {
            get {
                return SampleAcquisitionField;
            } 
            set {
                SampleAcquisitionField = value;
                NotifyPropertyChanged("SampleAcquisition");
            }
        }

        private DataObjectReference SampleAcquisitionField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WftEvent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WftEvent", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WftEvent xsd type.")]
    public partial class WftEvent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The kind of event. See enum WftEventKind.
        /// </summary>
		[Required]
        [Description("The kind of event. See enum WftEventKind.")]
        [EnergisticsDataTypeAttribute(DataType = "WftEventKind")]
		[XmlElement("Kind")]
        public WftEventKind? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        
        private bool KindSpecifiedField = false;
        
        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }
        
        private WftEventKind? KindField; 

        /// <summary>
        /// Date and time of the start of the event.
        /// </summary>
		[Required]
        [Description("Date and time of the start of the event.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTim")]
        public DateTime? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? DTimField; 

        /// <summary>
        /// The time duration of the event.
        /// </summary>
		[Required]
        [Description("The time duration of the event.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("Duration")]
        public TimeMeasure Duration {
            get {
                return DurationField;
            } 
            set {
                DurationField = value;
                NotifyPropertyChanged("Duration");
            }
        }

        private TimeMeasure DurationField; 

        /// <summary>
        /// A comment about the event.
        /// </summary>
		[StringLength(2000)]
        [Description("A comment about the event.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WftSampleAcquisition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WftSampleAcquisition", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WftSampleAcquisition xsd type.")]
    public partial class WftSampleAcquisition : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// SampleContainer property
        /// </summary>
		[Description("A reference to a Fluid Sample Container object (optional) which can be used as part of the PVT functionality of PRODML to track this sample and its container through the lab analysis process.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("SampleContainer")]
        public DataObjectReference SampleContainer {
            get {
                return SampleContainerField;
            } 
            set {
                SampleContainerField = value;
                NotifyPropertyChanged("SampleContainer");
            }
        }

        private DataObjectReference SampleContainerField; 

        /// <summary>
        /// SampleName property
        /// </summary>
		[StringLength(64)]
        [Description("A name assigned to the sample acquired.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SampleName")]
        public string SampleName {
            get {
                return SampleNameField;
            } 
            set {
                SampleNameField = value;
                NotifyPropertyChanged("SampleName");
            }
        }

        private string SampleNameField; 

        /// <summary>
        /// Kind property
        /// </summary>
		[StringLength(64)]
        [Description("The kind of sample acquisition.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Kind")]
        public string Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string KindField; 

        /// <summary>
        /// DTimStart property
        /// </summary>
		[Description("Sampling start time.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimStart")]
        public DateTime? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? DTimStartField; 

        /// <summary>
        /// DTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DTimStartSpecifiedField;
            } 
            set {
                DTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool DTimStartSpecifiedField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[Description("Sampling end time.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? DTimEndField; 

        /// <summary>
        /// DTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DTimEndSpecifiedField;
            } 
            set {
                DTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool DTimEndSpecifiedField; 

        /// <summary>
        /// FieldComment property
        /// </summary>
		[StringLength(2000)]
        [Description("Comments created by the field engineers collecting the sample.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("FieldComment")]
        public string FieldComment {
            get {
                return FieldCommentField;
            } 
            set {
                FieldCommentField = value;
                NotifyPropertyChanged("FieldComment");
            }
        }

        private string FieldCommentField; 

        /// <summary>
        /// InterpretationComment property
        /// </summary>
		[StringLength(2000)]
        [Description("Comments created by the engineers analyzing the sample.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("InterpretationComment")]
        public string InterpretationComment {
            get {
                return InterpretationCommentField;
            } 
            set {
                InterpretationCommentField = value;
                NotifyPropertyChanged("InterpretationComment");
            }
        }

        private string InterpretationCommentField; 

        /// <summary>
        /// SampleCarrierSlotName property
        /// </summary>
		[StringLength(64)]
        [Description("An name for the slot in the sample carrier where the sample was acquired.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SampleCarrierSlotName")]
        public string SampleCarrierSlotName {
            get {
                return SampleCarrierSlotNameField;
            } 
            set {
                SampleCarrierSlotNameField = value;
                NotifyPropertyChanged("SampleCarrierSlotName");
            }
        }

        private string SampleCarrierSlotNameField; 

        /// <summary>
        /// ToolSectionName property
        /// </summary>
		[StringLength(64)]
        [Description("An name for the formation tester tool section that acquired the sample.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ToolSectionName")]
        public string ToolSectionName {
            get {
                return ToolSectionNameField;
            } 
            set {
                ToolSectionNameField = value;
                NotifyPropertyChanged("ToolSectionName");
            }
        }

        private string ToolSectionNameField; 

        /// <summary>
        /// SampleContainerName property
        /// </summary>
		[StringLength(64)]
        [Description("An name for the sample bottle that was used for this acquisition.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SampleContainerName")]
        public string SampleContainerName {
            get {
                return SampleContainerNameField;
            } 
            set {
                SampleContainerNameField = value;
                NotifyPropertyChanged("SampleContainerName");
            }
        }

        private string SampleContainerNameField; 

        /// <summary>
        /// SampleContainerConfiguration property
        /// </summary>
		[StringLength(64)]
        [Description("A description of the kind of sample container used, for example, whether the container is pressurized with nitrogen or not.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SampleContainerConfiguration")]
        public string SampleContainerConfiguration {
            get {
                return SampleContainerConfigurationField;
            } 
            set {
                SampleContainerConfigurationField = value;
                NotifyPropertyChanged("SampleContainerConfiguration");
            }
        }

        private string SampleContainerConfigurationField; 

        /// <summary>
        /// CushionPressure property
        /// </summary>
		[Description("The pressure that was used to charge the sample container.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("CushionPressure")]
        public AbstractPressureValue CushionPressure {
            get {
                return CushionPressureField;
            } 
            set {
                CushionPressureField = value;
                NotifyPropertyChanged("CushionPressure");
            }
        }

        private AbstractPressureValue CushionPressureField; 

        /// <summary>
        /// GrossFluidKind property
        /// </summary>
		[StringLength(64)]
        [Description("The expected kind of the sample, typically oil, water or gas.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("GrossFluidKind")]
        public string GrossFluidKind {
            get {
                return GrossFluidKindField;
            } 
            set {
                GrossFluidKindField = value;
                NotifyPropertyChanged("GrossFluidKind");
            }
        }

        private string GrossFluidKindField; 

        /// <summary>
        /// Test property
        /// </summary>
		[Description("A reference to a test (uid) under the current station.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Test")]
        public List<string> Test {
            get {
                return TestField;
            } 
            set {
                TestField = value;
                NotifyPropertyChanged("Test");
            }
        }

         /// <summary>
         /// bool to indicate if Test has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TestSpecified
         {
             get {
             if(TestField!=null)
                 return TestField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> TestField; 

        /// <summary>
        /// SampleReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("SampleReference")]
        public DataObjectReference SampleReference {
            get {
                return SampleReferenceField;
            } 
            set {
                SampleReferenceField = value;
                NotifyPropertyChanged("SampleReference");
            }
        }

        private DataObjectReference SampleReferenceField; 

        /// <summary>
        /// A reference to the associated data acquired during this acquisition.
        /// </summary>
		[Description("A reference to the associated data acquired during this acquisition.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WftTestData")]
		[XmlElement("TestData")]
        public List<WftTestData> TestData {
            get {
                return TestDataField;
            } 
            set {
                TestDataField = value;
                NotifyPropertyChanged("TestData");
            }
        }

         /// <summary>
         /// bool to indicate if TestData has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TestDataSpecified
         {
             get {
             if(TestDataField!=null)
                 return TestDataField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftTestData> TestDataField; 

        /// <summary>
        /// A result of formation tester analysis that applies to this acquisition.
        /// </summary>
		[Description("A result of formation tester analysis that applies to this acquisition.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WftTestResult")]
		[XmlElement("Result")]
        public List<WftTestResult> Result {
            get {
                return ResultField;
            } 
            set {
                ResultField = value;
                NotifyPropertyChanged("Result");
            }
        }

         /// <summary>
         /// bool to indicate if Result has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ResultSpecified
         {
             get {
             if(ResultField!=null)
                 return ResultField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftTestResult> ResultField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WftStation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WftStation", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WftStation xsd type.")]
    public partial class WftStation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of the station (such as, conventional, observation).
        /// </summary>
		[Required]
        [Description("The type of the station (such as, conventional, observation).")]
        [EnergisticsDataTypeAttribute(DataType = "WftStationKind")]
		[XmlElement("StationKind")]
        public WftStationKind? StationKind {
            get {
                return StationKindField;
            } 
            set {
                StationKindField = value;
                 this.StationKindSpecified = true;
                NotifyPropertyChanged("StationKind");
            }
        }

        
        private bool StationKindSpecifiedField = false;
        
        /// <summary>
        /// StationKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StationKindSpecified {
            get {
                return StationKindSpecifiedField;
            } 
            set {
                StationKindSpecifiedField = value;
                NotifyPropertyChanged("StationKindSpecified");
            }
        }
        
        private WftStationKind? StationKindField; 

        /// <summary>
        /// The date and time when the data collection started for this station.
        /// </summary>
		[Description("The date and time when the data collection started for this station.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimStart")]
        public DateTime? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? DTimStartField; 

        /// <summary>
        /// DTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DTimStartSpecifiedField;
            } 
            set {
                DTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool DTimStartSpecifiedField; 

        /// <summary>
        /// The date and time when the data collection completed for this station.
        /// </summary>
		[Description("The date and time when the data collection completed for this station.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? DTimEndField; 

        /// <summary>
        /// DTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DTimEndSpecifiedField;
            } 
            set {
                DTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool DTimEndSpecifiedField; 

        /// <summary>
        /// The type of flowing interval. See enum WftFlowingIntervalKind.
        /// </summary>
		[Required]
        [Description("The type of flowing interval. See enum WftFlowingIntervalKind.")]
        [EnergisticsDataTypeAttribute(DataType = "WftFlowingIntervalKind")]
		[XmlElement("FlowingIntervalKind")]
        public WftFlowingIntervalKind? FlowingIntervalKind {
            get {
                return FlowingIntervalKindField;
            } 
            set {
                FlowingIntervalKindField = value;
                 this.FlowingIntervalKindSpecified = true;
                NotifyPropertyChanged("FlowingIntervalKind");
            }
        }

        
        private bool FlowingIntervalKindSpecifiedField = false;
        
        /// <summary>
        /// FlowingIntervalKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FlowingIntervalKindSpecified {
            get {
                return FlowingIntervalKindSpecifiedField;
            } 
            set {
                FlowingIntervalKindSpecifiedField = value;
                NotifyPropertyChanged("FlowingIntervalKindSpecified");
            }
        }
        
        private WftFlowingIntervalKind? FlowingIntervalKindField; 

        /// <summary>
        ///  - If flowingIntervalKind = packed interval, then the top depth of the station. - If flowingIntervalKind = probe, then the depth of the probe. 
        /// </summary>
		[Required]
        [Description("- If flowingIntervalKind = packed interval, then the top depth of the station.  - If flowingIntervalKind = probe, then the depth of the probe.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return MdTopField;
            } 
            set {
                MdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord MdTopField; 

        /// <summary>
        ///  - If flowingIntervalKind = packed interval, then the bottom depth of the station. - If flowingIntervalKind = probe, then the depth of the probe.
        /// </summary>
		[Required]
        [Description("- If flowingIntervalKind = packed interval, then the bottom depth of the station. - If flowingIntervalKind = probe, then the depth of the probe.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return MdBottomField;
            } 
            set {
                MdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord MdBottomField; 

        /// <summary>
        /// The diameter of the probe used; only valid if flowingIntervalKind is equal to "probe".
        /// </summary>
		[Description("The diameter of the probe used; only valid if flowingIntervalKind is equal to \"probe\".")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaProbe")]
        public LengthMeasure DiaProbe {
            get {
                return DiaProbeField;
            } 
            set {
                DiaProbeField = value;
                NotifyPropertyChanged("DiaProbe");
            }
        }

        private LengthMeasure DiaProbeField; 

        /// <summary>
        /// A description of the station.
        /// </summary>
		[StringLength(2000)]
        [Description("A description of the station.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// A reference a log containing WFT time-series data at this station (may be superset of all the test log references at this station).
        /// </summary>
		[Description("A reference a log containing WFT time-series data at this station (may be superset of all the test log references at this station).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("LogReference")]
        public List<DataObjectReference> LogReference {
            get {
                return LogReferenceField;
            } 
            set {
                LogReferenceField = value;
                NotifyPropertyChanged("LogReference");
            }
        }

         /// <summary>
         /// bool to indicate if LogReference has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LogReferenceSpecified
         {
             get {
             if(LogReferenceField!=null)
                 return LogReferenceField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> LogReferenceField; 

        /// <summary>
        /// References a station containing the flowing interval in cases where this station is an observation station.
        /// </summary>
		[StringLength(64)]
        [Description("References a station containing the flowing interval in cases where this station is an observation station.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Station")]
        public string Station {
            get {
                return StationField;
            } 
            set {
                StationField = value;
                NotifyPropertyChanged("Station");
            }
        }

        private string StationField; 

        /// <summary>
        /// A result of formation tester analysis that applies to this station.
        /// </summary>
		[Description("A result of formation tester analysis that applies to this station.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WftTestResult")]
		[XmlElement("Result")]
        public List<WftTestResult> Result {
            get {
                return ResultField;
            } 
            set {
                ResultField = value;
                NotifyPropertyChanged("Result");
            }
        }

         /// <summary>
         /// bool to indicate if Result has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ResultSpecified
         {
             get {
             if(ResultField!=null)
                 return ResultField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftTestResult> ResultField; 

        /// <summary>
        /// A formation tester sample that is collected as part of this station.
        /// </summary>
		[Description("A formation tester sample that is collected as part of this station.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WftSampleAcquisition")]
		[XmlElement("SampleAcquisition")]
        public List<WftSampleAcquisition> SampleAcquisition {
            get {
                return SampleAcquisitionField;
            } 
            set {
                SampleAcquisitionField = value;
                NotifyPropertyChanged("SampleAcquisition");
            }
        }

         /// <summary>
         /// bool to indicate if SampleAcquisition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SampleAcquisitionSpecified
         {
             get {
             if(SampleAcquisitionField!=null)
                 return SampleAcquisitionField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftSampleAcquisition> SampleAcquisitionField; 

        /// <summary>
        /// A formation tester event that occurs during this station.
        /// </summary>
		[Description("A formation tester event that occurs during this station.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WftEvent")]
		[XmlElement("Event")]
        public List<WftEvent> Event {
            get {
                return EventField;
            } 
            set {
                EventField = value;
                NotifyPropertyChanged("Event");
            }
        }

         /// <summary>
         /// bool to indicate if Event has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EventSpecified
         {
             get {
             if(EventField!=null)
                 return EventField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftEvent> EventField; 

        /// <summary>
        /// A formation tester test period that is recorded as part of this station.
        /// </summary>
		[Description("A formation tester test period that is recorded as part of this station.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WftTest")]
		[XmlElement("Test")]
        public List<WftTest> Test {
            get {
                return TestField;
            } 
            set {
                TestField = value;
                NotifyPropertyChanged("Test");
            }
        }

         /// <summary>
         /// bool to indicate if Test has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TestSpecified
         {
             get {
             if(TestField!=null)
                 return TestField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftTest> TestField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidSampleAcquisition xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WftSampleAcquisitionJob))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellheadSampleAcquisition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeparatorSampleAcquisition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FacilitySampleAcquisition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DownholeSampleAcquisition))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidSampleAcquisition", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidSampleAcquisition xsd type.")]
    public partial class FluidSampleAcquisition : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date property
        /// </summary>
		[Required]
        [Description("The date when the sample was taken.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("Date")]
        public DateTime? Date {
            get {
                return DateField;
            } 
            set {
                DateField = value;
                NotifyPropertyChanged("Date");
            }
        }

        private DateTime? DateField; 

        /// <summary>
        /// AcquisitionPressure property
        /// </summary>
		[Description("The acquisition pressure when this sample was taken.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("AcquisitionPressure")]
        public AbstractPressureValue AcquisitionPressure {
            get {
                return AcquisitionPressureField;
            } 
            set {
                AcquisitionPressureField = value;
                NotifyPropertyChanged("AcquisitionPressure");
            }
        }

        private AbstractPressureValue AcquisitionPressureField; 

        /// <summary>
        /// AcquisitionTemperature property
        /// </summary>
		[Description("The acquisition temperature when this sample was taken. .")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("AcquisitionTemperature")]
        public ThermodynamicTemperatureMeasure AcquisitionTemperature {
            get {
                return AcquisitionTemperatureField;
            } 
            set {
                AcquisitionTemperatureField = value;
                NotifyPropertyChanged("AcquisitionTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure AcquisitionTemperatureField; 

        /// <summary>
        /// AcquisitionVolume property
        /// </summary>
		[Description("The acquisition volume when this sample was taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("AcquisitionVolume")]
        public VolumeMeasure AcquisitionVolume {
            get {
                return AcquisitionVolumeField;
            } 
            set {
                AcquisitionVolumeField = value;
                NotifyPropertyChanged("AcquisitionVolume");
            }
        }

        private VolumeMeasure AcquisitionVolumeField; 

        /// <summary>
        /// AcquisitionGOR property
        /// </summary>
		[Description("The acquisition gas-oil ratio for this fluid sample acquisition.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("AcquisitionGOR")]
        public VolumePerVolumeMeasure AcquisitionGOR {
            get {
                return AcquisitionGORField;
            } 
            set {
                AcquisitionGORField = value;
                NotifyPropertyChanged("AcquisitionGOR");
            }
        }

        private VolumePerVolumeMeasure AcquisitionGORField; 

        /// <summary>
        /// FormationPressure property
        /// </summary>
		[Description("The formation pressure when this sample was taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("FormationPressure")]
        public PressureMeasure FormationPressure {
            get {
                return FormationPressureField;
            } 
            set {
                FormationPressureField = value;
                NotifyPropertyChanged("FormationPressure");
            }
        }

        private PressureMeasure FormationPressureField; 

        /// <summary>
        /// FormationTemperature property
        /// </summary>
		[Description("The formation temperature when this sample was taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("FormationTemperature")]
        public ThermodynamicTemperatureMeasure FormationTemperature {
            get {
                return FormationTemperatureField;
            } 
            set {
                FormationTemperatureField = value;
                NotifyPropertyChanged("FormationTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure FormationTemperatureField; 

        /// <summary>
        /// ServiceCompany property
        /// </summary>
		[Description("The service company who took the fluid sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BusinessAssociate")]
		[XmlElement("ServiceCompany")]
        public BusinessAssociate ServiceCompany {
            get {
                return ServiceCompanyField;
            } 
            set {
                ServiceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private BusinessAssociate ServiceCompanyField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// FluidSampleContainerReference property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("FluidSampleContainerReference")]
        public DataObjectReference FluidSampleContainerReference {
            get {
                return FluidSampleContainerReferenceField;
            } 
            set {
                FluidSampleContainerReferenceField = value;
                NotifyPropertyChanged("FluidSampleContainerReference");
            }
        }

        private DataObjectReference FluidSampleContainerReferenceField; 

        /// <summary>
        /// FluidSampleReference property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("FluidSampleReference")]
        public DataObjectReference FluidSampleReference {
            get {
                return FluidSampleReferenceField;
            } 
            set {
                FluidSampleReferenceField = value;
                NotifyPropertyChanged("FluidSampleReference");
            }
        }

        private DataObjectReference FluidSampleReferenceField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BusinessAssociate xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BusinessAssociate", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the BusinessAssociate xsd type.")]
    public partial class BusinessAssociate : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Name of the business associate.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Role property
        /// </summary>
		[Description("The role of the business associate within the context. For example, \"driller\" or \"operator\", \"lead agency - CEQA compliance\" \"regulatory contact\", \"safety contact\". A business associate generally has one role but the role may be called different things in different naming systems.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NameStruct")]
		[XmlElement("Role")]
        public List<NameStruct> Role {
            get {
                return RoleField;
            } 
            set {
                RoleField = value;
                NotifyPropertyChanged("Role");
            }
        }

         /// <summary>
         /// bool to indicate if Role has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RoleSpecified
         {
             get {
             if(RoleField!=null)
                 return RoleField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> RoleField; 

        /// <summary>
        /// Alias property
        /// </summary>
		[Description("An alternate name of a business associate. It is generally associated with a naming system. An alias is not necessarily unique within the naming system.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NameStruct")]
		[XmlElement("Alias")]
        public List<NameStruct> Alias {
            get {
                return AliasField;
            } 
            set {
                AliasField = value;
                NotifyPropertyChanged("Alias");
            }
        }

         /// <summary>
         /// bool to indicate if Alias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AliasSpecified
         {
             get {
             if(AliasField!=null)
                 return AliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> AliasField; 

        /// <summary>
        /// Address property
        /// </summary>
		[Description("The business address.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GeneralAddress")]
		[XmlElement("Address")]
        public GeneralAddress Address {
            get {
                return AddressField;
            } 
            set {
                AddressField = value;
                NotifyPropertyChanged("Address");
            }
        }

        private GeneralAddress AddressField; 

        /// <summary>
        /// PhoneNumber property
        /// </summary>
		[Description("Various types of phone numbers may be given. They may be office or home, they may be a number for a cell phone, or for a fax, etc. Attributes of PhoneNumber declare the type of phone number that is being given.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PhoneNumberStruct")]
		[XmlElement("PhoneNumber")]
        public List<PhoneNumberStruct> PhoneNumber {
            get {
                return PhoneNumberField;
            } 
            set {
                PhoneNumberField = value;
                NotifyPropertyChanged("PhoneNumber");
            }
        }

         /// <summary>
         /// bool to indicate if PhoneNumber has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PhoneNumberSpecified
         {
             get {
             if(PhoneNumberField!=null)
                 return PhoneNumberField.Count>0?true:false;
             else return false;
             }
         }
        private List<PhoneNumberStruct> PhoneNumberField; 

        /// <summary>
        /// Email property
        /// </summary>
		[Description("The email address may be home, office, or permanent. More than one may be given.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EmailQualifierStruct")]
		[XmlElement("Email")]
        public List<EmailQualifierStruct> Email {
            get {
                return EmailField;
            } 
            set {
                EmailField = value;
                NotifyPropertyChanged("Email");
            }
        }

         /// <summary>
         /// bool to indicate if Email has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EmailSpecified
         {
             get {
             if(EmailField!=null)
                 return EmailField.Count>0?true:false;
             else return false;
             }
         }
        private List<EmailQualifierStruct> EmailField; 

        /// <summary>
        /// AssociatedWith property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to another business associate that this business associate is associated with. The most common situation is that of an employee being associated with a company. But it may also be, for example, a work group associated with a university.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("AssociatedWith")]
        public string AssociatedWith {
            get {
                return AssociatedWithField;
            } 
            set {
                AssociatedWithField = value;
                NotifyPropertyChanged("AssociatedWith");
            }
        }

        private string AssociatedWithField; 

        /// <summary>
        /// Contact property
        /// </summary>
		[Description("A pointer to a business associate (generally a person) who serves as a contact for this business associate.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Contact")]
        public List<string> Contact {
            get {
                return ContactField;
            } 
            set {
                ContactField = value;
                NotifyPropertyChanged("Contact");
            }
        }

         /// <summary>
         /// bool to indicate if Contact has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContactSpecified
         {
             get {
             if(ContactField!=null)
                 return ContactField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> ContactField; 

        /// <summary>
        /// PersonnelCount property
        /// </summary>
		[Description("The count of personnel in a group.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("PersonnelCount", DataType="nonNegativeInteger")]
        public string PersonnelCount {
            get {
                return PersonnelCountField;
            } 
            set {
                PersonnelCountField = value;
                NotifyPropertyChanged("PersonnelCount");
            }
        }

        private string PersonnelCountField; 

        /// <summary>
        /// PersonName property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PersonName")]
		[XmlElement("PersonName")]
        public PersonName PersonName {
            get {
                return PersonNameField;
            } 
            set {
                PersonNameField = value;
                NotifyPropertyChanged("PersonName");
            }
        }

        private PersonName PersonNameField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the NameStruct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="NameStruct", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the NameStruct xsd type.")]
    public partial class NameStruct : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the NameStruct class.
        /// </summary>
        public NameStruct() {}

        /// <summary>
        /// Initializes a new instance of the NameStruct class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public NameStruct(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The authority for the naming system, e.g., a company. 
        /// </summary>
		[StringLength(64)]
        [Description("The authority for the naming system, e.g., a company.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("authority")]
		
        public string Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private string authorityField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(64)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeneralAddress xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeneralAddress", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the GeneralAddress xsd type.")]
    public partial class GeneralAddress : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name line of an address. If missing, use the name of the business associate.
        /// </summary>
		[StringLength(64)]
        [Description("The name line of an address. If missing, use the name of the business associate.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// A generic term for the middle lines of an address. They may be a street address, PO box, suite number, or any lines that come between the "name" and "city" lines. This may be repeated for up to four, ordered lines.
        /// </summary>
		[Required]
        [Description("A generic term for the middle lines of an address. They may be a street address, PO box, suite number, or any lines that come between the \"name\" and \"city\" lines. This may be repeated for up to four, ordered lines.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Street")]
        public List<string> Street {
            get {
                return StreetField;
            } 
            set {
                StreetField = value;
                NotifyPropertyChanged("Street");
            }
        }

         /// <summary>
         /// bool to indicate if Street has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StreetSpecified
         {
             get {
             if(StreetField!=null)
                 return StreetField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> StreetField; 

        /// <summary>
        /// The city for the business associate's address.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The city for the business associate's address.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("City")]
        public string City {
            get {
                return CityField;
            } 
            set {
                CityField = value;
                NotifyPropertyChanged("City");
            }
        }

        private string CityField; 

        /// <summary>
        /// The country may be included. Although this is optional, it is probably required for most uses.
        /// </summary>
		[StringLength(64)]
        [Description("The country may be included. Although this is optional, it is probably required for most uses.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Country")]
        public string Country {
            get {
                return CountryField;
            } 
            set {
                CountryField = value;
                NotifyPropertyChanged("Country");
            }
        }

        private string CountryField; 

        /// <summary>
        /// The county, if applicable or necessary. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The county, if applicable or necessary.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("County")]
        public string County {
            get {
                return CountyField;
            } 
            set {
                CountyField = value;
                NotifyPropertyChanged("County");
            }
        }

        private string CountyField; 

        /// <summary>
        /// A postal code, if appropriate for the country. In the USA, this would be the five or nine digit zip code.
        /// </summary>
		[StringLength(64)]
        [Description("A postal code, if appropriate for the country. In the USA, this would be the five or nine digit zip code.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PostalCode")]
        public string PostalCode {
            get {
                return PostalCodeField;
            } 
            set {
                PostalCodeField = value;
                NotifyPropertyChanged("PostalCode");
            }
        }

        private string PostalCodeField; 

        /// <summary>
        /// State.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("State.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("State")]
        public string State {
            get {
                return StateField;
            } 
            set {
                StateField = value;
                NotifyPropertyChanged("State");
            }
        }

        private string StateField; 

        /// <summary>
        /// Province.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Province.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Province")]
        public string Province {
            get {
                return ProvinceField;
            } 
            set {
                ProvinceField = value;
                NotifyPropertyChanged("Province");
            }
        }

        private string ProvinceField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

		/// <summary>
        /// The type of address: mailing, physical, or both. See AddressKindEnum. 
        /// </summary>
		[Description("The type of address: mailing, physical, or both. See AddressKindEnum.")]
        [EnergisticsDataTypeAttribute(DataType = "AddressKindEnum")]
        [XmlAttribute("kind")]
		
        public AddressKindEnum Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private AddressKindEnum kindField; 

        /// <summary>
        /// kindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return kindSpecifiedField;
            } 
            set {
                kindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool kindSpecifiedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PhoneNumberStruct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PhoneNumberStruct", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the PhoneNumberStruct xsd type.")]
    public partial class PhoneNumberStruct : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Text property
        /// </summary>
        [RecurringElement]
        [XmlText]
        public List<string> Text {
            get {
                return TextField;
            } 
            set {
                TextField = value;
                NotifyPropertyChanged("Text");
            }
        }

         /// <summary>
         /// bool to indicate if Text has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TextSpecified
         {
             get {
             if(TextField!=null)
                 return TextField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> TextField; 

		/// <summary>
        /// The kind of phone such as voice or fax.
        /// </summary>
		[Required]
        [Description("The kind of phone such as voice or fax.")]
        [EnergisticsDataTypeAttribute(DataType = "PhoneType")]
        [XmlAttribute("type")]
		
        public PhoneType Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private PhoneType typeField; 

		/// <summary>
        /// Indicates whether the number is personal, business or both.
        /// </summary>
		[Description("Indicates whether the number is personal, business or both.")]
        [EnergisticsDataTypeAttribute(DataType = "AddressQualifier")]
        [XmlAttribute("qualifier")]
		
        public AddressQualifier Qualifier {
            get {
                return qualifierField;
            } 
            set {
                qualifierField = value;
                 this.QualifierSpecified = true;
                NotifyPropertyChanged("Qualifier");
            }
        }

        private AddressQualifier qualifierField; 

        /// <summary>
        /// qualifierSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QualifierSpecified {
            get {
                return qualifierSpecifiedField;
            } 
            set {
                qualifierSpecifiedField = value;
                NotifyPropertyChanged("QualifierSpecified");
            }
        }

        private bool qualifierSpecifiedField; 

		/// <summary>
        /// The phone number extension.
        /// </summary>
		[StringLength(64)]
        [Description("The phone number extension.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("extension")]
		
        public string Extension {
            get {
                return extensionField;
            } 
            set {
                extensionField = value;
                NotifyPropertyChanged("Extension");
            }
        }

        private string extensionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EmailQualifierStruct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EmailQualifierStruct", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the EmailQualifierStruct xsd type.")]
    public partial class EmailQualifierStruct : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// qualifier property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "AddressQualifier")]
        [XmlAttribute("qualifier")]
		
        public AddressQualifier Qualifier {
            get {
                return qualifierField;
            } 
            set {
                qualifierField = value;
                 this.QualifierSpecified = true;
                NotifyPropertyChanged("Qualifier");
            }
        }

        private AddressQualifier qualifierField; 

        /// <summary>
        /// qualifierSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QualifierSpecified {
            get {
                return qualifierSpecifiedField;
            } 
            set {
                qualifierSpecifiedField = value;
                NotifyPropertyChanged("QualifierSpecified");
            }
        }

        private bool qualifierSpecifiedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PersonName xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PersonName", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the PersonName xsd type.")]
    public partial class PersonName : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A name prefix. Such as, Dr, Ms, Miss, Mr, etc.
        /// </summary>
		[StringLength(64)]
        [Description("A name prefix. Such as, Dr, Ms, Miss, Mr, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Prefix")]
        public string Prefix {
            get {
                return PrefixField;
            } 
            set {
                PrefixField = value;
                NotifyPropertyChanged("Prefix");
            }
        }

        private string PrefixField; 

        /// <summary>
        /// The person's first name, sometimes called their "given name".
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The person's first name, sometimes called their \"given name\".")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("First")]
        public string First {
            get {
                return FirstField;
            } 
            set {
                FirstField = value;
                NotifyPropertyChanged("First");
            }
        }

        private string FirstField; 

        /// <summary>
        /// The person's middle name or initial.
        /// </summary>
		[StringLength(64)]
        [Description("The person's middle name or initial.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Middle")]
        public string Middle {
            get {
                return MiddleField;
            } 
            set {
                MiddleField = value;
                NotifyPropertyChanged("Middle");
            }
        }

        private string MiddleField; 

        /// <summary>
        /// The person's last or family name.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The person's last or family name.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Last")]
        public string Last {
            get {
                return LastField;
            } 
            set {
                LastField = value;
                NotifyPropertyChanged("Last");
            }
        }

        private string LastField; 

        /// <summary>
        /// A name suffix such as Esq, Phd, etc.
        /// </summary>
		[Description("A name suffix such as Esq, Phd, etc.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Suffix")]
        public List<string> Suffix {
            get {
                return SuffixField;
            } 
            set {
                SuffixField = value;
                NotifyPropertyChanged("Suffix");
            }
        }

         /// <summary>
         /// bool to indicate if Suffix has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SuffixSpecified
         {
             get {
             if(SuffixField!=null)
                 return SuffixField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> SuffixField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WftSampleAcquisitionJob xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WftSampleAcquisitionJob", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WftSampleAcquisitionJob xsd type.")]
    public partial class WftSampleAcquisitionJob : FluidSampleAcquisition, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// WftStation property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Reference to the WFT station within the top-level WFT run data object  where this sample was obtained.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("WftStation")]
        public string WftStation {
            get {
                return WftStationField;
            } 
            set {
                WftStationField = value;
                NotifyPropertyChanged("WftStation");
            }
        }

        private string WftStationField; 

        /// <summary>
        /// WftSampleAcquisition property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Reference to the WFT sample within the WFT station from where this sample was obtained.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("WftSampleAcquisition")]
        public string WftSampleAcquisition {
            get {
                return WftSampleAcquisitionField;
            } 
            set {
                WftSampleAcquisitionField = value;
                NotifyPropertyChanged("WftSampleAcquisition");
            }
        }

        private string WftSampleAcquisitionField; 

        /// <summary>
        /// WftRun property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WftRun")]
        public DataObjectReference WftRun {
            get {
                return WftRunField;
            } 
            set {
                WftRunField = value;
                NotifyPropertyChanged("WftRun");
            }
        }

        private DataObjectReference WftRunField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellheadSampleAcquisition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellheadSampleAcquisition", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WellheadSampleAcquisition xsd type.")]
    public partial class WellheadSampleAcquisition : FluidSampleAcquisition, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// WellReference property
        /// </summary>
		[Description("A reference to the well (WITSML data object) where this sample was taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WellReference")]
        public DataObjectReference WellReference {
            get {
                return WellReferenceField;
            } 
            set {
                WellReferenceField = value;
                NotifyPropertyChanged("WellReference");
            }
        }

        private DataObjectReference WellReferenceField; 

        /// <summary>
        /// WellCompletionReference property
        /// </summary>
		[Description("A reference to the well completion (WITSML data object) where this sample was taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WellCompletionReference")]
        public DataObjectReference WellCompletionReference {
            get {
                return WellCompletionReferenceField;
            } 
            set {
                WellCompletionReferenceField = value;
                NotifyPropertyChanged("WellCompletionReference");
            }
        }

        private DataObjectReference WellCompletionReferenceField; 

        /// <summary>
        /// WellheadPressure property
        /// </summary>
		[Required]
        [Description("The wellhead pressure when the sample was taken.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("WellheadPressure")]
        public AbstractPressureValue WellheadPressure {
            get {
                return WellheadPressureField;
            } 
            set {
                WellheadPressureField = value;
                NotifyPropertyChanged("WellheadPressure");
            }
        }

        private AbstractPressureValue WellheadPressureField; 

        /// <summary>
        /// WellheadTemperature property
        /// </summary>
		[Required]
        [Description("The wellhead temperature when the sample was taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("WellheadTemperature")]
        public ThermodynamicTemperatureMeasure WellheadTemperature {
            get {
                return WellheadTemperatureField;
            } 
            set {
                WellheadTemperatureField = value;
                NotifyPropertyChanged("WellheadTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure WellheadTemperatureField; 

        /// <summary>
        /// SamplingPoint property
        /// </summary>
		[StringLength(64)]
        [Description("A reference to the flow port in the facility where this sample was taken.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SamplingPoint")]
        public string SamplingPoint {
            get {
                return SamplingPointField;
            } 
            set {
                SamplingPointField = value;
                NotifyPropertyChanged("SamplingPoint");
            }
        }

        private string SamplingPointField; 

        /// <summary>
        /// ProductionWellTest property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ProductionWellTest")]
        public DataObjectReference ProductionWellTest {
            get {
                return ProductionWellTestField;
            } 
            set {
                ProductionWellTestField = value;
                NotifyPropertyChanged("ProductionWellTest");
            }
        }

        private DataObjectReference ProductionWellTestField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SeparatorSampleAcquisition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SeparatorSampleAcquisition", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the SeparatorSampleAcquisition xsd type.")]
    public partial class SeparatorSampleAcquisition : FluidSampleAcquisition, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Separator property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A reference to the separator where this sample was taken.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Separator")]
        public string Separator {
            get {
                return SeparatorField;
            } 
            set {
                SeparatorField = value;
                NotifyPropertyChanged("Separator");
            }
        }

        private string SeparatorField; 

        /// <summary>
        /// WellCompletionReference property
        /// </summary>
		[Description("A reference to a well completion (WITSML data object) where this sample was taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WellCompletionReference")]
        public DataObjectReference WellCompletionReference {
            get {
                return WellCompletionReferenceField;
            } 
            set {
                WellCompletionReferenceField = value;
                NotifyPropertyChanged("WellCompletionReference");
            }
        }

        private DataObjectReference WellCompletionReferenceField; 

        /// <summary>
        /// SeparatorPressure property
        /// </summary>
		[Required]
        [Description("The separator pressure when this sample was taken.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("SeparatorPressure")]
        public AbstractPressureValue SeparatorPressure {
            get {
                return SeparatorPressureField;
            } 
            set {
                SeparatorPressureField = value;
                NotifyPropertyChanged("SeparatorPressure");
            }
        }

        private AbstractPressureValue SeparatorPressureField; 

        /// <summary>
        /// SeparatorTemperature property
        /// </summary>
		[Required]
        [Description("The separator temperature when this sample was taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("SeparatorTemperature")]
        public ThermodynamicTemperatureMeasure SeparatorTemperature {
            get {
                return SeparatorTemperatureField;
            } 
            set {
                SeparatorTemperatureField = value;
                NotifyPropertyChanged("SeparatorTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure SeparatorTemperatureField; 

        /// <summary>
        /// SamplingPoint property
        /// </summary>
		[StringLength(64)]
        [Description("A reference to the flow port in the facility where this sample was taken.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SamplingPoint")]
        public string SamplingPoint {
            get {
                return SamplingPointField;
            } 
            set {
                SamplingPointField = value;
                NotifyPropertyChanged("SamplingPoint");
            }
        }

        private string SamplingPointField; 

        /// <summary>
        /// CorrectedOilRate property
        /// </summary>
		[Description("The corrected oil rate for this separator sample acquisition.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("CorrectedOilRate")]
        public VolumePerTimeMeasure CorrectedOilRate {
            get {
                return CorrectedOilRateField;
            } 
            set {
                CorrectedOilRateField = value;
                NotifyPropertyChanged("CorrectedOilRate");
            }
        }

        private VolumePerTimeMeasure CorrectedOilRateField; 

        /// <summary>
        /// CorrectedGasRate property
        /// </summary>
		[Description("The corrected gas rate for this separator sample acquisition.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("CorrectedGasRate")]
        public VolumePerTimeMeasure CorrectedGasRate {
            get {
                return CorrectedGasRateField;
            } 
            set {
                CorrectedGasRateField = value;
                NotifyPropertyChanged("CorrectedGasRate");
            }
        }

        private VolumePerTimeMeasure CorrectedGasRateField; 

        /// <summary>
        /// CorrectedWaterRate property
        /// </summary>
		[Description("The corrected water rate for this separator sample acquisition.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("CorrectedWaterRate")]
        public VolumePerTimeMeasure CorrectedWaterRate {
            get {
                return CorrectedWaterRateField;
            } 
            set {
                CorrectedWaterRateField = value;
                NotifyPropertyChanged("CorrectedWaterRate");
            }
        }

        private VolumePerTimeMeasure CorrectedWaterRateField; 

        /// <summary>
        /// MeasuredOilRate property
        /// </summary>
		[Description("The measured oil rate for this separator sample acquisition.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("MeasuredOilRate")]
        public VolumePerTimeMeasure MeasuredOilRate {
            get {
                return MeasuredOilRateField;
            } 
            set {
                MeasuredOilRateField = value;
                NotifyPropertyChanged("MeasuredOilRate");
            }
        }

        private VolumePerTimeMeasure MeasuredOilRateField; 

        /// <summary>
        /// MeasuredGasRate property
        /// </summary>
		[Description("The measured gas rate for this separator sample acquisition.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("MeasuredGasRate")]
        public VolumePerTimeMeasure MeasuredGasRate {
            get {
                return MeasuredGasRateField;
            } 
            set {
                MeasuredGasRateField = value;
                NotifyPropertyChanged("MeasuredGasRate");
            }
        }

        private VolumePerTimeMeasure MeasuredGasRateField; 

        /// <summary>
        /// MeasuredWaterRate property
        /// </summary>
		[Description("The measured water rate for this separator sample acquisition.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("MeasuredWaterRate")]
        public VolumePerTimeMeasure MeasuredWaterRate {
            get {
                return MeasuredWaterRateField;
            } 
            set {
                MeasuredWaterRateField = value;
                NotifyPropertyChanged("MeasuredWaterRate");
            }
        }

        private VolumePerTimeMeasure MeasuredWaterRateField; 

        /// <summary>
        /// ProductionWellTest property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ProductionWellTest")]
        public DataObjectReference ProductionWellTest {
            get {
                return ProductionWellTestField;
            } 
            set {
                ProductionWellTestField = value;
                NotifyPropertyChanged("ProductionWellTest");
            }
        }

        private DataObjectReference ProductionWellTestField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FacilitySampleAcquisition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FacilitySampleAcquisition", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FacilitySampleAcquisition xsd type.")]
    public partial class FacilitySampleAcquisition : FluidSampleAcquisition, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// SamplingPoint property
        /// </summary>
		[StringLength(64)]
        [Description("A reference to the flow port in the facility where this sample was taken.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SamplingPoint")]
        public string SamplingPoint {
            get {
                return SamplingPointField;
            } 
            set {
                SamplingPointField = value;
                NotifyPropertyChanged("SamplingPoint");
            }
        }

        private string SamplingPointField; 

        /// <summary>
        /// FacilityPressure property
        /// </summary>
		[Required]
        [Description("The facility pressure for this facility sample acquisition.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("FacilityPressure")]
        public AbstractPressureValue FacilityPressure {
            get {
                return FacilityPressureField;
            } 
            set {
                FacilityPressureField = value;
                NotifyPropertyChanged("FacilityPressure");
            }
        }

        private AbstractPressureValue FacilityPressureField; 

        /// <summary>
        /// FacilityTemperature property
        /// </summary>
		[Required]
        [Description("The facility temperature when this sample was taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("FacilityTemperature")]
        public ThermodynamicTemperatureMeasure FacilityTemperature {
            get {
                return FacilityTemperatureField;
            } 
            set {
                FacilityTemperatureField = value;
                NotifyPropertyChanged("FacilityTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure FacilityTemperatureField; 

        /// <summary>
        /// Facility property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Facility")]
        public DataObjectReference Facility {
            get {
                return FacilityField;
            } 
            set {
                FacilityField = value;
                NotifyPropertyChanged("Facility");
            }
        }

        private DataObjectReference FacilityField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DownholeSampleAcquisition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DownholeSampleAcquisition", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DownholeSampleAcquisition xsd type.")]
    public partial class DownholeSampleAcquisition : FluidSampleAcquisition, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TopMD property
        /// </summary>
		[Required]
        [Description("The top MD for the interval where this downhole sample was taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("TopMD")]
        public LengthMeasure TopMD {
            get {
                return TopMDField;
            } 
            set {
                TopMDField = value;
                NotifyPropertyChanged("TopMD");
            }
        }

        private LengthMeasure TopMDField; 

        /// <summary>
        /// BaseMD property
        /// </summary>
		[Description("The base MD for the interval where this downhole sample was taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("BaseMD")]
        public LengthMeasure BaseMD {
            get {
                return BaseMDField;
            } 
            set {
                BaseMDField = value;
                NotifyPropertyChanged("BaseMD");
            }
        }

        private LengthMeasure BaseMDField; 

        /// <summary>
        /// ToolKind property
        /// </summary>
		[StringLength(64)]
        [Description("The kind of tool used to acquire the downhole sample.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ToolKind")]
        public string ToolKind {
            get {
                return ToolKindField;
            } 
            set {
                ToolKindField = value;
                NotifyPropertyChanged("ToolKind");
            }
        }

        private string ToolKindField; 

        /// <summary>
        /// SamplingRun property
        /// </summary>
		[Required]
        [Description("The sampling run number for this downhole sample acquisition.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("SamplingRun")]
        public long? SamplingRun {
            get {
                return SamplingRunField;
            } 
            set {
                SamplingRunField = value;
                NotifyPropertyChanged("SamplingRun");
            }
        }

        private long? SamplingRunField; 

        /// <summary>
        /// WellboreReference property
        /// </summary>
		[Required]
        [Description("A reference to the wellbore (a WITSML data object) where this downhole sample was taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WellboreReference")]
        public DataObjectReference WellboreReference {
            get {
                return WellboreReferenceField;
            } 
            set {
                WellboreReferenceField = value;
                NotifyPropertyChanged("WellboreReference");
            }
        }

        private DataObjectReference WellboreReferenceField; 

        /// <summary>
        /// WellboreCompletionReference property
        /// </summary>
		[Description("A reference to the wellbore completion (WITSML data object) where this sample was taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WellboreCompletionReference")]
        public DataObjectReference WellboreCompletionReference {
            get {
                return WellboreCompletionReferenceField;
            } 
            set {
                WellboreCompletionReferenceField = value;
                NotifyPropertyChanged("WellboreCompletionReference");
            }
        }

        private DataObjectReference WellboreCompletionReferenceField; 

        /// <summary>
        /// ProductionWellTest property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ProductionWellTest")]
        public DataObjectReference ProductionWellTest {
            get {
                return ProductionWellTestField;
            } 
            set {
                ProductionWellTestField = value;
                NotifyPropertyChanged("ProductionWellTest");
            }
        }

        private DataObjectReference ProductionWellTestField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductionWellPeriod xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductionWellPeriod", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductionWellPeriod xsd type.")]
    public partial class ProductionWellPeriod : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// StartTime property
        /// </summary>
		[Required]
        [Description("The start time at a given choke setting.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("StartTime")]
        public DateTime? StartTime {
            get {
                return StartTimeField;
            } 
            set {
                StartTimeField = value;
                NotifyPropertyChanged("StartTime");
            }
        }

        private DateTime? StartTimeField; 

        /// <summary>
        /// Duration property
        /// </summary>
		[Required]
        [Description("The duration at the given choke setting.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("Duration")]
        public TimeMeasure Duration {
            get {
                return DurationField;
            } 
            set {
                DurationField = value;
                NotifyPropertyChanged("Duration");
            }
        }

        private TimeMeasure DurationField; 

        /// <summary>
        /// WellStatus property
        /// </summary>
		[Description("The status of the well.")]
        [EnergisticsDataTypeAttribute(DataType = "WellStatus")]
		[XmlElement("WellStatus")]
        public WellStatus? WellStatus {
            get {
                return WellStatusField;
            } 
            set {
                WellStatusField = value;
                 this.WellStatusSpecified = true;
                NotifyPropertyChanged("WellStatus");
            }
        }

        private WellStatus? WellStatusField; 

        /// <summary>
        /// WellStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool WellStatusSpecified {
            get {
                return WellStatusSpecifiedField;
            } 
            set {
                WellStatusSpecifiedField = value;
                NotifyPropertyChanged("WellStatusSpecified");
            }
        }

        private bool WellStatusSpecifiedField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("A descriptive remark relating to any significant events during this period.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// WellFlowingCondition property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellFlowingCondition")]
		[XmlElement("WellFlowingCondition")]
        public WellFlowingCondition WellFlowingCondition {
            get {
                return WellFlowingConditionField;
            } 
            set {
                WellFlowingConditionField = value;
                NotifyPropertyChanged("WellFlowingCondition");
            }
        }

        private WellFlowingCondition WellFlowingConditionField; 

        /// <summary>
        /// ProductRate property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductRate")]
		[XmlElement("ProductRate")]
        public List<ProductRate> ProductRate {
            get {
                return ProductRateField;
            } 
            set {
                ProductRateField = value;
                NotifyPropertyChanged("ProductRate");
            }
        }

         /// <summary>
         /// bool to indicate if ProductRate has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProductRateSpecified
         {
             get {
             if(ProductRateField!=null)
                 return ProductRateField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductRate> ProductRateField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellFlowingCondition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellFlowingCondition", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WellFlowingCondition xsd type.")]
    public partial class WellFlowingCondition : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The choke diameter.
        /// </summary>
		[Description("The choke diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("ChokeOrificeSize")]
        public LengthMeasure ChokeOrificeSize {
            get {
                return ChokeOrificeSizeField;
            } 
            set {
                ChokeOrificeSizeField = value;
                NotifyPropertyChanged("ChokeOrificeSize");
            }
        }

        private LengthMeasure ChokeOrificeSizeField; 

        /// <summary>
        /// The flowing pressure. 
        /// </summary>
		[Description("The flowing pressure.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("FlowingPressure")]
        public AbstractPressureValue FlowingPressure {
            get {
                return FlowingPressureField;
            } 
            set {
                FlowingPressureField = value;
                NotifyPropertyChanged("FlowingPressure");
            }
        }

        private AbstractPressureValue FlowingPressureField; 

        /// <summary>
        /// The measure depth of the bottomhole gauge. 
        /// </summary>
		[Description("The measure depth of the bottomhole gauge.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("BottomHoleGaugeDepthMD")]
        public LengthMeasure BottomHoleGaugeDepthMD {
            get {
                return BottomHoleGaugeDepthMDField;
            } 
            set {
                BottomHoleGaugeDepthMDField = value;
                NotifyPropertyChanged("BottomHoleGaugeDepthMD");
            }
        }

        private LengthMeasure BottomHoleGaugeDepthMDField; 

        /// <summary>
        /// The pressure at the bottom of the hole.
        /// </summary>
		[Description("The pressure at the bottom of the hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("BottomHoleFlowingPressure")]
        public PressureMeasure BottomHoleFlowingPressure {
            get {
                return BottomHoleFlowingPressureField;
            } 
            set {
                BottomHoleFlowingPressureField = value;
                NotifyPropertyChanged("BottomHoleFlowingPressure");
            }
        }

        private PressureMeasure BottomHoleFlowingPressureField; 

        /// <summary>
        /// The static pressure of the bottom of the hole.
        /// </summary>
		[Description("The static pressure of the bottom of the hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("BottomHoleStaticPressure")]
        public PressureMeasure BottomHoleStaticPressure {
            get {
                return BottomHoleStaticPressureField;
            } 
            set {
                BottomHoleStaticPressureField = value;
                NotifyPropertyChanged("BottomHoleStaticPressure");
            }
        }

        private PressureMeasure BottomHoleStaticPressureField; 

        /// <summary>
        /// The temperature at the bottom of the hole when the well is flowing.
        /// </summary>
		[Description("The temperature at the bottom of the hole when the well is flowing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("BottomHoleFlowingTemperature")]
        public ThermodynamicTemperatureMeasure BottomHoleFlowingTemperature {
            get {
                return BottomHoleFlowingTemperatureField;
            } 
            set {
                BottomHoleFlowingTemperatureField = value;
                NotifyPropertyChanged("BottomHoleFlowingTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure BottomHoleFlowingTemperatureField; 

        /// <summary>
        /// The shut-in pressure of at the bottom of the hole. 
        /// </summary>
		[Description("The shut-in pressure of at the bottom of the hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("BottomHoleShutInPressure")]
        public PressureMeasure BottomHoleShutInPressure {
            get {
                return BottomHoleShutInPressureField;
            } 
            set {
                BottomHoleShutInPressureField = value;
                NotifyPropertyChanged("BottomHoleShutInPressure");
            }
        }

        private PressureMeasure BottomHoleShutInPressureField; 

        /// <summary>
        /// The pressure at the casing head.
        /// </summary>
		[Description("The pressure at the casing head.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("CasingHeadPressure")]
        public AbstractPressureValue CasingHeadPressure {
            get {
                return CasingHeadPressureField;
            } 
            set {
                CasingHeadPressureField = value;
                NotifyPropertyChanged("CasingHeadPressure");
            }
        }

        private AbstractPressureValue CasingHeadPressureField; 

        /// <summary>
        /// The pressure at the tubing head.
        /// </summary>
		[Description("The pressure at the tubing head.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("TubingHeadFlowingPressure")]
        public AbstractPressureValue TubingHeadFlowingPressure {
            get {
                return TubingHeadFlowingPressureField;
            } 
            set {
                TubingHeadFlowingPressureField = value;
                NotifyPropertyChanged("TubingHeadFlowingPressure");
            }
        }

        private AbstractPressureValue TubingHeadFlowingPressureField; 

        /// <summary>
        /// The temperature at the tubing head when the well is flowing. 
        /// </summary>
		[Description("The temperature at the tubing head when the well is flowing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TubingHeadFlowingTemperature")]
        public ThermodynamicTemperatureMeasure TubingHeadFlowingTemperature {
            get {
                return TubingHeadFlowingTemperatureField;
            } 
            set {
                TubingHeadFlowingTemperatureField = value;
                NotifyPropertyChanged("TubingHeadFlowingTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure TubingHeadFlowingTemperatureField; 

        /// <summary>
        /// The pressure at the tubing head when the well is shut in.
        /// </summary>
		[Description("The pressure at the tubing head when the well is shut in.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("TubingHeadShutInPressure")]
        public AbstractPressureValue TubingHeadShutInPressure {
            get {
                return TubingHeadShutInPressureField;
            } 
            set {
                TubingHeadShutInPressureField = value;
                NotifyPropertyChanged("TubingHeadShutInPressure");
            }
        }

        private AbstractPressureValue TubingHeadShutInPressureField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductRate xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductRate", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductRate xsd type.")]
    public partial class ProductRate : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// String UID pointer to the productFluid in the fluidComponentSet. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("String UID pointer to the productFluid in the fluidComponentSet.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ProductFluidReference")]
        public string ProductFluidReference {
            get {
                return ProductFluidReferenceField;
            } 
            set {
                ProductFluidReferenceField = value;
                NotifyPropertyChanged("ProductFluidReference");
            }
        }

        private string ProductFluidReferenceField; 

        /// <summary>
        /// Mass flow rate.
        /// </summary>
		[Description("Mass flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerTimeMeasure")]
		[XmlElement("MassFlowRate")]
        public MassPerTimeMeasure MassFlowRate {
            get {
                return MassFlowRateField;
            } 
            set {
                MassFlowRateField = value;
                NotifyPropertyChanged("MassFlowRate");
            }
        }

        private MassPerTimeMeasure MassFlowRateField; 

        /// <summary>
        /// Volume flow rate.
        /// </summary>
		[Description("Volume flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("VolumeFlowRate")]
        public VolumePerTimeMeasure VolumeFlowRate {
            get {
                return VolumeFlowRateField;
            } 
            set {
                VolumeFlowRateField = value;
                NotifyPropertyChanged("VolumeFlowRate");
            }
        }

        private VolumePerTimeMeasure VolumeFlowRateField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// Information about the product that the product quantity represents. See enum ProductFluidKind (in the ProdmlCommon package). 
        /// </summary>
		[Description("Information about the product that the product quantity represents. See enum ProductFluidKind (in the ProdmlCommon package).")]
        [EnergisticsDataTypeAttribute(DataType = "ProductFluidKindExt")]
		[XmlElement("ProductFluidKind")]
        public ExtensibleEnum<ProductFluidKind>? ProductFluidKind {
            get {
                return ProductFluidKindField;
            } 
            set {
                ProductFluidKindField = value;
                NotifyPropertyChanged("ProductFluidKind");
            }
        }

        private ExtensibleEnum<ProductFluidKind>? ProductFluidKindField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassPerTimeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassPerTimeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MassPerTimeMeasure xsd type.")]
    public partial class MassPerTimeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassPerTimeMeasure class.
        /// </summary>
        public MassPerTimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassPerTimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassPerTimeMeasure(double value, MassPerTimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MassPerTimeUom")]
        [XmlAttribute("uom")]
		
        public MassPerTimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassPerTimeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TestCondition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TestCondition", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the TestCondition xsd type.")]
    public partial class TestCondition : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// StartTime property
        /// </summary>
		[Required]
        [Description("The date and time when the test  began.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("StartTime")]
        public DateTime? StartTime {
            get {
                return StartTimeField;
            } 
            set {
                StartTimeField = value;
                NotifyPropertyChanged("StartTime");
            }
        }

        private DateTime? StartTimeField; 

        /// <summary>
        /// TestDuration property
        /// </summary>
		[Description("The duration of the test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("TestDuration")]
        public TimeMeasure TestDuration {
            get {
                return TestDurationField;
            } 
            set {
                TestDurationField = value;
                NotifyPropertyChanged("TestDuration");
            }
        }

        private TimeMeasure TestDurationField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// ProductRate property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductRate")]
		[XmlElement("ProductRate")]
        public List<ProductRate> ProductRate {
            get {
                return ProductRateField;
            } 
            set {
                ProductRateField = value;
                NotifyPropertyChanged("ProductRate");
            }
        }

         /// <summary>
         /// bool to indicate if ProductRate has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProductRateSpecified
         {
             get {
             if(ProductRateField!=null)
                 return ProductRateField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductRate> ProductRateField; 

        /// <summary>
        /// ServiceFluid property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ServiceFluid")]
		[XmlElement("ServiceFluid")]
        public List<ServiceFluid> ServiceFluid {
            get {
                return ServiceFluidField;
            } 
            set {
                ServiceFluidField = value;
                NotifyPropertyChanged("ServiceFluid");
            }
        }

         /// <summary>
         /// bool to indicate if ServiceFluid has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ServiceFluidSpecified
         {
             get {
             if(ServiceFluidField!=null)
                 return ServiceFluidField.Count>0?true:false;
             else return false;
             }
         }
        private List<ServiceFluid> ServiceFluidField; 

        /// <summary>
        /// Parameters property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellFlowingCondition")]
		[XmlElement("Parameters")]
        public WellFlowingCondition Parameters {
            get {
                return ParametersField;
            } 
            set {
                ParametersField = value;
                NotifyPropertyChanged("Parameters");
            }
        }

        private WellFlowingCondition ParametersField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ServiceFluid xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ServiceFluid", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ServiceFluid xsd type.")]
    public partial class ServiceFluid : AbstractProductQuantity, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Indicates the kind of service fluid. See enum ServiceFluidKind (in ProdmlCommon). 
        /// </summary>
		[Required]
        [Description("Indicates the kind of service fluid. See enum ServiceFluidKind (in ProdmlCommon).")]
        [EnergisticsDataTypeAttribute(DataType = "ServiceFluidKindExt")]
		[XmlElement("ServiceFluidKind")]
        public ExtensibleEnum<ServiceFluidKind>? ServiceFluidKind {
            get {
                return ServiceFluidKindField;
            } 
            set {
                ServiceFluidKindField = value;
                NotifyPropertyChanged("ServiceFluidKind");
            }
        }

        private ExtensibleEnum<ServiceFluidKind>? ServiceFluidKindField; 

		/// <summary>
        /// String ID that points to a service fluid in the FluidComponentSet. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("String ID that points to a service fluid in the FluidComponentSet.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("serviceFluidReference")]
		
        public string ServiceFluidReference {
            get {
                return serviceFluidReferenceField;
            } 
            set {
                serviceFluidReferenceField = value;
                NotifyPropertyChanged("ServiceFluidReference");
            }
        }

        private string serviceFluidReferenceField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractProductQuantity xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceFluid))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductFluid))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractProductQuantity", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractProductQuantity xsd type.")]
    public abstract partial class AbstractProductQuantity : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The amount of product as a volume measure.
        /// </summary>
		[Description("The amount of product as a volume measure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeValue")]
		[XmlElement("Volume")]
        public VolumeValue Volume {
            get {
                return VolumeField;
            } 
            set {
                VolumeField = value;
                NotifyPropertyChanged("Volume");
            }
        }

        private VolumeValue VolumeField; 

        /// <summary>
        /// The amount of product as a mass measure.
        /// </summary>
		[Description("The amount of product as a mass measure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("Mass")]
        public MassMeasure Mass {
            get {
                return MassField;
            } 
            set {
                MassField = value;
                NotifyPropertyChanged("Mass");
            }
        }

        private MassMeasure MassField; 

        /// <summary>
        /// Moles. 
        /// </summary>
		[Description("Moles.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AmountOfSubstanceMeasure")]
		[XmlElement("Moles")]
        public AmountOfSubstanceMeasure Moles {
            get {
                return MolesField;
            } 
            set {
                MolesField = value;
                NotifyPropertyChanged("Moles");
            }
        }

        private AmountOfSubstanceMeasure MolesField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumeValue xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumeValue", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumeValue xsd type.")]
    public partial class VolumeValue : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Volume property
        /// </summary>
		[Required]
        [Description("The volume of the product. If the 'status' attribute is absent and the value is not \"NaN\", the data value can be assumed to be good with no restrictions. A value of \"NaN\" should be interpreted as null and should be not be given unless a status is also specified to explain why it is null.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("Volume")]
        public VolumeMeasure Volume {
            get {
                return VolumeField;
            } 
            set {
                VolumeField = value;
                NotifyPropertyChanged("Volume");
            }
        }

        private VolumeMeasure VolumeField; 

        /// <summary>
        /// MeasurementPressureTemperature property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "AbstractTemperaturePressure")]
		[XmlElement("MeasurementPressureTemperature")]
        public AbstractTemperaturePressure MeasurementPressureTemperature {
            get {
                return MeasurementPressureTemperatureField;
            } 
            set {
                MeasurementPressureTemperatureField = value;
                NotifyPropertyChanged("MeasurementPressureTemperature");
            }
        }

        private AbstractTemperaturePressure MeasurementPressureTemperatureField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractTemperaturePressure xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TemperaturePressure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReferenceTemperaturePressure))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractTemperaturePressure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractTemperaturePressure xsd type.")]
    public abstract partial class AbstractTemperaturePressure : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Item property
        /// </summary>
		
		[XmlElement("Item")]
        public Object Item {
            get {
                return ItemField;
            } 
            set {
                ItemField = value;
                NotifyPropertyChanged("Item");
            }
        }

        private Object ItemField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TemperaturePressure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TemperaturePressure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the TemperaturePressure xsd type.")]
    public partial class TemperaturePressure : AbstractTemperaturePressure, INotifyPropertyChanged
    {

        /// <summary>
        /// Temperature property
        /// </summary>
		[Required]
        [Description("The temperature to which the density has been corrected. If given, then a pressure must also be given. Common standard temperatures are: 0 degC, 15 degC, 60 degF. If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the productVolume root.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("Temperature")]
        public ThermodynamicTemperatureMeasure Temperature {
            get {
                return TemperatureField;
            } 
            set {
                TemperatureField = value;
                NotifyPropertyChanged("Temperature");
            }
        }

        private ThermodynamicTemperatureMeasure TemperatureField; 

        /// <summary>
        /// Pressure property
        /// </summary>
		[Required]
        [Description("The pressure to which the density has been corrected. If given, then a temperature must also be given. Common standard pressures are: 1 atm and 14.696 psi (which are equivalent). If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the productVolume root.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Pressure")]
        public PressureMeasure Pressure {
            get {
                return PressureField;
            } 
            set {
                PressureField = value;
                NotifyPropertyChanged("Pressure");
            }
        }

        private PressureMeasure PressureField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ReferenceTemperaturePressure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ReferenceTemperaturePressure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ReferenceTemperaturePressure xsd type.")]
    public partial class ReferenceTemperaturePressure : AbstractTemperaturePressure, INotifyPropertyChanged
    {

        /// <summary>
        /// Item1 property
        /// </summary>
		
		[XmlElement("ReferenceTempPres")]
        public string Item1 {
            get {
                return Item1Field;
            } 
            set {
                Item1Field = value;
                NotifyPropertyChanged("Item1");
            }
        }

        private string Item1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AmountOfSubstanceMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AmountOfSubstanceMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AmountOfSubstanceMeasure xsd type.")]
    public partial class AmountOfSubstanceMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AmountOfSubstanceMeasure class.
        /// </summary>
        public AmountOfSubstanceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AmountOfSubstanceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AmountOfSubstanceMeasure(double value, AmountOfSubstanceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AmountOfSubstanceUom")]
        [XmlAttribute("uom")]
		
        public AmountOfSubstanceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AmountOfSubstanceUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductFluid xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductFluid", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductFluid xsd type.")]
    public partial class ProductFluid : AbstractProductQuantity, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// ProductFluidKind property
        /// </summary>
		[Required]
        [Description("A simple enumeration to provide information about the product that the production quantity represents.")]
        [EnergisticsDataTypeAttribute(DataType = "ProductFluidKindExt")]
		[XmlElement("ProductFluidKind")]
        public ExtensibleEnum<ProductFluidKind>? ProductFluidKind {
            get {
                return ProductFluidKindField;
            } 
            set {
                ProductFluidKindField = value;
                NotifyPropertyChanged("ProductFluidKind");
            }
        }

        private ExtensibleEnum<ProductFluidKind>? ProductFluidKindField; 

        /// <summary>
        /// GrossEnergyContent property
        /// </summary>
		[Description("The amount of heat released during the combustion of the reported amount of this product. This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EnergyMeasure")]
		[XmlElement("GrossEnergyContent")]
        public EnergyMeasure GrossEnergyContent {
            get {
                return GrossEnergyContentField;
            } 
            set {
                GrossEnergyContentField = value;
                NotifyPropertyChanged("GrossEnergyContent");
            }
        }

        private EnergyMeasure GrossEnergyContentField; 

        /// <summary>
        /// NetEnergyContent property
        /// </summary>
		[Description("The amount of heat released during the combustion of the reported amount of this product. This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EnergyMeasure")]
		[XmlElement("NetEnergyContent")]
        public EnergyMeasure NetEnergyContent {
            get {
                return NetEnergyContentField;
            } 
            set {
                NetEnergyContentField = value;
                NotifyPropertyChanged("NetEnergyContent");
            }
        }

        private EnergyMeasure NetEnergyContentField; 

        /// <summary>
        /// OverallComposition property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "OverallComposition")]
		[XmlElement("OverallComposition")]
        public OverallComposition OverallComposition {
            get {
                return OverallCompositionField;
            } 
            set {
                OverallCompositionField = value;
                NotifyPropertyChanged("OverallComposition");
            }
        }

        private OverallComposition OverallCompositionField; 

		/// <summary>
        /// String UID that points to the productFluid in the fluidComponentSet. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("String UID that points to the productFluid in the fluidComponentSet.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("productFluidReference")]
		
        public string ProductFluidReference {
            get {
                return productFluidReferenceField;
            } 
            set {
                productFluidReferenceField = value;
                NotifyPropertyChanged("ProductFluidReference");
            }
        }

        private string productFluidReferenceField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EnergyMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EnergyMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the EnergyMeasure xsd type.")]
    public partial class EnergyMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EnergyMeasure class.
        /// </summary>
        public EnergyMeasure() {}

        /// <summary>
        /// Initializes a new instance of the EnergyMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public EnergyMeasure(double value, EnergyUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "EnergyUom")]
        [XmlAttribute("uom")]
		
        public EnergyUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private EnergyUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the OverallComposition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="OverallComposition", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the OverallComposition xsd type.")]
    public partial class OverallComposition : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// FluidComponent property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidComponent")]
		[XmlElement("FluidComponent")]
        public List<FluidComponent> FluidComponent {
            get {
                return FluidComponentField;
            } 
            set {
                FluidComponentField = value;
                NotifyPropertyChanged("FluidComponent");
            }
        }

         /// <summary>
         /// bool to indicate if FluidComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidComponentSpecified
         {
             get {
             if(FluidComponentField!=null)
                 return FluidComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidComponent> FluidComponentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidComponent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidComponent", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidComponent xsd type.")]
    public partial class FluidComponent : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The mass fraction for the fluid component.
        /// </summary>
		[Description("The mass fraction for the fluid component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("MassFraction")]
        public MassPerMassMeasure MassFraction {
            get {
                return MassFractionField;
            } 
            set {
                MassFractionField = value;
                NotifyPropertyChanged("MassFraction");
            }
        }

        private MassPerMassMeasure MassFractionField; 

        /// <summary>
        /// The mole fraction for the fluid component.
        /// </summary>
		[Description("The mole fraction for the fluid component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AmountOfSubstancePerAmountOfSubstanceMeasure")]
		[XmlElement("MoleFraction")]
        public AmountOfSubstancePerAmountOfSubstanceMeasure MoleFraction {
            get {
                return MoleFractionField;
            } 
            set {
                MoleFractionField = value;
                NotifyPropertyChanged("MoleFraction");
            }
        }

        private AmountOfSubstancePerAmountOfSubstanceMeasure MoleFractionField; 

        /// <summary>
        /// K value.
        /// </summary>
		[Description("K value.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AmountOfSubstancePerAmountOfSubstanceMeasure")]
		[XmlElement("KValue")]
        public AmountOfSubstancePerAmountOfSubstanceMeasure KValue {
            get {
                return KValueField;
            } 
            set {
                KValueField = value;
                NotifyPropertyChanged("KValue");
            }
        }

        private AmountOfSubstancePerAmountOfSubstanceMeasure KValueField; 

		/// <summary>
        /// Fluid component reference. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Fluid component reference.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("fluidComponentReference")]
		
        public string FluidComponentReference {
            get {
                return fluidComponentReferenceField;
            } 
            set {
                fluidComponentReferenceField = value;
                NotifyPropertyChanged("FluidComponentReference");
            }
        }

        private string fluidComponentReferenceField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AmountOfSubstancePerAmountOfSubstanceMeasure xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RefInjectedGasAdded))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AmountOfSubstancePerAmountOfSubstanceMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AmountOfSubstancePerAmountOfSubstanceMeasure xsd type.")]
    public partial class AmountOfSubstancePerAmountOfSubstanceMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AmountOfSubstancePerAmountOfSubstanceMeasure class.
        /// </summary>
        public AmountOfSubstancePerAmountOfSubstanceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AmountOfSubstancePerAmountOfSubstanceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AmountOfSubstancePerAmountOfSubstanceMeasure(double value, AmountOfSubstancePerAmountOfSubstanceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AmountOfSubstancePerAmountOfSubstanceUom")]
        [XmlAttribute("uom")]
		
        public AmountOfSubstancePerAmountOfSubstanceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AmountOfSubstancePerAmountOfSubstanceUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RefInjectedGasAdded xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RefInjectedGasAdded", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the RefInjectedGasAdded xsd type.")]
    public partial class RefInjectedGasAdded : AmountOfSubstancePerAmountOfSubstanceMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RefInjectedGasAdded class.
        /// </summary>
        public RefInjectedGasAdded() {}

        /// <summary>
        /// Initializes a new instance of the RefInjectedGasAdded class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public RefInjectedGasAdded(double value, AmountOfSubstancePerAmountOfSubstanceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// Reference to the injection gas composition.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Reference to the injection gas composition.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("injectionGasReference")]
		
        public string InjectionGasReference {
            get {
                return injectionGasReferenceField;
            } 
            set {
                injectionGasReferenceField = value;
                NotifyPropertyChanged("InjectionGasReference");
            }
        }

        private string injectionGasReferenceField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DeferredProduction xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DeferredProduction", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DeferredProduction xsd type.")]
    public partial class DeferredProduction : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EstimationMethod property
        /// </summary>
		[Required]
        [Description("The method used to estimate deferred production. See enum EstimationMethod.")]
        [EnergisticsDataTypeAttribute(DataType = "EstimationMethodExt")]
		[XmlElement("EstimationMethod")]
        public ExtensibleEnum<EstimationMethod>? EstimationMethod {
            get {
                return EstimationMethodField;
            } 
            set {
                EstimationMethodField = value;
                NotifyPropertyChanged("EstimationMethod");
            }
        }

        private ExtensibleEnum<EstimationMethod>? EstimationMethodField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// DeferredProductQuantity property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractProductQuantity")]
		[XmlElement("DeferredProductQuantity")]
        public List<AbstractProductQuantity> DeferredProductQuantity {
            get {
                return DeferredProductQuantityField;
            } 
            set {
                DeferredProductQuantityField = value;
                NotifyPropertyChanged("DeferredProductQuantity");
            }
        }

         /// <summary>
         /// bool to indicate if DeferredProductQuantity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DeferredProductQuantitySpecified
         {
             get {
             if(DeferredProductQuantityField!=null)
                 return DeferredProductQuantityField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractProductQuantity> DeferredProductQuantityField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DowntimeReasonCode xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DowntimeReasonCode", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DowntimeReasonCode xsd type.")]
    public partial class DowntimeReasonCode : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[StringLength(64)]
        [Description("Name or explanation of the code specified in the code attribute.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Parent property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DowntimeReasonCode")]
		[XmlElement("Parent")]
        public DowntimeReasonCode Parent {
            get {
                return ParentField;
            } 
            set {
                ParentField = value;
                NotifyPropertyChanged("Parent");
            }
        }

        private DowntimeReasonCode ParentField; 

		/// <summary>
        /// The authority (usually a company) that defines the codes. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The authority (usually a company) that defines the codes.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("authority")]
		
        public string Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private string authorityField; 

		/// <summary>
        /// The code value. 
        /// </summary>
		[StringLength(64)]
        [Description("The code value.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("code")]
		
        public string Code {
            get {
                return codeField;
            } 
            set {
                codeField = value;
                NotifyPropertyChanged("Code");
            }
        }

        private string codeField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DeferredProductionEvent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DeferredProductionEvent", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DeferredProductionEvent xsd type.")]
    public partial class DeferredProductionEvent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// StartDate property
        /// </summary>
		[Description("The start date of the event.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("StartDate")]
        public DateTime? StartDate {
            get {
                return StartDateField;
            } 
            set {
                StartDateField = value;
                 this.StartDateSpecified = true;
                NotifyPropertyChanged("StartDate");
            }
        }

        private DateTime? StartDateField; 

        /// <summary>
        /// StartDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartDateSpecified {
            get {
                return StartDateSpecifiedField;
            } 
            set {
                StartDateSpecifiedField = value;
                NotifyPropertyChanged("StartDateSpecified");
            }
        }

        private bool StartDateSpecifiedField; 

        /// <summary>
        /// EndDate property
        /// </summary>
		[Description("The end date of the event.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("EndDate")]
        public DateTime? EndDate {
            get {
                return EndDateField;
            } 
            set {
                EndDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        private DateTime? EndDateField; 

        /// <summary>
        /// EndDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndDateSpecified {
            get {
                return EndDateSpecifiedField;
            } 
            set {
                EndDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }

        private bool EndDateSpecifiedField; 

        /// <summary>
        /// Duration property
        /// </summary>
		[Required]
        [Description("The duration of the event.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("Duration")]
        public TimeMeasure Duration {
            get {
                return DurationField;
            } 
            set {
                DurationField = value;
                NotifyPropertyChanged("Duration");
            }
        }

        private TimeMeasure DurationField; 

        /// <summary>
        /// DowntimeReasonCode property
        /// </summary>
		[Description("The reason code for the downtime event.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DowntimeReasonCode")]
		[XmlElement("DowntimeReasonCode")]
        public DowntimeReasonCode DowntimeReasonCode {
            get {
                return DowntimeReasonCodeField;
            } 
            set {
                DowntimeReasonCodeField = value;
                NotifyPropertyChanged("DowntimeReasonCode");
            }
        }

        private DowntimeReasonCode DowntimeReasonCodeField; 

        /// <summary>
        /// DeferredProduction property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DeferredProduction")]
		[XmlElement("DeferredProduction")]
        public List<DeferredProduction> DeferredProduction {
            get {
                return DeferredProductionField;
            } 
            set {
                DeferredProductionField = value;
                NotifyPropertyChanged("DeferredProduction");
            }
        }

         /// <summary>
         /// bool to indicate if DeferredProduction has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DeferredProductionSpecified
         {
             get {
             if(DeferredProductionField!=null)
                 return DeferredProductionField.Count>0?true:false;
             else return false;
             }
         }
        private List<DeferredProduction> DeferredProductionField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Production xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Production", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the Production xsd type.")]
    public partial class Production : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// QuantityMethod property
        /// </summary>
		[Required]
        [Description("The method in which the quantity/volume was determined. See enum QuantityMethod.")]
        [EnergisticsDataTypeAttribute(DataType = "QuantityMethodExt")]
		[XmlElement("QuantityMethod")]
        public ExtensibleEnum<QuantityMethod>? QuantityMethod {
            get {
                return QuantityMethodField;
            } 
            set {
                QuantityMethodField = value;
                NotifyPropertyChanged("QuantityMethod");
            }
        }

        private ExtensibleEnum<QuantityMethod>? QuantityMethodField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// ProductionQuantity property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractProductQuantity")]
		[XmlElement("ProductionQuantity")]
        public List<AbstractProductQuantity> ProductionQuantity {
            get {
                return ProductionQuantityField;
            } 
            set {
                ProductionQuantityField = value;
                NotifyPropertyChanged("ProductionQuantity");
            }
        }

         /// <summary>
         /// bool to indicate if ProductionQuantity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProductionQuantitySpecified
         {
             get {
             if(ProductionQuantityField!=null)
                 return ProductionQuantityField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractProductQuantity> ProductionQuantityField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractDisposition xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransferDisposition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TerminalLiftingDisposition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductDisposition))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractDisposition", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractDisposition xsd type.")]
    public abstract partial class AbstractDisposition : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Quantity method.
        /// </summary>
		[Required]
        [Description("Quantity method.")]
        [EnergisticsDataTypeAttribute(DataType = "QuantityMethodExt")]
		[XmlElement("QuantityMethod")]
        public ExtensibleEnum<QuantityMethod>? QuantityMethod {
            get {
                return QuantityMethodField;
            } 
            set {
                QuantityMethodField = value;
                NotifyPropertyChanged("QuantityMethod");
            }
        }

        private ExtensibleEnum<QuantityMethod>? QuantityMethodField; 

        /// <summary>
        /// A unique disposition code associated within a given naming system. This may be a code specified by a regulatory agency.
        /// </summary>
		[Description("A unique disposition code associated within a given naming system. This may be a code specified by a regulatory agency.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AuthorityQualifiedName")]
		[XmlElement("ProductDispositionCode")]
        public AuthorityQualifiedName ProductDispositionCode {
            get {
                return ProductDispositionCodeField;
            } 
            set {
                ProductDispositionCodeField = value;
                NotifyPropertyChanged("ProductDispositionCode");
            }
        }

        private AuthorityQualifiedName ProductDispositionCodeField; 

        /// <summary>
        /// A descriptive remark relating to this disposition.
        /// </summary>
		[StringLength(2000)]
        [Description("A descriptive remark relating to this disposition.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// The amount of product to which this disposition applies.
        /// </summary>
		[Description("The amount of product to which this disposition applies.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractProductQuantity")]
		[XmlElement("DispositionQuantity")]
        public List<AbstractProductQuantity> DispositionQuantity {
            get {
                return DispositionQuantityField;
            } 
            set {
                DispositionQuantityField = value;
                NotifyPropertyChanged("DispositionQuantity");
            }
        }

         /// <summary>
         /// bool to indicate if DispositionQuantity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DispositionQuantitySpecified
         {
             get {
             if(DispositionQuantityField!=null)
                 return DispositionQuantityField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractProductQuantity> DispositionQuantityField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AuthorityQualifiedName xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AuthorityQualifiedName", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AuthorityQualifiedName xsd type.")]
    public partial class AuthorityQualifiedName : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AuthorityQualifiedName class.
        /// </summary>
        public AuthorityQualifiedName() {}

        /// <summary>
        /// Initializes a new instance of the AuthorityQualifiedName class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public AuthorityQualifiedName(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// authority property
        /// </summary>
		[Required]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("authority")]
		
        public string Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private string authorityField; 

		/// <summary>
        /// code property
        /// </summary>
		[StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("code")]
		
        public string Code {
            get {
                return codeField;
            } 
            set {
                codeField = value;
                NotifyPropertyChanged("Code");
            }
        }

        private string codeField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TransferDisposition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TransferDisposition", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the TransferDisposition xsd type.")]
    public partial class TransferDisposition : AbstractDisposition, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Transfer property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Transfer")]
		[XmlElement("Transfer")]
        public Transfer Transfer {
            get {
                return TransferField;
            } 
            set {
                TransferField = value;
                NotifyPropertyChanged("Transfer");
            }
        }

        private Transfer TransferField; 


    } //here
    }

    /// <summary>
    /// This class represents the Transfer xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[Description("This class represents the Transfer xsd type.")]
    public partial class Transfer : AbstractSimpleProductVolume, INotifyPropertyChanged
    {

        /// <summary>
        /// TransferKind property
        /// </summary>
		[Required]
        [Description("Specifies the kind of transfer. See enum TransferKind.")]
        [EnergisticsDataTypeAttribute(DataType = "TransferKind")]
		[XmlElement("TransferKind")]
        public TransferKind? TransferKind {
            get {
                return TransferKindField;
            } 
            set {
                TransferKindField = value;
                 this.TransferKindSpecified = true;
                NotifyPropertyChanged("TransferKind");
            }
        }

        
        private bool TransferKindSpecifiedField = false;
        
        /// <summary>
        /// TransferKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TransferKindSpecified {
            get {
                return TransferKindSpecifiedField;
            } 
            set {
                TransferKindSpecifiedField = value;
                NotifyPropertyChanged("TransferKindSpecified");
            }
        }
        
        private TransferKind? TransferKindField; 

        /// <summary>
        /// StartTime property
        /// </summary>
		[Description("The date and time when the transfer began.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("StartTime")]
        public DateTime? StartTime {
            get {
                return StartTimeField;
            } 
            set {
                StartTimeField = value;
                 this.StartTimeSpecified = true;
                NotifyPropertyChanged("StartTime");
            }
        }

        private DateTime? StartTimeField; 

        /// <summary>
        /// StartTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartTimeSpecified {
            get {
                return StartTimeSpecifiedField;
            } 
            set {
                StartTimeSpecifiedField = value;
                NotifyPropertyChanged("StartTimeSpecified");
            }
        }

        private bool StartTimeSpecifiedField; 

        /// <summary>
        /// EndTime property
        /// </summary>
		[Description("Date and time when the transfer ended.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("EndTime")]
        public DateTime? EndTime {
            get {
                return EndTimeField;
            } 
            set {
                EndTimeField = value;
                 this.EndTimeSpecified = true;
                NotifyPropertyChanged("EndTime");
            }
        }

        private DateTime? EndTimeField; 

        /// <summary>
        /// EndTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndTimeSpecified {
            get {
                return EndTimeSpecifiedField;
            } 
            set {
                EndTimeSpecifiedField = value;
                NotifyPropertyChanged("EndTimeSpecified");
            }
        }

        private bool EndTimeSpecifiedField; 

        /// <summary>
        /// ProductTransferQuantity property
        /// </summary>
		[Description("The amount of product transferred.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductFluid")]
		[XmlElement("ProductTransferQuantity")]
        public List<ProductFluid> ProductTransferQuantity {
            get {
                return ProductTransferQuantityField;
            } 
            set {
                ProductTransferQuantityField = value;
                NotifyPropertyChanged("ProductTransferQuantity");
            }
        }

         /// <summary>
         /// bool to indicate if ProductTransferQuantity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProductTransferQuantitySpecified
         {
             get {
             if(ProductTransferQuantityField!=null)
                 return ProductTransferQuantityField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFluid> ProductTransferQuantityField; 

        /// <summary>
        /// DestinationFacilityReference property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("DestinationFacilityReference")]
        public DataObjectReference DestinationFacilityReference {
            get {
                return DestinationFacilityReferenceField;
            } 
            set {
                DestinationFacilityReferenceField = value;
                NotifyPropertyChanged("DestinationFacilityReference");
            }
        }

        private DataObjectReference DestinationFacilityReferenceField; 

        /// <summary>
        /// SourceFacilityReference property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("SourceFacilityReference")]
        public DataObjectReference SourceFacilityReference {
            get {
                return SourceFacilityReferenceField;
            } 
            set {
                SourceFacilityReferenceField = value;
                NotifyPropertyChanged("SourceFacilityReference");
            }
        }

        private DataObjectReference SourceFacilityReferenceField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractSimpleProductVolume xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellProductionParameters))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductionWellTest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Transfer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TerminalLifting))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AssetProductionVolumes))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractSimpleProductVolume", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the AbstractSimpleProductVolume xsd type.")]
    public abstract partial class AbstractSimpleProductVolume : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// StandardConditions property
        /// </summary>
		[Required]
        [Description("The condition-dependant measurements (e.g.,  volumes) in this transfer are taken to be measured at standard conditions.  The element is mandatory in all the SPVR objects.  A choice is available – either to supply the temperature and pressure for all the volumes that follow, or to choose from a list of standards organizations’ reference conditions. Note that the enum list of standard conditions is extensible, allowing for local measurement condition standards to be used")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractTemperaturePressure")]
		[XmlElement("StandardConditions")]
        public AbstractTemperaturePressure StandardConditions {
            get {
                return StandardConditionsField;
            } 
            set {
                StandardConditionsField = value;
                NotifyPropertyChanged("StandardConditions");
            }
        }

        private AbstractTemperaturePressure StandardConditionsField; 

        /// <summary>
        /// ApprovalDate property
        /// </summary>
		[Description("The date on which the report was approved.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("ApprovalDate", DataType="date")]
        public DateTime? ApprovalDate {
            get {
                return ApprovalDateField;
            } 
            set {
                ApprovalDateField = value;
                 this.ApprovalDateSpecified = true;
                NotifyPropertyChanged("ApprovalDate");
            }
        }

        private DateTime? ApprovalDateField; 

        /// <summary>
        /// ApprovalDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ApprovalDateSpecified {
            get {
                return ApprovalDateSpecifiedField;
            } 
            set {
                ApprovalDateSpecifiedField = value;
                NotifyPropertyChanged("ApprovalDateSpecified");
            }
        }

        private bool ApprovalDateSpecifiedField; 

        /// <summary>
        /// GeographicContext property
        /// </summary>
		[Description("Geographic context for reporting entities.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GeographicContext")]
		[XmlElement("GeographicContext")]
        public GeographicContext GeographicContext {
            get {
                return GeographicContextField;
            } 
            set {
                GeographicContextField = value;
                NotifyPropertyChanged("GeographicContext");
            }
        }

        private GeographicContext GeographicContextField; 

        /// <summary>
        /// FluidComponentCatalog property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidComponentCatalog")]
		[XmlElement("FluidComponentCatalog")]
        public FluidComponentCatalog FluidComponentCatalog {
            get {
                return FluidComponentCatalogField;
            } 
            set {
                FluidComponentCatalogField = value;
                NotifyPropertyChanged("FluidComponentCatalog");
            }
        }

        private FluidComponentCatalog FluidComponentCatalogField; 

        /// <summary>
        /// Operator property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BusinessAssociate")]
		[XmlElement("Operator")]
        public BusinessAssociate Operator {
            get {
                return OperatorField;
            } 
            set {
                OperatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private BusinessAssociate OperatorField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeographicContext xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeographicContext", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the GeographicContext xsd type.")]
    public partial class GeographicContext : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Country property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the country.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Country")]
        public string Country {
            get {
                return CountryField;
            } 
            set {
                CountryField = value;
                NotifyPropertyChanged("Country");
            }
        }

        private string CountryField; 

        /// <summary>
        /// State property
        /// </summary>
		[StringLength(64)]
        [Description("The state or province within the country.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("State")]
        public string State {
            get {
                return StateField;
            } 
            set {
                StateField = value;
                NotifyPropertyChanged("State");
            }
        }

        private string StateField; 

        /// <summary>
        /// County property
        /// </summary>
		[StringLength(64)]
        [Description("The name of county.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("County")]
        public string County {
            get {
                return CountyField;
            } 
            set {
                CountyField = value;
                NotifyPropertyChanged("County");
            }
        }

        private string CountyField; 

        /// <summary>
        /// Field property
        /// </summary>
		[Description("The name of the field within whose context the report exists.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "NameStruct")]
		[XmlElement("Field")]
        public NameStruct Field {
            get {
                return FieldField;
            } 
            set {
                FieldField = value;
                NotifyPropertyChanged("Field");
            }
        }

        private NameStruct FieldField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("A general comment that further explains the offshore location.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// OffshoreLocation property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "OffshoreLocation")]
		[XmlElement("OffshoreLocation")]
        public OffshoreLocation OffshoreLocation {
            get {
                return OffshoreLocationField;
            } 
            set {
                OffshoreLocationField = value;
                NotifyPropertyChanged("OffshoreLocation");
            }
        }

        private OffshoreLocation OffshoreLocationField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the OffshoreLocation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="OffshoreLocation", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the OffshoreLocation xsd type.")]
    public partial class OffshoreLocation : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AreaName property
        /// </summary>
		[StringLength(64)]
        [Description("A general meaning of area. It may be as general as 'UK North Sea' or 'Viosca Knoll'. The user community must agree on the meaning of this element.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("AreaName")]
        public string AreaName {
            get {
                return AreaNameField;
            } 
            set {
                AreaNameField = value;
                NotifyPropertyChanged("AreaName");
            }
        }

        private string AreaNameField; 

        /// <summary>
        /// BlockID property
        /// </summary>
		[Required]
        [Description("A block ID that can more tightly locate the object. The BlockID should be an identifying name or code. The user community for an area must agree on the exact meaning of this element. An aggregate of increasingly specialized block IDs are sometimes necessary to define the location.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("BlockID")]
        public List<string> BlockID {
            get {
                return BlockIDField;
            } 
            set {
                BlockIDField = value;
                NotifyPropertyChanged("BlockID");
            }
        }

         /// <summary>
         /// bool to indicate if BlockID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BlockIDSpecified
         {
             get {
             if(BlockIDField!=null)
                 return BlockIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> BlockIDField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("An general comment that further explains the offshore location.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// NorthSeaOffshore property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "NorthSeaOffshore")]
		[XmlElement("NorthSeaOffshore")]
        public NorthSeaOffshore NorthSeaOffshore {
            get {
                return NorthSeaOffshoreField;
            } 
            set {
                NorthSeaOffshoreField = value;
                NotifyPropertyChanged("NorthSeaOffshore");
            }
        }

        private NorthSeaOffshore NorthSeaOffshoreField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the NorthSeaOffshore xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="NorthSeaOffshore", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the NorthSeaOffshore xsd type.")]
    public partial class NorthSeaOffshore : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// An optional, uncontrolled value, which may be used to describe the general area of offshore North Sea in which the point is located.
        /// </summary>
		[StringLength(64)]
        [Description("An optional, uncontrolled value, which may be used to describe the general area of offshore North Sea in which the point is located.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("AreaName")]
        public string AreaName {
            get {
                return AreaNameField;
            } 
            set {
                AreaNameField = value;
                NotifyPropertyChanged("AreaName");
            }
        }

        private string AreaNameField; 

        /// <summary>
        /// The number or letter of the quadrant in the North Sea.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The number or letter of the quadrant in the North Sea.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Quadrant")]
        public string Quadrant {
            get {
                return QuadrantField;
            } 
            set {
                QuadrantField = value;
                NotifyPropertyChanged("Quadrant");
            }
        }

        private string QuadrantField; 

        /// <summary>
        /// A lower case letter assigned if a block is subdivided.
        /// </summary>
		[StringLength(64)]
        [Description("A lower case letter assigned if a block is subdivided.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("BlockSuffix")]
        public string BlockSuffix {
            get {
                return BlockSuffixField;
            } 
            set {
                BlockSuffixField = value;
                NotifyPropertyChanged("BlockSuffix");
            }
        }

        private string BlockSuffixField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidComponentCatalog xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidComponentCatalog", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidComponentCatalog xsd type.")]
    public partial class FluidComponentCatalog : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Stock tank oil. 
        /// </summary>
		[Description("Stock tank oil.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StockTankOil")]
		[XmlElement("StockTankOil")]
        public List<StockTankOil> StockTankOil {
            get {
                return StockTankOilField;
            } 
            set {
                StockTankOilField = value;
                NotifyPropertyChanged("StockTankOil");
            }
        }

         /// <summary>
         /// bool to indicate if StockTankOil has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StockTankOilSpecified
         {
             get {
             if(StockTankOilField!=null)
                 return StockTankOilField.Count>0?true:false;
             else return false;
             }
         }
        private List<StockTankOil> StockTankOilField; 

        /// <summary>
        /// Natural gas.
        /// </summary>
		[Description("Natural gas.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NaturalGas")]
		[XmlElement("NaturalGas")]
        public List<NaturalGas> NaturalGas {
            get {
                return NaturalGasField;
            } 
            set {
                NaturalGasField = value;
                NotifyPropertyChanged("NaturalGas");
            }
        }

         /// <summary>
         /// bool to indicate if NaturalGas has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NaturalGasSpecified
         {
             get {
             if(NaturalGasField!=null)
                 return NaturalGasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NaturalGas> NaturalGasField; 

        /// <summary>
        /// Formation water.
        /// </summary>
		[Description("Formation water.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FormationWater")]
		[XmlElement("FormationWater")]
        public List<FormationWater> FormationWater {
            get {
                return FormationWaterField;
            } 
            set {
                FormationWaterField = value;
                NotifyPropertyChanged("FormationWater");
            }
        }

         /// <summary>
         /// bool to indicate if FormationWater has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FormationWaterSpecified
         {
             get {
             if(FormationWaterField!=null)
                 return FormationWaterField.Count>0?true:false;
             else return false;
             }
         }
        private List<FormationWater> FormationWaterField; 

        /// <summary>
        /// Pure fluid component.
        /// </summary>
		[Description("Pure fluid component.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PureFluidComponent")]
		[XmlElement("PureFluidComponent")]
        public List<PureFluidComponent> PureFluidComponent {
            get {
                return PureFluidComponentField;
            } 
            set {
                PureFluidComponentField = value;
                NotifyPropertyChanged("PureFluidComponent");
            }
        }

         /// <summary>
         /// bool to indicate if PureFluidComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PureFluidComponentSpecified
         {
             get {
             if(PureFluidComponentField!=null)
                 return PureFluidComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<PureFluidComponent> PureFluidComponentField; 

        /// <summary>
        /// Pseudo-fluid component.
        /// </summary>
		[Description("Pseudo-fluid component.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PseudoFluidComponent")]
		[XmlElement("PseudoFluidComponent")]
        public List<PseudoFluidComponent> PseudoFluidComponent {
            get {
                return PseudoFluidComponentField;
            } 
            set {
                PseudoFluidComponentField = value;
                NotifyPropertyChanged("PseudoFluidComponent");
            }
        }

         /// <summary>
         /// bool to indicate if PseudoFluidComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PseudoFluidComponentSpecified
         {
             get {
             if(PseudoFluidComponentField!=null)
                 return PseudoFluidComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<PseudoFluidComponent> PseudoFluidComponentField; 

        /// <summary>
        /// Plus-fluid component.
        /// </summary>
		[Description("Plus-fluid component.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PlusFluidComponent")]
		[XmlElement("PlusFluidComponent")]
        public List<PlusFluidComponent> PlusFluidComponent {
            get {
                return PlusFluidComponentField;
            } 
            set {
                PlusFluidComponentField = value;
                NotifyPropertyChanged("PlusFluidComponent");
            }
        }

         /// <summary>
         /// bool to indicate if PlusFluidComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PlusFluidComponentSpecified
         {
             get {
             if(PlusFluidComponentField!=null)
                 return PlusFluidComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<PlusFluidComponent> PlusFluidComponentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StockTankOil xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StockTankOil", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the StockTankOil xsd type.")]
    public partial class StockTankOil : AbstractFluidComponent, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// API gravity.
        /// </summary>
		[Description("API gravity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "APIGravityMeasure")]
		[XmlElement("APIGravity")]
        public APIGravityMeasure APIGravity {
            get {
                return APIGravityField;
            } 
            set {
                APIGravityField = value;
                NotifyPropertyChanged("APIGravity");
            }
        }

        private APIGravityMeasure APIGravityField; 

        /// <summary>
        /// Molecular weight. 
        /// </summary>
		[Description("Molecular weight.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("MolecularWeight")]
        public MolecularWeightMeasure MolecularWeight {
            get {
                return MolecularWeightField;
            } 
            set {
                MolecularWeightField = value;
                NotifyPropertyChanged("MolecularWeight");
            }
        }

        private MolecularWeightMeasure MolecularWeightField; 

        /// <summary>
        /// The amount of heat released during the combustion of a specified amount of STO. It is also known as higher heating value (HHV), gross energy, upper heating value, gross calorific value (GCV) or higher calorific value (HCV). This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.
        /// </summary>
		[Description("The amount of heat released during the combustion of a specified amount of STO. It is also known as higher heating value (HHV), gross energy, upper heating value, gross calorific value (GCV) or higher calorific value (HCV). This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EnergyPerMassMeasure")]
		[XmlElement("GrossEnergyContentPerUnitMass")]
        public EnergyPerMassMeasure GrossEnergyContentPerUnitMass {
            get {
                return GrossEnergyContentPerUnitMassField;
            } 
            set {
                GrossEnergyContentPerUnitMassField = value;
                NotifyPropertyChanged("GrossEnergyContentPerUnitMass");
            }
        }

        private EnergyPerMassMeasure GrossEnergyContentPerUnitMassField; 

        /// <summary>
        /// The amount of heat released during the combustion of a specified amount of STO. It is also known as lower heating value (LHV), net energy, lower heating value, net calorific value (NCV) or lower calorific value (LCV). This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.
        /// </summary>
		[Description("The amount of heat released during the combustion of a specified amount of STO. It is also known as lower heating value (LHV), net energy, lower heating value, net calorific value  (NCV) or lower calorific value (LCV). This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EnergyPerMassMeasure")]
		[XmlElement("NetEnergyContentPerUnitMass")]
        public EnergyPerMassMeasure NetEnergyContentPerUnitMass {
            get {
                return NetEnergyContentPerUnitMassField;
            } 
            set {
                NetEnergyContentPerUnitMassField = value;
                NotifyPropertyChanged("NetEnergyContentPerUnitMass");
            }
        }

        private EnergyPerMassMeasure NetEnergyContentPerUnitMassField; 

        /// <summary>
        /// The amount of heat released during the combustion of a specified amount of STO. It is also known as higher heating value (HHV), gross energy, upper heating value, gross calorific value (GCV) or higher calorific value (HCV). This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.
        /// </summary>
		[Description("The amount of heat released during the combustion of a specified amount of STO. It is also known as higher heating value (HHV), gross energy, upper heating value,  gross calorific value (GCV) or higher calorific value (HCV). This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EnergyPerVolumeMeasure")]
		[XmlElement("GrossEnergyContentPerUnitVolume")]
        public EnergyPerVolumeMeasure GrossEnergyContentPerUnitVolume {
            get {
                return GrossEnergyContentPerUnitVolumeField;
            } 
            set {
                GrossEnergyContentPerUnitVolumeField = value;
                NotifyPropertyChanged("GrossEnergyContentPerUnitVolume");
            }
        }

        private EnergyPerVolumeMeasure GrossEnergyContentPerUnitVolumeField; 

        /// <summary>
        /// The amount of heat released during the combustion of a specified amount of STO. It is also known as lower heating value (LHV), net energy, net calorific value (NCV) or lower calorific value (LCV). This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.
        /// </summary>
		[Description("The amount of heat released during the combustion of a specified amount of STO. It is also known as lower heating value  (LHV), net energy, net calorific value (NCV) or lower calorific value (LCV). This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EnergyPerVolumeMeasure")]
		[XmlElement("NetEnergyContentPerUnitVolume")]
        public EnergyPerVolumeMeasure NetEnergyContentPerUnitVolume {
            get {
                return NetEnergyContentPerUnitVolumeField;
            } 
            set {
                NetEnergyContentPerUnitVolumeField = value;
                NotifyPropertyChanged("NetEnergyContentPerUnitVolume");
            }
        }

        private EnergyPerVolumeMeasure NetEnergyContentPerUnitVolumeField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the APIGravityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="APIGravityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the APIGravityMeasure xsd type.")]
    public partial class APIGravityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the APIGravityMeasure class.
        /// </summary>
        public APIGravityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the APIGravityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public APIGravityMeasure(double value, APIGravityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "APIGravityUom")]
        [XmlAttribute("uom")]
		
        public APIGravityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private APIGravityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MolecularWeightMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MolecularWeightMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MolecularWeightMeasure xsd type.")]
    public partial class MolecularWeightMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MolecularWeightMeasure class.
        /// </summary>
        public MolecularWeightMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MolecularWeightMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MolecularWeightMeasure(double value, MolecularWeightUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightUom")]
        [XmlAttribute("uom")]
		
        public MolecularWeightUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MolecularWeightUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EnergyPerMassMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EnergyPerMassMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the EnergyPerMassMeasure xsd type.")]
    public partial class EnergyPerMassMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EnergyPerMassMeasure class.
        /// </summary>
        public EnergyPerMassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the EnergyPerMassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public EnergyPerMassMeasure(double value, EnergyPerMassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "EnergyPerMassUom")]
        [XmlAttribute("uom")]
		
        public EnergyPerMassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private EnergyPerMassUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EnergyPerVolumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EnergyPerVolumeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the EnergyPerVolumeMeasure xsd type.")]
    public partial class EnergyPerVolumeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EnergyPerVolumeMeasure class.
        /// </summary>
        public EnergyPerVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the EnergyPerVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public EnergyPerVolumeMeasure(double value, EnergyPerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "EnergyPerVolumeUom")]
        [XmlAttribute("uom")]
		
        public EnergyPerVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private EnergyPerVolumeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractFluidComponent xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StockTankOil))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PureFluidComponent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PseudoFluidComponent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PlusFluidComponent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NaturalGas))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FormationWater))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractFluidComponent", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractFluidComponent xsd type.")]
    public abstract partial class AbstractFluidComponent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The fluid mass fraction.
        /// </summary>
		[Description("The fluid mass fraction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("MassFraction")]
        public MassPerMassMeasure MassFraction {
            get {
                return MassFractionField;
            } 
            set {
                MassFractionField = value;
                NotifyPropertyChanged("MassFraction");
            }
        }

        private MassPerMassMeasure MassFractionField; 

        /// <summary>
        /// The fluid mole fraction.
        /// </summary>
		[Description("The fluid mole fraction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AmountOfSubstancePerAmountOfSubstanceMeasure")]
		[XmlElement("MoleFraction")]
        public AmountOfSubstancePerAmountOfSubstanceMeasure MoleFraction {
            get {
                return MoleFractionField;
            } 
            set {
                MoleFractionField = value;
                NotifyPropertyChanged("MoleFraction");
            }
        }

        private AmountOfSubstancePerAmountOfSubstanceMeasure MoleFractionField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PureFluidComponent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PureFluidComponent", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the PureFluidComponent xsd type.")]
    public partial class PureFluidComponent : AbstractFluidComponent, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of component.
        /// </summary>
		[Description("The type of component.")]
        [EnergisticsDataTypeAttribute(DataType = "PureComponentEnumExt")]
		[XmlElement("Kind")]
        public ExtensibleEnum<PureComponentEnum>? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private ExtensibleEnum<PureComponentEnum>? KindField; 

        /// <summary>
        /// The molecular weight of the pure component.
        /// </summary>
		[Description("The molecular weight of the pure component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("MolecularWeight")]
        public MolecularWeightMeasure MolecularWeight {
            get {
                return MolecularWeightField;
            } 
            set {
                MolecularWeightField = value;
                NotifyPropertyChanged("MolecularWeight");
            }
        }

        private MolecularWeightMeasure MolecularWeightField; 

        /// <summary>
        /// Yes/no flag indicates if hydrocarbon or not. 
        /// </summary>
		[Description("Yes/no  flag indicates if hydrocarbon or not.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("HydrocarbonFlag")]
        public bool? HydrocarbonFlag {
            get {
                return HydrocarbonFlagField;
            } 
            set {
                HydrocarbonFlagField = value;
                NotifyPropertyChanged("HydrocarbonFlag");
            }
        }

        private bool? HydrocarbonFlagField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PseudoFluidComponent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PseudoFluidComponent", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the PseudoFluidComponent xsd type.")]
    public partial class PseudoFluidComponent : AbstractFluidComponent, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The type from pseudo component enumeration. 
        /// </summary>
		[Description("The type from pseudo component enumeration.")]
        [EnergisticsDataTypeAttribute(DataType = "PseudoComponentEnumExt")]
		[XmlElement("Kind")]
        public ExtensibleEnum<PseudoComponentEnum>? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private ExtensibleEnum<PseudoComponentEnum>? KindField; 

        /// <summary>
        /// The fluid specific gravity.
        /// </summary>
		[Description("The fluid specific gravity.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("SpecificGravity")]
        public double? SpecificGravity {
            get {
                return SpecificGravityField;
            } 
            set {
                SpecificGravityField = value;
                 this.SpecificGravitySpecified = true;
                NotifyPropertyChanged("SpecificGravity");
            }
        }

        private double? SpecificGravityField; 

        /// <summary>
        /// SpecificGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SpecificGravitySpecified {
            get {
                return SpecificGravitySpecifiedField;
            } 
            set {
                SpecificGravitySpecifiedField = value;
                NotifyPropertyChanged("SpecificGravitySpecified");
            }
        }

        private bool SpecificGravitySpecifiedField; 

        /// <summary>
        /// The starting / smalestl carbon number.
        /// </summary>
		[Description("The starting / smalestl carbon number.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StartingCarbonNumber")]
        public long? StartingCarbonNumber {
            get {
                return StartingCarbonNumberField;
            } 
            set {
                StartingCarbonNumberField = value;
                 this.StartingCarbonNumberSpecified = true;
                NotifyPropertyChanged("StartingCarbonNumber");
            }
        }

        private long? StartingCarbonNumberField; 

        /// <summary>
        /// StartingCarbonNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartingCarbonNumberSpecified {
            get {
                return StartingCarbonNumberSpecifiedField;
            } 
            set {
                StartingCarbonNumberSpecifiedField = value;
                NotifyPropertyChanged("StartingCarbonNumberSpecified");
            }
        }

        private bool StartingCarbonNumberSpecifiedField; 

        /// <summary>
        /// The ending / largest carbon number.
        /// </summary>
		[Description("The ending / largest carbon number.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("EndingCarbonNumber")]
        public long? EndingCarbonNumber {
            get {
                return EndingCarbonNumberField;
            } 
            set {
                EndingCarbonNumberField = value;
                 this.EndingCarbonNumberSpecified = true;
                NotifyPropertyChanged("EndingCarbonNumber");
            }
        }

        private long? EndingCarbonNumberField; 

        /// <summary>
        /// EndingCarbonNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndingCarbonNumberSpecified {
            get {
                return EndingCarbonNumberSpecifiedField;
            } 
            set {
                EndingCarbonNumberSpecifiedField = value;
                NotifyPropertyChanged("EndingCarbonNumberSpecified");
            }
        }

        private bool EndingCarbonNumberSpecifiedField; 

        /// <summary>
        /// Average molecular weight.
        /// </summary>
		[Description("Average molecular weight.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("AvgMolecularWeight")]
        public MolecularWeightMeasure AvgMolecularWeight {
            get {
                return AvgMolecularWeightField;
            } 
            set {
                AvgMolecularWeightField = value;
                NotifyPropertyChanged("AvgMolecularWeight");
            }
        }

        private MolecularWeightMeasure AvgMolecularWeightField; 

        /// <summary>
        /// The average fluid density.
        /// </summary>
		[Description("The average fluid density.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("AvgDensity")]
        public MassPerVolumeMeasure AvgDensity {
            get {
                return AvgDensityField;
            } 
            set {
                AvgDensityField = value;
                NotifyPropertyChanged("AvgDensity");
            }
        }

        private MassPerVolumeMeasure AvgDensityField; 

        /// <summary>
        /// The starting boiling point measure.
        /// </summary>
		[Description("The starting boiling point measure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("StartingBoilingPoint")]
        public ThermodynamicTemperatureMeasure StartingBoilingPoint {
            get {
                return StartingBoilingPointField;
            } 
            set {
                StartingBoilingPointField = value;
                NotifyPropertyChanged("StartingBoilingPoint");
            }
        }

        private ThermodynamicTemperatureMeasure StartingBoilingPointField; 

        /// <summary>
        /// The ending boiling point measure.
        /// </summary>
		[Description("The ending boiling point measure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("EndingBoilingPoint")]
        public ThermodynamicTemperatureMeasure EndingBoilingPoint {
            get {
                return EndingBoilingPointField;
            } 
            set {
                EndingBoilingPointField = value;
                NotifyPropertyChanged("EndingBoilingPoint");
            }
        }

        private ThermodynamicTemperatureMeasure EndingBoilingPointField; 

        /// <summary>
        /// The average boiling point measure.
        /// </summary>
		[Description("The average boiling point measure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("AvgBoilingPoint")]
        public ThermodynamicTemperatureMeasure AvgBoilingPoint {
            get {
                return AvgBoilingPointField;
            } 
            set {
                AvgBoilingPointField = value;
                NotifyPropertyChanged("AvgBoilingPoint");
            }
        }

        private ThermodynamicTemperatureMeasure AvgBoilingPointField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PlusFluidComponent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PlusFluidComponent", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the PlusFluidComponent xsd type.")]
    public partial class PlusFluidComponent : AbstractFluidComponent, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The kind from plus fluid component. See PlusComponentEnum. 
        /// </summary>
		[Description("The kind from plus fluid component. See PlusComponentEnum.")]
        [EnergisticsDataTypeAttribute(DataType = "PlusComponentEnumExt")]
		[XmlElement("Kind")]
        public ExtensibleEnum<PlusComponentEnum>? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private ExtensibleEnum<PlusComponentEnum>? KindField; 

        /// <summary>
        /// The fluid specific gravity.
        /// </summary>
		[Description("The fluid specific gravity.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("SpecificGravity")]
        public double? SpecificGravity {
            get {
                return SpecificGravityField;
            } 
            set {
                SpecificGravityField = value;
                 this.SpecificGravitySpecified = true;
                NotifyPropertyChanged("SpecificGravity");
            }
        }

        private double? SpecificGravityField; 

        /// <summary>
        /// SpecificGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SpecificGravitySpecified {
            get {
                return SpecificGravitySpecifiedField;
            } 
            set {
                SpecificGravitySpecifiedField = value;
                NotifyPropertyChanged("SpecificGravitySpecified");
            }
        }

        private bool SpecificGravitySpecifiedField; 

        /// <summary>
        /// The start/min carbon number.
        /// </summary>
		[Description("The start/min carbon number.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StartingCarbonNumber")]
        public long? StartingCarbonNumber {
            get {
                return StartingCarbonNumberField;
            } 
            set {
                StartingCarbonNumberField = value;
                 this.StartingCarbonNumberSpecified = true;
                NotifyPropertyChanged("StartingCarbonNumber");
            }
        }

        private long? StartingCarbonNumberField; 

        /// <summary>
        /// StartingCarbonNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartingCarbonNumberSpecified {
            get {
                return StartingCarbonNumberSpecifiedField;
            } 
            set {
                StartingCarbonNumberSpecifiedField = value;
                NotifyPropertyChanged("StartingCarbonNumberSpecified");
            }
        }

        private bool StartingCarbonNumberSpecifiedField; 

        /// <summary>
        /// The starting boiling temperature measure. 
        /// </summary>
		[Description("The starting boiling temperature measure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("StartingBoilingPoint")]
        public ThermodynamicTemperatureMeasure StartingBoilingPoint {
            get {
                return StartingBoilingPointField;
            } 
            set {
                StartingBoilingPointField = value;
                NotifyPropertyChanged("StartingBoilingPoint");
            }
        }

        private ThermodynamicTemperatureMeasure StartingBoilingPointField; 

        /// <summary>
        /// The average density of the fluid.
        /// </summary>
		[Description("The average density of the fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("AvgDensity")]
        public MassPerVolumeMeasure AvgDensity {
            get {
                return AvgDensityField;
            } 
            set {
                AvgDensityField = value;
                NotifyPropertyChanged("AvgDensity");
            }
        }

        private MassPerVolumeMeasure AvgDensityField; 

        /// <summary>
        /// The average molecular weight of the fluid. 
        /// </summary>
		[Description("The average molecular weight of the fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("AvgMolecularWeight")]
        public MolecularWeightMeasure AvgMolecularWeight {
            get {
                return AvgMolecularWeightField;
            } 
            set {
                AvgMolecularWeightField = value;
                NotifyPropertyChanged("AvgMolecularWeight");
            }
        }

        private MolecularWeightMeasure AvgMolecularWeightField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the NaturalGas xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="NaturalGas", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the NaturalGas xsd type.")]
    public partial class NaturalGas : AbstractFluidComponent, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Gas gravity.
        /// </summary>
		[Description("Gas gravity.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("GasGravity")]
        public double? GasGravity {
            get {
                return GasGravityField;
            } 
            set {
                GasGravityField = value;
                 this.GasGravitySpecified = true;
                NotifyPropertyChanged("GasGravity");
            }
        }

        private double? GasGravityField; 

        /// <summary>
        /// GasGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasGravitySpecified {
            get {
                return GasGravitySpecifiedField;
            } 
            set {
                GasGravitySpecifiedField = value;
                NotifyPropertyChanged("GasGravitySpecified");
            }
        }

        private bool GasGravitySpecifiedField; 

        /// <summary>
        /// Molecular weight. 
        /// </summary>
		[Description("Molecular weight.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("MolecularWeight")]
        public MolecularWeightMeasure MolecularWeight {
            get {
                return MolecularWeightField;
            } 
            set {
                MolecularWeightField = value;
                NotifyPropertyChanged("MolecularWeight");
            }
        }

        private MolecularWeightMeasure MolecularWeightField; 

        /// <summary>
        /// The amount of heat released during the combustion of a specified amount of gas. It is also known as higher heating value (HHV), gross energy, upper heating value, gross calorific value (GCV) or higher calorific Value (HCV). This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.
        /// </summary>
		[Description("The amount of heat released during the combustion of a specified amount of gas. It is also known as higher heating value (HHV), gross energy, upper heating value, gross calorific value (GCV) or higher calorific Value (HCV). This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EnergyPerMassMeasure")]
		[XmlElement("GrossEnergyContentPerUnitMass")]
        public EnergyPerMassMeasure GrossEnergyContentPerUnitMass {
            get {
                return GrossEnergyContentPerUnitMassField;
            } 
            set {
                GrossEnergyContentPerUnitMassField = value;
                NotifyPropertyChanged("GrossEnergyContentPerUnitMass");
            }
        }

        private EnergyPerMassMeasure GrossEnergyContentPerUnitMassField; 

        /// <summary>
        /// The amount of heat released during the combustion of a specified amount of gas. It is also known as lower heating value (LHV), net energy, net calorific value (NCV) or lower calorific value (LCV). This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.
        /// </summary>
		[Description("The amount of heat released during the combustion of a specified amount of gas. It is also known as lower heating value (LHV), net energy, net calorific value (NCV) or lower calorific value (LCV). This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EnergyPerMassMeasure")]
		[XmlElement("NetEnergyContentPerUnitMass")]
        public EnergyPerMassMeasure NetEnergyContentPerUnitMass {
            get {
                return NetEnergyContentPerUnitMassField;
            } 
            set {
                NetEnergyContentPerUnitMassField = value;
                NotifyPropertyChanged("NetEnergyContentPerUnitMass");
            }
        }

        private EnergyPerMassMeasure NetEnergyContentPerUnitMassField; 

        /// <summary>
        /// The amount of heat released during the combustion of a specified amount of gas. It is also known as higher heating value (HHV), gross energy, upper heating value, gross calorific value (GCV) or higher calorific value (HCV). This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.
        /// </summary>
		[Description("The amount of heat released during the combustion of a specified amount of gas. It is also known as higher heating value (HHV), gross energy, upper heating value, gross calorific value (GCV) or higher calorific value (HCV). This value takes into account the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is practical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EnergyPerVolumeMeasure")]
		[XmlElement("GrossEnergyContentPerUnitVolume")]
        public EnergyPerVolumeMeasure GrossEnergyContentPerUnitVolume {
            get {
                return GrossEnergyContentPerUnitVolumeField;
            } 
            set {
                GrossEnergyContentPerUnitVolumeField = value;
                NotifyPropertyChanged("GrossEnergyContentPerUnitVolume");
            }
        }

        private EnergyPerVolumeMeasure GrossEnergyContentPerUnitVolumeField; 

        /// <summary>
        /// The amount of heat released during the combustion of a specified amount of gas. It is also known as lower heating value (LHV), net energy, net calorific value (NCV) or lower calorific value (LCV). This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.
        /// </summary>
		[Description("The amount of heat released during the combustion of a specified amount of gas. It is also known as lower heating value (LHV), net energy, net calorific value (NCV) or lower calorific value (LCV). This value ignores the latent heat of vaporization of water in the combustion products, and is useful in calculating heating values for fuels where condensation of the reaction products is not possible and is ignored.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EnergyPerVolumeMeasure")]
		[XmlElement("NetEnergyContentPerUnitVolume")]
        public EnergyPerVolumeMeasure NetEnergyContentPerUnitVolume {
            get {
                return NetEnergyContentPerUnitVolumeField;
            } 
            set {
                NetEnergyContentPerUnitVolumeField = value;
                NotifyPropertyChanged("NetEnergyContentPerUnitVolume");
            }
        }

        private EnergyPerVolumeMeasure NetEnergyContentPerUnitVolumeField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FormationWater xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FormationWater", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FormationWater xsd type.")]
    public partial class FormationWater : AbstractFluidComponent, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Specific gravity.
        /// </summary>
		[Description("Specific gravity.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("SpecificGravity")]
        public double? SpecificGravity {
            get {
                return SpecificGravityField;
            } 
            set {
                SpecificGravityField = value;
                 this.SpecificGravitySpecified = true;
                NotifyPropertyChanged("SpecificGravity");
            }
        }

        private double? SpecificGravityField; 

        /// <summary>
        /// SpecificGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SpecificGravitySpecified {
            get {
                return SpecificGravitySpecifiedField;
            } 
            set {
                SpecificGravitySpecifiedField = value;
                NotifyPropertyChanged("SpecificGravitySpecified");
            }
        }

        private bool SpecificGravitySpecifiedField; 

        /// <summary>
        /// Salinity level.
        /// </summary>
		[Description("Salinity level.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("Salinity")]
        public MassPerMassMeasure Salinity {
            get {
                return SalinityField;
            } 
            set {
                SalinityField = value;
                NotifyPropertyChanged("Salinity");
            }
        }

        private MassPerMassMeasure SalinityField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 


    } //here
    }

    /// <summary>
    /// This class represents the AbstractObject xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellTest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeSeriesStatistic))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeSeriesData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Report))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductionOperation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WftRun))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidSampleAcquisitionJob))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidSystem))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSimpleProductVolume))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellProductionParameters))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductionWellTest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Transfer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TerminalLifting))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AssetProductionVolumes))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReportingHierarchy))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReportingEntity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidAnalysis))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WaterAnalysis))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HydrocarbonAnalysis))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidCharacterization))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidSample))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidSampleContainer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DtsMeasurement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DasInstrumentBox))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DasAcquisition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DtsInstrumentBox))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DtsInstalledSystem))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberOpticalPath))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductVolume))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductFlowModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GraphicalInformationSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataAssuranceRecord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocalEngineeringCompoundCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ActivityTemplate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Activity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EpcExternalPartReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGrowingObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeSeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PropertyKindDictionary))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PropertyKind))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractContextualObject", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[Description("This class represents the AbstractObject xsd type.")]
    public abstract partial class AbstractObject : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Aliases property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ObjectAlias")]
		[XmlElement("Aliases")]
        public List<ObjectAlias> Aliases {
            get {
                return AliasesField;
            } 
            set {
                AliasesField = value;
                NotifyPropertyChanged("Aliases");
            }
        }

         /// <summary>
         /// bool to indicate if Aliases has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AliasesSpecified
         {
             get {
             if(AliasesField!=null)
                 return AliasesField.Count>0?true:false;
             else return false;
             }
         }
        private List<ObjectAlias> AliasesField; 

        /// <summary>
        /// Citation property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Citation")]
		[XmlElement("Citation")]
        public Citation Citation {
            get {
                return CitationField;
            } 
            set {
                CitationField = value;
                NotifyPropertyChanged("Citation");
            }
        }

        private Citation CitationField; 

        /// <summary>
        /// CustomData property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("CustomData")]
        public CustomData CustomData {
            get {
                return CustomDataField;
            } 
            set {
                CustomDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData CustomDataField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// objectVersion property
        /// </summary>
		[StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("objectVersion")]
		
        public string ObjectVersion {
            get {
                return objectVersionField;
            } 
            set {
                objectVersionField = value;
                NotifyPropertyChanged("ObjectVersion");
            }
        }

        private string objectVersionField; 

		/// <summary>
        /// schemaVersion property
        /// </summary>
		[Required]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("schemaVersion")]
		
        public string SchemaVersion {
            get {
                return schemaVersionField;
            } 
            set {
                schemaVersionField = value;
                NotifyPropertyChanged("SchemaVersion");
            }
        }

        private string schemaVersionField; 

		/// <summary>
        /// uuid property
        /// </summary>
		[Required]
        [RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
        [XmlAttribute("uuid")]
		
        public string Uuid {
            get {
                return uuidField;
            } 
            set {
                uuidField = value;
                NotifyPropertyChanged("Uuid");
            }
        }

        private string uuidField; 

		/// <summary>
        /// existenceKind property
        /// </summary>
		[Description("A lifecycle state like actual, required, planned, predicted, etc. This is used to qualify any top-level element (from Epicentre 2.1).")]
        [EnergisticsDataTypeAttribute(DataType = "ExistenceKind")]
        [XmlAttribute("existenceKind")]
		
        public ExistenceKind ExistenceKind {
            get {
                return existenceKindField;
            } 
            set {
                existenceKindField = value;
                 this.ExistenceKindSpecified = true;
                NotifyPropertyChanged("ExistenceKind");
            }
        }

        private ExistenceKind existenceKindField; 

        /// <summary>
        /// existenceKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ExistenceKindSpecified {
            get {
                return existenceKindSpecifiedField;
            } 
            set {
                existenceKindSpecifiedField = value;
                NotifyPropertyChanged("ExistenceKindSpecified");
            }
        }

        private bool existenceKindSpecifiedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ObjectAlias xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ObjectAlias", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ObjectAlias xsd type.")]
    public partial class ObjectAlias : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Identifier property
        /// </summary>
		[Required]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Identifier")]
        public string Identifier {
            get {
                return IdentifierField;
            } 
            set {
                IdentifierField = value;
                NotifyPropertyChanged("Identifier");
            }
        }

        private string IdentifierField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

		/// <summary>
        /// authority property
        /// </summary>
		[Required]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("authority")]
		
        public string Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private string authorityField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Citation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Citation", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the Citation xsd type.")]
    public partial class Citation : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Title property
        /// </summary>
		[Required]
        [StringLength(256)]
        [Description("One line description/name of the object.  This is the equivalent in ISO 19115 of CI_Citation.title  Legacy DCGroup - title")]
        [EnergisticsDataTypeAttribute(DataType = "String256")]
		[XmlElement("Title")]
        public string Title {
            get {
                return TitleField;
            } 
            set {
                TitleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private string TitleField; 

        /// <summary>
        /// Originator property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Name (or other human-readable identifier) of the person who initially originated the object or document in the source application. If that information is not available, then this is the user who created the format file. The originator remains the same as the object is subsequently edited.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is \"originator\".  Legacy DCGroup - author")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Originator")]
        public string Originator {
            get {
                return OriginatorField;
            } 
            set {
                OriginatorField = value;
                NotifyPropertyChanged("Originator");
            }
        }

        private string OriginatorField; 

        /// <summary>
        /// Creation property
        /// </summary>
		[Required]
        [Description("Date and time the document was created in the source application or, if that information is not available, when it was saved to the file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”creation\"  Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - created")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("Creation")]
        public Timestamp? Creation {
            get {
                return CreationField;
            } 
            set {
                CreationField = value;
                 this.CreationSpecified = true;
                NotifyPropertyChanged("Creation");
            }
        }

        
        private bool CreationSpecifiedField = false;
        
        /// <summary>
        /// CreationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CreationSpecified {
            get {
                return CreationSpecifiedField;
            } 
            set {
                CreationSpecifiedField = value;
                NotifyPropertyChanged("CreationSpecified");
            }
        }
        
        private Timestamp? CreationField; 

        /// <summary>
        /// Format property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Software or service that was used to originate the object and the file format created. Must be human and machine readable and unambiguously identify the software by including the company name, software name and software version. This is the equivalent in ISO 19115 to the distributionFormat.MD_Format.  The ISO format for this is [vendor:applicationName]/fileExtension where the application name includes the version number of the application.  SIG Implementation Notes - Legacy DCGroup from v1.1 - publisher - fileExtension is not relevant and will be ignored if present. - vendor and applicationName are mandatory.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Format")]
        public string Format {
            get {
                return FormatField;
            } 
            set {
                FormatField = value;
                NotifyPropertyChanged("Format");
            }
        }

        private string FormatField; 

        /// <summary>
        /// Editor property
        /// </summary>
		[StringLength(64)]
        [Description("Name (or other human-readable identifier) of the last person who updated the object.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is \"editor\".  Legacy DCGroup - contributor")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Editor")]
        public string Editor {
            get {
                return EditorField;
            } 
            set {
                EditorField = value;
                NotifyPropertyChanged("Editor");
            }
        }

        private string EditorField; 

        /// <summary>
        /// LastUpdate property
        /// </summary>
		[Description("Date and time the document was last modified in the source application or, if that information is not available, when it was last saved to the RESQML format file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”lastUpdate\"   Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - modified")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("LastUpdate")]
        public Timestamp? LastUpdate {
            get {
                return LastUpdateField;
            } 
            set {
                LastUpdateField = value;
                 this.LastUpdateSpecified = true;
                NotifyPropertyChanged("LastUpdate");
            }
        }

        private Timestamp? LastUpdateField; 

        /// <summary>
        /// LastUpdateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastUpdateSpecified {
            get {
                return LastUpdateSpecifiedField;
            } 
            set {
                LastUpdateSpecifiedField = value;
                NotifyPropertyChanged("LastUpdateSpecified");
            }
        }

        private bool LastUpdateSpecifiedField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("User descriptive comments about the object. Intended for end-user use (human readable); not necessarily meant to be used by software.  This is the equivalent of the ISO 19115 abstract.CharacterString  Legacy DCGroup - description")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// DescriptiveKeywords property
        /// </summary>
		[StringLength(2000)]
        [Description("Key words to describe the activity, for example, history match or volumetric calculations, relevant to this object. Intended to be used in a search function by software.  This is the equivalent in ISO 19115 of descriptiveKeywords.MD_Keywords  Legacy DCGroup - subject")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("DescriptiveKeywords")]
        public string DescriptiveKeywords {
            get {
                return DescriptiveKeywordsField;
            } 
            set {
                DescriptiveKeywordsField = value;
                NotifyPropertyChanged("DescriptiveKeywords");
            }
        }

        private string DescriptiveKeywordsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CustomData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CustomData", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the CustomData xsd type.")]
    public partial class CustomData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Any property
        /// </summary>
		[RecurringElement]
		[XmlAnyElement]
        public List<XmlElement> Any {
            get {
                return AnyField;
            } 
            set {
                AnyField = value;
                NotifyPropertyChanged("Any");
            }
        }

         /// <summary>
         /// bool to indicate if Any has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AnySpecified
         {
             get {
             if(AnyField!=null)
                 return AnyField.Count>0?true:false;
             else return false;
             }
         }
        private List<XmlElement> AnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ExtensionNameValue xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ExtensionNameValue", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ExtensionNameValue xsd type.")]
    public partial class ExtensionNameValue : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ExtensionNameValue class.
        /// </summary>
        public ExtensionNameValue() {}

        /// <summary>
        /// Initializes a new instance of the ExtensionNameValue class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public ExtensionNameValue(StringMeasure value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the extension. Each standard name should document the expected measure class. Each standard name should document the expected maximum size.  For numeric values the size should be in terms of xsd types such as int, long, short, byte, float or double. For strings, the maximum length should be defined in number of characters. Local extensions to the list of standard names are allowed but it is strongly recommended that the names and definitions be approved by the  respective SIG Technical Team before use.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("The value of the extension. This may also include a uom attribute. The content should conform to constraints defined by the data type.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "StringMeasure")]
		[XmlElement("Value")]
        public StringMeasure Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private StringMeasure ValueField; 

        /// <summary>
        /// MeasureClass property
        /// </summary>
		[Description("The kind of the measure. For example, \"length\". This should be specified if the value requires a unit of measure.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasureClass")]
		[XmlElement("MeasureClass")]
        public MeasureClass? MeasureClass {
            get {
                return MeasureClassField;
            } 
            set {
                MeasureClassField = value;
                 this.MeasureClassSpecified = true;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private MeasureClass? MeasureClassField; 

        /// <summary>
        /// MeasureClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasureClassSpecified {
            get {
                return MeasureClassSpecifiedField;
            } 
            set {
                MeasureClassSpecifiedField = value;
                NotifyPropertyChanged("MeasureClassSpecified");
            }
        }

        private bool MeasureClassSpecifiedField; 

        /// <summary>
        /// DTim property
        /// </summary>
		[Description("The date-time associated with the value.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? DTimField; 

        /// <summary>
        /// DTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DTimSpecifiedField;
            } 
            set {
                DTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool DTimSpecifiedField; 

        /// <summary>
        /// Index property
        /// </summary>
		[Description("Indexes things with the same name.  That is, 1 indicates the first one, 2 indicates the second one, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "long")]
		[XmlElement("Index")]
        public long? Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                 this.IndexSpecified = true;
                NotifyPropertyChanged("Index");
            }
        }

        private long? IndexField; 

        /// <summary>
        /// IndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexSpecified {
            get {
                return IndexSpecifiedField;
            } 
            set {
                IndexSpecifiedField = value;
                NotifyPropertyChanged("IndexSpecified");
            }
        }

        private bool IndexSpecifiedField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("A textual description of the extension.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StringMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StringMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the StringMeasure xsd type.")]
    public partial class StringMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StringMeasure class.
        /// </summary>
        public StringMeasure() {}

        /// <summary>
        /// Initializes a new instance of the StringMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public StringMeasure(string value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "UnitOfMeasureExt")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the WellTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the WellTest xsd type.")]
    public partial class WellTest : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// DTimMin property
        /// </summary>
		[Description("The minimum time index contained within the object. The minimum and maximum indexes are server query parameters and will be populated with valid values in a \"get\" result. That is, all wellTest for a well in the specified period defined by the min/max.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQualifiedDateTime")]
		[XmlElement("DTimMin")]
        public EndpointQualifiedDateTime DateTimeMin {
            get {
                return DTimMinField;
            } 
            set {
                DTimMinField = value;
                NotifyPropertyChanged("DateTimeMin");
            }
        }

        private EndpointQualifiedDateTime DTimMinField; 

        /// <summary>
        /// DTimMax property
        /// </summary>
		[Description("The maximum time index contained within the object. The minimum and maximum indexes are server query parameters and will be populated with valid values in a \"get\" result.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQualifiedDateTime")]
		[XmlElement("DTimMax")]
        public EndpointQualifiedDateTime DateTimeMax {
            get {
                return DTimMaxField;
            } 
            set {
                DTimMaxField = value;
                NotifyPropertyChanged("DateTimeMax");
            }
        }

        private EndpointQualifiedDateTime DTimMaxField; 

        /// <summary>
        /// DTimCurrent property
        /// </summary>
		[Description("The definition of the \"current time\" index for this object. The current time index is a server query parameter which requests the selection of a single node from a recurring set (e.g., the data related to one point in a time series). That is, the \"most recent\" (at or before the specified time) wellTest for a well.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimCurrent")]
        public DateTime? DateTimeCurrent {
            get {
                return DTimCurrentField;
            } 
            set {
                DTimCurrentField = value;
                 this.DateTimeCurrentSpecified = true;
                NotifyPropertyChanged("DateTimeCurrent");
            }
        }

        private DateTime? DTimCurrentField; 

        /// <summary>
        /// DTimCurrentSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeCurrentSpecified {
            get {
                return DTimCurrentSpecifiedField;
            } 
            set {
                DTimCurrentSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCurrentSpecified");
            }
        }

        private bool DTimCurrentSpecifiedField; 

        /// <summary>
        /// StandardTempPres property
        /// </summary>
		[Description("Defines the standard temperature and pressure to which all standard volumes in this report have been corrected. This applies to all elements whose name is suffixed by StdTempPres.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TemperaturePressure")]
		[XmlElement("StandardTempPres")]
        public TemperaturePressure StandardTempPres {
            get {
                return StandardTempPresField;
            } 
            set {
                StandardTempPresField = value;
                NotifyPropertyChanged("StandardTempPres");
            }
        }

        private TemperaturePressure StandardTempPresField; 

        /// <summary>
        /// TestDate property
        /// </summary>
		[Description("The date-time of the well test.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("TestDate")]
        public DateTime? TestDate {
            get {
                return TestDateField;
            } 
            set {
                TestDateField = value;
                 this.TestDateSpecified = true;
                NotifyPropertyChanged("TestDate");
            }
        }

        private DateTime? TestDateField; 

        /// <summary>
        /// TestDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TestDateSpecified {
            get {
                return TestDateSpecifiedField;
            } 
            set {
                TestDateSpecifiedField = value;
                NotifyPropertyChanged("TestDateSpecified");
            }
        }

        private bool TestDateSpecifiedField; 

        /// <summary>
        /// PreviousTestDate property
        /// </summary>
		[Description("The date-time of the previous well test.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("PreviousTestDate")]
        public DateTime? PreviousTestDate {
            get {
                return PreviousTestDateField;
            } 
            set {
                PreviousTestDateField = value;
                 this.PreviousTestDateSpecified = true;
                NotifyPropertyChanged("PreviousTestDate");
            }
        }

        private DateTime? PreviousTestDateField; 

        /// <summary>
        /// PreviousTestDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PreviousTestDateSpecified {
            get {
                return PreviousTestDateSpecifiedField;
            } 
            set {
                PreviousTestDateSpecifiedField = value;
                NotifyPropertyChanged("PreviousTestDateSpecified");
            }
        }

        private bool PreviousTestDateSpecifiedField; 

        /// <summary>
        /// LastValidTest property
        /// </summary>
		[Description("The date-time of the last valid well test.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("LastValidTest")]
        public DateTime? LastValidTest {
            get {
                return LastValidTestField;
            } 
            set {
                LastValidTestField = value;
                 this.LastValidTestSpecified = true;
                NotifyPropertyChanged("LastValidTest");
            }
        }

        private DateTime? LastValidTestField; 

        /// <summary>
        /// LastValidTestSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastValidTestSpecified {
            get {
                return LastValidTestSpecifiedField;
            } 
            set {
                LastValidTestSpecifiedField = value;
                NotifyPropertyChanged("LastValidTestSpecified");
            }
        }

        private bool LastValidTestSpecifiedField; 

        /// <summary>
        /// TestReason property
        /// </summary>
		[Description("The reason for the well test: initial, periodic, revision. See enum TestReason.")]
        [EnergisticsDataTypeAttribute(DataType = "TestReason")]
		[XmlElement("TestReason")]
        public TestReason? TestReason {
            get {
                return TestReasonField;
            } 
            set {
                TestReasonField = value;
                 this.TestReasonSpecified = true;
                NotifyPropertyChanged("TestReason");
            }
        }

        private TestReason? TestReasonField; 

        /// <summary>
        /// TestReasonSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TestReasonSpecified {
            get {
                return TestReasonSpecifiedField;
            } 
            set {
                TestReasonSpecifiedField = value;
                NotifyPropertyChanged("TestReasonSpecified");
            }
        }

        private bool TestReasonSpecifiedField; 

        /// <summary>
        /// TestType property
        /// </summary>
		[StringLength(64)]
        [Description("The type of well production test.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TestType")]
        public string TestType {
            get {
                return TestTypeField;
            } 
            set {
                TestTypeField = value;
                NotifyPropertyChanged("TestType");
            }
        }

        private string TestTypeField; 

        /// <summary>
        /// ProductFlowPortReference property
        /// </summary>
		[StringLength(64)]
        [Description("A port on a product flow unit that is represented by this test.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ProductFlowPortReference")]
        public string ProductFlowPortReference {
            get {
                return ProductFlowPortReferenceField;
            } 
            set {
                ProductFlowPortReferenceField = value;
                NotifyPropertyChanged("ProductFlowPortReference");
            }
        }

        private string ProductFlowPortReferenceField; 

        /// <summary>
        /// ProductFlowUnitReference property
        /// </summary>
		[StringLength(64)]
        [Description("The product flow unit represented by the port. This is defined in the Product Flow Model.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ProductFlowUnitReference")]
        public string ProductFlowUnitReference {
            get {
                return ProductFlowUnitReferenceField;
            } 
            set {
                ProductFlowUnitReferenceField = value;
                NotifyPropertyChanged("ProductFlowUnitReference");
            }
        }

        private string ProductFlowUnitReferenceField; 

        /// <summary>
        /// ProductFlowModelReference property
        /// </summary>
		[StringLength(64)]
        [Description("The Product Flow Model that represents the above product flow unit.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ProductFlowModelReference")]
        public string ProductFlowModelReference {
            get {
                return ProductFlowModelReferenceField;
            } 
            set {
                ProductFlowModelReferenceField = value;
                NotifyPropertyChanged("ProductFlowModelReference");
            }
        }

        private string ProductFlowModelReferenceField; 

        /// <summary>
        /// ValidationState property
        /// </summary>
		[Description("The overall state of the test with respect to validation operations.")]
        [EnergisticsDataTypeAttribute(DataType = "ValidationState")]
		[XmlElement("ValidationState")]
        public ValidationState? ValidationState {
            get {
                return ValidationStateField;
            } 
            set {
                ValidationStateField = value;
                 this.ValidationStateSpecified = true;
                NotifyPropertyChanged("ValidationState");
            }
        }

        private ValidationState? ValidationStateField; 

        /// <summary>
        /// ValidationStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ValidationStateSpecified {
            get {
                return ValidationStateSpecifiedField;
            } 
            set {
                ValidationStateSpecifiedField = value;
                NotifyPropertyChanged("ValidationStateSpecified");
            }
        }

        private bool ValidationStateSpecifiedField; 

        /// <summary>
        /// WellReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WellReference")]
        public DataObjectReference WellReference {
            get {
                return WellReferenceField;
            } 
            set {
                WellReferenceField = value;
                NotifyPropertyChanged("WellReference");
            }
        }

        private DataObjectReference WellReferenceField; 

        /// <summary>
        /// WellTestData property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractWellTest")]
		[XmlElement("WellTestData")]
        public AbstractWellTest WellTestData {
            get {
                return WellTestDataField;
            } 
            set {
                WellTestDataField = value;
                NotifyPropertyChanged("WellTestData");
            }
        }

        private AbstractWellTest WellTestDataField; 

        /// <summary>
        /// ValidationOperation property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WellTestValidationOperation")]
		[XmlElement("ValidationOperation")]
        public List<WellTestValidationOperation> ValidationOperation {
            get {
                return ValidationOperationField;
            } 
            set {
                ValidationOperationField = value;
                NotifyPropertyChanged("ValidationOperation");
            }
        }

         /// <summary>
         /// bool to indicate if ValidationOperation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ValidationOperationSpecified
         {
             get {
             if(ValidationOperationField!=null)
                 return ValidationOperationField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellTestValidationOperation> ValidationOperationField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EndpointQualifiedDateTime xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EndpointQualifiedDateTime", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the EndpointQualifiedDateTime xsd type.")]
    public partial class EndpointQualifiedDateTime : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// The default is "inclusive".
        /// </summary>
		[Description("The default is \"inclusive\".")]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQualifier")]
        [XmlAttribute("endpoint")]
		
        public EndpointQualifier Endpoint {
            get {
                return endpointField;
            } 
            set {
                endpointField = value;
                 this.EndpointSpecified = true;
                NotifyPropertyChanged("Endpoint");
            }
        }

        private EndpointQualifier endpointField; 

        /// <summary>
        /// endpointSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndpointSpecified {
            get {
                return endpointSpecifiedField;
            } 
            set {
                endpointSpecifiedField = value;
                NotifyPropertyChanged("EndpointSpecified");
            }
        }

        private bool endpointSpecifiedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the TimeSeriesStatistic xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the TimeSeriesStatistic xsd type.")]
    public partial class TimeSeriesStatistic : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Key property
        /// </summary>
		[Description("A keyword value pair which characterizes the underlying nature of this value. The key value may provide part of the unique identity of an instance of a concept or it may characterize the underlying concept. The key value will be defined within the specified keyword naming system. This is essentially a classification of the data in the specified system (keyword).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "KeywordValueStruct")]
		[XmlElement("Key")]
        public List<KeywordValueStruct> Key {
            get {
                return KeyField;
            } 
            set {
                KeyField = value;
                NotifyPropertyChanged("Key");
            }
        }

         /// <summary>
         /// bool to indicate if Key has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool KeySpecified
         {
             get {
             if(KeyField!=null)
                 return KeyField.Count>0?true:false;
             else return false;
             }
         }
        private List<KeywordValueStruct> KeyField; 

        /// <summary>
        /// Unit property
        /// </summary>
		[StringLength(32)]
        [Description("If the time series is a measure then this specifies the unit of measure. The unit acronym must be chosen from the list that is valid for the measure class. If this is specified then the measure class must be specified.")]
        [EnergisticsDataTypeAttribute(DataType = "UomEnum")]
		[XmlElement("Unit")]
        public string Unit {
            get {
                return UnitField;
            } 
            set {
                UnitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private string UnitField; 

        /// <summary>
        /// MeasureClass property
        /// </summary>
		[Description("Defines the type of measure that the time series represents. If this is specified then unit must be specified. This may be redundant to some information in the keys but it is important for allowing an application to understand the nature of a measure value even if it does not understand all of the underlying nature.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasureClass")]
		[XmlElement("MeasureClass")]
        public MeasureClass? MeasureClass {
            get {
                return MeasureClassField;
            } 
            set {
                MeasureClassField = value;
                 this.MeasureClassSpecified = true;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private MeasureClass? MeasureClassField; 

        /// <summary>
        /// MeasureClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasureClassSpecified {
            get {
                return MeasureClassSpecifiedField;
            } 
            set {
                MeasureClassSpecifiedField = value;
                NotifyPropertyChanged("MeasureClassSpecified");
            }
        }

        private bool MeasureClassSpecifiedField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("A comment about the time series.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// Minimum property
        /// </summary>
		[Description("The minimum value within the time range of dTimMin to dTimMax. Element \"unit\" defines the unit of measure of this value.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("Minimum")]
        public DimensionlessMeasure Minimum {
            get {
                return MinimumField;
            } 
            set {
                MinimumField = value;
                NotifyPropertyChanged("Minimum");
            }
        }

        private DimensionlessMeasure MinimumField; 

        /// <summary>
        /// Maximum property
        /// </summary>
		[Description("The maximum value within the time range of dTimMin to dTimMax. Element \"unit\" defines the unit of measure of this value.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("Maximum")]
        public DimensionlessMeasure Maximum {
            get {
                return MaximumField;
            } 
            set {
                MaximumField = value;
                NotifyPropertyChanged("Maximum");
            }
        }

        private DimensionlessMeasure MaximumField; 

        /// <summary>
        /// Sum property
        /// </summary>
		[Description("The sum of all values within the time range of dTimMin to dTimMax. Element \"unit\" defines the unit of measure of this value.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("Sum")]
        public DimensionlessMeasure Sum {
            get {
                return SumField;
            } 
            set {
                SumField = value;
                NotifyPropertyChanged("Sum");
            }
        }

        private DimensionlessMeasure SumField; 

        /// <summary>
        /// Mean property
        /// </summary>
		[Description("The arithmetic mean (sum divided by count) of all values within the time range of dTimMin to dTimMax. Element \"unit\" defines the unit of measure of this value.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("Mean")]
        public DimensionlessMeasure Mean {
            get {
                return MeanField;
            } 
            set {
                MeanField = value;
                NotifyPropertyChanged("Mean");
            }
        }

        private DimensionlessMeasure MeanField; 

        /// <summary>
        /// Median property
        /// </summary>
		[Description("The median value of all values within the time range of dTimMin to dTimMax. Element \"unit\" defines the unit of measure of this value.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("Median")]
        public DimensionlessMeasure Median {
            get {
                return MedianField;
            } 
            set {
                MedianField = value;
                NotifyPropertyChanged("Median");
            }
        }

        private DimensionlessMeasure MedianField; 

        /// <summary>
        /// StandardDeviation property
        /// </summary>
		[Description("The standard deviation of all values within the time range of dTimMin to dTimMax. Element \"unit\" defines the unit of measure of this value.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("StandardDeviation")]
        public DimensionlessMeasure StandardDeviation {
            get {
                return StandardDeviationField;
            } 
            set {
                StandardDeviationField = value;
                NotifyPropertyChanged("StandardDeviation");
            }
        }

        private DimensionlessMeasure StandardDeviationField; 

        /// <summary>
        /// TimeAtThreshold property
        /// </summary>
		[Description("Defines a value threshold window and the time duration where values  (within the time range of dTimMin to dTimMax) were within that window.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeSeriesThreshold")]
		[XmlElement("TimeAtThreshold")]
        public TimeSeriesThreshold TimeAtThreshold {
            get {
                return TimeAtThresholdField;
            } 
            set {
                TimeAtThresholdField = value;
                NotifyPropertyChanged("TimeAtThreshold");
            }
        }

        private TimeSeriesThreshold TimeAtThresholdField; 

        /// <summary>
        /// DTimMin property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EndpointDateTime")]
		[XmlElement("DTimMin")]
        public EndpointDateTime DateTimeMin {
            get {
                return DTimMinField;
            } 
            set {
                DTimMinField = value;
                NotifyPropertyChanged("DateTimeMin");
            }
        }

        private EndpointDateTime DTimMinField; 

        /// <summary>
        /// DTimMax property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EndpointDateTime")]
		[XmlElement("DTimMax")]
        public EndpointDateTime DateTimeMax {
            get {
                return DTimMaxField;
            } 
            set {
                DTimMaxField = value;
                NotifyPropertyChanged("DateTimeMax");
            }
        }

        private EndpointDateTime DTimMaxField; 


    } //here

    /// <summary>
    /// This class represents the TimeSeriesData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the TimeSeriesData xsd type.")]
    public partial class TimeSeriesData : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Key property
        /// </summary>
		[Description("A keyword value pair which characterizes the underlying nature of this value. The key value may provide part of the unique identity of an instance of a concept or it may characterize the underlying concept. The key value is defined within the specified keyword-naming system. This is essentially a classification of the data in the specified system (keyword).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "KeywordValueStruct")]
		[XmlElement("Key")]
        public List<KeywordValueStruct> Key {
            get {
                return KeyField;
            } 
            set {
                KeyField = value;
                NotifyPropertyChanged("Key");
            }
        }

         /// <summary>
         /// bool to indicate if Key has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool KeySpecified
         {
             get {
             if(KeyField!=null)
                 return KeyField.Count>0?true:false;
             else return false;
             }
         }
        private List<KeywordValueStruct> KeyField; 

        /// <summary>
        /// Unit property
        /// </summary>
		[StringLength(32)]
        [Description("If the time series is a measure, then this specifies the unit of measure. The unit acronym must be chosen from the list that is valid for the measure class. If this is specified,  then the measure class must be specified.")]
        [EnergisticsDataTypeAttribute(DataType = "UomEnum")]
		[XmlElement("Unit")]
        public string Unit {
            get {
                return UnitField;
            } 
            set {
                UnitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private string UnitField; 

        /// <summary>
        /// MeasureClass property
        /// </summary>
		[Description("Defines the type of measure that the time series represents. If this is specified then unit must be specified. This may be redundant to some information in the keys, but it is important for allowing an application to understand the nature of a measure value, even if it does not understand all of the underlying nature.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasureClass")]
		[XmlElement("MeasureClass")]
        public MeasureClass? MeasureClass {
            get {
                return MeasureClassField;
            } 
            set {
                MeasureClassField = value;
                 this.MeasureClassSpecified = true;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private MeasureClass? MeasureClassField; 

        /// <summary>
        /// MeasureClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasureClassSpecified {
            get {
                return MeasureClassSpecifiedField;
            } 
            set {
                MeasureClassSpecifiedField = value;
                NotifyPropertyChanged("MeasureClassSpecified");
            }
        }

        private bool MeasureClassSpecifiedField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("A comment about the time series.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// DataValue property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractValue")]
		[XmlElement("DataValue")]
        public List<AbstractValue> DataValue {
            get {
                return DataValueField;
            } 
            set {
                DataValueField = value;
                NotifyPropertyChanged("DataValue");
            }
        }

         /// <summary>
         /// bool to indicate if DataValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DataValueSpecified
         {
             get {
             if(DataValueField!=null)
                 return DataValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractValue> DataValueField; 


    } //here

    /// <summary>
    /// This class represents the Report xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the Report xsd type.")]
    public partial class Report : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Kind property
        /// </summary>
		[StringLength(64)]
        [Description("The type of report. This should define and constrain the expected content of the report.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Kind")]
        public string Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string KindField; 

        /// <summary>
        /// Date property
        /// </summary>
		[Description("The date that the report represents (i.e., not a year or month). Only one of date, month or year should be specified.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("Date", DataType="date")]
        public DateTime? Date {
            get {
                return DateField;
            } 
            set {
                DateField = value;
                 this.DateSpecified = true;
                NotifyPropertyChanged("Date");
            }
        }

        private DateTime? DateField; 

        /// <summary>
        /// DateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateSpecified {
            get {
                return DateSpecifiedField;
            } 
            set {
                DateSpecifiedField = value;
                NotifyPropertyChanged("DateSpecified");
            }
        }

        private bool DateSpecifiedField; 

        /// <summary>
        /// DateEnd property
        /// </summary>
		[Description("The ending date that the report represents, if it represents an interval.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("DateEnd", DataType="date")]
        public DateTime? DateEnd {
            get {
                return DateEndField;
            } 
            set {
                DateEndField = value;
                 this.DateEndSpecified = true;
                NotifyPropertyChanged("DateEnd");
            }
        }

        private DateTime? DateEndField; 

        /// <summary>
        /// DateEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateEndSpecified {
            get {
                return DateEndSpecifiedField;
            } 
            set {
                DateEndSpecifiedField = value;
                NotifyPropertyChanged("DateEndSpecified");
            }
        }

        private bool DateEndSpecifiedField; 

        /// <summary>
        /// Month property
        /// </summary>
		[RegularExpression("([1-9][0-9][0-9][0-9])-(([0][0-9])|([1][0-2]))")]
        [Description("The month that the report represents (i.e., not a year, date or date range). Only one of date, month or year should be specified.")]
        [EnergisticsDataTypeAttribute(DataType = "CalendarMonth")]
		[XmlElement("Month")]
        public string Month {
            get {
                return MonthField;
            } 
            set {
                MonthField = value;
                NotifyPropertyChanged("Month");
            }
        }

        private string MonthField; 

        /// <summary>
        /// Year property
        /// </summary>
		[Range(1000, 9999)]
        [Description("The year that the report represents (i.e., not a month, date or date range). Only one of date, month or year should be specified.")]
        [EnergisticsDataTypeAttribute(DataType = "CalendarYear")]
		[XmlElement("Year", DataType="integer")]
        public string Year {
            get {
                return YearField;
            } 
            set {
                YearField = value;
                NotifyPropertyChanged("Year");
            }
        }

        private string YearField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("A textual comment about the report.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// ReportVersion property
        /// </summary>
		[StringLength(64)]
        [Description("The current report version.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ReportVersion")]
        public string ReportVersion {
            get {
                return ReportVersionField;
            } 
            set {
                ReportVersionField = value;
                NotifyPropertyChanged("ReportVersion");
            }
        }

        private string ReportVersionField; 

        /// <summary>
        /// ReportStatus property
        /// </summary>
		[Description("The current document version status.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportVersionStatus")]
		[XmlElement("ReportStatus")]
        public ReportVersionStatus? ReportStatus {
            get {
                return ReportStatusField;
            } 
            set {
                ReportStatusField = value;
                 this.ReportStatusSpecified = true;
                NotifyPropertyChanged("ReportStatus");
            }
        }

        private ReportVersionStatus? ReportStatusField; 

        /// <summary>
        /// ReportStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReportStatusSpecified {
            get {
                return ReportStatusSpecifiedField;
            } 
            set {
                ReportStatusSpecifiedField = value;
                NotifyPropertyChanged("ReportStatusSpecified");
            }
        }

        private bool ReportStatusSpecifiedField; 

        /// <summary>
        /// Installation property
        /// </summary>
		[Description("The name of the facility which is represented by this report. The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("Installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return InstallationField;
            } 
            set {
                InstallationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct InstallationField; 

        /// <summary>
        /// ContextFacility property
        /// </summary>
		[Description("The name and type of a facility whose context is relevant to the represented installation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("ContextFacility")]
        public List<FacilityIdentifierStruct> ContextFacility {
            get {
                return ContextFacilityField;
            } 
            set {
                ContextFacilityField = value;
                NotifyPropertyChanged("ContextFacility");
            }
        }

         /// <summary>
         /// bool to indicate if ContextFacility has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContextFacilitySpecified
         {
             get {
             if(ContextFacilityField!=null)
                 return ContextFacilityField.Count>0?true:false;
             else return false;
             }
         }
        private List<FacilityIdentifierStruct> ContextFacilityField; 

        /// <summary>
        /// IssueDate property
        /// </summary>
		[Description("The date that the report was issued.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("IssueDate", DataType="date")]
        public DateTime? IssueDate {
            get {
                return IssueDateField;
            } 
            set {
                IssueDateField = value;
                 this.IssueDateSpecified = true;
                NotifyPropertyChanged("IssueDate");
            }
        }

        private DateTime? IssueDateField; 

        /// <summary>
        /// IssueDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IssueDateSpecified {
            get {
                return IssueDateSpecifiedField;
            } 
            set {
                IssueDateSpecifiedField = value;
                NotifyPropertyChanged("IssueDateSpecified");
            }
        }

        private bool IssueDateSpecifiedField; 

        /// <summary>
        /// ApprovalDate property
        /// </summary>
		[Description("The date that the report was approved.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("ApprovalDate", DataType="date")]
        public DateTime? ApprovalDate {
            get {
                return ApprovalDateField;
            } 
            set {
                ApprovalDateField = value;
                 this.ApprovalDateSpecified = true;
                NotifyPropertyChanged("ApprovalDate");
            }
        }

        private DateTime? ApprovalDateField; 

        /// <summary>
        /// ApprovalDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ApprovalDateSpecified {
            get {
                return ApprovalDateSpecifiedField;
            } 
            set {
                ApprovalDateSpecifiedField = value;
                NotifyPropertyChanged("ApprovalDateSpecified");
            }
        }

        private bool ApprovalDateSpecifiedField; 

        /// <summary>
        /// Operator property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BusinessAssociate")]
		[XmlElement("Operator")]
        public BusinessAssociate Operator {
            get {
                return OperatorField;
            } 
            set {
                OperatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private BusinessAssociate OperatorField; 

        /// <summary>
        /// IssuedBy property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BusinessAssociate")]
		[XmlElement("IssuedBy")]
        public BusinessAssociate IssuedBy {
            get {
                return IssuedByField;
            } 
            set {
                IssuedByField = value;
                NotifyPropertyChanged("IssuedBy");
            }
        }

        private BusinessAssociate IssuedByField; 

        /// <summary>
        /// Approver property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BusinessAssociate")]
		[XmlElement("Approver")]
        public BusinessAssociate Approver {
            get {
                return ApproverField;
            } 
            set {
                ApproverField = value;
                NotifyPropertyChanged("Approver");
            }
        }

        private BusinessAssociate ApproverField; 

        /// <summary>
        /// GeographicContext property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GeographicContext")]
		[XmlElement("GeographicContext")]
        public GeographicContext GeographicContext {
            get {
                return GeographicContextField;
            } 
            set {
                GeographicContextField = value;
                NotifyPropertyChanged("GeographicContext");
            }
        }

        private GeographicContext GeographicContextField; 


    } //here

    /// <summary>
    /// This class represents the ProductionOperation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the ProductionOperation xsd type.")]
    public partial class ProductionOperation : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Installation property
        /// </summary>
		[Description("The name of the facility which is represented by this report. The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("Installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return InstallationField;
            } 
            set {
                InstallationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct InstallationField; 

        /// <summary>
        /// ContextFacility property
        /// </summary>
		[Description("The name and type of a facility whose context is relevant to the represented installation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("ContextFacility")]
        public List<FacilityIdentifierStruct> ContextFacility {
            get {
                return ContextFacilityField;
            } 
            set {
                ContextFacilityField = value;
                NotifyPropertyChanged("ContextFacility");
            }
        }

         /// <summary>
         /// bool to indicate if ContextFacility has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContextFacilitySpecified
         {
             get {
             if(ContextFacilityField!=null)
                 return ContextFacilityField.Count>0?true:false;
             else return false;
             }
         }
        private List<FacilityIdentifierStruct> ContextFacilityField; 

        /// <summary>
        /// Kind property
        /// </summary>
		[StringLength(64)]
        [Description("The type of report.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Kind")]
        public string Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string KindField; 

        /// <summary>
        /// PeriodKind property
        /// </summary>
		[Description("The type of period that is being reported. This value must be consistent with the reporting start and end values.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingDurationKind")]
		[XmlElement("PeriodKind")]
        public ReportingDurationKind? PeriodKind {
            get {
                return PeriodKindField;
            } 
            set {
                PeriodKindField = value;
                 this.PeriodKindSpecified = true;
                NotifyPropertyChanged("PeriodKind");
            }
        }

        private ReportingDurationKind? PeriodKindField; 

        /// <summary>
        /// PeriodKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PeriodKindSpecified {
            get {
                return PeriodKindSpecifiedField;
            } 
            set {
                PeriodKindSpecifiedField = value;
                NotifyPropertyChanged("PeriodKindSpecified");
            }
        }

        private bool PeriodKindSpecifiedField; 

        /// <summary>
        /// IssueDate property
        /// </summary>
		[Description("The date that the report was issued.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("IssueDate", DataType="date")]
        public DateTime? IssueDate {
            get {
                return IssueDateField;
            } 
            set {
                IssueDateField = value;
                 this.IssueDateSpecified = true;
                NotifyPropertyChanged("IssueDate");
            }
        }

        private DateTime? IssueDateField; 

        /// <summary>
        /// IssueDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IssueDateSpecified {
            get {
                return IssueDateSpecifiedField;
            } 
            set {
                IssueDateSpecifiedField = value;
                NotifyPropertyChanged("IssueDateSpecified");
            }
        }

        private bool IssueDateSpecifiedField; 

        /// <summary>
        /// Title property
        /// </summary>
		[Description("The title of the report, if different from the name of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "NameStruct")]
		[XmlElement("Title")]
        public NameStruct Title {
            get {
                return TitleField;
            } 
            set {
                TitleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private NameStruct TitleField; 

        /// <summary>
        /// ApprovalDate property
        /// </summary>
		[Description("The date that the report was approved.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("ApprovalDate", DataType="date")]
        public DateTime? ApprovalDate {
            get {
                return ApprovalDateField;
            } 
            set {
                ApprovalDateField = value;
                 this.ApprovalDateSpecified = true;
                NotifyPropertyChanged("ApprovalDate");
            }
        }

        private DateTime? ApprovalDateField; 

        /// <summary>
        /// ApprovalDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ApprovalDateSpecified {
            get {
                return ApprovalDateSpecifiedField;
            } 
            set {
                ApprovalDateSpecifiedField = value;
                NotifyPropertyChanged("ApprovalDateSpecified");
            }
        }

        private bool ApprovalDateSpecifiedField; 

        /// <summary>
        /// InstallationReport property
        /// </summary>
		[Description("A report for each installation")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductionOperationInstallationReport")]
		[XmlElement("InstallationReport")]
        public List<ProductionOperationInstallationReport> InstallationReport {
            get {
                return InstallationReportField;
            } 
            set {
                InstallationReportField = value;
                NotifyPropertyChanged("InstallationReport");
            }
        }

         /// <summary>
         /// bool to indicate if InstallationReport has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InstallationReportSpecified
         {
             get {
             if(InstallationReportField!=null)
                 return InstallationReportField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationInstallationReport> InstallationReportField; 

        /// <summary>
        /// IssuedBy property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BusinessAssociate")]
		[XmlElement("IssuedBy")]
        public BusinessAssociate IssuedBy {
            get {
                return IssuedByField;
            } 
            set {
                IssuedByField = value;
                NotifyPropertyChanged("IssuedBy");
            }
        }

        private BusinessAssociate IssuedByField; 

        /// <summary>
        /// Approver property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BusinessAssociate")]
		[XmlElement("Approver")]
        public BusinessAssociate Approver {
            get {
                return ApproverField;
            } 
            set {
                ApproverField = value;
                NotifyPropertyChanged("Approver");
            }
        }

        private BusinessAssociate ApproverField; 

        /// <summary>
        /// Operator property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BusinessAssociate")]
		[XmlElement("Operator")]
        public BusinessAssociate Operator {
            get {
                return OperatorField;
            } 
            set {
                OperatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private BusinessAssociate OperatorField; 

        /// <summary>
        /// GeographicContext property
        /// </summary>
		[Description("The geographic context of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GeographicContext")]
		[XmlElement("GeographicContext")]
        public GeographicContext GeographicContext {
            get {
                return GeographicContextField;
            } 
            set {
                GeographicContextField = value;
                NotifyPropertyChanged("GeographicContext");
            }
        }

        private GeographicContext GeographicContextField; 

        /// <summary>
        /// DateTime property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDateTimeClass")]
		[XmlElement("DateTime")]
        public AbstractDateTimeClass DateTime {
            get {
                return DateTimeField;
            } 
            set {
                DateTimeField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private AbstractDateTimeClass DateTimeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractDateTimeClass xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StartEndTime))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StartEndDate))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractDateTimeClass", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractDateTimeClass xsd type.")]
    public abstract partial class AbstractDateTimeClass : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DTime.
        /// </summary>
		[Description("DTime.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTime")]
        public Timestamp? DTime {
            get {
                return DTimeField;
            } 
            set {
                DTimeField = value;
                 this.DTimeSpecified = true;
                NotifyPropertyChanged("DTime");
            }
        }

        private Timestamp? DTimeField; 

        /// <summary>
        /// DTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DTimeSpecified {
            get {
                return DTimeSpecifiedField;
            } 
            set {
                DTimeSpecifiedField = value;
                NotifyPropertyChanged("DTimeSpecified");
            }
        }

        private bool DTimeSpecifiedField; 

        /// <summary>
        /// Date.
        /// </summary>
		[Description("Date.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("Date", DataType="date")]
        public DateTime? Date {
            get {
                return DateField;
            } 
            set {
                DateField = value;
                 this.DateSpecified = true;
                NotifyPropertyChanged("Date");
            }
        }

        private DateTime? DateField; 

        /// <summary>
        /// DateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateSpecified {
            get {
                return DateSpecifiedField;
            } 
            set {
                DateSpecifiedField = value;
                NotifyPropertyChanged("DateSpecified");
            }
        }

        private bool DateSpecifiedField; 

        /// <summary>
        /// Month. 
        /// </summary>
		[RegularExpression("([1-9][0-9][0-9][0-9])-(([0][0-9])|([1][0-2]))")]
        [Description("Month.")]
        [EnergisticsDataTypeAttribute(DataType = "CalendarMonth")]
		[XmlElement("Month")]
        public string Month {
            get {
                return MonthField;
            } 
            set {
                MonthField = value;
                NotifyPropertyChanged("Month");
            }
        }

        private string MonthField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StartEndTime xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StartEndTime", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the StartEndTime xsd type.")]
    public partial class StartEndTime : AbstractDateTimeClass, INotifyPropertyChanged
    {

        /// <summary>
        /// The beginning date and time that the period represents.
        /// </summary>
		[Description("The beginning date and time that the period represents.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? DTimStartField; 

        /// <summary>
        /// DTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DTimStartSpecifiedField;
            } 
            set {
                DTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool DTimStartSpecifiedField; 

        /// <summary>
        /// The ending date and time that the period represents.
        /// </summary>
		[Description("The ending date and time that the period represents.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? DTimEndField; 

        /// <summary>
        /// DTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DTimEndSpecifiedField;
            } 
            set {
                DTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool DTimEndSpecifiedField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StartEndDate xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StartEndDate", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the StartEndDate xsd type.")]
    public partial class StartEndDate : AbstractDateTimeClass, INotifyPropertyChanged
    {

        /// <summary>
        /// The beginning date that the period represents.
        /// </summary>
		[Description("The beginning date that the period represents.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("DateStart", DataType="date")]
        public DateTime? DateStart {
            get {
                return DateStartField;
            } 
            set {
                DateStartField = value;
                 this.DateStartSpecified = true;
                NotifyPropertyChanged("DateStart");
            }
        }

        private DateTime? DateStartField; 

        /// <summary>
        /// DateStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateStartSpecified {
            get {
                return DateStartSpecifiedField;
            } 
            set {
                DateStartSpecifiedField = value;
                NotifyPropertyChanged("DateStartSpecified");
            }
        }

        private bool DateStartSpecifiedField; 

        /// <summary>
        /// The ending date that the period represents.
        /// </summary>
		[Description("The ending date that the period represents.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("DateEnd", DataType="date")]
        public DateTime? DateEnd {
            get {
                return DateEndField;
            } 
            set {
                DateEndField = value;
                 this.DateEndSpecified = true;
                NotifyPropertyChanged("DateEnd");
            }
        }

        private DateTime? DateEndField; 

        /// <summary>
        /// DateEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateEndSpecified {
            get {
                return DateEndSpecifiedField;
            } 
            set {
                DateEndSpecifiedField = value;
                NotifyPropertyChanged("DateEndSpecified");
            }
        }

        private bool DateEndSpecifiedField; 


    } //here
    }

    /// <summary>
    /// This class represents the WftRun xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the WftRun xsd type.")]
    public partial class WftRun : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ObjectGrowing property
        /// </summary>
		[Description("The growing state of the object. This value is only relevant within the context of a server. This is an API server parameter related to a WITSML \"growing\" object (e.g., trajectory, logs, mud logs).")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("ObjectGrowing")]
        public bool? ObjectGrowing {
            get {
                return ObjectGrowingField;
            } 
            set {
                ObjectGrowingField = value;
                 this.ObjectGrowingSpecified = true;
                NotifyPropertyChanged("ObjectGrowing");
            }
        }

        private bool? ObjectGrowingField; 

        /// <summary>
        /// ObjectGrowingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ObjectGrowingSpecified {
            get {
                return ObjectGrowingSpecifiedField;
            } 
            set {
                ObjectGrowingSpecifiedField = value;
                NotifyPropertyChanged("ObjectGrowingSpecified");
            }
        }

        private bool ObjectGrowingSpecifiedField; 

        /// <summary>
        /// TieInLogReference property
        /// </summary>
		[Description("References a log containing a WFT tie-in (e.g. gamma ray) log vs. depth data.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("TieInLogReference")]
        public DataObjectReference TieInLogReference {
            get {
                return TieInLogReferenceField;
            } 
            set {
                TieInLogReferenceField = value;
                NotifyPropertyChanged("TieInLogReference");
            }
        }

        private DataObjectReference TieInLogReferenceField; 

        /// <summary>
        /// ServiceCompany property
        /// </summary>
		[StringLength(64)]
        [Description("Name of contractor who provided the service.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ServiceCompany")]
        public string ServiceCompany {
            get {
                return ServiceCompanyField;
            } 
            set {
                ServiceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private string ServiceCompanyField; 

        /// <summary>
        /// DTimStart property
        /// </summary>
		[Description("The date and time when the data collection started.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimStart")]
        public DateTime? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? DTimStartField; 

        /// <summary>
        /// DTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DTimStartSpecifiedField;
            } 
            set {
                DTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool DTimStartSpecifiedField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[Description("The date and time when the data collection completed.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? DTimEndField; 

        /// <summary>
        /// DTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DTimEndSpecifiedField;
            } 
            set {
                DTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool DTimEndSpecifiedField; 

        /// <summary>
        /// MinIndex property
        /// </summary>
		[Description("The minimum station depth within this WFT run. This is an API \"structural-range\" query parameter for growing objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MinIndex")]
        public MeasuredDepthCoord MinIndex {
            get {
                return MinIndexField;
            } 
            set {
                MinIndexField = value;
                NotifyPropertyChanged("MinIndex");
            }
        }

        private MeasuredDepthCoord MinIndexField; 

        /// <summary>
        /// MaxIndex property
        /// </summary>
		[Description("The maximum station depth within this WFT. This is an API \"structural-range\" query parameter for growing objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MaxIndex")]
        public MeasuredDepthCoord MaxIndex {
            get {
                return MaxIndexField;
            } 
            set {
                MaxIndexField = value;
                NotifyPropertyChanged("MaxIndex");
            }
        }

        private MeasuredDepthCoord MaxIndexField; 

        /// <summary>
        /// WellboreReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WellboreReference")]
        public DataObjectReference WellboreReference {
            get {
                return WellboreReferenceField;
            } 
            set {
                WellboreReferenceField = value;
                NotifyPropertyChanged("WellboreReference");
            }
        }

        private DataObjectReference WellboreReferenceField; 

        /// <summary>
        /// Result property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WftTestResult")]
		[XmlElement("Result")]
        public List<WftTestResult> Result {
            get {
                return ResultField;
            } 
            set {
                ResultField = value;
                NotifyPropertyChanged("Result");
            }
        }

         /// <summary>
         /// bool to indicate if Result has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ResultSpecified
         {
             get {
             if(ResultField!=null)
                 return ResultField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftTestResult> ResultField; 

        /// <summary>
        /// Station property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WftStation")]
		[XmlElement("Station")]
        public List<WftStation> Station {
            get {
                return StationField;
            } 
            set {
                StationField = value;
                NotifyPropertyChanged("Station");
            }
        }

         /// <summary>
         /// bool to indicate if Station has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StationSpecified
         {
             get {
             if(StationField!=null)
                 return StationField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftStation> StationField; 


    } //here

    /// <summary>
    /// This class represents the FluidSampleAcquisitionJob xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the FluidSampleAcquisitionJob xsd type.")]
    public partial class FluidSampleAcquisitionJob : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// EstimatedStartDate property
        /// </summary>
		[Description("The date when fluid acquisition started.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("EstimatedStartDate", DataType="date")]
        public DateTime? EstimatedStartDate {
            get {
                return EstimatedStartDateField;
            } 
            set {
                EstimatedStartDateField = value;
                 this.EstimatedStartDateSpecified = true;
                NotifyPropertyChanged("EstimatedStartDate");
            }
        }

        private DateTime? EstimatedStartDateField; 

        /// <summary>
        /// EstimatedStartDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EstimatedStartDateSpecified {
            get {
                return EstimatedStartDateSpecifiedField;
            } 
            set {
                EstimatedStartDateSpecifiedField = value;
                NotifyPropertyChanged("EstimatedStartDateSpecified");
            }
        }

        private bool EstimatedStartDateSpecifiedField; 

        /// <summary>
        /// Operation property
        /// </summary>
		[StringLength(64)]
        [Description("A reference to an operation described in another data object, which contains the details of the acquisition.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Operation")]
        public string Operation {
            get {
                return OperationField;
            } 
            set {
                OperationField = value;
                NotifyPropertyChanged("Operation");
            }
        }

        private string OperationField; 

        /// <summary>
        /// FieldNoteReference property
        /// </summary>
		[Description("The reference uid of an attached object that stores the field note.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("FieldNoteReference")]
        public List<DataObjectReference> FieldNoteReference {
            get {
                return FieldNoteReferenceField;
            } 
            set {
                FieldNoteReferenceField = value;
                NotifyPropertyChanged("FieldNoteReference");
            }
        }

         /// <summary>
         /// bool to indicate if FieldNoteReference has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FieldNoteReferenceSpecified
         {
             get {
             if(FieldNoteReferenceField!=null)
                 return FieldNoteReferenceField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> FieldNoteReferenceField; 

        /// <summary>
        /// FluidSampleAcquisition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidSampleAcquisition")]
		[XmlElement("FluidSampleAcquisition")]
        public List<FluidSampleAcquisition> FluidSampleAcquisition {
            get {
                return FluidSampleAcquisitionField;
            } 
            set {
                FluidSampleAcquisitionField = value;
                NotifyPropertyChanged("FluidSampleAcquisition");
            }
        }

         /// <summary>
         /// bool to indicate if FluidSampleAcquisition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidSampleAcquisitionSpecified
         {
             get {
             if(FluidSampleAcquisitionField!=null)
                 return FluidSampleAcquisitionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidSampleAcquisition> FluidSampleAcquisitionField; 

        /// <summary>
        /// FluidSystemReference property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("FluidSystemReference")]
        public DataObjectReference FluidSystemReference {
            get {
                return FluidSystemReferenceField;
            } 
            set {
                FluidSystemReferenceField = value;
                NotifyPropertyChanged("FluidSystemReference");
            }
        }

        private DataObjectReference FluidSystemReferenceField; 


    } //here

    /// <summary>
    /// This class represents the FluidSystem xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the FluidSystem xsd type.")]
    public partial class FluidSystem : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// StandardConditions property
        /// </summary>
		[Required]
        [Description("The standard temperature and pressure used for the representation of this fluid system.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractTemperaturePressure")]
		[XmlElement("StandardConditions")]
        public AbstractTemperaturePressure StandardConditions {
            get {
                return StandardConditionsField;
            } 
            set {
                StandardConditionsField = value;
                NotifyPropertyChanged("StandardConditions");
            }
        }

        private AbstractTemperaturePressure StandardConditionsField; 

        /// <summary>
        /// ReservoirFluidKind property
        /// </summary>
		[Required]
        [Description("The kind of reservoir fluid for this fluid system. Enum. See reservoir fluid kind.")]
        [EnergisticsDataTypeAttribute(DataType = "ReservoirFluidKind")]
		[XmlElement("ReservoirFluidKind")]
        public ReservoirFluidKind? ReservoirFluidKind {
            get {
                return ReservoirFluidKindField;
            } 
            set {
                ReservoirFluidKindField = value;
                 this.ReservoirFluidKindSpecified = true;
                NotifyPropertyChanged("ReservoirFluidKind");
            }
        }

        
        private bool ReservoirFluidKindSpecifiedField = false;
        
        /// <summary>
        /// ReservoirFluidKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReservoirFluidKindSpecified {
            get {
                return ReservoirFluidKindSpecifiedField;
            } 
            set {
                ReservoirFluidKindSpecifiedField = value;
                NotifyPropertyChanged("ReservoirFluidKindSpecified");
            }
        }
        
        private ReservoirFluidKind? ReservoirFluidKindField; 

        /// <summary>
        /// PhasesPresent property
        /// </summary>
		[Description("The phases present for this fluid system. Enum. See phase present.")]
        [EnergisticsDataTypeAttribute(DataType = "PhasePresent")]
		[XmlElement("PhasesPresent")]
        public PhasePresent? PhasesPresent {
            get {
                return PhasesPresentField;
            } 
            set {
                PhasesPresentField = value;
                 this.PhasesPresentSpecified = true;
                NotifyPropertyChanged("PhasesPresent");
            }
        }

        private PhasePresent? PhasesPresentField; 

        /// <summary>
        /// PhasesPresentSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PhasesPresentSpecified {
            get {
                return PhasesPresentSpecifiedField;
            } 
            set {
                PhasesPresentSpecifiedField = value;
                NotifyPropertyChanged("PhasesPresentSpecified");
            }
        }

        private bool PhasesPresentSpecifiedField; 

        /// <summary>
        /// ReservoirLifeCycleState property
        /// </summary>
		[Description("The reservoir life cycle state for this fluid system. Enum. See reservoir life cycle state.")]
        [EnergisticsDataTypeAttribute(DataType = "ReservoirLifeCycleState")]
		[XmlElement("ReservoirLifeCycleState")]
        public ReservoirLifeCycleState? ReservoirLifeCycleState {
            get {
                return ReservoirLifeCycleStateField;
            } 
            set {
                ReservoirLifeCycleStateField = value;
                 this.ReservoirLifeCycleStateSpecified = true;
                NotifyPropertyChanged("ReservoirLifeCycleState");
            }
        }

        private ReservoirLifeCycleState? ReservoirLifeCycleStateField; 

        /// <summary>
        /// ReservoirLifeCycleStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReservoirLifeCycleStateSpecified {
            get {
                return ReservoirLifeCycleStateSpecifiedField;
            } 
            set {
                ReservoirLifeCycleStateSpecifiedField = value;
                NotifyPropertyChanged("ReservoirLifeCycleStateSpecified");
            }
        }

        private bool ReservoirLifeCycleStateSpecifiedField; 

        /// <summary>
        /// RockFluidUnitFeatureReference property
        /// </summary>
		[Description("Reference to a RockFluidUnitFeature (a RESQML data object).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("RockFluidUnitFeatureReference")]
        public List<DataObjectReference> RockFluidUnitFeatureReference {
            get {
                return RockFluidUnitFeatureReferenceField;
            } 
            set {
                RockFluidUnitFeatureReferenceField = value;
                NotifyPropertyChanged("RockFluidUnitFeatureReference");
            }
        }

         /// <summary>
         /// bool to indicate if RockFluidUnitFeatureReference has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RockFluidUnitFeatureReferenceSpecified
         {
             get {
             if(RockFluidUnitFeatureReferenceField!=null)
                 return RockFluidUnitFeatureReferenceField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> RockFluidUnitFeatureReferenceField; 

        /// <summary>
        /// SaturationPressure property
        /// </summary>
		[Description("The saturation (or bubble point) pressure for the fluid system.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SaturationPressure")]
		[XmlElement("SaturationPressure")]
        public SaturationPressure SaturationPressure {
            get {
                return SaturationPressureField;
            } 
            set {
                SaturationPressureField = value;
                NotifyPropertyChanged("SaturationPressure");
            }
        }

        private SaturationPressure SaturationPressureField; 

        /// <summary>
        /// SolutionGOR property
        /// </summary>
		[Required]
        [Description("The solution gas-oil ratio for this fluid system.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("SolutionGOR")]
        public VolumePerVolumeMeasure SolutionGOR {
            get {
                return SolutionGORField;
            } 
            set {
                SolutionGORField = value;
                NotifyPropertyChanged("SolutionGOR");
            }
        }

        private VolumePerVolumeMeasure SolutionGORField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// FormationWater property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FormationWater")]
		[XmlElement("FormationWater")]
        public FormationWater FormationWater {
            get {
                return FormationWaterField;
            } 
            set {
                FormationWaterField = value;
                NotifyPropertyChanged("FormationWater");
            }
        }

        private FormationWater FormationWaterField; 

        /// <summary>
        /// StockTankOil property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "StockTankOil")]
		[XmlElement("StockTankOil")]
        public StockTankOil StockTankOil {
            get {
                return StockTankOilField;
            } 
            set {
                StockTankOilField = value;
                NotifyPropertyChanged("StockTankOil");
            }
        }

        private StockTankOil StockTankOilField; 

        /// <summary>
        /// NaturalGas property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "NaturalGas")]
		[XmlElement("NaturalGas")]
        public NaturalGas NaturalGas {
            get {
                return NaturalGasField;
            } 
            set {
                NaturalGasField = value;
                NotifyPropertyChanged("NaturalGas");
            }
        }

        private NaturalGas NaturalGasField; 


    } //here

    /// <summary>
    /// This class represents the ReportingHierarchy xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the ReportingHierarchy xsd type.")]
    public partial class ReportingHierarchy : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ReportingNode property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ReportingHierarchyNode")]
		[XmlElement("ReportingNode")]
        public List<ReportingHierarchyNode> ReportingNode {
            get {
                return ReportingNodeField;
            } 
            set {
                ReportingNodeField = value;
                NotifyPropertyChanged("ReportingNode");
            }
        }

         /// <summary>
         /// bool to indicate if ReportingNode has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ReportingNodeSpecified
         {
             get {
             if(ReportingNodeField!=null)
                 return ReportingNodeField.Count>0?true:false;
             else return false;
             }
         }
        private List<ReportingHierarchyNode> ReportingNodeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ReportingHierarchyNode xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ReportingHierarchyNode", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ReportingHierarchyNode xsd type.")]
    public partial class ReportingHierarchyNode : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ChildNode property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ReportingHierarchyNode")]
		[XmlElement("ChildNode")]
        public List<ReportingHierarchyNode> ChildNode {
            get {
                return ChildNodeField;
            } 
            set {
                ChildNodeField = value;
                NotifyPropertyChanged("ChildNode");
            }
        }

         /// <summary>
         /// bool to indicate if ChildNode has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ChildNodeSpecified
         {
             get {
             if(ChildNodeField!=null)
                 return ChildNodeField.Count>0?true:false;
             else return false;
             }
         }
        private List<ReportingHierarchyNode> ChildNodeField; 

        /// <summary>
        /// ReportingEnitityReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ReportingEnitityReference")]
        public DataObjectReference ReportingEnitityReference {
            get {
                return ReportingEnitityReferenceField;
            } 
            set {
                ReportingEnitityReferenceField = value;
                NotifyPropertyChanged("ReportingEnitityReference");
            }
        }

        private DataObjectReference ReportingEnitityReferenceField; 

		/// <summary>
        /// The identification of node.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The identification of node.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("id")]
		
        public string Id {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private string idField; 

		/// <summary>
        /// The entity name.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The entity name.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("name")]
		
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the ReportingEntity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the ReportingEntity xsd type.")]
    public partial class ReportingEntity : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Kind property
        /// </summary>
		[Required]
        [Description("The type of reporting entity.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingEntityKind")]
		[XmlElement("Kind")]
        public ReportingEntityKind? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        
        private bool KindSpecifiedField = false;
        
        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }
        
        private ReportingEntityKind? KindField; 

        /// <summary>
        /// TargetFacilityReference property
        /// </summary>
		[Description("Reference to the target facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("TargetFacilityReference")]
        public DataObjectReference TargetFacilityReference {
            get {
                return TargetFacilityReferenceField;
            } 
            set {
                TargetFacilityReferenceField = value;
                NotifyPropertyChanged("TargetFacilityReference");
            }
        }

        private DataObjectReference TargetFacilityReferenceField; 

        /// <summary>
        /// Alias property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ObjectAlias")]
		[XmlElement("Alias")]
        public List<ObjectAlias> Alias {
            get {
                return AliasField;
            } 
            set {
                AliasField = value;
                NotifyPropertyChanged("Alias");
            }
        }

         /// <summary>
         /// bool to indicate if Alias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AliasSpecified
         {
             get {
             if(AliasField!=null)
                 return AliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<ObjectAlias> AliasField; 


    } //here

    /// <summary>
    /// This class represents the FluidAnalysis xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WaterAnalysis))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HydrocarbonAnalysis))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the FluidAnalysis xsd type.")]
    public partial class FluidAnalysis : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// RequestDate property
        /// </summary>
		[Description("The date the analysis was requested.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("RequestDate", DataType="date")]
        public DateTime? RequestDate {
            get {
                return RequestDateField;
            } 
            set {
                RequestDateField = value;
                 this.RequestDateSpecified = true;
                NotifyPropertyChanged("RequestDate");
            }
        }

        private DateTime? RequestDateField; 

        /// <summary>
        /// RequestDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RequestDateSpecified {
            get {
                return RequestDateSpecifiedField;
            } 
            set {
                RequestDateSpecifiedField = value;
                NotifyPropertyChanged("RequestDateSpecified");
            }
        }

        private bool RequestDateSpecifiedField; 

        /// <summary>
        /// AnalysisDescription property
        /// </summary>
		[StringLength(2000)]
        [Description("The description about the analysis.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("AnalysisDescription")]
        public string AnalysisDescription {
            get {
                return AnalysisDescriptionField;
            } 
            set {
                AnalysisDescriptionField = value;
                NotifyPropertyChanged("AnalysisDescription");
            }
        }

        private string AnalysisDescriptionField; 

        /// <summary>
        /// AnalysisPurpose property
        /// </summary>
		[StringLength(2000)]
        [Description("The purpose of this analysis.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("AnalysisPurpose")]
        public string AnalysisPurpose {
            get {
                return AnalysisPurposeField;
            } 
            set {
                AnalysisPurposeField = value;
                NotifyPropertyChanged("AnalysisPurpose");
            }
        }

        private string AnalysisPurposeField; 

        /// <summary>
        /// AnalysisSite property
        /// </summary>
		[StringLength(2000)]
        [Description("The location site of the analysis.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("AnalysisSite")]
        public string AnalysisSite {
            get {
                return AnalysisSiteField;
            } 
            set {
                AnalysisSiteField = value;
                NotifyPropertyChanged("AnalysisSite");
            }
        }

        private string AnalysisSiteField; 

        /// <summary>
        /// LabContact property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the analyst or user who is responsible for the results.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("LabContact")]
        public string LabContact {
            get {
                return LabContactField;
            } 
            set {
                LabContactField = value;
                NotifyPropertyChanged("LabContact");
            }
        }

        private string LabContactField; 

        /// <summary>
        /// StandardConditions property
        /// </summary>
		[Description("The standard temperature and pressure used for the representation of this fluid analysis.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractTemperaturePressure")]
		[XmlElement("StandardConditions")]
        public AbstractTemperaturePressure StandardConditions {
            get {
                return StandardConditionsField;
            } 
            set {
                StandardConditionsField = value;
                NotifyPropertyChanged("StandardConditions");
            }
        }

        private AbstractTemperaturePressure StandardConditionsField; 

        /// <summary>
        /// AnalysisQuality property
        /// </summary>
		[Required]
        [Description("Enum for the quality of this analysis.  See sample quality.")]
        [EnergisticsDataTypeAttribute(DataType = "SampleQuality")]
		[XmlElement("AnalysisQuality")]
        public SampleQuality? AnalysisQuality {
            get {
                return AnalysisQualityField;
            } 
            set {
                AnalysisQualityField = value;
                 this.AnalysisQualitySpecified = true;
                NotifyPropertyChanged("AnalysisQuality");
            }
        }

        
        private bool AnalysisQualitySpecifiedField = false;
        
        /// <summary>
        /// AnalysisQualitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AnalysisQualitySpecified {
            get {
                return AnalysisQualitySpecifiedField;
            } 
            set {
                AnalysisQualitySpecifiedField = value;
                NotifyPropertyChanged("AnalysisQualitySpecified");
            }
        }
        
        private SampleQuality? AnalysisQualityField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// FluidSampleReference property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("FluidSampleReference")]
        public DataObjectReference FluidSampleReference {
            get {
                return FluidSampleReferenceField;
            } 
            set {
                FluidSampleReferenceField = value;
                NotifyPropertyChanged("FluidSampleReference");
            }
        }

        private DataObjectReference FluidSampleReferenceField; 

        /// <summary>
        /// FluidAnalysisReport property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidAnalysisReport")]
		[XmlElement("FluidAnalysisReport")]
        public List<FluidAnalysisReport> FluidAnalysisReport {
            get {
                return FluidAnalysisReportField;
            } 
            set {
                FluidAnalysisReportField = value;
                NotifyPropertyChanged("FluidAnalysisReport");
            }
        }

         /// <summary>
         /// bool to indicate if FluidAnalysisReport has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidAnalysisReportSpecified
         {
             get {
             if(FluidAnalysisReportField!=null)
                 return FluidAnalysisReportField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidAnalysisReport> FluidAnalysisReportField; 

        /// <summary>
        /// SampleContaminant property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "SampleContaminant")]
		[XmlElement("SampleContaminant")]
        public List<SampleContaminant> SampleContaminant {
            get {
                return SampleContaminantField;
            } 
            set {
                SampleContaminantField = value;
                NotifyPropertyChanged("SampleContaminant");
            }
        }

         /// <summary>
         /// bool to indicate if SampleContaminant has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SampleContaminantSpecified
         {
             get {
             if(SampleContaminantField!=null)
                 return SampleContaminantField.Count>0?true:false;
             else return false;
             }
         }
        private List<SampleContaminant> SampleContaminantField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidAnalysisReport xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidAnalysisReport", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidAnalysisReport xsd type.")]
    public partial class FluidAnalysisReport : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// ReportIdentifier property
        /// </summary>
		[StringLength(64)]
        [Description("The identifier of this fluid analysis report.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ReportIdentifier")]
        public string ReportIdentifier {
            get {
                return ReportIdentifierField;
            } 
            set {
                ReportIdentifierField = value;
                NotifyPropertyChanged("ReportIdentifier");
            }
        }

        private string ReportIdentifierField; 

        /// <summary>
        /// ReportDate property
        /// </summary>
		[Description("The date of this report.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("ReportDate", DataType="date")]
        public DateTime? ReportDate {
            get {
                return ReportDateField;
            } 
            set {
                ReportDateField = value;
                 this.ReportDateSpecified = true;
                NotifyPropertyChanged("ReportDate");
            }
        }

        private DateTime? ReportDateField; 

        /// <summary>
        /// ReportDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReportDateSpecified {
            get {
                return ReportDateSpecifiedField;
            } 
            set {
                ReportDateSpecifiedField = value;
                NotifyPropertyChanged("ReportDateSpecified");
            }
        }

        private bool ReportDateSpecifiedField; 

        /// <summary>
        /// Author property
        /// </summary>
		[StringLength(64)]
        [Description("The author of this fluid analysis report.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Author")]
        public string Author {
            get {
                return AuthorField;
            } 
            set {
                AuthorField = value;
                NotifyPropertyChanged("Author");
            }
        }

        private string AuthorField; 

        /// <summary>
        /// AnalysisLaboratory property
        /// </summary>
		[StringLength(64)]
        [Description("The laboratory that provided this fluid analysis report.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("AnalysisLaboratory")]
        public string AnalysisLaboratory {
            get {
                return AnalysisLaboratoryField;
            } 
            set {
                AnalysisLaboratoryField = value;
                NotifyPropertyChanged("AnalysisLaboratory");
            }
        }

        private string AnalysisLaboratoryField; 

        /// <summary>
        /// ReportDocumentReference property
        /// </summary>
		[Description("A reference to the report document, which will use the Energistics Attachment Object.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ReportDocumentReference")]
        public DataObjectReference ReportDocumentReference {
            get {
                return ReportDocumentReferenceField;
            } 
            set {
                ReportDocumentReferenceField = value;
                NotifyPropertyChanged("ReportDocumentReference");
            }
        }

        private DataObjectReference ReportDocumentReferenceField; 

        /// <summary>
        /// ReportLocation property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ReportLocation")]
		[XmlElement("ReportLocation")]
        public List<ReportLocation> ReportLocation {
            get {
                return ReportLocationField;
            } 
            set {
                ReportLocationField = value;
                NotifyPropertyChanged("ReportLocation");
            }
        }

         /// <summary>
         /// bool to indicate if ReportLocation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ReportLocationSpecified
         {
             get {
             if(ReportLocationField!=null)
                 return ReportLocationField.Count>0?true:false;
             else return false;
             }
         }
        private List<ReportLocation> ReportLocationField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ReportLocation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ReportLocation", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ReportLocation xsd type.")]
    public partial class ReportLocation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The date when this report was stored in this location.
        /// </summary>
		[Description("The date when this report was stored in this location.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("LocationDate", DataType="date")]
        public DateTime? LocationDate {
            get {
                return LocationDateField;
            } 
            set {
                LocationDateField = value;
                 this.LocationDateSpecified = true;
                NotifyPropertyChanged("LocationDate");
            }
        }

        private DateTime? LocationDateField; 

        /// <summary>
        /// LocationDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LocationDateSpecified {
            get {
                return LocationDateSpecifiedField;
            } 
            set {
                LocationDateSpecifiedField = value;
                NotifyPropertyChanged("LocationDateSpecified");
            }
        }

        private bool LocationDateSpecifiedField; 

        /// <summary>
        /// The type of location in which the report is to be located.
        /// </summary>
		[StringLength(64)]
        [Description("The type of location in which the report is to be located.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("LocationType")]
        public string LocationType {
            get {
                return LocationTypeField;
            } 
            set {
                LocationTypeField = value;
                NotifyPropertyChanged("LocationType");
            }
        }

        private string LocationTypeField; 

        /// <summary>
        /// The location of the report, e.g., a path or URL.
        /// </summary>
		[StringLength(64)]
        [Description("The location of the report, e.g., a path or URL.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Location")]
        public string Location {
            get {
                return LocationField;
            } 
            set {
                LocationField = value;
                NotifyPropertyChanged("Location");
            }
        }

        private string LocationField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SampleContaminant xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SampleContaminant", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the SampleContaminant xsd type.")]
    public partial class SampleContaminant : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// ContaminantKind property
        /// </summary>
		[Required]
        [Description("The kind of contaminant.")]
        [EnergisticsDataTypeAttribute(DataType = "FluidContaminant")]
		[XmlElement("ContaminantKind")]
        public FluidContaminant? ContaminantKind {
            get {
                return ContaminantKindField;
            } 
            set {
                ContaminantKindField = value;
                 this.ContaminantKindSpecified = true;
                NotifyPropertyChanged("ContaminantKind");
            }
        }

        
        private bool ContaminantKindSpecifiedField = false;
        
        /// <summary>
        /// ContaminantKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ContaminantKindSpecified {
            get {
                return ContaminantKindSpecifiedField;
            } 
            set {
                ContaminantKindSpecifiedField = value;
                NotifyPropertyChanged("ContaminantKindSpecified");
            }
        }
        
        private FluidContaminant? ContaminantKindField; 

        /// <summary>
        /// WeightFractionStockTank property
        /// </summary>
		[Description("The contaminant weight percent in stock tank oil.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("WeightFractionStockTank")]
        public MassPerMassMeasure WeightFractionStockTank {
            get {
                return WeightFractionStockTankField;
            } 
            set {
                WeightFractionStockTankField = value;
                NotifyPropertyChanged("WeightFractionStockTank");
            }
        }

        private MassPerMassMeasure WeightFractionStockTankField; 

        /// <summary>
        /// VolumeFractionStockTank property
        /// </summary>
		[Description("The contaminant volume percent in stock tank oil.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("VolumeFractionStockTank")]
        public VolumePerVolumeMeasure VolumeFractionStockTank {
            get {
                return VolumeFractionStockTankField;
            } 
            set {
                VolumeFractionStockTankField = value;
                NotifyPropertyChanged("VolumeFractionStockTank");
            }
        }

        private VolumePerVolumeMeasure VolumeFractionStockTankField; 

        /// <summary>
        /// WeightFractionLiveSample property
        /// </summary>
		[Description("The weight fraction of contaminant in the fluid sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("WeightFractionLiveSample")]
        public MassPerMassMeasure WeightFractionLiveSample {
            get {
                return WeightFractionLiveSampleField;
            } 
            set {
                WeightFractionLiveSampleField = value;
                NotifyPropertyChanged("WeightFractionLiveSample");
            }
        }

        private MassPerMassMeasure WeightFractionLiveSampleField; 

        /// <summary>
        /// VolumeFractionLiveSample property
        /// </summary>
		[Description("The volume fraction of contaminant in the fluid sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("VolumeFractionLiveSample")]
        public VolumePerVolumeMeasure VolumeFractionLiveSample {
            get {
                return VolumeFractionLiveSampleField;
            } 
            set {
                VolumeFractionLiveSampleField = value;
                NotifyPropertyChanged("VolumeFractionLiveSample");
            }
        }

        private VolumePerVolumeMeasure VolumeFractionLiveSampleField; 

        /// <summary>
        /// MolecularWeight property
        /// </summary>
		[Description("The molecular weight of contaminant in the fluid sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("MolecularWeight")]
        public MolecularWeightMeasure MolecularWeight {
            get {
                return MolecularWeightField;
            } 
            set {
                MolecularWeightField = value;
                NotifyPropertyChanged("MolecularWeight");
            }
        }

        private MolecularWeightMeasure MolecularWeightField; 

        /// <summary>
        /// Density property
        /// </summary>
		[Description("The density of contaminant in the fluid sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Density")]
        public MassPerVolumeMeasure Density {
            get {
                return DensityField;
            } 
            set {
                DensityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private MassPerVolumeMeasure DensityField; 

        /// <summary>
        /// ContaminantComposition property
        /// </summary>
		[Description("The composition of contaminant in the fluid sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LiquidComposition")]
		[XmlElement("ContaminantComposition")]
        public LiquidComposition ContaminantComposition {
            get {
                return ContaminantCompositionField;
            } 
            set {
                ContaminantCompositionField = value;
                NotifyPropertyChanged("ContaminantComposition");
            }
        }

        private LiquidComposition ContaminantCompositionField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("Description of the contaminant.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// SampleOfContaminantReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("SampleOfContaminantReference")]
        public DataObjectReference SampleOfContaminantReference {
            get {
                return SampleOfContaminantReferenceField;
            } 
            set {
                SampleOfContaminantReferenceField = value;
                NotifyPropertyChanged("SampleOfContaminantReference");
            }
        }

        private DataObjectReference SampleOfContaminantReferenceField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LiquidComposition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LiquidComposition", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the LiquidComposition xsd type.")]
    public partial class LiquidComposition : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// LiquidComponent property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidComponent")]
		[XmlElement("LiquidComponent")]
        public List<FluidComponent> LiquidComponent {
            get {
                return LiquidComponentField;
            } 
            set {
                LiquidComponentField = value;
                NotifyPropertyChanged("LiquidComponent");
            }
        }

         /// <summary>
         /// bool to indicate if LiquidComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LiquidComponentSpecified
         {
             get {
             if(LiquidComponentField!=null)
                 return LiquidComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidComponent> LiquidComponentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WaterAnalysis xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WaterAnalysis", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WaterAnalysis xsd type.")]
    public partial class WaterAnalysis : FluidAnalysis, INotifyPropertyChanged
    {

        /// <summary>
        /// SampleIntegrityAndPreparation property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SampleIntegrityAndPreparation")]
		[XmlElement("SampleIntegrityAndPreparation")]
        public SampleIntegrityAndPreparation SampleIntegrityAndPreparation {
            get {
                return SampleIntegrityAndPreparationField;
            } 
            set {
                SampleIntegrityAndPreparationField = value;
                NotifyPropertyChanged("SampleIntegrityAndPreparation");
            }
        }

        private SampleIntegrityAndPreparation SampleIntegrityAndPreparationField; 

        /// <summary>
        /// WaterAnalysisTest property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WaterAnalysisTest")]
		[XmlElement("WaterAnalysisTest")]
        public List<WaterAnalysisTest> WaterAnalysisTest {
            get {
                return WaterAnalysisTestField;
            } 
            set {
                WaterAnalysisTestField = value;
                NotifyPropertyChanged("WaterAnalysisTest");
            }
        }

         /// <summary>
         /// bool to indicate if WaterAnalysisTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WaterAnalysisTestSpecified
         {
             get {
             if(WaterAnalysisTestField!=null)
                 return WaterAnalysisTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<WaterAnalysisTest> WaterAnalysisTestField; 

        /// <summary>
        /// WaterSampleComponent property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WaterSampleComponent")]
		[XmlElement("WaterSampleComponent")]
        public List<WaterSampleComponent> WaterSampleComponent {
            get {
                return WaterSampleComponentField;
            } 
            set {
                WaterSampleComponentField = value;
                NotifyPropertyChanged("WaterSampleComponent");
            }
        }

         /// <summary>
         /// bool to indicate if WaterSampleComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WaterSampleComponentSpecified
         {
             get {
             if(WaterSampleComponentField!=null)
                 return WaterSampleComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<WaterSampleComponent> WaterSampleComponentField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SampleIntegrityAndPreparation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SampleIntegrityAndPreparation", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the SampleIntegrityAndPreparation xsd type.")]
    public partial class SampleIntegrityAndPreparation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// OpeningDate property
        /// </summary>
		[Required]
        [Description("The date when this fluid sample was opened.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("OpeningDate", DataType="date")]
        public DateTime? OpeningDate {
            get {
                return OpeningDateField;
            } 
            set {
                OpeningDateField = value;
                NotifyPropertyChanged("OpeningDate");
            }
        }

        private DateTime? OpeningDateField; 

        /// <summary>
        /// InitialVolume property
        /// </summary>
		[Description("The initial volume of the sample when prepared for analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("InitialVolume")]
        public VolumeMeasure InitialVolume {
            get {
                return InitialVolumeField;
            } 
            set {
                InitialVolumeField = value;
                NotifyPropertyChanged("InitialVolume");
            }
        }

        private VolumeMeasure InitialVolumeField; 

        /// <summary>
        /// OpeningPressure property
        /// </summary>
		[Description("The opening pressure of the sample when prepared for analysis.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("OpeningPressure")]
        public AbstractPressureValue OpeningPressure {
            get {
                return OpeningPressureField;
            } 
            set {
                OpeningPressureField = value;
                NotifyPropertyChanged("OpeningPressure");
            }
        }

        private AbstractPressureValue OpeningPressureField; 

        /// <summary>
        /// OpeningTemperature property
        /// </summary>
		[Description("The opening temperature of the sample when prepared for analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("OpeningTemperature")]
        public ThermodynamicTemperatureMeasure OpeningTemperature {
            get {
                return OpeningTemperatureField;
            } 
            set {
                OpeningTemperatureField = value;
                NotifyPropertyChanged("OpeningTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure OpeningTemperatureField; 

        /// <summary>
        /// SaturationPressure property
        /// </summary>
		[Description("The saturation (or bubble point) pressure measured in this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SaturationPressure")]
		[XmlElement("SaturationPressure")]
        public SaturationPressure SaturationPressure {
            get {
                return SaturationPressureField;
            } 
            set {
                SaturationPressureField = value;
                NotifyPropertyChanged("SaturationPressure");
            }
        }

        private SaturationPressure SaturationPressureField; 

        /// <summary>
        /// SaturationTemperature property
        /// </summary>
		[Description("The saturation temperature of the sample when prepared for analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SaturationTemperature")]
		[XmlElement("SaturationTemperature")]
        public SaturationTemperature SaturationTemperature {
            get {
                return SaturationTemperatureField;
            } 
            set {
                SaturationTemperatureField = value;
                NotifyPropertyChanged("SaturationTemperature");
            }
        }

        private SaturationTemperature SaturationTemperatureField; 

        /// <summary>
        /// BasicSedimentAndWater property
        /// </summary>
		[Description("The basic sediment and water of the sample when prepared for analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("BasicSedimentAndWater")]
        public VolumePerVolumeMeasure BasicSedimentAndWater {
            get {
                return BasicSedimentAndWaterField;
            } 
            set {
                BasicSedimentAndWaterField = value;
                NotifyPropertyChanged("BasicSedimentAndWater");
            }
        }

        private VolumePerVolumeMeasure BasicSedimentAndWaterField; 

        /// <summary>
        /// FreeWaterVolume property
        /// </summary>
		[Description("The free water volume of the sample when prepared for analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("FreeWaterVolume")]
        public VolumeMeasure FreeWaterVolume {
            get {
                return FreeWaterVolumeField;
            } 
            set {
                FreeWaterVolumeField = value;
                NotifyPropertyChanged("FreeWaterVolume");
            }
        }

        private VolumeMeasure FreeWaterVolumeField; 

        /// <summary>
        /// WaterContentInHydrocarbon property
        /// </summary>
		[Description("The water content in hydrocarbon of the sample when prepared for analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("WaterContentInHydrocarbon")]
        public MassPerMassMeasure WaterContentInHydrocarbon {
            get {
                return WaterContentInHydrocarbonField;
            } 
            set {
                WaterContentInHydrocarbonField = value;
                NotifyPropertyChanged("WaterContentInHydrocarbon");
            }
        }

        private MassPerMassMeasure WaterContentInHydrocarbonField; 

        /// <summary>
        /// OpeningRemark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about the opening of the sample.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("OpeningRemark")]
        public string OpeningRemark {
            get {
                return OpeningRemarkField;
            } 
            set {
                OpeningRemarkField = value;
                NotifyPropertyChanged("OpeningRemark");
            }
        }

        private string OpeningRemarkField; 

        /// <summary>
        /// SampleRestoration property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "SampleRestoration")]
		[XmlElement("SampleRestoration")]
        public List<SampleRestoration> SampleRestoration {
            get {
                return SampleRestorationField;
            } 
            set {
                SampleRestorationField = value;
                NotifyPropertyChanged("SampleRestoration");
            }
        }

         /// <summary>
         /// bool to indicate if SampleRestoration has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SampleRestorationSpecified
         {
             get {
             if(SampleRestorationField!=null)
                 return SampleRestorationField.Count>0?true:false;
             else return false;
             }
         }
        private List<SampleRestoration> SampleRestorationField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SampleRestoration xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SampleRestoration", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the SampleRestoration xsd type.")]
    public partial class SampleRestoration : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The date when this test was performed.
        /// </summary>
		[Description("The date when this test was performed.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("Date", DataType="date")]
        public DateTime? Date {
            get {
                return DateField;
            } 
            set {
                DateField = value;
                 this.DateSpecified = true;
                NotifyPropertyChanged("Date");
            }
        }

        private DateTime? DateField; 

        /// <summary>
        /// DateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateSpecified {
            get {
                return DateSpecifiedField;
            } 
            set {
                DateSpecifiedField = value;
                NotifyPropertyChanged("DateSpecified");
            }
        }

        private bool DateSpecifiedField; 

        /// <summary>
        /// The restoration duration when the sample is restored in preparation for analysis.
        /// </summary>
		[Description("The restoration duration when the sample is restored in preparation for analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("RestorationDuration")]
        public TimeMeasure RestorationDuration {
            get {
                return RestorationDurationField;
            } 
            set {
                RestorationDurationField = value;
                NotifyPropertyChanged("RestorationDuration");
            }
        }

        private TimeMeasure RestorationDurationField; 

        /// <summary>
        /// The restoration pressure when the sample is restored in preparation for analysis.
        /// </summary>
		[Description("The restoration pressure when the sample is restored in preparation for analysis.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("RestorationPressure")]
        public AbstractPressureValue RestorationPressure {
            get {
                return RestorationPressureField;
            } 
            set {
                RestorationPressureField = value;
                NotifyPropertyChanged("RestorationPressure");
            }
        }

        private AbstractPressureValue RestorationPressureField; 

        /// <summary>
        /// The restoration temperature when the sample is restored in preparation for analysis.
        /// </summary>
		[Description("The restoration temperature when the sample is restored in preparation for analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("RestorationTemperature")]
        public ThermodynamicTemperatureMeasure RestorationTemperature {
            get {
                return RestorationTemperatureField;
            } 
            set {
                RestorationTemperatureField = value;
                NotifyPropertyChanged("RestorationTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure RestorationTemperatureField; 

        /// <summary>
        /// The mixing mechanism when the sample is restored in preparation for analysis.
        /// </summary>
		[StringLength(64)]
        [Description("The mixing mechanism when the sample is restored in preparation for analysis.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("MixingMechanism")]
        public string MixingMechanism {
            get {
                return MixingMechanismField;
            } 
            set {
                MixingMechanismField = value;
                NotifyPropertyChanged("MixingMechanism");
            }
        }

        private string MixingMechanismField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WaterAnalysisTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WaterAnalysisTest", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WaterAnalysisTest xsd type.")]
    public partial class WaterAnalysisTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// An integer number to identify this test in a sequence of tests.
        /// </summary>
		[Required]
        [Description("An integer number to identify this test in a sequence of tests.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("TestNumber")]
        public long? TestNumber {
            get {
                return TestNumberField;
            } 
            set {
                TestNumberField = value;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private long? TestNumberField; 

        /// <summary>
        /// The liquid gravity for the water analysis test.
        /// </summary>
		[Description("The liquid gravity for the water analysis test.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("LiquidGravity")]
        public double? LiquidGravity {
            get {
                return LiquidGravityField;
            } 
            set {
                LiquidGravityField = value;
                 this.LiquidGravitySpecified = true;
                NotifyPropertyChanged("LiquidGravity");
            }
        }

        private double? LiquidGravityField; 

        /// <summary>
        /// LiquidGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LiquidGravitySpecified {
            get {
                return LiquidGravitySpecifiedField;
            } 
            set {
                LiquidGravitySpecifiedField = value;
                NotifyPropertyChanged("LiquidGravitySpecified");
            }
        }

        private bool LiquidGravitySpecifiedField; 

        /// <summary>
        /// The salinity for the water analysis test.
        /// </summary>
		[Description("The salinity for the water analysis test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("Salinity")]
        public MassPerMassMeasure Salinity {
            get {
                return SalinityField;
            } 
            set {
                SalinityField = value;
                NotifyPropertyChanged("Salinity");
            }
        }

        private MassPerMassMeasure SalinityField; 

        /// <summary>
        /// The total dissolved solids for the water analysis test.
        /// </summary>
		[Description("The total dissolved solids for the water analysis test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("TotalDissolvedSolids")]
        public MassPerMassMeasure TotalDissolvedSolids {
            get {
                return TotalDissolvedSolidsField;
            } 
            set {
                TotalDissolvedSolidsField = value;
                NotifyPropertyChanged("TotalDissolvedSolids");
            }
        }

        private MassPerMassMeasure TotalDissolvedSolidsField; 

        /// <summary>
        /// The total suspended solids for the water analysis test.
        /// </summary>
		[Description("The total suspended solids for the water analysis test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("TotalSuspendedSolids")]
        public MassPerMassMeasure TotalSuspendedSolids {
            get {
                return TotalSuspendedSolidsField;
            } 
            set {
                TotalSuspendedSolidsField = value;
                NotifyPropertyChanged("TotalSuspendedSolids");
            }
        }

        private MassPerMassMeasure TotalSuspendedSolidsField; 

        /// <summary>
        /// The total water hardness for the water analysis test.
        /// </summary>
		[Description("The total water hardness for the water analysis test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("TotalHardness")]
        public MassPerMassMeasure TotalHardness {
            get {
                return TotalHardnessField;
            } 
            set {
                TotalHardnessField = value;
                NotifyPropertyChanged("TotalHardness");
            }
        }

        private MassPerMassMeasure TotalHardnessField; 

        /// <summary>
        /// The ph for the water analysis test.
        /// </summary>
		[Description("The ph for the water analysis test.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("PH")]
        public double? PH {
            get {
                return PHField;
            } 
            set {
                PHField = value;
                 this.PHSpecified = true;
                NotifyPropertyChanged("PH");
            }
        }

        private double? PHField; 

        /// <summary>
        /// PHSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PHSpecified {
            get {
                return PHSpecifiedField;
            } 
            set {
                PHSpecifiedField = value;
                NotifyPropertyChanged("PHSpecified");
            }
        }

        private bool PHSpecifiedField; 

        /// <summary>
        /// The resistivity for the water analysis test.
        /// </summary>
		[Description("The resistivity for the water analysis test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ElectricalResistivityMeasure")]
		[XmlElement("Resistivity")]
        public ElectricalResistivityMeasure Resistivity {
            get {
                return ResistivityField;
            } 
            set {
                ResistivityField = value;
                NotifyPropertyChanged("Resistivity");
            }
        }

        private ElectricalResistivityMeasure ResistivityField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// The name of the Fluid Analysis Result.
        /// </summary>
		[Description("The name of the Fluid Analysis Result.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WaterAnalysisTestStep")]
		[XmlElement("WaterAnalysisTestStep")]
        public List<WaterAnalysisTestStep> WaterAnalysisTestStep {
            get {
                return WaterAnalysisTestStepField;
            } 
            set {
                WaterAnalysisTestStepField = value;
                NotifyPropertyChanged("WaterAnalysisTestStep");
            }
        }

         /// <summary>
         /// bool to indicate if WaterAnalysisTestStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WaterAnalysisTestStepSpecified
         {
             get {
             if(WaterAnalysisTestStepField!=null)
                 return WaterAnalysisTestStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<WaterAnalysisTestStep> WaterAnalysisTestStepField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ElectricalResistivityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ElectricalResistivityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ElectricalResistivityMeasure xsd type.")]
    public partial class ElectricalResistivityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ElectricalResistivityMeasure class.
        /// </summary>
        public ElectricalResistivityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ElectricalResistivityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ElectricalResistivityMeasure(double value, ElectricalResistivityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ElectricalResistivityUom")]
        [XmlAttribute("uom")]
		
        public ElectricalResistivityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ElectricalResistivityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WaterAnalysisTestStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WaterAnalysisTestStep", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WaterAnalysisTestStep xsd type.")]
    public partial class WaterAnalysisTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The step number is the index of a (P,T) step in the overall test.
        /// </summary>
		[Required]
        [Description("The step number is the index of a (P,T) step in the overall test.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StepNumber")]
        public long? StepNumber {
            get {
                return StepNumberField;
            } 
            set {
                StepNumberField = value;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private long? StepNumberField; 

        /// <summary>
        /// The pressure for this test step.
        /// </summary>
		[Required]
        [Description("The pressure for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("StepPressure")]
        public PressureMeasure StepPressure {
            get {
                return StepPressureField;
            } 
            set {
                StepPressureField = value;
                NotifyPropertyChanged("StepPressure");
            }
        }

        private PressureMeasure StepPressureField; 

        /// <summary>
        /// The temperature for this test step.
        /// </summary>
		[Required]
        [Description("The temperature for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("StepTemperature")]
        public ThermodynamicTemperatureMeasure StepTemperature {
            get {
                return StepTemperatureField;
            } 
            set {
                StepTemperatureField = value;
                NotifyPropertyChanged("StepTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure StepTemperatureField; 

        /// <summary>
        /// The solution gas-water ratio for the water analysis test step.
        /// </summary>
		[Description("The solution gas-water ratio for the water analysis test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("SolutionGasWaterRatio")]
        public VolumePerVolumeMeasure SolutionGasWaterRatio {
            get {
                return SolutionGasWaterRatioField;
            } 
            set {
                SolutionGasWaterRatioField = value;
                NotifyPropertyChanged("SolutionGasWaterRatio");
            }
        }

        private VolumePerVolumeMeasure SolutionGasWaterRatioField; 

        /// <summary>
        /// The water formation volume factor for the water analysis test step.
        /// </summary>
		[Description("The water formation volume factor for the water analysis test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("WaterFormationVolumeFactor")]
        public VolumePerVolumeMeasure WaterFormationVolumeFactor {
            get {
                return WaterFormationVolumeFactorField;
            } 
            set {
                WaterFormationVolumeFactorField = value;
                NotifyPropertyChanged("WaterFormationVolumeFactor");
            }
        }

        private VolumePerVolumeMeasure WaterFormationVolumeFactorField; 

        /// <summary>
        /// The water isothermal compressibility for the water analysis test step.
        /// </summary>
		[Description("The water isothermal compressibility for the water analysis test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ReciprocalPressureMeasure")]
		[XmlElement("WaterIsothermalCompressibility")]
        public ReciprocalPressureMeasure WaterIsothermalCompressibility {
            get {
                return WaterIsothermalCompressibilityField;
            } 
            set {
                WaterIsothermalCompressibilityField = value;
                NotifyPropertyChanged("WaterIsothermalCompressibility");
            }
        }

        private ReciprocalPressureMeasure WaterIsothermalCompressibilityField; 

        /// <summary>
        /// The water density for the water analysis test step.
        /// </summary>
		[Description("The water density for the water analysis test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("WaterDensity")]
        public MassPerVolumeMeasure WaterDensity {
            get {
                return WaterDensityField;
            } 
            set {
                WaterDensityField = value;
                NotifyPropertyChanged("WaterDensity");
            }
        }

        private MassPerVolumeMeasure WaterDensityField; 

        /// <summary>
        /// The water specific volume for the water analysis test step.
        /// </summary>
		[Description("The water specific volume for the water analysis test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerMassMeasure")]
		[XmlElement("WaterSpecificVolume")]
        public VolumePerMassMeasure WaterSpecificVolume {
            get {
                return WaterSpecificVolumeField;
            } 
            set {
                WaterSpecificVolumeField = value;
                NotifyPropertyChanged("WaterSpecificVolume");
            }
        }

        private VolumePerMassMeasure WaterSpecificVolumeField; 

        /// <summary>
        /// The water density change with pressure for the water analysis test step.
        /// </summary>
		[Description("The water density change with pressure for the water analysis test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumePerPressureMeasureExt")]
		[XmlElement("WaterDensityChangeWithPressure")]
        public MassPerVolumePerPressureMeasureExt WaterDensityChangeWithPressure {
            get {
                return WaterDensityChangeWithPressureField;
            } 
            set {
                WaterDensityChangeWithPressureField = value;
                NotifyPropertyChanged("WaterDensityChangeWithPressure");
            }
        }

        private MassPerVolumePerPressureMeasureExt WaterDensityChangeWithPressureField; 

        /// <summary>
        /// The water density change with temperature for the water analysis test step.
        /// </summary>
		[Description("The water density change with temperature for the water analysis test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumePerTemperatureMeasureExt")]
		[XmlElement("WaterDensityChangeWithTemperature")]
        public MassPerVolumePerTemperatureMeasureExt WaterDensityChangeWithTemperature {
            get {
                return WaterDensityChangeWithTemperatureField;
            } 
            set {
                WaterDensityChangeWithTemperatureField = value;
                NotifyPropertyChanged("WaterDensityChangeWithTemperature");
            }
        }

        private MassPerVolumePerTemperatureMeasureExt WaterDensityChangeWithTemperatureField; 

        /// <summary>
        /// The water viscosity for the water analysis test step.
        /// </summary>
		[Description("The water viscosity for the water analysis test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("WaterViscosity")]
        public DynamicViscosityMeasure WaterViscosity {
            get {
                return WaterViscosityField;
            } 
            set {
                WaterViscosityField = value;
                NotifyPropertyChanged("WaterViscosity");
            }
        }

        private DynamicViscosityMeasure WaterViscosityField; 

        /// <summary>
        /// The water viscous compressibility for the water analysis test step.
        /// </summary>
		[Description("The water viscous compressibility for the water analysis test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ReciprocalPressureMeasure")]
		[XmlElement("WaterViscousCompressibility")]
        public ReciprocalPressureMeasure WaterViscousCompressibility {
            get {
                return WaterViscousCompressibilityField;
            } 
            set {
                WaterViscousCompressibilityField = value;
                NotifyPropertyChanged("WaterViscousCompressibility");
            }
        }

        private ReciprocalPressureMeasure WaterViscousCompressibilityField; 

        /// <summary>
        /// The water specific heat for the water analysis test step.
        /// </summary>
		[Description("The water specific heat for the water analysis test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EnergyPerVolumeMeasure")]
		[XmlElement("WaterSpecificHeat")]
        public EnergyPerVolumeMeasure WaterSpecificHeat {
            get {
                return WaterSpecificHeatField;
            } 
            set {
                WaterSpecificHeatField = value;
                NotifyPropertyChanged("WaterSpecificHeat");
            }
        }

        private EnergyPerVolumeMeasure WaterSpecificHeatField; 

        /// <summary>
        /// The water heat capacity for the water analysis test step.
        /// </summary>
		[Description("The water heat capacity for the water analysis test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EnergyMeasure")]
		[XmlElement("WaterHeatCapacity")]
        public EnergyMeasure WaterHeatCapacity {
            get {
                return WaterHeatCapacityField;
            } 
            set {
                WaterHeatCapacityField = value;
                NotifyPropertyChanged("WaterHeatCapacity");
            }
        }

        private EnergyMeasure WaterHeatCapacityField; 

        /// <summary>
        /// The water thermal conductivity for the water analysis test step.
        /// </summary>
		[Description("The water thermal conductivity for the water analysis test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ElectricConductivityMeasure")]
		[XmlElement("WaterThermalConductivity")]
        public ElectricConductivityMeasure WaterThermalConductivity {
            get {
                return WaterThermalConductivityField;
            } 
            set {
                WaterThermalConductivityField = value;
                NotifyPropertyChanged("WaterThermalConductivity");
            }
        }

        private ElectricConductivityMeasure WaterThermalConductivityField; 

        /// <summary>
        /// The water thermal expansion for the water analysis test step.
        /// </summary>
		[Description("The water thermal expansion for the water analysis test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumetricThermalExpansionMeasure")]
		[XmlElement("WaterThermalExpansion")]
        public VolumetricThermalExpansionMeasure WaterThermalExpansion {
            get {
                return WaterThermalExpansionField;
            } 
            set {
                WaterThermalExpansionField = value;
                NotifyPropertyChanged("WaterThermalExpansion");
            }
        }

        private VolumetricThermalExpansionMeasure WaterThermalExpansionField; 

        /// <summary>
        /// The water enthalpy for the water analysis test step.
        /// </summary>
		[Description("The water enthalpy for the water analysis test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolarEnergyMeasure")]
		[XmlElement("WaterEnthalpy")]
        public MolarEnergyMeasure WaterEnthalpy {
            get {
                return WaterEnthalpyField;
            } 
            set {
                WaterEnthalpyField = value;
                NotifyPropertyChanged("WaterEnthalpy");
            }
        }

        private MolarEnergyMeasure WaterEnthalpyField; 

        /// <summary>
        /// The water entropy for the water analysis test step.
        /// </summary>
		[Description("The water entropy for the water analysis test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EnergyLengthPerTimeAreaTemperatureMeasure")]
		[XmlElement("WaterEntropy")]
        public EnergyLengthPerTimeAreaTemperatureMeasure WaterEntropy {
            get {
                return WaterEntropyField;
            } 
            set {
                WaterEntropyField = value;
                NotifyPropertyChanged("WaterEntropy");
            }
        }

        private EnergyLengthPerTimeAreaTemperatureMeasure WaterEntropyField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ReciprocalPressureMeasure xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OilCompressibility))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ReciprocalPressureMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ReciprocalPressureMeasure xsd type.")]
    public partial class ReciprocalPressureMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ReciprocalPressureMeasure class.
        /// </summary>
        public ReciprocalPressureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ReciprocalPressureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ReciprocalPressureMeasure(double value, ReciprocalPressureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ReciprocalPressureUom")]
        [XmlAttribute("uom")]
		
        public ReciprocalPressureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ReciprocalPressureUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the OilCompressibility xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="OilCompressibility", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the OilCompressibility xsd type.")]
    public partial class OilCompressibility : ReciprocalPressureMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the OilCompressibility class.
        /// </summary>
        public OilCompressibility() {}

        /// <summary>
        /// Initializes a new instance of the OilCompressibility class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public OilCompressibility(double value, ReciprocalPressureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The kind of measurement for oil compressibility.
        /// </summary>
		[Required]
        [Description("The kind of measurement for oil compressibility.")]
        [EnergisticsDataTypeAttribute(DataType = "CompressibilityKind")]
        [XmlAttribute("kind")]
		
        public CompressibilityKind Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private CompressibilityKind kindField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumePerMassMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumePerMassMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumePerMassMeasure xsd type.")]
    public partial class VolumePerMassMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerMassMeasure class.
        /// </summary>
        public VolumePerMassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerMassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerMassMeasure(double value, VolumePerMassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerMassUom")]
        [XmlAttribute("uom")]
		
        public VolumePerMassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerMassUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassPerVolumePerPressureMeasureExt xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassPerVolumePerPressureMeasureExt", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MassPerVolumePerPressureMeasureExt xsd type.")]
    public partial class MassPerVolumePerPressureMeasureExt : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassPerVolumePerPressureMeasureExt class.
        /// </summary>
        public MassPerVolumePerPressureMeasureExt() {}

        /// <summary>
        /// Initializes a new instance of the MassPerVolumePerPressureMeasureExt class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassPerVolumePerPressureMeasureExt(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumePerPressureUomExt")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassPerVolumePerTemperatureMeasureExt xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassPerVolumePerTemperatureMeasureExt", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MassPerVolumePerTemperatureMeasureExt xsd type.")]
    public partial class MassPerVolumePerTemperatureMeasureExt : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassPerVolumePerTemperatureMeasureExt class.
        /// </summary>
        public MassPerVolumePerTemperatureMeasureExt() {}

        /// <summary>
        /// Initializes a new instance of the MassPerVolumePerTemperatureMeasureExt class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassPerVolumePerTemperatureMeasureExt(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumePerTemperatureUomExt")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DynamicViscosityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DynamicViscosityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DynamicViscosityMeasure xsd type.")]
    public partial class DynamicViscosityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DynamicViscosityMeasure class.
        /// </summary>
        public DynamicViscosityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DynamicViscosityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DynamicViscosityMeasure(double value, DynamicViscosityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityUom")]
        [XmlAttribute("uom")]
		
        public DynamicViscosityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DynamicViscosityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ElectricConductivityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ElectricConductivityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ElectricConductivityMeasure xsd type.")]
    public partial class ElectricConductivityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ElectricConductivityMeasure class.
        /// </summary>
        public ElectricConductivityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ElectricConductivityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ElectricConductivityMeasure(double value, ElectricConductivityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ElectricConductivityUom")]
        [XmlAttribute("uom")]
		
        public ElectricConductivityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ElectricConductivityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumetricThermalExpansionMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumetricThermalExpansionMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumetricThermalExpansionMeasure xsd type.")]
    public partial class VolumetricThermalExpansionMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumetricThermalExpansionMeasure class.
        /// </summary>
        public VolumetricThermalExpansionMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumetricThermalExpansionMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumetricThermalExpansionMeasure(double value, VolumetricThermalExpansionUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumetricThermalExpansionUom")]
        [XmlAttribute("uom")]
		
        public VolumetricThermalExpansionUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumetricThermalExpansionUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MolarEnergyMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MolarEnergyMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MolarEnergyMeasure xsd type.")]
    public partial class MolarEnergyMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MolarEnergyMeasure class.
        /// </summary>
        public MolarEnergyMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MolarEnergyMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MolarEnergyMeasure(double value, MolarEnergyUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MolarEnergyUom")]
        [XmlAttribute("uom")]
		
        public MolarEnergyUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MolarEnergyUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EnergyLengthPerTimeAreaTemperatureMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EnergyLengthPerTimeAreaTemperatureMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the EnergyLengthPerTimeAreaTemperatureMeasure xsd type.")]
    public partial class EnergyLengthPerTimeAreaTemperatureMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EnergyLengthPerTimeAreaTemperatureMeasure class.
        /// </summary>
        public EnergyLengthPerTimeAreaTemperatureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the EnergyLengthPerTimeAreaTemperatureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public EnergyLengthPerTimeAreaTemperatureMeasure(double value, EnergyLengthPerTimeAreaTemperatureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "EnergyLengthPerTimeAreaTemperatureUom")]
        [XmlAttribute("uom")]
		
        public EnergyLengthPerTimeAreaTemperatureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private EnergyLengthPerTimeAreaTemperatureUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WaterSampleComponent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WaterSampleComponent", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WaterSampleComponent xsd type.")]
    public partial class WaterSampleComponent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The ion of the water sample component.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The ion of the water sample component.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Ion")]
        public string Ion {
            get {
                return IonField;
            } 
            set {
                IonField = value;
                NotifyPropertyChanged("Ion");
            }
        }

        private string IonField; 

        /// <summary>
        /// The mass concentration of the water sample component.
        /// </summary>
		[Description("The mass concentration of the water sample component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("MassConcentration")]
        public MassPerMassMeasure MassConcentration {
            get {
                return MassConcentrationField;
            } 
            set {
                MassConcentrationField = value;
                NotifyPropertyChanged("MassConcentration");
            }
        }

        private MassPerMassMeasure MassConcentrationField; 

        /// <summary>
        /// The equivalent concentration of the water sample component.
        /// </summary>
		[Description("The equivalent concentration of the water sample component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("EquivalentConcentration")]
        public MassPerMassMeasure EquivalentConcentration {
            get {
                return EquivalentConcentrationField;
            } 
            set {
                EquivalentConcentrationField = value;
                NotifyPropertyChanged("EquivalentConcentration");
            }
        }

        private MassPerMassMeasure EquivalentConcentrationField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the HydrocarbonAnalysis xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="HydrocarbonAnalysis", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the HydrocarbonAnalysis xsd type.")]
    public partial class HydrocarbonAnalysis : FluidAnalysis, INotifyPropertyChanged
    {

        /// <summary>
        /// The fluid component catalog for this fluid analysis.
        /// </summary>
		[Description("The fluid component catalog for this fluid analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidComponentCatalog")]
		[XmlElement("FluidComponentCatalog")]
        public FluidComponentCatalog FluidComponentCatalog {
            get {
                return FluidComponentCatalogField;
            } 
            set {
                FluidComponentCatalogField = value;
                NotifyPropertyChanged("FluidComponentCatalog");
            }
        }

        private FluidComponentCatalog FluidComponentCatalogField; 

        /// <summary>
        /// The sample integrity and preparation procedure for this fluid analysis.
        /// </summary>
		[Description("The sample integrity and preparation procedure for this fluid analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SampleIntegrityAndPreparation")]
		[XmlElement("SampleIntegrityAndPreparation")]
        public SampleIntegrityAndPreparation SampleIntegrityAndPreparation {
            get {
                return SampleIntegrityAndPreparationField;
            } 
            set {
                SampleIntegrityAndPreparationField = value;
                NotifyPropertyChanged("SampleIntegrityAndPreparation");
            }
        }

        private SampleIntegrityAndPreparation SampleIntegrityAndPreparationField; 

        /// <summary>
        /// An atmospheric flash test and compositional analysis test within this fluid analysis.
        /// </summary>
		[Description("An atmospheric flash test and compositional analysis test within this fluid analysis.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AtmosphericFlashTestAndCompositionalAnalysis")]
		[XmlElement("AtmosphericFlashTestAndCompositionalAnalysis")]
        public List<AtmosphericFlashTestAndCompositionalAnalysis> AtmosphericFlashTestAndCompositionalAnalysis {
            get {
                return AtmosphericFlashTestAndCompositionalAnalysisField;
            } 
            set {
                AtmosphericFlashTestAndCompositionalAnalysisField = value;
                NotifyPropertyChanged("AtmosphericFlashTestAndCompositionalAnalysis");
            }
        }

         /// <summary>
         /// bool to indicate if AtmosphericFlashTestAndCompositionalAnalysis has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AtmosphericFlashTestAndCompositionalAnalysisSpecified
         {
             get {
             if(AtmosphericFlashTestAndCompositionalAnalysisField!=null)
                 return AtmosphericFlashTestAndCompositionalAnalysisField.Count>0?true:false;
             else return false;
             }
         }
        private List<AtmosphericFlashTestAndCompositionalAnalysis> AtmosphericFlashTestAndCompositionalAnalysisField; 

        /// <summary>
        /// A constant composition expansion test within this fluid analysis.
        /// </summary>
		[Description("A constant composition expansion test within this fluid analysis.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ConstantCompositionExpansionTest")]
		[XmlElement("ConstantCompositionExpansionTest")]
        public List<ConstantCompositionExpansionTest> ConstantCompositionExpansionTest {
            get {
                return ConstantCompositionExpansionTestField;
            } 
            set {
                ConstantCompositionExpansionTestField = value;
                NotifyPropertyChanged("ConstantCompositionExpansionTest");
            }
        }

         /// <summary>
         /// bool to indicate if ConstantCompositionExpansionTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ConstantCompositionExpansionTestSpecified
         {
             get {
             if(ConstantCompositionExpansionTestField!=null)
                 return ConstantCompositionExpansionTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<ConstantCompositionExpansionTest> ConstantCompositionExpansionTestField; 

        /// <summary>
        /// A saturation test within this fluid analysis.
        /// </summary>
		[Description("A saturation test within this fluid analysis.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "SaturationTest")]
		[XmlElement("SaturationTest")]
        public List<SaturationTest> SaturationTest {
            get {
                return SaturationTestField;
            } 
            set {
                SaturationTestField = value;
                NotifyPropertyChanged("SaturationTest");
            }
        }

         /// <summary>
         /// bool to indicate if SaturationTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SaturationTestSpecified
         {
             get {
             if(SaturationTestField!=null)
                 return SaturationTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<SaturationTest> SaturationTestField; 

        /// <summary>
        /// A differential liberation test within this fluid analysis.
        /// </summary>
		[Description("A differential liberation test within this fluid analysis.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DifferentialLiberationTest")]
		[XmlElement("DifferentialLiberationTest")]
        public List<DifferentialLiberationTest> DifferentialLiberationTest {
            get {
                return DifferentialLiberationTestField;
            } 
            set {
                DifferentialLiberationTestField = value;
                NotifyPropertyChanged("DifferentialLiberationTest");
            }
        }

         /// <summary>
         /// bool to indicate if DifferentialLiberationTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DifferentialLiberationTestSpecified
         {
             get {
             if(DifferentialLiberationTestField!=null)
                 return DifferentialLiberationTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<DifferentialLiberationTest> DifferentialLiberationTestField; 

        /// <summary>
        /// A constant volume depletion test within this fluid analysis.
        /// </summary>
		[Description("A constant volume depletion test within this fluid analysis.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ConstantVolumeDepletionTest")]
		[XmlElement("ConstantVolumeDepletionTest")]
        public List<ConstantVolumeDepletionTest> ConstantVolumeDepletionTest {
            get {
                return ConstantVolumeDepletionTestField;
            } 
            set {
                ConstantVolumeDepletionTestField = value;
                NotifyPropertyChanged("ConstantVolumeDepletionTest");
            }
        }

         /// <summary>
         /// bool to indicate if ConstantVolumeDepletionTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ConstantVolumeDepletionTestSpecified
         {
             get {
             if(ConstantVolumeDepletionTestField!=null)
                 return ConstantVolumeDepletionTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<ConstantVolumeDepletionTest> ConstantVolumeDepletionTestField; 

        /// <summary>
        /// A separator test within this fluid analysis.
        /// </summary>
		[Description("A separator test within this fluid analysis.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidSeparatorTest")]
		[XmlElement("SeparatorTest")]
        public List<FluidSeparatorTest> SeparatorTest {
            get {
                return SeparatorTestField;
            } 
            set {
                SeparatorTestField = value;
                NotifyPropertyChanged("SeparatorTest");
            }
        }

         /// <summary>
         /// bool to indicate if SeparatorTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SeparatorTestSpecified
         {
             get {
             if(SeparatorTestField!=null)
                 return SeparatorTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidSeparatorTest> SeparatorTestField; 

        /// <summary>
        /// A transport test within this fluid analysis.
        /// </summary>
		[Description("A transport test within this fluid analysis.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "OtherMeasurementTest")]
		[XmlElement("TransportTest")]
        public List<OtherMeasurementTest> TransportTest {
            get {
                return TransportTestField;
            } 
            set {
                TransportTestField = value;
                NotifyPropertyChanged("TransportTest");
            }
        }

         /// <summary>
         /// bool to indicate if TransportTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TransportTestSpecified
         {
             get {
             if(TransportTestField!=null)
                 return TransportTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<OtherMeasurementTest> TransportTestField; 

        /// <summary>
        /// A vapor liquid equilibrium test within this fluid analysis.
        /// </summary>
		[Description("A vapor liquid equilibrium test within this fluid analysis.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "VaporLiquidEquilibriumTest")]
		[XmlElement("VaporLiquidEquilibriumTest")]
        public List<VaporLiquidEquilibriumTest> VaporLiquidEquilibriumTest {
            get {
                return VaporLiquidEquilibriumTestField;
            } 
            set {
                VaporLiquidEquilibriumTestField = value;
                NotifyPropertyChanged("VaporLiquidEquilibriumTest");
            }
        }

         /// <summary>
         /// bool to indicate if VaporLiquidEquilibriumTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VaporLiquidEquilibriumTestSpecified
         {
             get {
             if(VaporLiquidEquilibriumTestField!=null)
                 return VaporLiquidEquilibriumTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<VaporLiquidEquilibriumTest> VaporLiquidEquilibriumTestField; 

        /// <summary>
        /// A swelling test within this fluid analysis.
        /// </summary>
		[Description("A swelling test within this fluid analysis.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "SwellingTest")]
		[XmlElement("SwellingTest")]
        public List<SwellingTest> SwellingTest {
            get {
                return SwellingTestField;
            } 
            set {
                SwellingTestField = value;
                NotifyPropertyChanged("SwellingTest");
            }
        }

         /// <summary>
         /// bool to indicate if SwellingTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SwellingTestSpecified
         {
             get {
             if(SwellingTestField!=null)
                 return SwellingTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<SwellingTest> SwellingTestField; 

        /// <summary>
        /// A slim tube test within this fluid analysis.
        /// </summary>
		[Description("A slim tube test within this fluid analysis.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "SlimTubeTest")]
		[XmlElement("SlimTubeTest")]
        public List<SlimTubeTest> SlimTubeTest {
            get {
                return SlimTubeTestField;
            } 
            set {
                SlimTubeTestField = value;
                NotifyPropertyChanged("SlimTubeTest");
            }
        }

         /// <summary>
         /// bool to indicate if SlimTubeTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SlimTubeTestSpecified
         {
             get {
             if(SlimTubeTestField!=null)
                 return SlimTubeTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<SlimTubeTest> SlimTubeTestField; 

        /// <summary>
        /// A multiple contact miscibility test within this fluid analysis.
        /// </summary>
		[Description("A multiple contact miscibility test within this fluid analysis.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "MultipleContactMiscibilityTest")]
		[XmlElement("MultipleContactMiscibilityTest")]
        public List<MultipleContactMiscibilityTest> MultipleContactMiscibilityTest {
            get {
                return MultipleContactMiscibilityTestField;
            } 
            set {
                MultipleContactMiscibilityTestField = value;
                NotifyPropertyChanged("MultipleContactMiscibilityTest");
            }
        }

         /// <summary>
         /// bool to indicate if MultipleContactMiscibilityTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MultipleContactMiscibilityTestSpecified
         {
             get {
             if(MultipleContactMiscibilityTestField!=null)
                 return MultipleContactMiscibilityTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<MultipleContactMiscibilityTest> MultipleContactMiscibilityTestField; 

        /// <summary>
        /// An stock tank oil analysis within this fluid analysis.
        /// </summary>
		[Description("An stock tank oil analysis within this fluid analysis.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "STOAnalysis")]
		[XmlElement("STOAnalysis")]
        public List<STOAnalysis> STOAnalysis {
            get {
                return STOAnalysisField;
            } 
            set {
                STOAnalysisField = value;
                NotifyPropertyChanged("STOAnalysis");
            }
        }

         /// <summary>
         /// bool to indicate if STOAnalysis has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool STOAnalysisSpecified
         {
             get {
             if(STOAnalysisField!=null)
                 return STOAnalysisField.Count>0?true:false;
             else return false;
             }
         }
        private List<STOAnalysis> STOAnalysisField; 

        /// <summary>
        /// An interfacial tension test within this fluid analysis.
        /// </summary>
		[Description("An interfacial tension test within this fluid analysis.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "InterfacialTensionTest")]
		[XmlElement("InterfacialTensionTest")]
        public List<InterfacialTensionTest> InterfacialTensionTest {
            get {
                return InterfacialTensionTestField;
            } 
            set {
                InterfacialTensionTestField = value;
                NotifyPropertyChanged("InterfacialTensionTest");
            }
        }

         /// <summary>
         /// bool to indicate if InterfacialTensionTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InterfacialTensionTestSpecified
         {
             get {
             if(InterfacialTensionTestField!=null)
                 return InterfacialTensionTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<InterfacialTensionTest> InterfacialTensionTestField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AtmosphericFlashTestAndCompositionalAnalysis xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AtmosphericFlashTestAndCompositionalAnalysis", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AtmosphericFlashTestAndCompositionalAnalysis xsd type.")]
    public partial class AtmosphericFlashTestAndCompositionalAnalysis : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TestNumber property
        /// </summary>
		[Required]
        [Description("An integer number to identify this test in a sequence of tests.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("TestNumber")]
        public long? TestNumber {
            get {
                return TestNumberField;
            } 
            set {
                TestNumberField = value;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private long? TestNumberField; 

        /// <summary>
        /// Date property
        /// </summary>
		[Description("The date when this test was performed.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("Date", DataType="date")]
        public DateTime? Date {
            get {
                return DateField;
            } 
            set {
                DateField = value;
                 this.DateSpecified = true;
                NotifyPropertyChanged("Date");
            }
        }

        private DateTime? DateField; 

        /// <summary>
        /// DateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateSpecified {
            get {
                return DateSpecifiedField;
            } 
            set {
                DateSpecifiedField = value;
                NotifyPropertyChanged("DateSpecified");
            }
        }

        private bool DateSpecifiedField; 

        /// <summary>
        /// FlashToPressure property
        /// </summary>
		[Description("The pressure to which the sample is flashed in this analysis.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("FlashToPressure")]
        public AbstractPressureValue FlashToPressure {
            get {
                return FlashToPressureField;
            } 
            set {
                FlashToPressureField = value;
                NotifyPropertyChanged("FlashToPressure");
            }
        }

        private AbstractPressureValue FlashToPressureField; 

        /// <summary>
        /// FlashToTemperature property
        /// </summary>
		[Description("The temperature to which the sample is flashed in this analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("FlashToTemperature")]
        public ThermodynamicTemperatureMeasure FlashToTemperature {
            get {
                return FlashToTemperatureField;
            } 
            set {
                FlashToTemperatureField = value;
                NotifyPropertyChanged("FlashToTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure FlashToTemperatureField; 

        /// <summary>
        /// AtmosphericPressure property
        /// </summary>
		[Description("The atmospheric pressure at the time of this analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("AtmosphericPressure")]
        public PressureMeasure AtmosphericPressure {
            get {
                return AtmosphericPressureField;
            } 
            set {
                AtmosphericPressureField = value;
                NotifyPropertyChanged("AtmosphericPressure");
            }
        }

        private PressureMeasure AtmosphericPressureField; 

        /// <summary>
        /// AtmosphericTemperature property
        /// </summary>
		[Description("The atmospheric temperature at the time of this analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("AtmosphericTemperature")]
        public ThermodynamicTemperatureMeasure AtmosphericTemperature {
            get {
                return AtmosphericTemperatureField;
            } 
            set {
                AtmosphericTemperatureField = value;
                NotifyPropertyChanged("AtmosphericTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure AtmosphericTemperatureField; 

        /// <summary>
        /// FlashGOR property
        /// </summary>
		[Description("The gas-oil ratio of the flash in this analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("FlashGOR")]
        public VolumePerVolumeMeasure FlashGOR {
            get {
                return FlashGORField;
            } 
            set {
                FlashGORField = value;
                NotifyPropertyChanged("FlashGOR");
            }
        }

        private VolumePerVolumeMeasure FlashGORField; 

        /// <summary>
        /// OilFormationVolumeFactor property
        /// </summary>
		[Description("The formation volume factor for the oil (liquid) phase at the conditions of this test--volume at test conditions/volume at standard conditions.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("OilFormationVolumeFactor")]
        public VolumePerVolumeMeasure OilFormationVolumeFactor {
            get {
                return OilFormationVolumeFactorField;
            } 
            set {
                OilFormationVolumeFactorField = value;
                NotifyPropertyChanged("OilFormationVolumeFactor");
            }
        }

        private VolumePerVolumeMeasure OilFormationVolumeFactorField; 

        /// <summary>
        /// DensityAtSamplePressureandTemperature property
        /// </summary>
		[Description("The density of the sample at the pressure and temperature conditions of this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensityAtSamplePressureandTemperature")]
        public MassPerVolumeMeasure DensityAtSamplePressureandTemperature {
            get {
                return DensityAtSamplePressureandTemperatureField;
            } 
            set {
                DensityAtSamplePressureandTemperatureField = value;
                NotifyPropertyChanged("DensityAtSamplePressureandTemperature");
            }
        }

        private MassPerVolumeMeasure DensityAtSamplePressureandTemperatureField; 

        /// <summary>
        /// AvgMolecularWeight property
        /// </summary>
		[Description("The average molecular weight of the sample for this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("AvgMolecularWeight")]
        public MolecularWeightMeasure AvgMolecularWeight {
            get {
                return AvgMolecularWeightField;
            } 
            set {
                AvgMolecularWeightField = value;
                NotifyPropertyChanged("AvgMolecularWeight");
            }
        }

        private MolecularWeightMeasure AvgMolecularWeightField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// FlashedLiquid property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FlashedLiquid")]
		[XmlElement("FlashedLiquid")]
        public FlashedLiquid FlashedLiquid {
            get {
                return FlashedLiquidField;
            } 
            set {
                FlashedLiquidField = value;
                NotifyPropertyChanged("FlashedLiquid");
            }
        }

        private FlashedLiquid FlashedLiquidField; 

        /// <summary>
        /// FlashedGas property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FlashedGas")]
		[XmlElement("FlashedGas")]
        public FlashedGas FlashedGas {
            get {
                return FlashedGasField;
            } 
            set {
                FlashedGasField = value;
                NotifyPropertyChanged("FlashedGas");
            }
        }

        private FlashedGas FlashedGasField; 

        /// <summary>
        /// OverallComposition property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "OverallComposition")]
		[XmlElement("OverallComposition")]
        public OverallComposition OverallComposition {
            get {
                return OverallCompositionField;
            } 
            set {
                OverallCompositionField = value;
                NotifyPropertyChanged("OverallComposition");
            }
        }

        private OverallComposition OverallCompositionField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FlashedLiquid xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FlashedLiquid", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FlashedLiquid xsd type.")]
    public partial class FlashedLiquid : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The oil molecular weight of the flashed liquid in this atmospheric flash test.
        /// </summary>
		[Description("The oil molecular weight of the flashed liquid in this atmospheric flash test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "APIGravityMeasure")]
		[XmlElement("OilAPIGravity")]
        public APIGravityMeasure OilAPIGravity {
            get {
                return OilAPIGravityField;
            } 
            set {
                OilAPIGravityField = value;
                NotifyPropertyChanged("OilAPIGravity");
            }
        }

        private APIGravityMeasure OilAPIGravityField; 

        /// <summary>
        /// The liquid composition of the flashed liquid in this atmospheric flash test.
        /// </summary>
		[Description("The liquid composition of the flashed liquid in this atmospheric flash test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("OilMolecularWeight")]
        public MolecularWeightMeasure OilMolecularWeight {
            get {
                return OilMolecularWeightField;
            } 
            set {
                OilMolecularWeightField = value;
                NotifyPropertyChanged("OilMolecularWeight");
            }
        }

        private MolecularWeightMeasure OilMolecularWeightField; 

        /// <summary>
        /// The oil API gravity of the flashed liquid in this atmospheric flash test.
        /// </summary>
		[Description("The oil API gravity of the flashed liquid in this atmospheric flash test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LiquidComposition")]
		[XmlElement("LiquidComposition")]
        public LiquidComposition LiquidComposition {
            get {
                return LiquidCompositionField;
            } 
            set {
                LiquidCompositionField = value;
                NotifyPropertyChanged("LiquidComposition");
            }
        }

        private LiquidComposition LiquidCompositionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FlashedGas xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FlashedGas", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FlashedGas xsd type.")]
    public partial class FlashedGas : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The gas gravity of the flashed gas in this atmospheric flash test.
        /// </summary>
		[Description("The gas gravity of the flashed gas in this atmospheric flash test.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("GasGravity")]
        public double? GasGravity {
            get {
                return GasGravityField;
            } 
            set {
                GasGravityField = value;
                 this.GasGravitySpecified = true;
                NotifyPropertyChanged("GasGravity");
            }
        }

        private double? GasGravityField; 

        /// <summary>
        /// GasGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasGravitySpecified {
            get {
                return GasGravitySpecifiedField;
            } 
            set {
                GasGravitySpecifiedField = value;
                NotifyPropertyChanged("GasGravitySpecified");
            }
        }

        private bool GasGravitySpecifiedField; 

        /// <summary>
        /// The molecular weight of the gas phase at this test step.
        /// </summary>
		[Description("The molecular weight of the gas phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("GasMolecularWeight")]
        public MolecularWeightMeasure GasMolecularWeight {
            get {
                return GasMolecularWeightField;
            } 
            set {
                GasMolecularWeightField = value;
                NotifyPropertyChanged("GasMolecularWeight");
            }
        }

        private MolecularWeightMeasure GasMolecularWeightField; 

        /// <summary>
        /// The gas Z factor value at this test step.
        /// </summary>
		[Description("The gas Z factor value at this test step.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("GasZFactor")]
        public double? GasZFactor {
            get {
                return GasZFactorField;
            } 
            set {
                GasZFactorField = value;
                 this.GasZFactorSpecified = true;
                NotifyPropertyChanged("GasZFactor");
            }
        }

        private double? GasZFactorField; 

        /// <summary>
        /// GasZFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasZFactorSpecified {
            get {
                return GasZFactorSpecifiedField;
            } 
            set {
                GasZFactorSpecifiedField = value;
                NotifyPropertyChanged("GasZFactorSpecified");
            }
        }

        private bool GasZFactorSpecifiedField; 

        /// <summary>
        /// The gas molecular weight of the flashed gas in this atmospheric flash test.
        /// </summary>
		[Description("The gas molecular weight of the flashed gas in this atmospheric flash test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EnergyMeasure")]
		[XmlElement("GasHeatingValue")]
        public EnergyMeasure GasHeatingValue {
            get {
                return GasHeatingValueField;
            } 
            set {
                GasHeatingValueField = value;
                NotifyPropertyChanged("GasHeatingValue");
            }
        }

        private EnergyMeasure GasHeatingValueField; 

        /// <summary>
        /// The vapor composition of the flashed gas in this atmospheric flash test.
        /// </summary>
		[Description("The vapor composition of the flashed gas in this atmospheric flash test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VaporComposition")]
		[XmlElement("VaporComposition")]
        public VaporComposition VaporComposition {
            get {
                return VaporCompositionField;
            } 
            set {
                VaporCompositionField = value;
                NotifyPropertyChanged("VaporComposition");
            }
        }

        private VaporComposition VaporCompositionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VaporComposition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VaporComposition", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the VaporComposition xsd type.")]
    public partial class VaporComposition : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// VaporComponent property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidComponent")]
		[XmlElement("VaporComponent")]
        public List<FluidComponent> VaporComponent {
            get {
                return VaporComponentField;
            } 
            set {
                VaporComponentField = value;
                NotifyPropertyChanged("VaporComponent");
            }
        }

         /// <summary>
         /// bool to indicate if VaporComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VaporComponentSpecified
         {
             get {
             if(VaporComponentField!=null)
                 return VaporComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidComponent> VaporComponentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ConstantCompositionExpansionTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ConstantCompositionExpansionTest", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ConstantCompositionExpansionTest xsd type.")]
    public partial class ConstantCompositionExpansionTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A number for this test for purposes of e.g., tracking lab sequence.
        /// </summary>
		[Required]
        [Description("A number for this test for purposes of e.g., tracking lab sequence.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("TestNumber")]
        public long? TestNumber {
            get {
                return TestNumberField;
            } 
            set {
                TestNumberField = value;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private long? TestNumberField; 

        /// <summary>
        /// The temperature of this test.
        /// </summary>
		[Required]
        [Description("The temperature of this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TestTemperature")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return TestTemperatureField;
            } 
            set {
                TestTemperatureField = value;
                NotifyPropertyChanged("TestTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure TestTemperatureField; 

        /// <summary>
        /// The saturation (or bubble point) pressure measured in this test.
        /// </summary>
		[Description("The saturation (or bubble point) pressure measured in this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SaturationPressure")]
		[XmlElement("SaturationPressure")]
        public SaturationPressure SaturationPressure {
            get {
                return SaturationPressureField;
            } 
            set {
                SaturationPressureField = value;
                NotifyPropertyChanged("SaturationPressure");
            }
        }

        private SaturationPressure SaturationPressureField; 

        /// <summary>
        /// Volume reference for the measured liquid fraction in a constant composition expansion test. Referenced to liquid volume at saturation pressure (generally).
        /// </summary>
		[Description("Volume reference for the measured liquid fraction in a constant composition expansion test. Referenced to liquid volume at saturation pressure (generally).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidVolumeReference")]
		[XmlElement("LiquidFractionReference")]
        public List<FluidVolumeReference> LiquidFractionReference {
            get {
                return LiquidFractionReferenceField;
            } 
            set {
                LiquidFractionReferenceField = value;
                NotifyPropertyChanged("LiquidFractionReference");
            }
        }

         /// <summary>
         /// bool to indicate if LiquidFractionReference has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LiquidFractionReferenceSpecified
         {
             get {
             if(LiquidFractionReferenceField!=null)
                 return LiquidFractionReferenceField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidVolumeReference> LiquidFractionReferenceField; 

        /// <summary>
        /// Volume reference for the relative volume ratio in a constant composition expansion test. Referenced to liquid volume at saturation pressure (generally).
        /// </summary>
		[Description("Volume reference for the relative volume ratio in a constant composition expansion test. Referenced to liquid volume at saturation pressure (generally).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidVolumeReference")]
		[XmlElement("RelativeVolumeReference")]
        public List<FluidVolumeReference> RelativeVolumeReference {
            get {
                return RelativeVolumeReferenceField;
            } 
            set {
                RelativeVolumeReferenceField = value;
                NotifyPropertyChanged("RelativeVolumeReference");
            }
        }

         /// <summary>
         /// bool to indicate if RelativeVolumeReference has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RelativeVolumeReferenceSpecified
         {
             get {
             if(RelativeVolumeReferenceField!=null)
                 return RelativeVolumeReferenceField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidVolumeReference> RelativeVolumeReferenceField; 

        /// <summary>
        /// Measured relative volume ratio = measured volume/volume at Psat.
        /// </summary>
		[Description("Measured relative volume ratio = measured volume/volume at Psat.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ConstantCompositionExpansionTestStep")]
		[XmlElement("ConstantCompositionExpansionTestStep")]
        public List<ConstantCompositionExpansionTestStep> ConstantCompositionExpansionTestStep {
            get {
                return ConstantCompositionExpansionTestStepField;
            } 
            set {
                ConstantCompositionExpansionTestStepField = value;
                NotifyPropertyChanged("ConstantCompositionExpansionTestStep");
            }
        }

         /// <summary>
         /// bool to indicate if ConstantCompositionExpansionTestStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ConstantCompositionExpansionTestStepSpecified
         {
             get {
             if(ConstantCompositionExpansionTestStepField!=null)
                 return ConstantCompositionExpansionTestStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<ConstantCompositionExpansionTestStep> ConstantCompositionExpansionTestStepField; 

        /// <summary>
        /// Expected to be a yes or no value to indicate if differential liberation/vaporization data are corrected to separator conditions/flash data or not.
        /// </summary>
		[StringLength(2000)]
        [Description("Expected to be a yes or no value to indicate if differential liberation/vaporization data are corrected to separator conditions/flash data or not.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidVolumeReference xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidVolumeReference", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidVolumeReference xsd type.")]
    public partial class FluidVolumeReference : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The kind of fluid volume references. Enum, see volume reference kind.
        /// </summary>
		[Required]
        [Description("The kind of fluid volume references. Enum, see volume reference kind.")]
        [EnergisticsDataTypeAttribute(DataType = "VolumeReferenceKind")]
		[XmlElement("Kind")]
        public VolumeReferenceKind? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        
        private bool KindSpecifiedField = false;
        
        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }
        
        private VolumeReferenceKind? KindField; 

        /// <summary>
        /// The reference volume for this analysis.
        /// </summary>
		[Description("The reference volume for this analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("ReferenceVolume")]
        public VolumeMeasure ReferenceVolume {
            get {
                return ReferenceVolumeField;
            } 
            set {
                ReferenceVolumeField = value;
                NotifyPropertyChanged("ReferenceVolume");
            }
        }

        private VolumeMeasure ReferenceVolumeField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ConstantCompositionExpansionTestStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ConstantCompositionExpansionTestStep", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ConstantCompositionExpansionTestStep xsd type.")]
    public partial class ConstantCompositionExpansionTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The step number is the index of a (P,T) step in the overall test.
        /// </summary>
		[Required]
        [Description("The step number is the index of a (P,T) step in the overall test.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StepNumber")]
        public long? StepNumber {
            get {
                return StepNumberField;
            } 
            set {
                StepNumberField = value;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private long? StepNumberField; 

        /// <summary>
        /// The pressure for this test step.
        /// </summary>
		[Required]
        [Description("The pressure for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("StepPressure")]
        public PressureMeasure StepPressure {
            get {
                return StepPressureField;
            } 
            set {
                StepPressureField = value;
                NotifyPropertyChanged("StepPressure");
            }
        }

        private PressureMeasure StepPressureField; 

        /// <summary>
        /// The fraction of liquid by volume for this test step.
        /// </summary>
		[Description("The fraction of liquid by volume for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "RelativeVolumeRatio")]
		[XmlElement("LiquidFraction")]
        public RelativeVolumeRatio LiquidFraction {
            get {
                return LiquidFractionField;
            } 
            set {
                LiquidFractionField = value;
                NotifyPropertyChanged("LiquidFraction");
            }
        }

        private RelativeVolumeRatio LiquidFractionField; 

        /// <summary>
        /// The density of the oil phase at this test step.
        /// </summary>
		[Description("The density of the oil phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("OilDensity")]
        public MassPerVolumeMeasure OilDensity {
            get {
                return OilDensityField;
            } 
            set {
                OilDensityField = value;
                NotifyPropertyChanged("OilDensity");
            }
        }

        private MassPerVolumeMeasure OilDensityField; 

        /// <summary>
        /// The oil compressibility at this test step.
        /// </summary>
		[Description("The oil compressibility at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "OilCompressibility")]
		[XmlElement("OilCompressibility")]
        public OilCompressibility OilCompressibility {
            get {
                return OilCompressibilityField;
            } 
            set {
                OilCompressibilityField = value;
                NotifyPropertyChanged("OilCompressibility");
            }
        }

        private OilCompressibility OilCompressibilityField; 

        /// <summary>
        /// The viscosity of the oil phase at this test step.
        /// </summary>
		[Description("The viscosity of the oil phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("OilViscosity")]
        public DynamicViscosityMeasure OilViscosity {
            get {
                return OilViscosityField;
            } 
            set {
                OilViscosityField = value;
                NotifyPropertyChanged("OilViscosity");
            }
        }

        private DynamicViscosityMeasure OilViscosityField; 

        /// <summary>
        /// The total volume of the expanded mixture at this test step.
        /// </summary>
		[Description("The total volume of the expanded mixture at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("TotalVolume")]
        public VolumeMeasure TotalVolume {
            get {
                return TotalVolumeField;
            } 
            set {
                TotalVolumeField = value;
                NotifyPropertyChanged("TotalVolume");
            }
        }

        private VolumeMeasure TotalVolumeField; 

        /// <summary>
        /// Measured relative volume ratio = measured volume/volume at Psat.
        /// </summary>
		[Description("Measured relative volume ratio = measured volume/volume at Psat.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "RelativeVolumeRatio")]
		[XmlElement("RelativeVolumeRatio")]
        public RelativeVolumeRatio RelativeVolumeRatio {
            get {
                return RelativeVolumeRatioField;
            } 
            set {
                RelativeVolumeRatioField = value;
                NotifyPropertyChanged("RelativeVolumeRatio");
            }
        }

        private RelativeVolumeRatio RelativeVolumeRatioField; 

        /// <summary>
        /// The gas density at the conditions for this viscosity correlation to be used.
        /// </summary>
		[Description("The gas density at the conditions for this viscosity correlation to be used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("GasDensity")]
        public MassPerVolumeMeasure GasDensity {
            get {
                return GasDensityField;
            } 
            set {
                GasDensityField = value;
                NotifyPropertyChanged("GasDensity");
            }
        }

        private MassPerVolumeMeasure GasDensityField; 

        /// <summary>
        /// The gas Z factor value at this test step.
        /// </summary>
		[Description("The gas Z factor value at this test step.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("GasZFactor")]
        public double? GasZFactor {
            get {
                return GasZFactorField;
            } 
            set {
                GasZFactorField = value;
                 this.GasZFactorSpecified = true;
                NotifyPropertyChanged("GasZFactor");
            }
        }

        private double? GasZFactorField; 

        /// <summary>
        /// GasZFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasZFactorSpecified {
            get {
                return GasZFactorSpecifiedField;
            } 
            set {
                GasZFactorSpecifiedField = value;
                NotifyPropertyChanged("GasZFactorSpecified");
            }
        }

        private bool GasZFactorSpecifiedField; 

        /// <summary>
        /// The gas compressibility at this test step.
        /// </summary>
		[Description("The gas compressibility at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ReciprocalPressureMeasure")]
		[XmlElement("GasCompressibility")]
        public ReciprocalPressureMeasure GasCompressibility {
            get {
                return GasCompressibilityField;
            } 
            set {
                GasCompressibilityField = value;
                NotifyPropertyChanged("GasCompressibility");
            }
        }

        private ReciprocalPressureMeasure GasCompressibilityField; 

        /// <summary>
        /// The viscosity of the gas phase at this test step.
        /// </summary>
		[Description("The viscosity of the gas phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("GasViscosity")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return GasViscosityField;
            } 
            set {
                GasViscosityField = value;
                NotifyPropertyChanged("GasViscosity");
            }
        }

        private DynamicViscosityMeasure GasViscosityField; 

        /// <summary>
        /// The Y function at this test step. See Standing, M.B.: Volumetric And Phase Behavior Of Oil Field Hydrocarbon Systems, Eighth Edition, SPE Richardson, Texas (1977).
        /// </summary>
		[Description("The Y function at this test step. See  Standing, M.B.: Volumetric And Phase Behavior Of Oil Field Hydrocarbon Systems, Eighth Edition, SPE Richardson, Texas (1977).")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("YFunction")]
        public double? YFunction {
            get {
                return YFunctionField;
            } 
            set {
                YFunctionField = value;
                 this.YFunctionSpecified = true;
                NotifyPropertyChanged("YFunction");
            }
        }

        private double? YFunctionField; 

        /// <summary>
        /// YFunctionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool YFunctionSpecified {
            get {
                return YFunctionSpecifiedField;
            } 
            set {
                YFunctionSpecifiedField = value;
                NotifyPropertyChanged("YFunctionSpecified");
            }
        }

        private bool YFunctionSpecifiedField; 

        /// <summary>
        /// The fluid condition at this test step. Enum, see fluid analysis step condition.
        /// </summary>
		[Description("The fluid condition at this test step. Enum, see fluid analysis step condition.")]
        [EnergisticsDataTypeAttribute(DataType = "FluidAnalysisStepCondition")]
		[XmlElement("FluidCondition")]
        public FluidAnalysisStepCondition? FluidCondition {
            get {
                return FluidConditionField;
            } 
            set {
                FluidConditionField = value;
                 this.FluidConditionSpecified = true;
                NotifyPropertyChanged("FluidCondition");
            }
        }

        private FluidAnalysisStepCondition? FluidConditionField; 

        /// <summary>
        /// FluidConditionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidConditionSpecified {
            get {
                return FluidConditionSpecifiedField;
            } 
            set {
                FluidConditionSpecifiedField = value;
                NotifyPropertyChanged("FluidConditionSpecified");
            }
        }

        private bool FluidConditionSpecifiedField; 

        /// <summary>
        /// The phases present at this test step (oil, water, gas etc.). Enum, see phases present.
        /// </summary>
		[Description("The phases present at this test step (oil, water, gas etc.). Enum, see phases present.")]
        [EnergisticsDataTypeAttribute(DataType = "PhasePresent")]
		[XmlElement("PhasesPresent")]
        public PhasePresent? PhasesPresent {
            get {
                return PhasesPresentField;
            } 
            set {
                PhasesPresentField = value;
                 this.PhasesPresentSpecified = true;
                NotifyPropertyChanged("PhasesPresent");
            }
        }

        private PhasePresent? PhasesPresentField; 

        /// <summary>
        /// PhasesPresentSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PhasesPresentSpecified {
            get {
                return PhasesPresentSpecifiedField;
            } 
            set {
                PhasesPresentSpecifiedField = value;
                NotifyPropertyChanged("PhasesPresentSpecified");
            }
        }

        private bool PhasesPresentSpecifiedField; 

        /// <summary>
        /// The vapor composition at this test step.
        /// </summary>
		[Description("The vapor composition at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VaporComposition")]
		[XmlElement("VaporComposition")]
        public VaporComposition VaporComposition {
            get {
                return VaporCompositionField;
            } 
            set {
                VaporCompositionField = value;
                NotifyPropertyChanged("VaporComposition");
            }
        }

        private VaporComposition VaporCompositionField; 

        /// <summary>
        /// The liquid composition at this test step.
        /// </summary>
		[Description("The liquid composition at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LiquidComposition")]
		[XmlElement("LiquidComposition")]
        public LiquidComposition LiquidComposition {
            get {
                return LiquidCompositionField;
            } 
            set {
                LiquidCompositionField = value;
                NotifyPropertyChanged("LiquidComposition");
            }
        }

        private LiquidComposition LiquidCompositionField; 

        /// <summary>
        /// The overall composition at this test step.
        /// </summary>
		[Description("The overall composition at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "OverallComposition")]
		[XmlElement("OverallComposition")]
        public OverallComposition OverallComposition {
            get {
                return OverallCompositionField;
            } 
            set {
                OverallCompositionField = value;
                NotifyPropertyChanged("OverallComposition");
            }
        }

        private OverallComposition OverallCompositionField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SaturationTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SaturationTest", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the SaturationTest xsd type.")]
    public partial class SaturationTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A number for this test for purposes of, e.g., tracking lab sequence.
        /// </summary>
		[Required]
        [Description("A number for this test for purposes of, e.g., tracking lab sequence.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("TestNumber")]
        public long? TestNumber {
            get {
                return TestNumberField;
            } 
            set {
                TestNumberField = value;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private long? TestNumberField; 

        /// <summary>
        /// The temperature of this test.
        /// </summary>
		[Required]
        [Description("The temperature of this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TestTemperature")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return TestTemperatureField;
            } 
            set {
                TestTemperatureField = value;
                NotifyPropertyChanged("TestTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure TestTemperatureField; 

        /// <summary>
        /// The saturation (or bubble point) pressure measured in this test.
        /// </summary>
		[Required]
        [Description("The saturation (or bubble point) pressure measured in this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SaturationPressure")]
		[XmlElement("SaturationPressure")]
        public SaturationPressure SaturationPressure {
            get {
                return SaturationPressureField;
            } 
            set {
                SaturationPressureField = value;
                NotifyPropertyChanged("SaturationPressure");
            }
        }

        private SaturationPressure SaturationPressureField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DifferentialLiberationTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DifferentialLiberationTest", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DifferentialLiberationTest xsd type.")]
    public partial class DifferentialLiberationTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TestNumber property
        /// </summary>
		[Required]
        [Description("A number for this test for purposes of, e.g., tracking lab sequence.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("TestNumber")]
        public long? TestNumber {
            get {
                return TestNumberField;
            } 
            set {
                TestNumberField = value;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private long? TestNumberField; 

        /// <summary>
        /// TestTemperature property
        /// </summary>
		[Required]
        [Description("The temperature of this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TestTemperature")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return TestTemperatureField;
            } 
            set {
                TestTemperatureField = value;
                NotifyPropertyChanged("TestTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure TestTemperatureField; 

        /// <summary>
        /// SaturationPressure property
        /// </summary>
		[Required]
        [Description("The saturation (or bubble point) pressure measured in this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SaturationPressure")]
		[XmlElement("SaturationPressure")]
        public SaturationPressure SaturationPressure {
            get {
                return SaturationPressureField;
            } 
            set {
                SaturationPressureField = value;
                NotifyPropertyChanged("SaturationPressure");
            }
        }

        private SaturationPressure SaturationPressureField; 

        /// <summary>
        /// SeparatorConditions property
        /// </summary>
		[Description("Reference to a separator test element that contains the separator conditions (stages) that apply to this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SeparatorConditions")]
		[XmlElement("SeparatorConditions")]
        public SeparatorConditions SeparatorConditions {
            get {
                return SeparatorConditionsField;
            } 
            set {
                SeparatorConditionsField = value;
                NotifyPropertyChanged("SeparatorConditions");
            }
        }

        private SeparatorConditions SeparatorConditionsField; 

        /// <summary>
        /// CorrectionMethod property
        /// </summary>
		[StringLength(64)]
        [Description("A flag to indicate if differential liberation/vaporization data are corrected to separator conditions/flash data or not.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CorrectionMethod")]
        public string CorrectionMethod {
            get {
                return CorrectionMethodField;
            } 
            set {
                CorrectionMethodField = value;
                NotifyPropertyChanged("CorrectionMethod");
            }
        }

        private string CorrectionMethodField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// DlTestStep property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidDifferentialLiberationTestStep")]
		[XmlElement("DlTestStep")]
        public List<FluidDifferentialLiberationTestStep> DLTestStep {
            get {
                return DlTestStepField;
            } 
            set {
                DlTestStepField = value;
                NotifyPropertyChanged("DLTestStep");
            }
        }

         /// <summary>
         /// bool to indicate if DLTestStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DLTestStepSpecified
         {
             get {
             if(DlTestStepField!=null)
                 return DlTestStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidDifferentialLiberationTestStep> DlTestStepField; 

        /// <summary>
        /// ShrinkageReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidVolumeReference")]
		[XmlElement("ShrinkageReference")]
        public FluidVolumeReference ShrinkageReference {
            get {
                return ShrinkageReferenceField;
            } 
            set {
                ShrinkageReferenceField = value;
                NotifyPropertyChanged("ShrinkageReference");
            }
        }

        private FluidVolumeReference ShrinkageReferenceField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SeparatorConditions xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SeparatorConditions", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the SeparatorConditions xsd type.")]
    public partial class SeparatorConditions : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// Reference to a separator test element, which contains the separator conditions (stages) which apply to this test.
        /// </summary>
		[StringLength(64)]
        [Description("Reference to a separator test element, which contains the separator conditions (stages) which apply to this test.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("separatorTestReference")]
		
        public string SeparatorTestReference {
            get {
                return separatorTestReferenceField;
            } 
            set {
                separatorTestReferenceField = value;
                NotifyPropertyChanged("SeparatorTestReference");
            }
        }

        private string separatorTestReferenceField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidDifferentialLiberationTestStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidDifferentialLiberationTestStep", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidDifferentialLiberationTestStep xsd type.")]
    public partial class FluidDifferentialLiberationTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The step number is the index of a (P,T) step in the overall test.
        /// </summary>
		[Required]
        [Description("The step number is the index of a (P,T) step in the overall test.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StepNumber")]
        public long? StepNumber {
            get {
                return StepNumberField;
            } 
            set {
                StepNumberField = value;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private long? StepNumberField; 

        /// <summary>
        /// The pressure for this test step.
        /// </summary>
		[Required]
        [Description("The pressure for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("StepPressure")]
        public PressureMeasure StepPressure {
            get {
                return StepPressureField;
            } 
            set {
                StepPressureField = value;
                NotifyPropertyChanged("StepPressure");
            }
        }

        private PressureMeasure StepPressureField; 

        /// <summary>
        /// The temperature for this test step.
        /// </summary>
		[Description("The temperature for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("StepTemperature")]
        public ThermodynamicTemperatureMeasure StepTemperature {
            get {
                return StepTemperatureField;
            } 
            set {
                StepTemperatureField = value;
                NotifyPropertyChanged("StepTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure StepTemperatureField; 

        /// <summary>
        /// The density of the oil phase at this test step.
        /// </summary>
		[Description("The density of the oil phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("OilDensity")]
        public MassPerVolumeMeasure OilDensity {
            get {
                return OilDensityField;
            } 
            set {
                OilDensityField = value;
                NotifyPropertyChanged("OilDensity");
            }
        }

        private MassPerVolumeMeasure OilDensityField; 

        /// <summary>
        /// The formation volume factor for the oil (liquid) phase at the conditions of this test--volume at test conditions/volume st standard conditions.
        /// </summary>
		[Description("The formation volume factor for the oil (liquid) phase at the conditions of this test--volume at test conditions/volume st standard conditions.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("OilFormationVolumeFactor")]
        public VolumePerVolumeMeasure OilFormationVolumeFactor {
            get {
                return OilFormationVolumeFactorField;
            } 
            set {
                OilFormationVolumeFactorField = value;
                NotifyPropertyChanged("OilFormationVolumeFactor");
            }
        }

        private VolumePerVolumeMeasure OilFormationVolumeFactorField; 

        /// <summary>
        /// The oil compressibility at this test step.
        /// </summary>
		[Description("The oil compressibility at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "OilCompressibility")]
		[XmlElement("OilCompressibility")]
        public OilCompressibility OilCompressibility {
            get {
                return OilCompressibilityField;
            } 
            set {
                OilCompressibilityField = value;
                NotifyPropertyChanged("OilCompressibility");
            }
        }

        private OilCompressibility OilCompressibilityField; 

        /// <summary>
        /// The viscosity of the oil phase at this test step.
        /// </summary>
		[Description("The viscosity of the oil phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("OilViscosity")]
        public DynamicViscosityMeasure OilViscosity {
            get {
                return OilViscosityField;
            } 
            set {
                OilViscosityField = value;
                NotifyPropertyChanged("OilViscosity");
            }
        }

        private DynamicViscosityMeasure OilViscosityField; 

        /// <summary>
        /// The molecular weight of the gas phase at this test step.
        /// </summary>
		[Description("The molecular weight of the gas phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("GasMolecularWeight")]
        public MolecularWeightMeasure GasMolecularWeight {
            get {
                return GasMolecularWeightField;
            } 
            set {
                GasMolecularWeightField = value;
                NotifyPropertyChanged("GasMolecularWeight");
            }
        }

        private MolecularWeightMeasure GasMolecularWeightField; 

        /// <summary>
        /// The gas gravity at this test step.
        /// </summary>
		[Description("The gas gravity at this test step.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("GasGravity")]
        public double? GasGravity {
            get {
                return GasGravityField;
            } 
            set {
                GasGravityField = value;
                 this.GasGravitySpecified = true;
                NotifyPropertyChanged("GasGravity");
            }
        }

        private double? GasGravityField; 

        /// <summary>
        /// GasGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasGravitySpecified {
            get {
                return GasGravitySpecifiedField;
            } 
            set {
                GasGravitySpecifiedField = value;
                NotifyPropertyChanged("GasGravitySpecified");
            }
        }

        private bool GasGravitySpecifiedField; 

        /// <summary>
        /// The density of gas at this test step.
        /// </summary>
		[Description("The density of gas at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("GasDensity")]
        public MassPerVolumeMeasure GasDensity {
            get {
                return GasDensityField;
            } 
            set {
                GasDensityField = value;
                NotifyPropertyChanged("GasDensity");
            }
        }

        private MassPerVolumeMeasure GasDensityField; 

        /// <summary>
        /// The gas formation volume factor at this test step.
        /// </summary>
		[Description("The gas formation volume factor at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("GasFormationVolumeFactor")]
        public VolumePerVolumeMeasure GasFormationVolumeFactor {
            get {
                return GasFormationVolumeFactorField;
            } 
            set {
                GasFormationVolumeFactorField = value;
                NotifyPropertyChanged("GasFormationVolumeFactor");
            }
        }

        private VolumePerVolumeMeasure GasFormationVolumeFactorField; 

        /// <summary>
        /// The gas Z factor value at this test step.
        /// </summary>
		[Description("The gas Z factor value at this test step.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("GasZFactor")]
        public double? GasZFactor {
            get {
                return GasZFactorField;
            } 
            set {
                GasZFactorField = value;
                 this.GasZFactorSpecified = true;
                NotifyPropertyChanged("GasZFactor");
            }
        }

        private double? GasZFactorField; 

        /// <summary>
        /// GasZFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasZFactorSpecified {
            get {
                return GasZFactorSpecifiedField;
            } 
            set {
                GasZFactorSpecifiedField = value;
                NotifyPropertyChanged("GasZFactorSpecified");
            }
        }

        private bool GasZFactorSpecifiedField; 

        /// <summary>
        /// The viscosity of the gas phase at this test step.
        /// </summary>
		[Description("The viscosity of the gas phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("GasViscosity")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return GasViscosityField;
            } 
            set {
                GasViscosityField = value;
                NotifyPropertyChanged("GasViscosity");
            }
        }

        private DynamicViscosityMeasure GasViscosityField; 

        /// <summary>
        /// The total formation volume factor at this test step.
        /// </summary>
		[Description("The total formation volume factor at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("TotalFormationVolumeFactor")]
        public VolumePerVolumeMeasure TotalFormationVolumeFactor {
            get {
                return TotalFormationVolumeFactorField;
            } 
            set {
                TotalFormationVolumeFactorField = value;
                NotifyPropertyChanged("TotalFormationVolumeFactor");
            }
        }

        private VolumePerVolumeMeasure TotalFormationVolumeFactorField; 

        /// <summary>
        /// The solution GOR measured at this test step.
        /// </summary>
		[Description("The solution GOR measured at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("SolutionGORMeasured")]
        public VolumePerVolumeMeasure SolutionGORMeasured {
            get {
                return SolutionGORMeasuredField;
            } 
            set {
                SolutionGORMeasuredField = value;
                NotifyPropertyChanged("SolutionGORMeasured");
            }
        }

        private VolumePerVolumeMeasure SolutionGORMeasuredField; 

        /// <summary>
        /// The solution GOR (corrected) at this test step.
        /// </summary>
		[Description("The solution GOR (corrected) at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("SolutionGORCorrect")]
        public VolumePerVolumeMeasure SolutionGORCorrect {
            get {
                return SolutionGORCorrectField;
            } 
            set {
                SolutionGORCorrectField = value;
                NotifyPropertyChanged("SolutionGORCorrect");
            }
        }

        private VolumePerVolumeMeasure SolutionGORCorrectField; 

        /// <summary>
        /// The cumulative stock tank GOR at this test step.
        /// </summary>
		[Description("The cumulative stock tank GOR at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("CumulativeStockTankGOR")]
        public VolumePerVolumeMeasure CumulativeStockTankGOR {
            get {
                return CumulativeStockTankGORField;
            } 
            set {
                CumulativeStockTankGORField = value;
                NotifyPropertyChanged("CumulativeStockTankGOR");
            }
        }

        private VolumePerVolumeMeasure CumulativeStockTankGORField; 

        /// <summary>
        /// The oil formation volume factor (corrected) at this test step.
        /// </summary>
		[Description("The oil formation volume factor (corrected) at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("OilFormationVolumeFactorCorrected")]
        public VolumePerVolumeMeasure OilFormationVolumeFactorCorrected {
            get {
                return OilFormationVolumeFactorCorrectedField;
            } 
            set {
                OilFormationVolumeFactorCorrectedField = value;
                NotifyPropertyChanged("OilFormationVolumeFactorCorrected");
            }
        }

        private VolumePerVolumeMeasure OilFormationVolumeFactorCorrectedField; 

        /// <summary>
        /// The residual API gravity at this test step.
        /// </summary>
		[Description("The residual API gravity at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "APIGravityMeasure")]
		[XmlElement("ResidualAPIGravity")]
        public APIGravityMeasure ResidualAPIGravity {
            get {
                return ResidualAPIGravityField;
            } 
            set {
                ResidualAPIGravityField = value;
                NotifyPropertyChanged("ResidualAPIGravity");
            }
        }

        private APIGravityMeasure ResidualAPIGravityField; 

        /// <summary>
        /// The fluid condition at this test step. Enum, see fluid analysis step condition.
        /// </summary>
		[Description("The fluid condition at this test step. Enum, see fluid analysis step condition.")]
        [EnergisticsDataTypeAttribute(DataType = "FluidAnalysisStepCondition")]
		[XmlElement("FluidCondition")]
        public FluidAnalysisStepCondition? FluidCondition {
            get {
                return FluidConditionField;
            } 
            set {
                FluidConditionField = value;
                 this.FluidConditionSpecified = true;
                NotifyPropertyChanged("FluidCondition");
            }
        }

        private FluidAnalysisStepCondition? FluidConditionField; 

        /// <summary>
        /// FluidConditionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidConditionSpecified {
            get {
                return FluidConditionSpecifiedField;
            } 
            set {
                FluidConditionSpecifiedField = value;
                NotifyPropertyChanged("FluidConditionSpecified");
            }
        }

        private bool FluidConditionSpecifiedField; 

        /// <summary>
        /// The phases present at this test step.
        /// </summary>
		[Description("The phases present at this test step.")]
        [EnergisticsDataTypeAttribute(DataType = "PhasePresent")]
		[XmlElement("PhasesPresent")]
        public PhasePresent? PhasesPresent {
            get {
                return PhasesPresentField;
            } 
            set {
                PhasesPresentField = value;
                 this.PhasesPresentSpecified = true;
                NotifyPropertyChanged("PhasesPresent");
            }
        }

        private PhasePresent? PhasesPresentField; 

        /// <summary>
        /// PhasesPresentSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PhasesPresentSpecified {
            get {
                return PhasesPresentSpecifiedField;
            } 
            set {
                PhasesPresentSpecifiedField = value;
                NotifyPropertyChanged("PhasesPresentSpecified");
            }
        }

        private bool PhasesPresentSpecifiedField; 

        /// <summary>
        /// The liquid composition at this test step.
        /// </summary>
		[Description("The liquid composition at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LiquidComposition")]
		[XmlElement("LiquidComposition")]
        public LiquidComposition LiquidComposition {
            get {
                return LiquidCompositionField;
            } 
            set {
                LiquidCompositionField = value;
                NotifyPropertyChanged("LiquidComposition");
            }
        }

        private LiquidComposition LiquidCompositionField; 

        /// <summary>
        /// The vapor composition at this test step.
        /// </summary>
		[Description("The vapor composition at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VaporComposition")]
		[XmlElement("VaporComposition")]
        public VaporComposition VaporComposition {
            get {
                return VaporCompositionField;
            } 
            set {
                VaporCompositionField = value;
                NotifyPropertyChanged("VaporComposition");
            }
        }

        private VaporComposition VaporCompositionField; 

        /// <summary>
        /// The overall composition at this test step.
        /// </summary>
		[Description("The overall composition at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "OverallComposition")]
		[XmlElement("OverallComposition")]
        public OverallComposition OverallComposition {
            get {
                return OverallCompositionField;
            } 
            set {
                OverallCompositionField = value;
                NotifyPropertyChanged("OverallComposition");
            }
        }

        private OverallComposition OverallCompositionField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ConstantVolumeDepletionTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ConstantVolumeDepletionTest", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ConstantVolumeDepletionTest xsd type.")]
    public partial class ConstantVolumeDepletionTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TestNumber property
        /// </summary>
		[Required]
        [Description("A number for this test for purposes of, e.g., tracking lab sequence.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("TestNumber")]
        public long? TestNumber {
            get {
                return TestNumberField;
            } 
            set {
                TestNumberField = value;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private long? TestNumberField; 

        /// <summary>
        /// TestTemperature property
        /// </summary>
		[Required]
        [Description("The temperature of this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TestTemperature")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return TestTemperatureField;
            } 
            set {
                TestTemperatureField = value;
                NotifyPropertyChanged("TestTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure TestTemperatureField; 

        /// <summary>
        /// CumulativeGasProducedReferenceStd property
        /// </summary>
		[Description("The volume is corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("CumulativeGasProducedReferenceStd")]
        public VolumeMeasure CumulativeGasProducedReferenceStd {
            get {
                return CumulativeGasProducedReferenceStdField;
            } 
            set {
                CumulativeGasProducedReferenceStdField = value;
                NotifyPropertyChanged("CumulativeGasProducedReferenceStd");
            }
        }

        private VolumeMeasure CumulativeGasProducedReferenceStdField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// SatuationPressure property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SaturationPressure")]
		[XmlElement("SatuationPressure")]
        public SaturationPressure SatuationPressure {
            get {
                return SatuationPressureField;
            } 
            set {
                SatuationPressureField = value;
                NotifyPropertyChanged("SatuationPressure");
            }
        }

        private SaturationPressure SatuationPressureField; 

        /// <summary>
        /// LiquidDropoutReference property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidVolumeReference")]
		[XmlElement("LiquidDropoutReference")]
        public List<FluidVolumeReference> LiquidDropoutReference {
            get {
                return LiquidDropoutReferenceField;
            } 
            set {
                LiquidDropoutReferenceField = value;
                NotifyPropertyChanged("LiquidDropoutReference");
            }
        }

         /// <summary>
         /// bool to indicate if LiquidDropoutReference has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LiquidDropoutReferenceSpecified
         {
             get {
             if(LiquidDropoutReferenceField!=null)
                 return LiquidDropoutReferenceField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidVolumeReference> LiquidDropoutReferenceField; 

        /// <summary>
        /// CvdTestStep property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidCvdTestStep")]
		[XmlElement("CvdTestStep")]
        public List<FluidCvdTestStep> CvdTestStep {
            get {
                return CvdTestStepField;
            } 
            set {
                CvdTestStepField = value;
                NotifyPropertyChanged("CvdTestStep");
            }
        }

         /// <summary>
         /// bool to indicate if CvdTestStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CvdTestStepSpecified
         {
             get {
             if(CvdTestStepField!=null)
                 return CvdTestStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidCvdTestStep> CvdTestStepField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidCvdTestStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidCvdTestStep", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidCvdTestStep xsd type.")]
    public partial class FluidCvdTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The step number is the index of a (P,T) step in the overall test.
        /// </summary>
		[Required]
        [Description("The step number is the index of a (P,T) step in the overall test.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StepNumber")]
        public long? StepNumber {
            get {
                return StepNumberField;
            } 
            set {
                StepNumberField = value;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private long? StepNumberField; 

        /// <summary>
        /// The pressure for this test step.
        /// </summary>
		[Required]
        [Description("The pressure for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("StepPressure")]
        public PressureMeasure StepPressure {
            get {
                return StepPressureField;
            } 
            set {
                StepPressureField = value;
                NotifyPropertyChanged("StepPressure");
            }
        }

        private PressureMeasure StepPressureField; 

        /// <summary>
        /// The viscosity of the oil phase at this test step.
        /// </summary>
		[Description("The viscosity of the oil phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("OilViscosity")]
        public DynamicViscosityMeasure OilViscosity {
            get {
                return OilViscosityField;
            } 
            set {
                OilViscosityField = value;
                NotifyPropertyChanged("OilViscosity");
            }
        }

        private DynamicViscosityMeasure OilViscosityField; 

        /// <summary>
        /// The density of the oil phase at this test step.
        /// </summary>
		[Description("The density of the oil phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("OilDensity")]
        public MassPerVolumeMeasure OilDensity {
            get {
                return OilDensityField;
            } 
            set {
                OilDensityField = value;
                NotifyPropertyChanged("OilDensity");
            }
        }

        private MassPerVolumeMeasure OilDensityField; 

        /// <summary>
        /// The molecular weight of the gas phase at this test step.
        /// </summary>
		[Description("The molecular weight of the gas phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("GasMolecularWeight")]
        public MolecularWeightMeasure GasMolecularWeight {
            get {
                return GasMolecularWeightField;
            } 
            set {
                GasMolecularWeightField = value;
                NotifyPropertyChanged("GasMolecularWeight");
            }
        }

        private MolecularWeightMeasure GasMolecularWeightField; 

        /// <summary>
        /// The gas gravity at this test step.
        /// </summary>
		[Description("The gas gravity at this test step.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("GasGravity")]
        public double? GasGravity {
            get {
                return GasGravityField;
            } 
            set {
                GasGravityField = value;
                 this.GasGravitySpecified = true;
                NotifyPropertyChanged("GasGravity");
            }
        }

        private double? GasGravityField; 

        /// <summary>
        /// GasGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasGravitySpecified {
            get {
                return GasGravitySpecifiedField;
            } 
            set {
                GasGravitySpecifiedField = value;
                NotifyPropertyChanged("GasGravitySpecified");
            }
        }

        private bool GasGravitySpecifiedField; 

        /// <summary>
        /// The gas formation volume factor at this test step.
        /// </summary>
		[Description("The gas formation volume factor at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("GasFormationVolumeFactor")]
        public VolumePerVolumeMeasure GasFormationVolumeFactor {
            get {
                return GasFormationVolumeFactorField;
            } 
            set {
                GasFormationVolumeFactorField = value;
                NotifyPropertyChanged("GasFormationVolumeFactor");
            }
        }

        private VolumePerVolumeMeasure GasFormationVolumeFactorField; 

        /// <summary>
        /// The gas Z factor value at this test step.
        /// </summary>
		[Description("The gas Z factor value at this test step.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("GasZFactor")]
        public double? GasZFactor {
            get {
                return GasZFactorField;
            } 
            set {
                GasZFactorField = value;
                 this.GasZFactorSpecified = true;
                NotifyPropertyChanged("GasZFactor");
            }
        }

        private double? GasZFactorField; 

        /// <summary>
        /// GasZFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasZFactorSpecified {
            get {
                return GasZFactorSpecifiedField;
            } 
            set {
                GasZFactorSpecifiedField = value;
                NotifyPropertyChanged("GasZFactorSpecified");
            }
        }

        private bool GasZFactorSpecifiedField; 

        /// <summary>
        /// The standard Z = PV/RT, but here for a two-phase Z-factor, use total molar volume for both phases.
        /// </summary>
		[Description("The standard Z = PV/RT, but here for a two-phase Z-factor, use total molar volume for both phases.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Phase2ZFactor")]
        public double? Phase2ZFactor {
            get {
                return Phase2ZFactorField;
            } 
            set {
                Phase2ZFactorField = value;
                 this.Phase2ZFactorSpecified = true;
                NotifyPropertyChanged("Phase2ZFactor");
            }
        }

        private double? Phase2ZFactorField; 

        /// <summary>
        /// Phase2ZFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool Phase2ZFactorSpecified {
            get {
                return Phase2ZFactorSpecifiedField;
            } 
            set {
                Phase2ZFactorSpecifiedField = value;
                NotifyPropertyChanged("Phase2ZFactorSpecified");
            }
        }

        private bool Phase2ZFactorSpecifiedField; 

        /// <summary>
        /// The viscosity of the gas phase at this test step.
        /// </summary>
		[Description("The viscosity of the gas phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("GasViscosity")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return GasViscosityField;
            } 
            set {
                GasViscosityField = value;
                NotifyPropertyChanged("GasViscosity");
            }
        }

        private DynamicViscosityMeasure GasViscosityField; 

        /// <summary>
        /// The cumulative fluid produced (molar) fraction at this test step.
        /// </summary>
		[Description("The cumulative fluid produced (molar) fraction at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AmountOfSubstancePerAmountOfSubstanceMeasure")]
		[XmlElement("CumulativeFluidProducedFraction")]
        public AmountOfSubstancePerAmountOfSubstanceMeasure CumulativeFluidProducedFraction {
            get {
                return CumulativeFluidProducedFractionField;
            } 
            set {
                CumulativeFluidProducedFractionField = value;
                NotifyPropertyChanged("CumulativeFluidProducedFraction");
            }
        }

        private AmountOfSubstancePerAmountOfSubstanceMeasure CumulativeFluidProducedFractionField; 

        /// <summary>
        /// The fraction of liquid by volume for this test step.
        /// </summary>
		[Description("The fraction of liquid by volume for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "RelativeVolumeRatio")]
		[XmlElement("LiquidFraction")]
        public RelativeVolumeRatio LiquidFraction {
            get {
                return LiquidFractionField;
            } 
            set {
                LiquidFractionField = value;
                NotifyPropertyChanged("LiquidFraction");
            }
        }

        private RelativeVolumeRatio LiquidFractionField; 

        /// <summary>
        /// The fluid condition at this test step. Enum, see fluid analysis step condition.
        /// </summary>
		[Description("The fluid condition at this test step. Enum, see fluid analysis step condition.")]
        [EnergisticsDataTypeAttribute(DataType = "FluidAnalysisStepCondition")]
		[XmlElement("FluidCondition")]
        public FluidAnalysisStepCondition? FluidCondition {
            get {
                return FluidConditionField;
            } 
            set {
                FluidConditionField = value;
                 this.FluidConditionSpecified = true;
                NotifyPropertyChanged("FluidCondition");
            }
        }

        private FluidAnalysisStepCondition? FluidConditionField; 

        /// <summary>
        /// FluidConditionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidConditionSpecified {
            get {
                return FluidConditionSpecifiedField;
            } 
            set {
                FluidConditionSpecifiedField = value;
                NotifyPropertyChanged("FluidConditionSpecified");
            }
        }

        private bool FluidConditionSpecifiedField; 

        /// <summary>
        /// The phases present at this test step.
        /// </summary>
		[Description("The phases present at this test step.")]
        [EnergisticsDataTypeAttribute(DataType = "PhasePresent")]
		[XmlElement("PhasesPresent")]
        public PhasePresent? PhasesPresent {
            get {
                return PhasesPresentField;
            } 
            set {
                PhasesPresentField = value;
                 this.PhasesPresentSpecified = true;
                NotifyPropertyChanged("PhasesPresent");
            }
        }

        private PhasePresent? PhasesPresentField; 

        /// <summary>
        /// PhasesPresentSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PhasesPresentSpecified {
            get {
                return PhasesPresentSpecifiedField;
            } 
            set {
                PhasesPresentSpecifiedField = value;
                NotifyPropertyChanged("PhasesPresentSpecified");
            }
        }

        private bool PhasesPresentSpecifiedField; 

        /// <summary>
        /// The liquid composition at this test step.
        /// </summary>
		[Description("The liquid composition at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LiquidComposition")]
		[XmlElement("LiquidComposition")]
        public LiquidComposition LiquidComposition {
            get {
                return LiquidCompositionField;
            } 
            set {
                LiquidCompositionField = value;
                NotifyPropertyChanged("LiquidComposition");
            }
        }

        private LiquidComposition LiquidCompositionField; 

        /// <summary>
        /// The vapor composition at this test step.
        /// </summary>
		[Description("The vapor composition at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VaporComposition")]
		[XmlElement("VaporComposition")]
        public VaporComposition VaporComposition {
            get {
                return VaporCompositionField;
            } 
            set {
                VaporCompositionField = value;
                NotifyPropertyChanged("VaporComposition");
            }
        }

        private VaporComposition VaporCompositionField; 

        /// <summary>
        /// The overall composition at this test step.
        /// </summary>
		[Description("The overall composition at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "OverallComposition")]
		[XmlElement("OverallComposition")]
        public OverallComposition OverallComposition {
            get {
                return OverallCompositionField;
            } 
            set {
                OverallCompositionField = value;
                NotifyPropertyChanged("OverallComposition");
            }
        }

        private OverallComposition OverallCompositionField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidSeparatorTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidSeparatorTest", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidSeparatorTest xsd type.")]
    public partial class FluidSeparatorTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TestNumber property
        /// </summary>
		[Required]
        [Description("A number for this test for purposes of, e.g., tracking lab sequence.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("TestNumber")]
        public long? TestNumber {
            get {
                return TestNumberField;
            } 
            set {
                TestNumberField = value;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private long? TestNumberField; 

        /// <summary>
        /// ReservoirTemperature property
        /// </summary>
		[Description("The reservoir temperature for this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("ReservoirTemperature")]
        public ThermodynamicTemperatureMeasure ReservoirTemperature {
            get {
                return ReservoirTemperatureField;
            } 
            set {
                ReservoirTemperatureField = value;
                NotifyPropertyChanged("ReservoirTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure ReservoirTemperatureField; 

        /// <summary>
        /// SaturationPressure property
        /// </summary>
		[Description("The saturation (or bubble point) pressure measured in this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SaturationPressure")]
		[XmlElement("SaturationPressure")]
        public SaturationPressure SaturationPressure {
            get {
                return SaturationPressureField;
            } 
            set {
                SaturationPressureField = value;
                NotifyPropertyChanged("SaturationPressure");
            }
        }

        private SaturationPressure SaturationPressureField; 

        /// <summary>
        /// SaturatedOilFormationVolumeFactor property
        /// </summary>
		[Description("The saturated oil formation volume factor for this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("SaturatedOilFormationVolumeFactor")]
        public VolumePerVolumeMeasure SaturatedOilFormationVolumeFactor {
            get {
                return SaturatedOilFormationVolumeFactorField;
            } 
            set {
                SaturatedOilFormationVolumeFactorField = value;
                NotifyPropertyChanged("SaturatedOilFormationVolumeFactor");
            }
        }

        private VolumePerVolumeMeasure SaturatedOilFormationVolumeFactorField; 

        /// <summary>
        /// SaturatedOilDensity property
        /// </summary>
		[Description("The saturated oil density for this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("SaturatedOilDensity")]
        public MassPerVolumeMeasure SaturatedOilDensity {
            get {
                return SaturatedOilDensityField;
            } 
            set {
                SaturatedOilDensityField = value;
                NotifyPropertyChanged("SaturatedOilDensity");
            }
        }

        private MassPerVolumeMeasure SaturatedOilDensityField; 

        /// <summary>
        /// SeparatorTestGOR property
        /// </summary>
		[Description("The separator test GOR for this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("SeparatorTestGOR")]
        public VolumePerVolumeMeasure SeparatorTestGOR {
            get {
                return SeparatorTestGORField;
            } 
            set {
                SeparatorTestGORField = value;
                NotifyPropertyChanged("SeparatorTestGOR");
            }
        }

        private VolumePerVolumeMeasure SeparatorTestGORField; 

        /// <summary>
        /// OverallGasGravity property
        /// </summary>
		[Description("The overall gas gravity for this test.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("OverallGasGravity")]
        public double? OverallGasGravity {
            get {
                return OverallGasGravityField;
            } 
            set {
                OverallGasGravityField = value;
                 this.OverallGasGravitySpecified = true;
                NotifyPropertyChanged("OverallGasGravity");
            }
        }

        private double? OverallGasGravityField; 

        /// <summary>
        /// OverallGasGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OverallGasGravitySpecified {
            get {
                return OverallGasGravitySpecifiedField;
            } 
            set {
                OverallGasGravitySpecifiedField = value;
                NotifyPropertyChanged("OverallGasGravitySpecified");
            }
        }

        private bool OverallGasGravitySpecifiedField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// ShrinkageReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidVolumeReference")]
		[XmlElement("ShrinkageReference")]
        public FluidVolumeReference ShrinkageReference {
            get {
                return ShrinkageReferenceField;
            } 
            set {
                ShrinkageReferenceField = value;
                NotifyPropertyChanged("ShrinkageReference");
            }
        }

        private FluidVolumeReference ShrinkageReferenceField; 

        /// <summary>
        /// SeparatorTestStep property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidSeparatorTestStep")]
		[XmlElement("SeparatorTestStep")]
        public List<FluidSeparatorTestStep> SeparatorTestStep {
            get {
                return SeparatorTestStepField;
            } 
            set {
                SeparatorTestStepField = value;
                NotifyPropertyChanged("SeparatorTestStep");
            }
        }

         /// <summary>
         /// bool to indicate if SeparatorTestStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SeparatorTestStepSpecified
         {
             get {
             if(SeparatorTestStepField!=null)
                 return SeparatorTestStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidSeparatorTestStep> SeparatorTestStepField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidSeparatorTestStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidSeparatorTestStep", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidSeparatorTestStep xsd type.")]
    public partial class FluidSeparatorTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The step number is the index of a (P,T) step in the overall test.
        /// </summary>
		[Required]
        [Description("The step number is the index of a (P,T) step in the overall test.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StepNumber")]
        public long? StepNumber {
            get {
                return StepNumberField;
            } 
            set {
                StepNumberField = value;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private long? StepNumberField; 

        /// <summary>
        /// The temperature for this test step.
        /// </summary>
		[Required]
        [Description("The temperature for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("StepTemperature")]
        public ThermodynamicTemperatureMeasure StepTemperature {
            get {
                return StepTemperatureField;
            } 
            set {
                StepTemperatureField = value;
                NotifyPropertyChanged("StepTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure StepTemperatureField; 

        /// <summary>
        /// The pressure for this test step.
        /// </summary>
		[Required]
        [Description("The pressure for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("StepPressure")]
        public PressureMeasure StepPressure {
            get {
                return StepPressureField;
            } 
            set {
                StepPressureField = value;
                NotifyPropertyChanged("StepPressure");
            }
        }

        private PressureMeasure StepPressureField; 

        /// <summary>
        /// The bubble point pressure for this test step.
        /// </summary>
		[Description("The bubble point pressure for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("BubblePointPressure")]
        public PressureMeasure BubblePointPressure {
            get {
                return BubblePointPressureField;
            } 
            set {
                BubblePointPressureField = value;
                NotifyPropertyChanged("BubblePointPressure");
            }
        }

        private PressureMeasure BubblePointPressureField; 

        /// <summary>
        /// The residual API gravity for this test step.
        /// </summary>
		[Description("The residual API gravity for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "APIGravityMeasure")]
		[XmlElement("ResidualAPIGravity")]
        public APIGravityMeasure ResidualAPIGravity {
            get {
                return ResidualAPIGravityField;
            } 
            set {
                ResidualAPIGravityField = value;
                NotifyPropertyChanged("ResidualAPIGravity");
            }
        }

        private APIGravityMeasure ResidualAPIGravityField; 

        /// <summary>
        /// The oil specific gravity for this test step.
        /// </summary>
		[Description("The oil specific gravity for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("OilSpecificGravity")]
        public DimensionlessMeasure OilSpecificGravity {
            get {
                return OilSpecificGravityField;
            } 
            set {
                OilSpecificGravityField = value;
                NotifyPropertyChanged("OilSpecificGravity");
            }
        }

        private DimensionlessMeasure OilSpecificGravityField; 

        /// <summary>
        /// The density of the oil phase at this test step.
        /// </summary>
		[Description("The density of the oil phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("OilDensity")]
        public MassPerVolumeMeasure OilDensity {
            get {
                return OilDensityField;
            } 
            set {
                OilDensityField = value;
                NotifyPropertyChanged("OilDensity");
            }
        }

        private MassPerVolumeMeasure OilDensityField; 

        /// <summary>
        /// The oil formation volume factor at standard conditions for this test step.
        /// </summary>
		[Description("The oil formation volume factor at standard conditions for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("OilFormationVolumeFactorStd")]
        public VolumePerVolumeMeasure OilFormationVolumeFactorStd {
            get {
                return OilFormationVolumeFactorStdField;
            } 
            set {
                OilFormationVolumeFactorStdField = value;
                NotifyPropertyChanged("OilFormationVolumeFactorStd");
            }
        }

        private VolumePerVolumeMeasure OilFormationVolumeFactorStdField; 

        /// <summary>
        /// The oil formation volume factor (corrected) for this test step.
        /// </summary>
		[Description("The oil formation volume factor (corrected) for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("OilFormationVolumeFactorCorrected")]
        public VolumePerVolumeMeasure OilFormationVolumeFactorCorrected {
            get {
                return OilFormationVolumeFactorCorrectedField;
            } 
            set {
                OilFormationVolumeFactorCorrectedField = value;
                NotifyPropertyChanged("OilFormationVolumeFactorCorrected");
            }
        }

        private VolumePerVolumeMeasure OilFormationVolumeFactorCorrectedField; 

        /// <summary>
        /// The viscosity of the oil phase at this test step.
        /// </summary>
		[Description("The viscosity of the oil phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("OilViscosity")]
        public DynamicViscosityMeasure OilViscosity {
            get {
                return OilViscosityField;
            } 
            set {
                OilViscosityField = value;
                NotifyPropertyChanged("OilViscosity");
            }
        }

        private DynamicViscosityMeasure OilViscosityField; 

        /// <summary>
        /// The stage separator GOR at standard conditions for this test step.
        /// </summary>
		[Description("The stage separator GOR at standard conditions for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("StageSeparatorGORStd")]
        public VolumePerVolumeMeasure StageSeparatorGORStd {
            get {
                return StageSeparatorGORStdField;
            } 
            set {
                StageSeparatorGORStdField = value;
                NotifyPropertyChanged("StageSeparatorGORStd");
            }
        }

        private VolumePerVolumeMeasure StageSeparatorGORStdField; 

        /// <summary>
        /// The stage separator GOR (corrected) for this test step.
        /// </summary>
		[Description("The stage separator GOR (corrected) for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("StageSeparatorGORCorrected")]
        public VolumePerVolumeMeasure StageSeparatorGORCorrected {
            get {
                return StageSeparatorGORCorrectedField;
            } 
            set {
                StageSeparatorGORCorrectedField = value;
                NotifyPropertyChanged("StageSeparatorGORCorrected");
            }
        }

        private VolumePerVolumeMeasure StageSeparatorGORCorrectedField; 

        /// <summary>
        /// The molecular weight of the gas phase at this test step.
        /// </summary>
		[Description("The molecular weight of the gas phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("GasMolecularWeight")]
        public MolecularWeightMeasure GasMolecularWeight {
            get {
                return GasMolecularWeightField;
            } 
            set {
                GasMolecularWeightField = value;
                NotifyPropertyChanged("GasMolecularWeight");
            }
        }

        private MolecularWeightMeasure GasMolecularWeightField; 

        /// <summary>
        /// The gas gravity at this test step.
        /// </summary>
		[Description("The gas gravity at this test step.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("GasGravity")]
        public double? GasGravity {
            get {
                return GasGravityField;
            } 
            set {
                GasGravityField = value;
                 this.GasGravitySpecified = true;
                NotifyPropertyChanged("GasGravity");
            }
        }

        private double? GasGravityField; 

        /// <summary>
        /// GasGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasGravitySpecified {
            get {
                return GasGravitySpecifiedField;
            } 
            set {
                GasGravitySpecifiedField = value;
                NotifyPropertyChanged("GasGravitySpecified");
            }
        }

        private bool GasGravitySpecifiedField; 

        /// <summary>
        /// The density of gas at this test step.
        /// </summary>
		[Description("The density of gas at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("GasDensity")]
        public MassPerVolumeMeasure GasDensity {
            get {
                return GasDensityField;
            } 
            set {
                GasDensityField = value;
                NotifyPropertyChanged("GasDensity");
            }
        }

        private MassPerVolumeMeasure GasDensityField; 

        /// <summary>
        /// The gas Z factor value at this test step.
        /// </summary>
		[Description("The gas Z factor value at this test step.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("GasZFactor")]
        public double? GasZFactor {
            get {
                return GasZFactorField;
            } 
            set {
                GasZFactorField = value;
                 this.GasZFactorSpecified = true;
                NotifyPropertyChanged("GasZFactor");
            }
        }

        private double? GasZFactorField; 

        /// <summary>
        /// GasZFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasZFactorSpecified {
            get {
                return GasZFactorSpecifiedField;
            } 
            set {
                GasZFactorSpecifiedField = value;
                NotifyPropertyChanged("GasZFactorSpecified");
            }
        }

        private bool GasZFactorSpecifiedField; 

        /// <summary>
        /// The viscosity of the gas phase at this test step.
        /// </summary>
		[Description("The viscosity of the gas phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("GasViscosity")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return GasViscosityField;
            } 
            set {
                GasViscosityField = value;
                NotifyPropertyChanged("GasViscosity");
            }
        }

        private DynamicViscosityMeasure GasViscosityField; 

        /// <summary>
        /// The gas volume for this test step.
        /// </summary>
		[Description("The gas volume for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("GasVolume")]
        public VolumeMeasure GasVolume {
            get {
                return GasVolumeField;
            } 
            set {
                GasVolumeField = value;
                NotifyPropertyChanged("GasVolume");
            }
        }

        private VolumeMeasure GasVolumeField; 

        /// <summary>
        /// The oil shrinkage factor for this test step.
        /// </summary>
		[Description("The oil shrinkage factor for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("OilShrinkageFactor")]
        public VolumePerVolumeMeasure OilShrinkageFactor {
            get {
                return OilShrinkageFactorField;
            } 
            set {
                OilShrinkageFactorField = value;
                NotifyPropertyChanged("OilShrinkageFactor");
            }
        }

        private VolumePerVolumeMeasure OilShrinkageFactorField; 

        /// <summary>
        /// The saturation (or bubble point) pressure measured in this test.
        /// </summary>
		[Description("The saturation (or bubble point) pressure measured in this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SaturationPressure")]
		[XmlElement("SaturationPressure")]
        public SaturationPressure SaturationPressure {
            get {
                return SaturationPressureField;
            } 
            set {
                SaturationPressureField = value;
                NotifyPropertyChanged("SaturationPressure");
            }
        }

        private SaturationPressure SaturationPressureField; 

        /// <summary>
        /// The fluid condition at this test step. Enum, see fluid analysis step condition.
        /// </summary>
		[Description("The fluid condition at this test step. Enum, see fluid analysis step condition.")]
        [EnergisticsDataTypeAttribute(DataType = "FluidAnalysisStepCondition")]
		[XmlElement("FluidCondition")]
        public FluidAnalysisStepCondition? FluidCondition {
            get {
                return FluidConditionField;
            } 
            set {
                FluidConditionField = value;
                 this.FluidConditionSpecified = true;
                NotifyPropertyChanged("FluidCondition");
            }
        }

        private FluidAnalysisStepCondition? FluidConditionField; 

        /// <summary>
        /// FluidConditionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidConditionSpecified {
            get {
                return FluidConditionSpecifiedField;
            } 
            set {
                FluidConditionSpecifiedField = value;
                NotifyPropertyChanged("FluidConditionSpecified");
            }
        }

        private bool FluidConditionSpecifiedField; 

        /// <summary>
        /// The phases present for this test step. Enum, see phases present.
        /// </summary>
		[Description("The phases present for this test step. Enum, see phases present.")]
        [EnergisticsDataTypeAttribute(DataType = "PhasePresent")]
		[XmlElement("PhasesPresent")]
        public PhasePresent? PhasesPresent {
            get {
                return PhasesPresentField;
            } 
            set {
                PhasesPresentField = value;
                 this.PhasesPresentSpecified = true;
                NotifyPropertyChanged("PhasesPresent");
            }
        }

        private PhasePresent? PhasesPresentField; 

        /// <summary>
        /// PhasesPresentSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PhasesPresentSpecified {
            get {
                return PhasesPresentSpecifiedField;
            } 
            set {
                PhasesPresentSpecifiedField = value;
                NotifyPropertyChanged("PhasesPresentSpecified");
            }
        }

        private bool PhasesPresentSpecifiedField; 

        /// <summary>
        /// The liquid composition for this test step.
        /// </summary>
		[Description("The liquid composition for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LiquidComposition")]
		[XmlElement("LiquidComposition")]
        public LiquidComposition LiquidComposition {
            get {
                return LiquidCompositionField;
            } 
            set {
                LiquidCompositionField = value;
                NotifyPropertyChanged("LiquidComposition");
            }
        }

        private LiquidComposition LiquidCompositionField; 

        /// <summary>
        /// The vapor composition for this test step.
        /// </summary>
		[Description("The vapor composition for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VaporComposition")]
		[XmlElement("VaporComposition")]
        public VaporComposition VaporComposition {
            get {
                return VaporCompositionField;
            } 
            set {
                VaporCompositionField = value;
                NotifyPropertyChanged("VaporComposition");
            }
        }

        private VaporComposition VaporCompositionField; 

        /// <summary>
        /// The overall composition for this test step.
        /// </summary>
		[Description("The overall composition for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "OverallComposition")]
		[XmlElement("OverallComposition")]
        public OverallComposition OverallComposition {
            get {
                return OverallCompositionField;
            } 
            set {
                OverallCompositionField = value;
                NotifyPropertyChanged("OverallComposition");
            }
        }

        private OverallComposition OverallCompositionField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the OtherMeasurementTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="OtherMeasurementTest", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the OtherMeasurementTest xsd type.")]
    public partial class OtherMeasurementTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TestNumber property
        /// </summary>
		[Required]
        [Description("An integer number to identify this test in a sequence of tests.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("TestNumber")]
        public long? TestNumber {
            get {
                return TestNumberField;
            } 
            set {
                TestNumberField = value;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private long? TestNumberField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// OtherMeasurementTestStep property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "OtherMeasurementTestStep")]
		[XmlElement("OtherMeasurementTestStep")]
        public List<OtherMeasurementTestStep> OtherMeasurementTestStep {
            get {
                return OtherMeasurementTestStepField;
            } 
            set {
                OtherMeasurementTestStepField = value;
                NotifyPropertyChanged("OtherMeasurementTestStep");
            }
        }

         /// <summary>
         /// bool to indicate if OtherMeasurementTestStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OtherMeasurementTestStepSpecified
         {
             get {
             if(OtherMeasurementTestStepField!=null)
                 return OtherMeasurementTestStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<OtherMeasurementTestStep> OtherMeasurementTestStepField; 

        /// <summary>
        /// FluidCharacterizationTable property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidCharacterizationTable")]
		[XmlElement("FluidCharacterizationTable")]
        public FluidCharacterizationTable FluidCharacterizationTable {
            get {
                return FluidCharacterizationTableField;
            } 
            set {
                FluidCharacterizationTableField = value;
                NotifyPropertyChanged("FluidCharacterizationTable");
            }
        }

        private FluidCharacterizationTable FluidCharacterizationTableField; 

        /// <summary>
        /// FluidCharacterizationTableFormatSet property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidCharacterizationTableFormatSet")]
		[XmlArrayItem("FluidCharacterizationTableFormat")]
        [XmlArray("FluidCharacterizationTableFormatSet")]
        public List<FluidCharacterizationTableFormat> FluidCharacterizationTableFormatSet {
            get {
                return FluidCharacterizationTableFormatSetField;
            } 
            set {
                FluidCharacterizationTableFormatSetField = value;
                NotifyPropertyChanged("FluidCharacterizationTableFormatSet");
            }
        }

         /// <summary>
         /// bool to indicate if FluidCharacterizationTableFormatSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidCharacterizationTableFormatSetSpecified
         {
             get {
             if(FluidCharacterizationTableFormatSetField!=null)
                 return FluidCharacterizationTableFormatSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidCharacterizationTableFormat> FluidCharacterizationTableFormatSetField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the OtherMeasurementTestStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="OtherMeasurementTestStep", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the OtherMeasurementTestStep xsd type.")]
    public partial class OtherMeasurementTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The step number is the index of a (P,T) step in the overall test.
        /// </summary>
		[Required]
        [Description("The step number is the index of a (P,T) step in the overall test.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StepNumber")]
        public long? StepNumber {
            get {
                return StepNumberField;
            } 
            set {
                StepNumberField = value;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private long? StepNumberField; 

        /// <summary>
        /// The pressure for this test step.
        /// </summary>
		[Description("The pressure for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("StepPressure")]
        public PressureMeasure StepPressure {
            get {
                return StepPressureField;
            } 
            set {
                StepPressureField = value;
                NotifyPropertyChanged("StepPressure");
            }
        }

        private PressureMeasure StepPressureField; 

        /// <summary>
        /// The temperature for this test step.
        /// </summary>
		[Description("The temperature for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("StepTemperature")]
        public ThermodynamicTemperatureMeasure StepTemperature {
            get {
                return StepTemperatureField;
            } 
            set {
                StepTemperatureField = value;
                NotifyPropertyChanged("StepTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure StepTemperatureField; 

        /// <summary>
        /// The viscosity of the oil phase at this test step.
        /// </summary>
		[Description("The viscosity of the oil phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("OilViscosity")]
        public DynamicViscosityMeasure OilViscosity {
            get {
                return OilViscosityField;
            } 
            set {
                OilViscosityField = value;
                NotifyPropertyChanged("OilViscosity");
            }
        }

        private DynamicViscosityMeasure OilViscosityField; 

        /// <summary>
        /// The oil mass density for this test step.
        /// </summary>
		[Description("The oil mass density for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("OilMassDensity")]
        public MassPerVolumeMeasure OilMassDensity {
            get {
                return OilMassDensityField;
            } 
            set {
                OilMassDensityField = value;
                NotifyPropertyChanged("OilMassDensity");
            }
        }

        private MassPerVolumeMeasure OilMassDensityField; 

        /// <summary>
        /// The viscosity of the gas phase at this test step.
        /// </summary>
		[Description("The viscosity of the gas phase at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("GasViscosity")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return GasViscosityField;
            } 
            set {
                GasViscosityField = value;
                NotifyPropertyChanged("GasViscosity");
            }
        }

        private DynamicViscosityMeasure GasViscosityField; 

        /// <summary>
        /// The gas gravity at this test step.
        /// </summary>
		[Description("The gas gravity at this test step.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("GasGravity")]
        public double? GasGravity {
            get {
                return GasGravityField;
            } 
            set {
                GasGravityField = value;
                 this.GasGravitySpecified = true;
                NotifyPropertyChanged("GasGravity");
            }
        }

        private double? GasGravityField; 

        /// <summary>
        /// GasGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasGravitySpecified {
            get {
                return GasGravitySpecifiedField;
            } 
            set {
                GasGravitySpecifiedField = value;
                NotifyPropertyChanged("GasGravitySpecified");
            }
        }

        private bool GasGravitySpecifiedField; 

        /// <summary>
        /// The gas density at this test step.
        /// </summary>
		[Description("The gas density at this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("GasMassDensity")]
        public MassPerVolumeMeasure GasMassDensity {
            get {
                return GasMassDensityField;
            } 
            set {
                GasMassDensityField = value;
                NotifyPropertyChanged("GasMassDensity");
            }
        }

        private MassPerVolumeMeasure GasMassDensityField; 

        /// <summary>
        /// The gas Z factor value at this test step.
        /// </summary>
		[Description("The gas Z factor value at this test step.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("GasZFactor")]
        public double? GasZFactor {
            get {
                return GasZFactorField;
            } 
            set {
                GasZFactorField = value;
                 this.GasZFactorSpecified = true;
                NotifyPropertyChanged("GasZFactor");
            }
        }

        private double? GasZFactorField; 

        /// <summary>
        /// GasZFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasZFactorSpecified {
            get {
                return GasZFactorSpecifiedField;
            } 
            set {
                GasZFactorSpecifiedField = value;
                NotifyPropertyChanged("GasZFactorSpecified");
            }
        }

        private bool GasZFactorSpecifiedField; 

        /// <summary>
        /// The fluid condition at this test step. Enum, see fluid analysis step condition.
        /// </summary>
		[Description("The fluid condition at this test step. Enum, see fluid analysis step condition.")]
        [EnergisticsDataTypeAttribute(DataType = "FluidAnalysisStepCondition")]
		[XmlElement("FluidCondition")]
        public FluidAnalysisStepCondition? FluidCondition {
            get {
                return FluidConditionField;
            } 
            set {
                FluidConditionField = value;
                 this.FluidConditionSpecified = true;
                NotifyPropertyChanged("FluidCondition");
            }
        }

        private FluidAnalysisStepCondition? FluidConditionField; 

        /// <summary>
        /// FluidConditionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidConditionSpecified {
            get {
                return FluidConditionSpecifiedField;
            } 
            set {
                FluidConditionSpecifiedField = value;
                NotifyPropertyChanged("FluidConditionSpecified");
            }
        }

        private bool FluidConditionSpecifiedField; 

        /// <summary>
        /// The water content for this test step.
        /// </summary>
		[StringLength(64)]
        [Description("The water content for this test step.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("WaterContent")]
        public string WaterContent {
            get {
                return WaterContentField;
            } 
            set {
                WaterContentField = value;
                NotifyPropertyChanged("WaterContent");
            }
        }

        private string WaterContentField; 

        /// <summary>
        /// The water viscosity for this test step.
        /// </summary>
		[Description("The water viscosity for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("WaterViscosity")]
        public DynamicViscosityMeasure WaterViscosity {
            get {
                return WaterViscosityField;
            } 
            set {
                WaterViscosityField = value;
                NotifyPropertyChanged("WaterViscosity");
            }
        }

        private DynamicViscosityMeasure WaterViscosityField; 

        /// <summary>
        /// The salinity for this test step.
        /// </summary>
		[Description("The salinity for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("Salinity")]
        public MassPerMassMeasure Salinity {
            get {
                return SalinityField;
            } 
            set {
                SalinityField = value;
                NotifyPropertyChanged("Salinity");
            }
        }

        private MassPerMassMeasure SalinityField; 

        /// <summary>
        /// The rsw for this test step.
        /// </summary>
		[Description("The rsw for this test step.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Rsw")]
        public double? Rsw {
            get {
                return RswField;
            } 
            set {
                RswField = value;
                 this.RswSpecified = true;
                NotifyPropertyChanged("Rsw");
            }
        }

        private double? RswField; 

        /// <summary>
        /// RswSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RswSpecified {
            get {
                return RswSpecifiedField;
            } 
            set {
                RswSpecifiedField = value;
                NotifyPropertyChanged("RswSpecified");
            }
        }

        private bool RswSpecifiedField; 

        /// <summary>
        /// The shear for this test step.
        /// </summary>
		[Description("The shear for this test step.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Shear")]
        public double? Shear {
            get {
                return ShearField;
            } 
            set {
                ShearField = value;
                 this.ShearSpecified = true;
                NotifyPropertyChanged("Shear");
            }
        }

        private double? ShearField; 

        /// <summary>
        /// ShearSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ShearSpecified {
            get {
                return ShearSpecifiedField;
            } 
            set {
                ShearSpecifiedField = value;
                NotifyPropertyChanged("ShearSpecified");
            }
        }

        private bool ShearSpecifiedField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidCharacterizationTable xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidCharacterizationTable", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidCharacterizationTable xsd type.")]
    public partial class FluidCharacterizationTable : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// TableConstant property
        /// </summary>
		[Description("A constant associated with this fluid characterization table.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidCharacterizationTableConstant")]
		[XmlElement("TableConstant")]
        public List<FluidCharacterizationTableConstant> TableConstant {
            get {
                return TableConstantField;
            } 
            set {
                TableConstantField = value;
                NotifyPropertyChanged("TableConstant");
            }
        }

         /// <summary>
         /// bool to indicate if TableConstant has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TableConstantSpecified
         {
             get {
             if(TableConstantField!=null)
                 return TableConstantField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidCharacterizationTableConstant> TableConstantField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// TableRow property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidCharacterizationTableRow")]
		[XmlElement("TableRow")]
        public List<FluidCharacterizationTableRow> TableRow {
            get {
                return TableRowField;
            } 
            set {
                TableRowField = value;
                NotifyPropertyChanged("TableRow");
            }
        }

         /// <summary>
         /// bool to indicate if TableRow has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TableRowSpecified
         {
             get {
             if(TableRowField!=null)
                 return TableRowField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidCharacterizationTableRow> TableRowField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

		/// <summary>
        /// The uid reference of the table format for this table.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The uid reference of the table format for this table.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("tableFormat")]
		
        public string TableFormat {
            get {
                return tableFormatField;
            } 
            set {
                tableFormatField = value;
                NotifyPropertyChanged("TableFormat");
            }
        }

        private string tableFormatField; 

		/// <summary>
        /// The name of this table.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of this table.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("name")]
		
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidCharacterizationTableConstant xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidCharacterizationTableConstant", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidCharacterizationTableConstant xsd type.")]
    public partial class FluidCharacterizationTableConstant : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Property property
        /// </summary>
		[Required]
        [Description("The property that this table constant contains. Enum. See output fluid property ext.")]
        [EnergisticsDataTypeAttribute(DataType = "OutputFluidPropertyExt")]
		[XmlElement("Property")]
        public ExtensibleEnum<OutputFluidProperty>? Property {
            get {
                return PropertyField;
            } 
            set {
                PropertyField = value;
                NotifyPropertyChanged("Property");
            }
        }

        private ExtensibleEnum<OutputFluidProperty>? PropertyField; 

        /// <summary>
        /// Phase property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "ThermodynamicPhase")]
		[XmlElement("Phase")]
        public ThermodynamicPhase? Phase {
            get {
                return PhaseField;
            } 
            set {
                PhaseField = value;
                 this.PhaseSpecified = true;
                NotifyPropertyChanged("Phase");
            }
        }

        private ThermodynamicPhase? PhaseField; 

        /// <summary>
        /// PhaseSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PhaseSpecified {
            get {
                return PhaseSpecifiedField;
            } 
            set {
                PhaseSpecifiedField = value;
                NotifyPropertyChanged("PhaseSpecified");
            }
        }

        private bool PhaseSpecifiedField; 

        /// <summary>
        /// KeywordAlias property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ObjectAlias")]
		[XmlElement("KeywordAlias")]
        public List<ObjectAlias> KeywordAlias {
            get {
                return KeywordAliasField;
            } 
            set {
                KeywordAliasField = value;
                NotifyPropertyChanged("KeywordAlias");
            }
        }

         /// <summary>
         /// bool to indicate if KeywordAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool KeywordAliasSpecified
         {
             get {
             if(KeywordAliasField!=null)
                 return KeywordAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<ObjectAlias> KeywordAliasField; 

		/// <summary>
        /// Reference to the fluid component to which this value relates.
        /// </summary>
		[StringLength(64)]
        [Description("Reference to the fluid component to which this value relates.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("fluidComponentReference")]
		
        public string FluidComponentReference {
            get {
                return fluidComponentReferenceField;
            } 
            set {
                fluidComponentReferenceField = value;
                NotifyPropertyChanged("FluidComponentReference");
            }
        }

        private string fluidComponentReferenceField; 

		/// <summary>
        /// User-defined name for this attribute.
        /// </summary>
		[StringLength(64)]
        [Description("User-defined name for this attribute.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("name")]
		
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

		/// <summary>
        /// The value for this table constant.
        /// </summary>
		[Required]
        [Description("The value for this table constant.")]
        [EnergisticsDataTypeAttribute(DataType = "decimal")]
        [XmlAttribute("value")]
		
        public decimal Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private decimal valueField; 

		/// <summary>
        /// The UOM for this constant for this fluid characterization table.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The UOM for this constant for this fluid characterization table.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidCharacterizationTableRow xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidCharacterizationTableRow", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidCharacterizationTableRow xsd type.")]
    public partial class FluidCharacterizationTableRow : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the FluidCharacterizationTableRow class.
        /// </summary>
        public FluidCharacterizationTableRow() {}

        /// <summary>
        /// Initializes a new instance of the FluidCharacterizationTableRow class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public FluidCharacterizationTableRow(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The string containing the contents of a row in the table.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The string containing the contents of a row in the table.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("row")]
		
        public string Row {
            get {
                return rowField;
            } 
            set {
                rowField = value;
                NotifyPropertyChanged("Row");
            }
        }

        private string rowField; 

		/// <summary>
        /// This type characteristic describes the row of data as either saturated or under-saturated at the conditions defined for the row.
        /// </summary>
		[Description("This type characteristic describes the row of data as either saturated or under-saturated at the conditions defined for the row.")]
        [EnergisticsDataTypeAttribute(DataType = "saturationKind")]
        [XmlAttribute("kind")]
		
        public SaturationKind Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private SaturationKind kindField; 

        /// <summary>
        /// kindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return kindSpecifiedField;
            } 
            set {
                kindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool kindSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidCharacterizationTableFormat xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidCharacterizationTableFormat", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidCharacterizationTableFormat xsd type.")]
    public partial class FluidCharacterizationTableFormat : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// NullValue property
        /// </summary>
		[StringLength(64)]
        [Description("The null value for this fluid characterization table format.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NullValue")]
        public string NullValue {
            get {
                return NullValueField;
            } 
            set {
                NullValueField = value;
                NotifyPropertyChanged("NullValue");
            }
        }

        private string NullValueField; 

        /// <summary>
        /// Delimiter property
        /// </summary>
		[Description("The delimiter for this fluid characterization table format.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TableDelimiter")]
		[XmlElement("Delimiter")]
        public TableDelimiter Delimiter {
            get {
                return DelimiterField;
            } 
            set {
                DelimiterField = value;
                NotifyPropertyChanged("Delimiter");
            }
        }

        private TableDelimiter DelimiterField; 

        /// <summary>
        /// TableColumn property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidCharacterizationTableColumn")]
		[XmlElement("TableColumn")]
        public List<FluidCharacterizationTableColumn> TableColumn {
            get {
                return TableColumnField;
            } 
            set {
                TableColumnField = value;
                NotifyPropertyChanged("TableColumn");
            }
        }

         /// <summary>
         /// bool to indicate if TableColumn has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TableColumnSpecified
         {
             get {
             if(TableColumnField!=null)
                 return TableColumnField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidCharacterizationTableColumn> TableColumnField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TableDelimiter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TableDelimiter", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the TableDelimiter xsd type.")]
    public partial class TableDelimiter : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// The ascii character which represents a column delimiter in each row of a table using this table format.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The ascii character which represents a column delimiter in each row of a table using this table format.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("asciiCharacters")]
		
        public string AsciiCharacters {
            get {
                return asciiCharactersField;
            } 
            set {
                asciiCharactersField = value;
                NotifyPropertyChanged("AsciiCharacters");
            }
        }

        private string asciiCharactersField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidCharacterizationTableColumn xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidCharacterizationTableColumn", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidCharacterizationTableColumn xsd type.")]
    public partial class FluidCharacterizationTableColumn : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Property property
        /// </summary>
		[Required]
        [Description("The property that this column contains. Enum. See output fluid property ext.")]
        [EnergisticsDataTypeAttribute(DataType = "OutputFluidPropertyExt")]
		[XmlElement("Property")]
        public ExtensibleEnum<OutputFluidProperty>? Property {
            get {
                return PropertyField;
            } 
            set {
                PropertyField = value;
                NotifyPropertyChanged("Property");
            }
        }

        private ExtensibleEnum<OutputFluidProperty>? PropertyField; 

        /// <summary>
        /// Phase property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "ThermodynamicPhase")]
		[XmlElement("Phase")]
        public ThermodynamicPhase? Phase {
            get {
                return PhaseField;
            } 
            set {
                PhaseField = value;
                 this.PhaseSpecified = true;
                NotifyPropertyChanged("Phase");
            }
        }

        private ThermodynamicPhase? PhaseField; 

        /// <summary>
        /// PhaseSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PhaseSpecified {
            get {
                return PhaseSpecifiedField;
            } 
            set {
                PhaseSpecifiedField = value;
                NotifyPropertyChanged("PhaseSpecified");
            }
        }

        private bool PhaseSpecifiedField; 

        /// <summary>
        /// KeywordAlias property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ObjectAlias")]
		[XmlElement("KeywordAlias")]
        public List<ObjectAlias> KeywordAlias {
            get {
                return KeywordAliasField;
            } 
            set {
                KeywordAliasField = value;
                NotifyPropertyChanged("KeywordAlias");
            }
        }

         /// <summary>
         /// bool to indicate if KeywordAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool KeywordAliasSpecified
         {
             get {
             if(KeywordAliasField!=null)
                 return KeywordAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<ObjectAlias> KeywordAliasField; 

		/// <summary>
        /// The reference to a fluid component for this column in this fluid characterization table.
        /// </summary>
		[StringLength(64)]
        [Description("The  reference to a fluid component for this column in this fluid characterization table.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("fluidComponentReference")]
		
        public string FluidComponentReference {
            get {
                return fluidComponentReferenceField;
            } 
            set {
                fluidComponentReferenceField = value;
                NotifyPropertyChanged("FluidComponentReference");
            }
        }

        private string fluidComponentReferenceField; 

		/// <summary>
        /// The name for this column in this fluid characterization table.
        /// </summary>
		[StringLength(64)]
        [Description("The name for this column in this fluid characterization table.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("name")]
		
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

		/// <summary>
        /// Index number for this column for consumption by an external system.
        /// </summary>
		[Description("Index number for this column for consumption by an external system.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
        [XmlAttribute("sequence")]
		
        public long Sequence {
            get {
                return sequenceField;
            } 
            set {
                sequenceField = value;
                 this.SequenceSpecified = true;
                NotifyPropertyChanged("Sequence");
            }
        }

        private long sequenceField; 

        /// <summary>
        /// sequenceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SequenceSpecified {
            get {
                return sequenceSpecifiedField;
            } 
            set {
                sequenceSpecifiedField = value;
                NotifyPropertyChanged("SequenceSpecified");
            }
        }

        private bool sequenceSpecifiedField; 

		/// <summary>
        /// The UOM for this column in this fluid characterization table.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The UOM for this column in this fluid characterization table.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VaporLiquidEquilibriumTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VaporLiquidEquilibriumTest", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the VaporLiquidEquilibriumTest xsd type.")]
    public partial class VaporLiquidEquilibriumTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// An integer number to identify this test in a sequence of tests.
        /// </summary>
		[Required]
        [Description("An integer number to identify this test in a sequence of tests.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("TestNumber")]
        public long? TestNumber {
            get {
                return TestNumberField;
            } 
            set {
                TestNumberField = value;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private long? TestNumberField; 

        /// <summary>
        /// The temperature of this test.
        /// </summary>
		[Required]
        [Description("The temperature of this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TestTemperature")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return TestTemperatureField;
            } 
            set {
                TestTemperatureField = value;
                NotifyPropertyChanged("TestTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure TestTemperatureField; 

        /// <summary>
        /// The pressure of this test.
        /// </summary>
		[Description("The pressure of this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("TestPressure")]
        public PressureMeasure TestPressure {
            get {
                return TestPressureField;
            } 
            set {
                TestPressureField = value;
                NotifyPropertyChanged("TestPressure");
            }
        }

        private PressureMeasure TestPressureField; 

        /// <summary>
        /// The gas solvent added for this VLE test.
        /// </summary>
		[Description("The gas solvent added for this VLE test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("GasSolventAdded")]
        public VolumePerVolumeMeasure GasSolventAdded {
            get {
                return GasSolventAddedField;
            } 
            set {
                GasSolventAddedField = value;
                NotifyPropertyChanged("GasSolventAdded");
            }
        }

        private VolumePerVolumeMeasure GasSolventAddedField; 

        /// <summary>
        /// The mixture volume for this VLE test.
        /// </summary>
		[Description("The mixture volume for this VLE test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("MixtureVolume")]
        public VolumeMeasure MixtureVolume {
            get {
                return MixtureVolumeField;
            } 
            set {
                MixtureVolumeField = value;
                NotifyPropertyChanged("MixtureVolume");
            }
        }

        private VolumeMeasure MixtureVolumeField; 

        /// <summary>
        /// The mixture gas solvent mole fraction for this VLE test.
        /// </summary>
		[Description("The mixture gas solvent mole fraction for this VLE test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AmountOfSubstancePerAmountOfSubstanceMeasure")]
		[XmlElement("MixtureGasSolventMoleFraction")]
        public AmountOfSubstancePerAmountOfSubstanceMeasure MixtureGasSolventMoleFraction {
            get {
                return MixtureGasSolventMoleFractionField;
            } 
            set {
                MixtureGasSolventMoleFractionField = value;
                NotifyPropertyChanged("MixtureGasSolventMoleFraction");
            }
        }

        private AmountOfSubstancePerAmountOfSubstanceMeasure MixtureGasSolventMoleFractionField; 

        /// <summary>
        /// The mixture gas-oil ratio for this VLE test.
        /// </summary>
		[Description("The mixture gas-oil ratio for this VLE test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("MixtureGOR")]
        public VolumePerVolumeMeasure MixtureGOR {
            get {
                return MixtureGORField;
            } 
            set {
                MixtureGORField = value;
                NotifyPropertyChanged("MixtureGOR");
            }
        }

        private VolumePerVolumeMeasure MixtureGORField; 

        /// <summary>
        /// The mixture saturation pressure test temperature for this VLE test.
        /// </summary>
		[Description("The mixture saturation pressure test temperature for this VLE test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("MixturePsatTestTemperature")]
        public ThermodynamicTemperatureMeasure MixturePsatTestTemperature {
            get {
                return MixturePsatTestTemperatureField;
            } 
            set {
                MixturePsatTestTemperatureField = value;
                NotifyPropertyChanged("MixturePsatTestTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure MixturePsatTestTemperatureField; 

        /// <summary>
        /// The mixture relative volume relative to volume a saturation pressure for this VLE test.
        /// </summary>
		[Description("The mixture relative volume relative to volume a saturation pressure for this VLE test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("MixtureRelativeVolumeRelativeToPsat")]
        public VolumePerVolumeMeasure MixtureRelativeVolumeRelativeToPsat {
            get {
                return MixtureRelativeVolumeRelativeToPsatField;
            } 
            set {
                MixtureRelativeVolumeRelativeToPsatField = value;
                NotifyPropertyChanged("MixtureRelativeVolumeRelativeToPsat");
            }
        }

        private VolumePerVolumeMeasure MixtureRelativeVolumeRelativeToPsatField; 

        /// <summary>
        /// Reference to the atmospheric flash test for this VLE test.
        /// </summary>
		[StringLength(64)]
        [Description("Reference to the atmospheric flash test for this VLE test.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("AtmosphericFlashTestReference")]
        public string AtmosphericFlashTestReference {
            get {
                return AtmosphericFlashTestReferenceField;
            } 
            set {
                AtmosphericFlashTestReferenceField = value;
                NotifyPropertyChanged("AtmosphericFlashTestReference");
            }
        }

        private string AtmosphericFlashTestReferenceField; 

        /// <summary>
        /// Reference to the injected gas added for this VLE test.
        /// </summary>
		[Description("Reference to the injected gas added for this VLE test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "InjectedGas")]
		[XmlElement("InjectedGasAdded")]
        public InjectedGas InjectedGasAdded {
            get {
                return InjectedGasAddedField;
            } 
            set {
                InjectedGasAddedField = value;
                NotifyPropertyChanged("InjectedGasAdded");
            }
        }

        private InjectedGas InjectedGasAddedField; 

        /// <summary>
        /// Reference to the cumulative gas added for this VLE test.
        /// </summary>
		[Description("Reference to the cumulative gas added for this VLE test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "RefInjectedGasAdded")]
		[XmlElement("CumulativeGasAdded")]
        public RefInjectedGasAdded CumulativeGasAdded {
            get {
                return CumulativeGasAddedField;
            } 
            set {
                CumulativeGasAddedField = value;
                NotifyPropertyChanged("CumulativeGasAdded");
            }
        }

        private RefInjectedGasAdded CumulativeGasAddedField; 

        /// <summary>
        /// The vapor phase volume for this VLE test.
        /// </summary>
		[Description("The vapor phase volume for this VLE test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("VaporPhaseVolume")]
        public VolumePerVolumeMeasure VaporPhaseVolume {
            get {
                return VaporPhaseVolumeField;
            } 
            set {
                VaporPhaseVolumeField = value;
                NotifyPropertyChanged("VaporPhaseVolume");
            }
        }

        private VolumePerVolumeMeasure VaporPhaseVolumeField; 

        /// <summary>
        /// The vapor phase viscosity for this VLE test.
        /// </summary>
		[Required]
        [Description("The vapor phase viscosity for this VLE test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PhaseViscosity")]
		[XmlElement("VaporPhaseViscosity")]
        public PhaseViscosity VaporPhaseViscosity {
            get {
                return VaporPhaseViscosityField;
            } 
            set {
                VaporPhaseViscosityField = value;
                NotifyPropertyChanged("VaporPhaseViscosity");
            }
        }

        private PhaseViscosity VaporPhaseViscosityField; 

        /// <summary>
        /// The vapor phase density for this VLE test.
        /// </summary>
		[Required]
        [Description("The vapor phase density for this VLE test.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PhaseDensity")]
		[XmlElement("VaporPhaseDensity")]
        public List<PhaseDensity> VaporPhaseDensity {
            get {
                return VaporPhaseDensityField;
            } 
            set {
                VaporPhaseDensityField = value;
                NotifyPropertyChanged("VaporPhaseDensity");
            }
        }

         /// <summary>
         /// bool to indicate if VaporPhaseDensity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VaporPhaseDensitySpecified
         {
             get {
             if(VaporPhaseDensityField!=null)
                 return VaporPhaseDensityField.Count>0?true:false;
             else return false;
             }
         }
        private List<PhaseDensity> VaporPhaseDensityField; 

        /// <summary>
        /// The liquid phase volume for this VLE test.
        /// </summary>
		[Description("The liquid phase volume for this VLE test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("LiquidPhaseVolume")]
        public VolumePerVolumeMeasure LiquidPhaseVolume {
            get {
                return LiquidPhaseVolumeField;
            } 
            set {
                LiquidPhaseVolumeField = value;
                NotifyPropertyChanged("LiquidPhaseVolume");
            }
        }

        private VolumePerVolumeMeasure LiquidPhaseVolumeField; 

        /// <summary>
        /// The liquid phase density for this VLE test.
        /// </summary>
		[Required]
        [Description("The liquid phase density for this VLE test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PhaseDensity")]
		[XmlElement("LiquidPhaseDensity")]
        public PhaseDensity LiquidPhaseDensity {
            get {
                return LiquidPhaseDensityField;
            } 
            set {
                LiquidPhaseDensityField = value;
                NotifyPropertyChanged("LiquidPhaseDensity");
            }
        }

        private PhaseDensity LiquidPhaseDensityField; 

        /// <summary>
        /// The vapor composition for this VLE test.
        /// </summary>
		[Description("The vapor composition for this VLE test.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidComponent")]
		[XmlElement("VaporComposition")]
        public List<FluidComponent> VaporComposition {
            get {
                return VaporCompositionField;
            } 
            set {
                VaporCompositionField = value;
                NotifyPropertyChanged("VaporComposition");
            }
        }

         /// <summary>
         /// bool to indicate if VaporComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VaporCompositionSpecified
         {
             get {
             if(VaporCompositionField!=null)
                 return VaporCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidComponent> VaporCompositionField; 

        /// <summary>
        /// A reference to a vapor transport property test associated with this VLE test.
        /// </summary>
		[StringLength(64)]
        [Description("A reference to a vapor transport property test associated with this VLE test.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("VaporTransportTestReference")]
        public string VaporTransportTestReference {
            get {
                return VaporTransportTestReferenceField;
            } 
            set {
                VaporTransportTestReferenceField = value;
                NotifyPropertyChanged("VaporTransportTestReference");
            }
        }

        private string VaporTransportTestReferenceField; 

        /// <summary>
        /// A reference to a liquid transport property test associated with this VLE test.
        /// </summary>
		[StringLength(64)]
        [Description("A reference to a liquid transport property test associated with this VLE test.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("LiquidTransportTestReference")]
        public string LiquidTransportTestReference {
            get {
                return LiquidTransportTestReferenceField;
            } 
            set {
                LiquidTransportTestReferenceField = value;
                NotifyPropertyChanged("LiquidTransportTestReference");
            }
        }

        private string LiquidTransportTestReferenceField; 

        /// <summary>
        /// The liquid composition for this VLE test.
        /// </summary>
		[Description("The liquid composition for this VLE test.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "LiquidComposition")]
		[XmlElement("LiquidComposition")]
        public List<LiquidComposition> LiquidComposition {
            get {
                return LiquidCompositionField;
            } 
            set {
                LiquidCompositionField = value;
                NotifyPropertyChanged("LiquidComposition");
            }
        }

         /// <summary>
         /// bool to indicate if LiquidComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LiquidCompositionSpecified
         {
             get {
             if(LiquidCompositionField!=null)
                 return LiquidCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<LiquidComposition> LiquidCompositionField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the InjectedGas xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="InjectedGas", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the InjectedGas xsd type.")]
    public partial class InjectedGas : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The composition of injected gas (vapor) for this test.
        /// </summary>
		[Required]
        [Description("The composition of injected gas (vapor) for this test.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "VaporComposition")]
		[XmlElement("VaporComposition")]
        public List<VaporComposition> VaporComposition {
            get {
                return VaporCompositionField;
            } 
            set {
                VaporCompositionField = value;
                NotifyPropertyChanged("VaporComposition");
            }
        }

         /// <summary>
         /// bool to indicate if VaporComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VaporCompositionSpecified
         {
             get {
             if(VaporCompositionField!=null)
                 return VaporCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<VaporComposition> VaporCompositionField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PhaseViscosity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PhaseViscosity", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the PhaseViscosity xsd type.")]
    public partial class PhaseViscosity : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The pressure corresponding to this phase viscosity.
        /// </summary>
		[Description("The pressure corresponding to this phase viscosity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Pressure")]
        public PressureMeasure Pressure {
            get {
                return PressureField;
            } 
            set {
                PressureField = value;
                NotifyPropertyChanged("Pressure");
            }
        }

        private PressureMeasure PressureField; 

        /// <summary>
        /// The phase viscosity.
        /// </summary>
		[Description("The phase viscosity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("Viscosity")]
        public DynamicViscosityMeasure Viscosity {
            get {
                return ViscosityField;
            } 
            set {
                ViscosityField = value;
                NotifyPropertyChanged("Viscosity");
            }
        }

        private DynamicViscosityMeasure ViscosityField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PhaseDensity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PhaseDensity", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the PhaseDensity xsd type.")]
    public partial class PhaseDensity : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The pressure corresponding to this phase density.
        /// </summary>
		[Description("The pressure corresponding to this phase density.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Pressure")]
        public PressureMeasure Pressure {
            get {
                return PressureField;
            } 
            set {
                PressureField = value;
                NotifyPropertyChanged("Pressure");
            }
        }

        private PressureMeasure PressureField; 

        /// <summary>
        /// The phase density.
        /// </summary>
		[Description("The phase density.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Density")]
        public MassPerVolumeMeasure Density {
            get {
                return DensityField;
            } 
            set {
                DensityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private MassPerVolumeMeasure DensityField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SwellingTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SwellingTest", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the SwellingTest xsd type.")]
    public partial class SwellingTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TestNumber property
        /// </summary>
		[Required]
        [Description("An integer number to identify this test in a sequence of tests.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("TestNumber")]
        public long? TestNumber {
            get {
                return TestNumberField;
            } 
            set {
                TestNumberField = value;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private long? TestNumberField; 

        /// <summary>
        /// TestTemperature property
        /// </summary>
		[Required]
        [Description("The temperature of this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TestTemperature")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return TestTemperatureField;
            } 
            set {
                TestTemperatureField = value;
                NotifyPropertyChanged("TestTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure TestTemperatureField; 

        /// <summary>
        /// InjectedGas property
        /// </summary>
		[Description("Reference to the gas injected during the swelling test.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "InjectedGas")]
		[XmlElement("InjectedGas")]
        public List<InjectedGas> InjectedGas {
            get {
                return InjectedGasField;
            } 
            set {
                InjectedGasField = value;
                NotifyPropertyChanged("InjectedGas");
            }
        }

         /// <summary>
         /// bool to indicate if InjectedGas has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InjectedGasSpecified
         {
             get {
             if(InjectedGasField!=null)
                 return InjectedGasField.Count>0?true:false;
             else return false;
             }
         }
        private List<InjectedGas> InjectedGasField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// SwellingTestStep property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "SwellingTestStep")]
		[XmlElement("SwellingTestStep")]
        public List<SwellingTestStep> SwellingTestStep {
            get {
                return SwellingTestStepField;
            } 
            set {
                SwellingTestStepField = value;
                NotifyPropertyChanged("SwellingTestStep");
            }
        }

         /// <summary>
         /// bool to indicate if SwellingTestStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SwellingTestStepSpecified
         {
             get {
             if(SwellingTestStepField!=null)
                 return SwellingTestStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<SwellingTestStep> SwellingTestStepField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SwellingTestStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SwellingTestStep", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the SwellingTestStep xsd type.")]
    public partial class SwellingTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The step number is the index of a (P,T) step in the overall test.
        /// </summary>
		[Required]
        [Description("The step number is the index of a (P,T) step in the overall test.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StepNumber")]
        public long? StepNumber {
            get {
                return StepNumberField;
            } 
            set {
                StepNumberField = value;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private long? StepNumberField; 

        /// <summary>
        /// The incremental gas added for this swelling test step.
        /// </summary>
		[Description("The incremental gas added for this swelling test step.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "RefInjectedGasAdded")]
		[XmlElement("IncrementalGasAdded")]
        public List<RefInjectedGasAdded> IncrementalGasAdded {
            get {
                return IncrementalGasAddedField;
            } 
            set {
                IncrementalGasAddedField = value;
                NotifyPropertyChanged("IncrementalGasAdded");
            }
        }

         /// <summary>
         /// bool to indicate if IncrementalGasAdded has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IncrementalGasAddedSpecified
         {
             get {
             if(IncrementalGasAddedField!=null)
                 return IncrementalGasAddedField.Count>0?true:false;
             else return false;
             }
         }
        private List<RefInjectedGasAdded> IncrementalGasAddedField; 

        /// <summary>
        /// The cumulative gas added for this swelling test step.
        /// </summary>
		[Description("The cumulative gas added for this swelling test step.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "RefInjectedGasAdded")]
		[XmlElement("CumulativeGasAdded")]
        public List<RefInjectedGasAdded> CumulativeGasAdded {
            get {
                return CumulativeGasAddedField;
            } 
            set {
                CumulativeGasAddedField = value;
                NotifyPropertyChanged("CumulativeGasAdded");
            }
        }

         /// <summary>
         /// bool to indicate if CumulativeGasAdded has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CumulativeGasAddedSpecified
         {
             get {
             if(CumulativeGasAddedField!=null)
                 return CumulativeGasAddedField.Count>0?true:false;
             else return false;
             }
         }
        private List<RefInjectedGasAdded> CumulativeGasAddedField; 

        /// <summary>
        /// The gas-oil ratio for this swelling test step.
        /// </summary>
		[Description("The gas-oil ratio for this swelling test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Gor")]
        public VolumePerVolumeMeasure Gor {
            get {
                return GorField;
            } 
            set {
                GorField = value;
                NotifyPropertyChanged("Gor");
            }
        }

        private VolumePerVolumeMeasure GorField; 

        /// <summary>
        /// The saturation (or bubble point) pressure measured in this test.
        /// </summary>
		[Description("The saturation (or bubble point) pressure measured in this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SaturationPressure")]
		[XmlElement("SaturationPressure")]
        public SaturationPressure SaturationPressure {
            get {
                return SaturationPressureField;
            } 
            set {
                SaturationPressureField = value;
                NotifyPropertyChanged("SaturationPressure");
            }
        }

        private SaturationPressure SaturationPressureField; 

        /// <summary>
        /// The swollen volume for this swelling test step, relative to a reference volume.
        /// </summary>
		[Description("The swollen volume for this swelling test step, relative to a reference volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "RelativeVolumeRatio")]
		[XmlElement("SwollenVolume")]
        public RelativeVolumeRatio SwollenVolume {
            get {
                return SwollenVolumeField;
            } 
            set {
                SwollenVolumeField = value;
                NotifyPropertyChanged("SwollenVolume");
            }
        }

        private RelativeVolumeRatio SwollenVolumeField; 

        /// <summary>
        /// The swelling factor for this swelling test step.
        /// </summary>
		[Description("The swelling factor for this swelling test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("SwellingFactor")]
        public VolumePerVolumeMeasure SwellingFactor {
            get {
                return SwellingFactorField;
            } 
            set {
                SwellingFactorField = value;
                NotifyPropertyChanged("SwellingFactor");
            }
        }

        private VolumePerVolumeMeasure SwellingFactorField; 

        /// <summary>
        /// The density at saturation point for this swelling test step.
        /// </summary>
		[Description("The density at saturation point for this swelling test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensityAtSaturationPoint")]
        public MassPerVolumeMeasure DensityAtSaturationPoint {
            get {
                return DensityAtSaturationPointField;
            } 
            set {
                DensityAtSaturationPointField = value;
                NotifyPropertyChanged("DensityAtSaturationPoint");
            }
        }

        private MassPerVolumeMeasure DensityAtSaturationPointField; 

        /// <summary>
        /// A reference to a constant composition expansion test associated with this swelling test.
        /// </summary>
		[StringLength(64)]
        [Description("A reference to a constant composition expansion test associated with this swelling test.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ConstantCompositionExpansionTest")]
        public string ConstantCompositionExpansionTest {
            get {
                return ConstantCompositionExpansionTestField;
            } 
            set {
                ConstantCompositionExpansionTestField = value;
                NotifyPropertyChanged("ConstantCompositionExpansionTest");
            }
        }

        private string ConstantCompositionExpansionTestField; 

        /// <summary>
        /// A reference to a transport property test associated with this swelling test.
        /// </summary>
		[StringLength(64)]
        [Description("A reference to a transport property test associated with this swelling test.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TransportPropertyTestReference")]
        public string TransportPropertyTestReference {
            get {
                return TransportPropertyTestReferenceField;
            } 
            set {
                TransportPropertyTestReferenceField = value;
                NotifyPropertyChanged("TransportPropertyTestReference");
            }
        }

        private string TransportPropertyTestReferenceField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SlimTubeTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SlimTubeTest", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the SlimTubeTest xsd type.")]
    public partial class SlimTubeTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TestNumber property
        /// </summary>
		[Required]
        [Description("An integer number to identify this test in a sequence of tests.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("TestNumber")]
        public long? TestNumber {
            get {
                return TestNumberField;
            } 
            set {
                TestNumberField = value;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private long? TestNumberField; 

        /// <summary>
        /// TestTemperature property
        /// </summary>
		[Required]
        [Description("The temperature of this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TestTemperature")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return TestTemperatureField;
            } 
            set {
                TestTemperatureField = value;
                NotifyPropertyChanged("TestTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure TestTemperatureField; 

        /// <summary>
        /// PumpTemperature property
        /// </summary>
		[Description("The pump temperature during the slim-tube test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("PumpTemperature")]
        public ThermodynamicTemperatureMeasure PumpTemperature {
            get {
                return PumpTemperatureField;
            } 
            set {
                PumpTemperatureField = value;
                NotifyPropertyChanged("PumpTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure PumpTemperatureField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// SlimTubeTestPressureStep property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "SlimTubeTestStep")]
		[XmlElement("SlimTubeTestPressureStep")]
        public List<SlimTubeTestStep> SlimTubeTestPressureStep {
            get {
                return SlimTubeTestPressureStepField;
            } 
            set {
                SlimTubeTestPressureStepField = value;
                NotifyPropertyChanged("SlimTubeTestPressureStep");
            }
        }

         /// <summary>
         /// bool to indicate if SlimTubeTestPressureStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SlimTubeTestPressureStepSpecified
         {
             get {
             if(SlimTubeTestPressureStepField!=null)
                 return SlimTubeTestPressureStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<SlimTubeTestStep> SlimTubeTestPressureStepField; 

        /// <summary>
        /// SlimTubeSpecification property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "SlimTubeSpecification")]
		[XmlElement("SlimTubeSpecification")]
        public List<SlimTubeSpecification> SlimTubeSpecification {
            get {
                return SlimTubeSpecificationField;
            } 
            set {
                SlimTubeSpecificationField = value;
                NotifyPropertyChanged("SlimTubeSpecification");
            }
        }

         /// <summary>
         /// bool to indicate if SlimTubeSpecification has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SlimTubeSpecificationSpecified
         {
             get {
             if(SlimTubeSpecificationField!=null)
                 return SlimTubeSpecificationField.Count>0?true:false;
             else return false;
             }
         }
        private List<SlimTubeSpecification> SlimTubeSpecificationField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SlimTubeTestStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SlimTubeTestStep", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the SlimTubeTestStep xsd type.")]
    public partial class SlimTubeTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// StepNumber property
        /// </summary>
		[Required]
        [Description("The step number is the index of a (P,T) step in the overall test.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StepNumber")]
        public long? StepNumber {
            get {
                return StepNumberField;
            } 
            set {
                StepNumberField = value;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private long? StepNumberField; 

        /// <summary>
        /// StepAveragePressure property
        /// </summary>
		[Description("The average pressure for this slim-tube test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("StepAveragePressure")]
        public PressureMeasure StepAveragePressure {
            get {
                return StepAveragePressureField;
            } 
            set {
                StepAveragePressureField = value;
                NotifyPropertyChanged("StepAveragePressure");
            }
        }

        private PressureMeasure StepAveragePressureField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// SlimTubeTestVolumeStep property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "SlimTubeTestVolumeStep")]
		[XmlElement("SlimTubeTestVolumeStep")]
        public List<SlimTubeTestVolumeStep> SlimTubeTestVolumeStep {
            get {
                return SlimTubeTestVolumeStepField;
            } 
            set {
                SlimTubeTestVolumeStepField = value;
                NotifyPropertyChanged("SlimTubeTestVolumeStep");
            }
        }

         /// <summary>
         /// bool to indicate if SlimTubeTestVolumeStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SlimTubeTestVolumeStepSpecified
         {
             get {
             if(SlimTubeTestVolumeStepField!=null)
                 return SlimTubeTestVolumeStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<SlimTubeTestVolumeStep> SlimTubeTestVolumeStepField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SlimTubeTestVolumeStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SlimTubeTestVolumeStep", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the SlimTubeTestVolumeStep xsd type.")]
    public partial class SlimTubeTestVolumeStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// StepNumber property
        /// </summary>
		[Required]
        [Description("The step number is the index of a (P,T) step in the overall test.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StepNumber")]
        public long? StepNumber {
            get {
                return StepNumberField;
            } 
            set {
                StepNumberField = value;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private long? StepNumberField; 

        /// <summary>
        /// DifferentialPressure property
        /// </summary>
		[Description("The differential pressure of the slim-tube test volume step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("DifferentialPressure")]
        public PressureMeasure DifferentialPressure {
            get {
                return DifferentialPressureField;
            } 
            set {
                DifferentialPressureField = value;
                NotifyPropertyChanged("DifferentialPressure");
            }
        }

        private PressureMeasure DifferentialPressureField; 

        /// <summary>
        /// RunTime property
        /// </summary>
		[StringLength(64)]
        [Description("The run time of the slim-tube test volume step.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("RunTime")]
        public string RunTime {
            get {
                return RunTimeField;
            } 
            set {
                RunTimeField = value;
                NotifyPropertyChanged("RunTime");
            }
        }

        private string RunTimeField; 

        /// <summary>
        /// InjectionVolumeAtPumpTemperature property
        /// </summary>
		[Description("The injection volume at pump temperature of the slim-tube test volume step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("InjectionVolumeAtPumpTemperature")]
        public VolumeMeasure InjectionVolumeAtPumpTemperature {
            get {
                return InjectionVolumeAtPumpTemperatureField;
            } 
            set {
                InjectionVolumeAtPumpTemperatureField = value;
                NotifyPropertyChanged("InjectionVolumeAtPumpTemperature");
            }
        }

        private VolumeMeasure InjectionVolumeAtPumpTemperatureField; 

        /// <summary>
        /// InjectionVolumeAtTestTemperature property
        /// </summary>
		[Description("The injection volume at test temperature of the slim-tube test volume step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("InjectionVolumeAtTestTemperature")]
        public VolumeMeasure InjectionVolumeAtTestTemperature {
            get {
                return InjectionVolumeAtTestTemperatureField;
            } 
            set {
                InjectionVolumeAtTestTemperatureField = value;
                NotifyPropertyChanged("InjectionVolumeAtTestTemperature");
            }
        }

        private VolumeMeasure InjectionVolumeAtTestTemperatureField; 

        /// <summary>
        /// InjectedPoreVolumeFraction property
        /// </summary>
		[Description("The injected pore volume fraction of the slim-tube test volume step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("InjectedPoreVolumeFraction")]
        public VolumePerVolumeMeasure InjectedPoreVolumeFraction {
            get {
                return InjectedPoreVolumeFractionField;
            } 
            set {
                InjectedPoreVolumeFractionField = value;
                NotifyPropertyChanged("InjectedPoreVolumeFraction");
            }
        }

        private VolumePerVolumeMeasure InjectedPoreVolumeFractionField; 

        /// <summary>
        /// DarcyVelocity property
        /// </summary>
		[Description("The Darcy velocity of the slim-tube test volume step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("DarcyVelocity")]
        public LengthPerTimeMeasure DarcyVelocity {
            get {
                return DarcyVelocityField;
            } 
            set {
                DarcyVelocityField = value;
                NotifyPropertyChanged("DarcyVelocity");
            }
        }

        private LengthPerTimeMeasure DarcyVelocityField; 

        /// <summary>
        /// CumulativeOilProductionPercOOIP property
        /// </summary>
		[Description("The cumulative oil production as a fraction of the original oil in place of the slim-tube test volume step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("CumulativeOilProductionPercOOIP")]
        public VolumePerVolumeMeasure CumulativeOilProductionPercOOIP {
            get {
                return CumulativeOilProductionPercOOIPField;
            } 
            set {
                CumulativeOilProductionPercOOIPField = value;
                NotifyPropertyChanged("CumulativeOilProductionPercOOIP");
            }
        }

        private VolumePerVolumeMeasure CumulativeOilProductionPercOOIPField; 

        /// <summary>
        /// CumulativeOilProductionSTO property
        /// </summary>
		[Description("The cumulative oil production of stock stank oil for the slim-tube test volume step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("CumulativeOilProductionSTO")]
        public VolumeMeasure CumulativeOilProductionSTO {
            get {
                return CumulativeOilProductionSTOField;
            } 
            set {
                CumulativeOilProductionSTOField = value;
                NotifyPropertyChanged("CumulativeOilProductionSTO");
            }
        }

        private VolumeMeasure CumulativeOilProductionSTOField; 

        /// <summary>
        /// IncrementalProducedGOR property
        /// </summary>
		[Description("The incremental produced GOR of the slim-tube test volume step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("IncrementalProducedGOR")]
        public VolumePerVolumeMeasure IncrementalProducedGOR {
            get {
                return IncrementalProducedGORField;
            } 
            set {
                IncrementalProducedGORField = value;
                NotifyPropertyChanged("IncrementalProducedGOR");
            }
        }

        private VolumePerVolumeMeasure IncrementalProducedGORField; 

        /// <summary>
        /// CumulativeProducedGOR property
        /// </summary>
		[Description("The cumulative oil production GOR for the slim-tube test volume step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("CumulativeProducedGOR")]
        public VolumePerVolumeMeasure CumulativeProducedGOR {
            get {
                return CumulativeProducedGORField;
            } 
            set {
                CumulativeProducedGORField = value;
                NotifyPropertyChanged("CumulativeProducedGOR");
            }
        }

        private VolumePerVolumeMeasure CumulativeProducedGORField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// ProducedGasProperties property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ProducedGasProperties")]
		[XmlElement("ProducedGasProperties")]
        public ProducedGasProperties ProducedGasProperties {
            get {
                return ProducedGasPropertiesField;
            } 
            set {
                ProducedGasPropertiesField = value;
                NotifyPropertyChanged("ProducedGasProperties");
            }
        }

        private ProducedGasProperties ProducedGasPropertiesField; 

        /// <summary>
        /// ProducedOilProperties property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ProducedOilProperties")]
		[XmlElement("ProducedOilProperties")]
        public ProducedOilProperties ProducedOilProperties {
            get {
                return ProducedOilPropertiesField;
            } 
            set {
                ProducedOilPropertiesField = value;
                NotifyPropertyChanged("ProducedOilProperties");
            }
        }

        private ProducedOilProperties ProducedOilPropertiesField; 

        /// <summary>
        /// MassBalance property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassBalance")]
		[XmlElement("MassBalance")]
        public MassBalance MassBalance {
            get {
                return MassBalanceField;
            } 
            set {
                MassBalanceField = value;
                NotifyPropertyChanged("MassBalance");
            }
        }

        private MassBalance MassBalanceField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthPerTimeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthPerTimeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the LengthPerTimeMeasure xsd type.")]
    public partial class LengthPerTimeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthPerTimeMeasure class.
        /// </summary>
        public LengthPerTimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthPerTimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthPerTimeMeasure(double value, LengthPerTimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeUom")]
        [XmlAttribute("uom")]
		
        public LengthPerTimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthPerTimeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProducedGasProperties xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProducedGasProperties", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProducedGasProperties xsd type.")]
    public partial class ProducedGasProperties : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The produced gas gravity of this produced gas.
        /// </summary>
		[Description("The produced gas gravity of this produced gas.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("ProducedGasGravity")]
        public DimensionlessMeasure ProducedGasGravity {
            get {
                return ProducedGasGravityField;
            } 
            set {
                ProducedGasGravityField = value;
                NotifyPropertyChanged("ProducedGasGravity");
            }
        }

        private DimensionlessMeasure ProducedGasGravityField; 

        /// <summary>
        /// The vapor composition of this produced gas.
        /// </summary>
		[Required]
        [Description("The vapor composition of this produced gas.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "VaporComposition")]
		[XmlElement("VaporComposition")]
        public List<VaporComposition> VaporComposition {
            get {
                return VaporCompositionField;
            } 
            set {
                VaporCompositionField = value;
                NotifyPropertyChanged("VaporComposition");
            }
        }

         /// <summary>
         /// bool to indicate if VaporComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VaporCompositionSpecified
         {
             get {
             if(VaporCompositionField!=null)
                 return VaporCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<VaporComposition> VaporCompositionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProducedOilProperties xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProducedOilProperties", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProducedOilProperties xsd type.")]
    public partial class ProducedOilProperties : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The stock tank oil density of this produced oil.
        /// </summary>
		[Description("The stock tank oil density of this produced oil.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("STODensity")]
        public MassPerVolumeMeasure STODensity {
            get {
                return STODensityField;
            } 
            set {
                STODensityField = value;
                NotifyPropertyChanged("STODensity");
            }
        }

        private MassPerVolumeMeasure STODensityField; 

        /// <summary>
        /// The stock tank oil API gravity of this produced oil.
        /// </summary>
		[Description("The stock tank oil API gravity of this produced oil.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "APIGravityMeasure")]
		[XmlElement("STOApiGravity")]
        public APIGravityMeasure STOApiGravity {
            get {
                return STOApiGravityField;
            } 
            set {
                STOApiGravityField = value;
                NotifyPropertyChanged("STOApiGravity");
            }
        }

        private APIGravityMeasure STOApiGravityField; 

        /// <summary>
        /// The stock tank oil molecular weight of this produced oil.
        /// </summary>
		[Description("The stock tank oil molecular weight of this produced oil.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("STOMW")]
        public MolecularWeightMeasure STOMW {
            get {
                return STOMWField;
            } 
            set {
                STOMWField = value;
                NotifyPropertyChanged("STOMW");
            }
        }

        private MolecularWeightMeasure STOMWField; 

        /// <summary>
        /// The stock tank oil water content of this produced oil.
        /// </summary>
		[Description("The stock tank oil water content of this produced oil.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("STOWaterContent")]
        public VolumePerVolumeMeasure STOWaterContent {
            get {
                return STOWaterContentField;
            } 
            set {
                STOWaterContentField = value;
                NotifyPropertyChanged("STOWaterContent");
            }
        }

        private VolumePerVolumeMeasure STOWaterContentField; 

        /// <summary>
        /// The asphaltene content of this produced oil.
        /// </summary>
		[Description("The asphaltene content of this produced oil.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("AsphalteneContent")]
        public MassPerMassMeasure AsphalteneContent {
            get {
                return AsphalteneContentField;
            } 
            set {
                AsphalteneContentField = value;
                NotifyPropertyChanged("AsphalteneContent");
            }
        }

        private MassPerMassMeasure AsphalteneContentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassBalance xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassBalance", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the MassBalance xsd type.")]
    public partial class MassBalance : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// MassBalanceFraction property
        /// </summary>
		[Description("The mass balance fraction for this slim tube test volume step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("MassBalanceFraction")]
        public MassPerMassMeasure MassBalanceFraction {
            get {
                return MassBalanceFractionField;
            } 
            set {
                MassBalanceFractionField = value;
                NotifyPropertyChanged("MassBalanceFraction");
            }
        }

        private MassPerMassMeasure MassBalanceFractionField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// MassIn property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassIn")]
		[XmlElement("MassIn")]
        public MassIn MassIn {
            get {
                return MassInField;
            } 
            set {
                MassInField = value;
                NotifyPropertyChanged("MassIn");
            }
        }

        private MassIn MassInField; 

        /// <summary>
        /// MassOut property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassOut")]
		[XmlElement("MassOut")]
        public MassOut MassOut {
            get {
                return MassOutField;
            } 
            set {
                MassOutField = value;
                NotifyPropertyChanged("MassOut");
            }
        }

        private MassOut MassOutField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassIn xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassIn", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the MassIn xsd type.")]
    public partial class MassIn : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The mass of fluid in the slim tube for this slim tube test volume step mass balance.
        /// </summary>
		[Description("The mass of fluid in the slim tube for this slim tube test volume step mass balance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("MassFluidSlimtube")]
        public MassMeasure MassFluidSlimtube {
            get {
                return MassFluidSlimtubeField;
            } 
            set {
                MassFluidSlimtubeField = value;
                NotifyPropertyChanged("MassFluidSlimtube");
            }
        }

        private MassMeasure MassFluidSlimtubeField; 

        /// <summary>
        /// The mass of fluid in the connecting lines for this slim tube test volume step mass balance.
        /// </summary>
		[Description("The mass of fluid in the connecting lines for this slim tube test volume step mass balance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("MassFluidConnectingLines")]
        public MassMeasure MassFluidConnectingLines {
            get {
                return MassFluidConnectingLinesField;
            } 
            set {
                MassFluidConnectingLinesField = value;
                NotifyPropertyChanged("MassFluidConnectingLines");
            }
        }

        private MassMeasure MassFluidConnectingLinesField; 

        /// <summary>
        /// The mass of injected gas solvent for this slim tube test volume step mass balance.
        /// </summary>
		[Description("The mass of injected gas solvent for this slim tube test volume step mass balance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("MassInjectedGasSolvent")]
        public MassMeasure MassInjectedGasSolvent {
            get {
                return MassInjectedGasSolventField;
            } 
            set {
                MassInjectedGasSolventField = value;
                NotifyPropertyChanged("MassInjectedGasSolvent");
            }
        }

        private MassMeasure MassInjectedGasSolventField; 

        /// <summary>
        /// The total mass in for this slim tube test volume step mass balance.
        /// </summary>
		[Description("The total mass in for this slim tube test volume step mass balance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("TotalMassIn")]
        public MassMeasure TotalMassIn {
            get {
                return TotalMassInField;
            } 
            set {
                TotalMassInField = value;
                NotifyPropertyChanged("TotalMassIn");
            }
        }

        private MassMeasure TotalMassInField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassOut xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassOut", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the MassOut xsd type.")]
    public partial class MassOut : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The mass of effluent stock tank oil for this slim tube test volume step mass balance.
        /// </summary>
		[Description("The mass of effluent stock tank oil for this slim tube test volume step mass balance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("MassEffluentStockTankOil")]
        public MassMeasure MassEffluentStockTankOil {
            get {
                return MassEffluentStockTankOilField;
            } 
            set {
                MassEffluentStockTankOilField = value;
                NotifyPropertyChanged("MassEffluentStockTankOil");
            }
        }

        private MassMeasure MassEffluentStockTankOilField; 

        /// <summary>
        /// The mass of produced effluent gas for this slim tube test volume step mass balance.
        /// </summary>
		[Description("The mass of produced effluent gas for this slim tube test volume step mass balance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("MassProducedEffluentGas")]
        public MassMeasure MassProducedEffluentGas {
            get {
                return MassProducedEffluentGasField;
            } 
            set {
                MassProducedEffluentGasField = value;
                NotifyPropertyChanged("MassProducedEffluentGas");
            }
        }

        private MassMeasure MassProducedEffluentGasField; 

        /// <summary>
        /// The mass of residual oil for this slim tube test volume step mass balance.
        /// </summary>
		[Description("The mass of residual oil for this slim tube test volume step mass balance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("MassResidualOil")]
        public MassMeasure MassResidualOil {
            get {
                return MassResidualOilField;
            } 
            set {
                MassResidualOilField = value;
                NotifyPropertyChanged("MassResidualOil");
            }
        }

        private MassMeasure MassResidualOilField; 

        /// <summary>
        /// The mass of produced effluent gas flow down for this slim tube test volume step mass balance.
        /// </summary>
		[Description("The mass of produced effluent gas flow down for this slim tube test volume step mass balance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("MassProducedEffluentGasFlowDown")]
        public MassMeasure MassProducedEffluentGasFlowDown {
            get {
                return MassProducedEffluentGasFlowDownField;
            } 
            set {
                MassProducedEffluentGasFlowDownField = value;
                NotifyPropertyChanged("MassProducedEffluentGasFlowDown");
            }
        }

        private MassMeasure MassProducedEffluentGasFlowDownField; 

        /// <summary>
        /// The total mass out for this slim tube test volume step mass balance.
        /// </summary>
		[Description("The total mass out for this slim tube test volume step mass balance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("TotalMassOut")]
        public MassMeasure TotalMassOut {
            get {
                return TotalMassOutField;
            } 
            set {
                TotalMassOutField = value;
                NotifyPropertyChanged("TotalMassOut");
            }
        }

        private MassMeasure TotalMassOutField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SlimTubeSpecification xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SlimTubeSpecification", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the SlimTubeSpecification xsd type.")]
    public partial class SlimTubeSpecification : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The length of the slim tube.
        /// </summary>
		[Description("The length of the slim tube.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Length")]
        public LengthMeasure Length {
            get {
                return LengthField;
            } 
            set {
                LengthField = value;
                NotifyPropertyChanged("Length");
            }
        }

        private LengthMeasure LengthField; 

        /// <summary>
        /// The outer diameter of the slim tube.
        /// </summary>
		[Description("The outer diameter of the slim tube.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OuterDiameter")]
        public LengthMeasure OuterDiameter {
            get {
                return OuterDiameterField;
            } 
            set {
                OuterDiameterField = value;
                NotifyPropertyChanged("OuterDiameter");
            }
        }

        private LengthMeasure OuterDiameterField; 

        /// <summary>
        /// The inner diameter of the slim tube.
        /// </summary>
		[Description("The inner diameter of the slim tube.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("InnerDiameter")]
        public LengthMeasure InnerDiameter {
            get {
                return InnerDiameterField;
            } 
            set {
                InnerDiameterField = value;
                NotifyPropertyChanged("InnerDiameter");
            }
        }

        private LengthMeasure InnerDiameterField; 

        /// <summary>
        /// The cross section area of the slim tube.
        /// </summary>
		[Description("The cross section area of the slim tube.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AreaMeasure")]
		[XmlElement("CrossSectionArea")]
        public AreaMeasure CrossSectionArea {
            get {
                return CrossSectionAreaField;
            } 
            set {
                CrossSectionAreaField = value;
                NotifyPropertyChanged("CrossSectionArea");
            }
        }

        private AreaMeasure CrossSectionAreaField; 

        /// <summary>
        /// The packing material used in the slim tube.
        /// </summary>
		[StringLength(64)]
        [Description("The packing material used in the slim tube.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PackingMaterial")]
        public string PackingMaterial {
            get {
                return PackingMaterialField;
            } 
            set {
                PackingMaterialField = value;
                NotifyPropertyChanged("PackingMaterial");
            }
        }

        private string PackingMaterialField; 

        /// <summary>
        /// The pore volume of the slim tube.
        /// </summary>
		[Description("The pore volume of the slim tube.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("PoreVolume")]
        public VolumeMeasure PoreVolume {
            get {
                return PoreVolumeField;
            } 
            set {
                PoreVolumeField = value;
                NotifyPropertyChanged("PoreVolume");
            }
        }

        private VolumeMeasure PoreVolumeField; 

        /// <summary>
        /// The porosity of the slim tube.
        /// </summary>
		[Description("The porosity of the slim tube.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Porosity")]
        public VolumePerVolumeMeasure Porosity {
            get {
                return PorosityField;
            } 
            set {
                PorosityField = value;
                NotifyPropertyChanged("Porosity");
            }
        }

        private VolumePerVolumeMeasure PorosityField; 

        /// <summary>
        /// The permeability of the slim tube.
        /// </summary>
		[Description("The permeability of the slim tube.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PermeabilityRockMeasure")]
		[XmlElement("Permeability")]
        public PermeabilityRockMeasure Permeability {
            get {
                return PermeabilityField;
            } 
            set {
                PermeabilityField = value;
                NotifyPropertyChanged("Permeability");
            }
        }

        private PermeabilityRockMeasure PermeabilityField; 

        /// <summary>
        /// Reference to the gas injected into the slim tube.
        /// </summary>
		[Description("Reference to the gas injected into the slim tube.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "InjectedGas")]
		[XmlElement("InjectedGas")]
        public List<InjectedGas> InjectedGas {
            get {
                return InjectedGasField;
            } 
            set {
                InjectedGasField = value;
                NotifyPropertyChanged("InjectedGas");
            }
        }

         /// <summary>
         /// bool to indicate if InjectedGas has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InjectedGasSpecified
         {
             get {
             if(InjectedGasField!=null)
                 return InjectedGasField.Count>0?true:false;
             else return false;
             }
         }
        private List<InjectedGas> InjectedGasField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AreaMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AreaMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AreaMeasure xsd type.")]
    public partial class AreaMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AreaMeasure class.
        /// </summary>
        public AreaMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AreaMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AreaMeasure(double value, AreaUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AreaUom")]
        [XmlAttribute("uom")]
		
        public AreaUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AreaUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PermeabilityRockMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PermeabilityRockMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PermeabilityRockMeasure xsd type.")]
    public partial class PermeabilityRockMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PermeabilityRockMeasure class.
        /// </summary>
        public PermeabilityRockMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PermeabilityRockMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PermeabilityRockMeasure(double value, PermeabilityRockUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PermeabilityRockUom")]
        [XmlAttribute("uom")]
		
        public PermeabilityRockUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PermeabilityRockUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MultipleContactMiscibilityTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MultipleContactMiscibilityTest", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the MultipleContactMiscibilityTest xsd type.")]
    public partial class MultipleContactMiscibilityTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("TestNumber")]
        public long? TestNumber {
            get {
                return TestNumberField;
            } 
            set {
                TestNumberField = value;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private long? TestNumberField; 

        /// <summary>
        /// The reference to the composition of the gas solvent that is a fluid composition.
        /// </summary>
		[StringLength(64)]
        [Description("The reference to the composition of the gas solvent that is a fluid composition.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("GasSolventCompositionReference")]
        public string GasSolventCompositionReference {
            get {
                return GasSolventCompositionReferenceField;
            } 
            set {
                GasSolventCompositionReferenceField = value;
                NotifyPropertyChanged("GasSolventCompositionReference");
            }
        }

        private string GasSolventCompositionReferenceField; 

        /// <summary>
        /// The mix ratio for the multiple contact miscibility test.
        /// </summary>
		[Description("The mix ratio for the multiple contact miscibility test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("MixRatio")]
        public DimensionlessMeasure MixRatio {
            get {
                return MixRatioField;
            } 
            set {
                MixRatioField = value;
                NotifyPropertyChanged("MixRatio");
            }
        }

        private DimensionlessMeasure MixRatioField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the STOAnalysis xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="STOAnalysis", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the STOAnalysis xsd type.")]
    public partial class STOAnalysis : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Date property
        /// </summary>
		[Required]
        [Description("The date when this test was performed.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("Date", DataType="date")]
        public DateTime? Date {
            get {
                return DateField;
            } 
            set {
                DateField = value;
                NotifyPropertyChanged("Date");
            }
        }

        private DateTime? DateField; 

        /// <summary>
        /// FlashFromPressure property
        /// </summary>
		[Description("The pressure from which the sample was flashed for the stock tank oil analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("FlashFromPressure")]
        public PressureMeasure FlashFromPressure {
            get {
                return FlashFromPressureField;
            } 
            set {
                FlashFromPressureField = value;
                NotifyPropertyChanged("FlashFromPressure");
            }
        }

        private PressureMeasure FlashFromPressureField; 

        /// <summary>
        /// FlashFromTemperature property
        /// </summary>
		[Description("The temperature from which the sample was flashed for the stock tank oil analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("FlashFromTemperature")]
        public ThermodynamicTemperatureMeasure FlashFromTemperature {
            get {
                return FlashFromTemperatureField;
            } 
            set {
                FlashFromTemperatureField = value;
                NotifyPropertyChanged("FlashFromTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure FlashFromTemperatureField; 

        /// <summary>
        /// MolecularWeight property
        /// </summary>
		[Description("The molecular weight for the stock tank oil analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("MolecularWeight")]
        public MolecularWeightMeasure MolecularWeight {
            get {
                return MolecularWeightField;
            } 
            set {
                MolecularWeightField = value;
                NotifyPropertyChanged("MolecularWeight");
            }
        }

        private MolecularWeightMeasure MolecularWeightField; 

        /// <summary>
        /// FluidCondition property
        /// </summary>
		[Description("The fluid condition at this test step. Enum, see fluid analysis step condition.")]
        [EnergisticsDataTypeAttribute(DataType = "FluidAnalysisStepCondition")]
		[XmlElement("FluidCondition")]
        public FluidAnalysisStepCondition? FluidCondition {
            get {
                return FluidConditionField;
            } 
            set {
                FluidConditionField = value;
                 this.FluidConditionSpecified = true;
                NotifyPropertyChanged("FluidCondition");
            }
        }

        private FluidAnalysisStepCondition? FluidConditionField; 

        /// <summary>
        /// FluidConditionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidConditionSpecified {
            get {
                return FluidConditionSpecifiedField;
            } 
            set {
                FluidConditionSpecifiedField = value;
                NotifyPropertyChanged("FluidConditionSpecified");
            }
        }

        private bool FluidConditionSpecifiedField; 

        /// <summary>
        /// PhasesPresent property
        /// </summary>
		[Description("The phases present for the stock tank oil analysis.")]
        [EnergisticsDataTypeAttribute(DataType = "PhasePresent")]
		[XmlElement("PhasesPresent")]
        public PhasePresent? PhasesPresent {
            get {
                return PhasesPresentField;
            } 
            set {
                PhasesPresentField = value;
                 this.PhasesPresentSpecified = true;
                NotifyPropertyChanged("PhasesPresent");
            }
        }

        private PhasePresent? PhasesPresentField; 

        /// <summary>
        /// PhasesPresentSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PhasesPresentSpecified {
            get {
                return PhasesPresentSpecifiedField;
            } 
            set {
                PhasesPresentSpecifiedField = value;
                NotifyPropertyChanged("PhasesPresentSpecified");
            }
        }

        private bool PhasesPresentSpecifiedField; 

        /// <summary>
        /// LiquidComposition property
        /// </summary>
		[Description("The liquid composition for the stock tank oil analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LiquidComposition")]
		[XmlElement("LiquidComposition")]
        public LiquidComposition LiquidComposition {
            get {
                return LiquidCompositionField;
            } 
            set {
                LiquidCompositionField = value;
                NotifyPropertyChanged("LiquidComposition");
            }
        }

        private LiquidComposition LiquidCompositionField; 

        /// <summary>
        /// VaporComposition property
        /// </summary>
		[Description("The vapor composition for the stock tank oil analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VaporComposition")]
		[XmlElement("VaporComposition")]
        public VaporComposition VaporComposition {
            get {
                return VaporCompositionField;
            } 
            set {
                VaporCompositionField = value;
                NotifyPropertyChanged("VaporComposition");
            }
        }

        private VaporComposition VaporCompositionField; 

        /// <summary>
        /// OverallComposition property
        /// </summary>
		[Description("The overall composition for the stock tank oil analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "OverallComposition")]
		[XmlElement("OverallComposition")]
        public OverallComposition OverallComposition {
            get {
                return OverallCompositionField;
            } 
            set {
                OverallCompositionField = value;
                NotifyPropertyChanged("OverallComposition");
            }
        }

        private OverallComposition OverallCompositionField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// STOFlashedLiquid property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "STOFlashedLiquid")]
		[XmlElement("STOFlashedLiquid")]
        public STOFlashedLiquid STOFlashedLiquid {
            get {
                return STOFlashedLiquidField;
            } 
            set {
                STOFlashedLiquidField = value;
                NotifyPropertyChanged("STOFlashedLiquid");
            }
        }

        private STOFlashedLiquid STOFlashedLiquidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the STOFlashedLiquid xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="STOFlashedLiquid", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the STOFlashedLiquid xsd type.")]
    public partial class STOFlashedLiquid : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// OilAPIGravity property
        /// </summary>
		[Description("Oil API gravity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "APIGravityMeasure")]
		[XmlElement("OilAPIGravity")]
        public APIGravityMeasure OilAPIGravity {
            get {
                return OilAPIGravityField;
            } 
            set {
                OilAPIGravityField = value;
                NotifyPropertyChanged("OilAPIGravity");
            }
        }

        private APIGravityMeasure OilAPIGravityField; 

        /// <summary>
        /// WaterContent property
        /// </summary>
		[Description("The water content of the liquid phase of the stock tank analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("WaterContent")]
        public MassPerMassMeasure WaterContent {
            get {
                return WaterContentField;
            } 
            set {
                WaterContentField = value;
                NotifyPropertyChanged("WaterContent");
            }
        }

        private MassPerMassMeasure WaterContentField; 

        /// <summary>
        /// WatsonKFactor property
        /// </summary>
		[Description("The Watson K factor of the liquid phase of the stock tank analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("WatsonKFactor")]
        public DimensionlessMeasure WatsonKFactor {
            get {
                return WatsonKFactorField;
            } 
            set {
                WatsonKFactorField = value;
                NotifyPropertyChanged("WatsonKFactor");
            }
        }

        private DimensionlessMeasure WatsonKFactorField; 

        /// <summary>
        /// AsphalteneContent property
        /// </summary>
		[Description("The asphaltene content of the liquid phase of the stock tank analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("AsphalteneContent")]
        public MassPerMassMeasure AsphalteneContent {
            get {
                return AsphalteneContentField;
            } 
            set {
                AsphalteneContentField = value;
                NotifyPropertyChanged("AsphalteneContent");
            }
        }

        private MassPerMassMeasure AsphalteneContentField; 

        /// <summary>
        /// ParaffinContent property
        /// </summary>
		[Description("The paraffin content of the liquid phase of the stock tank analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("ParaffinContent")]
        public MassPerMassMeasure ParaffinContent {
            get {
                return ParaffinContentField;
            } 
            set {
                ParaffinContentField = value;
                NotifyPropertyChanged("ParaffinContent");
            }
        }

        private MassPerMassMeasure ParaffinContentField; 

        /// <summary>
        /// CloudPoint property
        /// </summary>
		[Description("The cloud point of the liquid phase of the stock tank analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("CloudPoint")]
        public ThermodynamicTemperatureMeasure CloudPoint {
            get {
                return CloudPointField;
            } 
            set {
                CloudPointField = value;
                NotifyPropertyChanged("CloudPoint");
            }
        }

        private ThermodynamicTemperatureMeasure CloudPointField; 

        /// <summary>
        /// WaxAppearanceTemperature property
        /// </summary>
		[Description("The wax appearance temperature of the liquid phase of the stock tank analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("WaxAppearanceTemperature")]
        public ThermodynamicTemperatureMeasure WaxAppearanceTemperature {
            get {
                return WaxAppearanceTemperatureField;
            } 
            set {
                WaxAppearanceTemperatureField = value;
                NotifyPropertyChanged("WaxAppearanceTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure WaxAppearanceTemperatureField; 

        /// <summary>
        /// PourPoint property
        /// </summary>
		[Description("The pour point of the liquid phase of the stock tank analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("PourPoint")]
        public ThermodynamicTemperatureMeasure PourPoint {
            get {
                return PourPointField;
            } 
            set {
                PourPointField = value;
                NotifyPropertyChanged("PourPoint");
            }
        }

        private ThermodynamicTemperatureMeasure PourPointField; 

        /// <summary>
        /// ASTMFlashPoint property
        /// </summary>
		[Description("The ASTM flash point of the liquid phase of the stock tank analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("ASTMFlashPoint")]
        public ThermodynamicTemperatureMeasure ASTMFlashPoint {
            get {
                return ASTMFlashPointField;
            } 
            set {
                ASTMFlashPointField = value;
                NotifyPropertyChanged("ASTMFlashPoint");
            }
        }

        private ThermodynamicTemperatureMeasure ASTMFlashPointField; 

        /// <summary>
        /// TotalAcidNumber property
        /// </summary>
		[Description("The total acid number of the liquid phase of the stock tank analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("TotalAcidNumber")]
        public DimensionlessMeasure TotalAcidNumber {
            get {
                return TotalAcidNumberField;
            } 
            set {
                TotalAcidNumberField = value;
                NotifyPropertyChanged("TotalAcidNumber");
            }
        }

        private DimensionlessMeasure TotalAcidNumberField; 

        /// <summary>
        /// TotalSulfur property
        /// </summary>
		[Description("The total sulfur content of the liquid phase of the stock tank analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("TotalSulfur")]
        public MassPerMassMeasure TotalSulfur {
            get {
                return TotalSulfurField;
            } 
            set {
                TotalSulfurField = value;
                NotifyPropertyChanged("TotalSulfur");
            }
        }

        private MassPerMassMeasure TotalSulfurField; 

        /// <summary>
        /// Nitrogen property
        /// </summary>
		[Required]
        [Description("The nitrogen content of the liquid phase of the stock tank analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("Nitrogen")]
        public MassPerMassMeasure Nitrogen {
            get {
                return NitrogenField;
            } 
            set {
                NitrogenField = value;
                NotifyPropertyChanged("Nitrogen");
            }
        }

        private MassPerMassMeasure NitrogenField; 

        /// <summary>
        /// ElementalSulfur property
        /// </summary>
		[Description("The elemental sulfur content of the liquid phase of the stock tank analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("ElementalSulfur")]
        public MassPerMassMeasure ElementalSulfur {
            get {
                return ElementalSulfurField;
            } 
            set {
                ElementalSulfurField = value;
                NotifyPropertyChanged("ElementalSulfur");
            }
        }

        private MassPerMassMeasure ElementalSulfurField; 

        /// <summary>
        /// Lead property
        /// </summary>
		[Description("The lead content of the liquid phase of the stock tank analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("Lead")]
        public MassPerMassMeasure Lead {
            get {
                return LeadField;
            } 
            set {
                LeadField = value;
                NotifyPropertyChanged("Lead");
            }
        }

        private MassPerMassMeasure LeadField; 

        /// <summary>
        /// Nickel property
        /// </summary>
		[Description("The nickel content of the liquid phase of the stock tank analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("Nickel")]
        public MassPerMassMeasure Nickel {
            get {
                return NickelField;
            } 
            set {
                NickelField = value;
                NotifyPropertyChanged("Nickel");
            }
        }

        private MassPerMassMeasure NickelField; 

        /// <summary>
        /// Vanadium property
        /// </summary>
		[Description("The vanadium content of the liquid phase of the stock tank analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("Vanadium")]
        public MassPerMassMeasure Vanadium {
            get {
                return VanadiumField;
            } 
            set {
                VanadiumField = value;
                NotifyPropertyChanged("Vanadium");
            }
        }

        private MassPerMassMeasure VanadiumField; 

        /// <summary>
        /// Iron property
        /// </summary>
		[Description("The iron content of the liquid phase of the stock tank analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("Iron")]
        public MassPerMassMeasure Iron {
            get {
                return IronField;
            } 
            set {
                IronField = value;
                NotifyPropertyChanged("Iron");
            }
        }

        private MassPerMassMeasure IronField; 

        /// <summary>
        /// ViscosityAtTemperature property
        /// </summary>
		[Description("The viscosity at test temperature of the liquid phase of the stock tank analysis.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ViscosityAtTemperature")]
		[XmlElement("ViscosityAtTemperature")]
        public List<ViscosityAtTemperature> ViscosityAtTemperature {
            get {
                return ViscosityAtTemperatureField;
            } 
            set {
                ViscosityAtTemperatureField = value;
                NotifyPropertyChanged("ViscosityAtTemperature");
            }
        }

         /// <summary>
         /// bool to indicate if ViscosityAtTemperature has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ViscosityAtTemperatureSpecified
         {
             get {
             if(ViscosityAtTemperatureField!=null)
                 return ViscosityAtTemperatureField.Count>0?true:false;
             else return false;
             }
         }
        private List<ViscosityAtTemperature> ViscosityAtTemperatureField; 

        /// <summary>
        /// ReidVaporPressure property
        /// </summary>
		[Description("The reid vapor pressure of the liquid phase of the stock tank analysis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("ReidVaporPressure")]
        public PressureMeasure ReidVaporPressure {
            get {
                return ReidVaporPressureField;
            } 
            set {
                ReidVaporPressureField = value;
                NotifyPropertyChanged("ReidVaporPressure");
            }
        }

        private PressureMeasure ReidVaporPressureField; 

        /// <summary>
        /// Sara property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Sara")]
		[XmlElement("Sara")]
        public List<Sara> Sara {
            get {
                return SaraField;
            } 
            set {
                SaraField = value;
                NotifyPropertyChanged("Sara");
            }
        }

         /// <summary>
         /// bool to indicate if Sara has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SaraSpecified
         {
             get {
             if(SaraField!=null)
                 return SaraField.Count>0?true:false;
             else return false;
             }
         }
        private List<Sara> SaraField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ViscosityAtTemperature xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ViscosityAtTemperature", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ViscosityAtTemperature xsd type.")]
    public partial class ViscosityAtTemperature : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Viscosity measurement at the associated temperature.
        /// </summary>
		[Required]
        [Description("Viscosity measurement at the associated temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("Viscosity")]
        public DynamicViscosityMeasure Viscosity {
            get {
                return ViscosityField;
            } 
            set {
                ViscosityField = value;
                NotifyPropertyChanged("Viscosity");
            }
        }

        private DynamicViscosityMeasure ViscosityField; 

        /// <summary>
        /// Temperature at which the viscosity was measured.
        /// </summary>
		[Required]
        [Description("Temperature at which the viscosity was measured.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("ViscosityTemperature")]
        public ThermodynamicTemperatureMeasure ViscosityTemperature {
            get {
                return ViscosityTemperatureField;
            } 
            set {
                ViscosityTemperatureField = value;
                NotifyPropertyChanged("ViscosityTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure ViscosityTemperatureField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Sara xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Sara", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the Sara xsd type.")]
    public partial class Sara : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The aromatics weight fraction in the sample.
        /// </summary>
		[Description("The aromatics weight fraction in the sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("AromaticsWeightFraction")]
        public MassPerMassMeasure AromaticsWeightFraction {
            get {
                return AromaticsWeightFractionField;
            } 
            set {
                AromaticsWeightFractionField = value;
                NotifyPropertyChanged("AromaticsWeightFraction");
            }
        }

        private MassPerMassMeasure AromaticsWeightFractionField; 

        /// <summary>
        /// The asphaltenes weight fraction in the sample.
        /// </summary>
		[Description("The asphaltenes weight fraction in the sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("AsphaltenesWeightFraction")]
        public MassPerMassMeasure AsphaltenesWeightFraction {
            get {
                return AsphaltenesWeightFractionField;
            } 
            set {
                AsphaltenesWeightFractionField = value;
                NotifyPropertyChanged("AsphaltenesWeightFraction");
            }
        }

        private MassPerMassMeasure AsphaltenesWeightFractionField; 

        /// <summary>
        /// The napthenes weight fraction in the sample.
        /// </summary>
		[Description("The napthenes weight fraction in the sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("NapthenesWeightFraction")]
        public MassPerMassMeasure NapthenesWeightFraction {
            get {
                return NapthenesWeightFractionField;
            } 
            set {
                NapthenesWeightFractionField = value;
                NotifyPropertyChanged("NapthenesWeightFraction");
            }
        }

        private MassPerMassMeasure NapthenesWeightFractionField; 

        /// <summary>
        /// The paraffins weight fraction in the sample.
        /// </summary>
		[Description("The paraffins weight fraction in the sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("ParaffinsWeightFraction")]
        public MassPerMassMeasure ParaffinsWeightFraction {
            get {
                return ParaffinsWeightFractionField;
            } 
            set {
                ParaffinsWeightFractionField = value;
                NotifyPropertyChanged("ParaffinsWeightFraction");
            }
        }

        private MassPerMassMeasure ParaffinsWeightFractionField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the InterfacialTensionTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="InterfacialTensionTest", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the InterfacialTensionTest xsd type.")]
    public partial class InterfacialTensionTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TestNumber property
        /// </summary>
		[Required]
        [Description("An integer number to identify this test in a sequence of tests.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("TestNumber")]
        public long? TestNumber {
            get {
                return TestNumberField;
            } 
            set {
                TestNumberField = value;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private long? TestNumberField; 

        /// <summary>
        /// WettingPhase property
        /// </summary>
		[Required]
        [Description("The wetting phase for this interfacial tension test.")]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicPhase")]
		[XmlElement("WettingPhase")]
        public ThermodynamicPhase? WettingPhase {
            get {
                return WettingPhaseField;
            } 
            set {
                WettingPhaseField = value;
                 this.WettingPhaseSpecified = true;
                NotifyPropertyChanged("WettingPhase");
            }
        }

        
        private bool WettingPhaseSpecifiedField = false;
        
        /// <summary>
        /// WettingPhaseSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool WettingPhaseSpecified {
            get {
                return WettingPhaseSpecifiedField;
            } 
            set {
                WettingPhaseSpecifiedField = value;
                NotifyPropertyChanged("WettingPhaseSpecified");
            }
        }
        
        private ThermodynamicPhase? WettingPhaseField; 

        /// <summary>
        /// nonWettingPhase property
        /// </summary>
		[Required]
        [Description("The non-wetting phase for this interfacial tension test.")]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicPhase")]
		[XmlElement("nonWettingPhase")]
        public ThermodynamicPhase? NonWettingPhase {
            get {
                return nonWettingPhaseField;
            } 
            set {
                nonWettingPhaseField = value;
                 this.NonWettingPhaseSpecified = true;
                NotifyPropertyChanged("NonWettingPhase");
            }
        }

        
        private bool NonWettingPhaseSpecifiedField = false;
        
        /// <summary>
        /// NonWettingPhaseSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NonWettingPhaseSpecified {
            get {
                return NonWettingPhaseSpecifiedField;
            } 
            set {
                NonWettingPhaseSpecifiedField = value;
                NotifyPropertyChanged("NonWettingPhaseSpecified");
            }
        }
        
        private ThermodynamicPhase? nonWettingPhaseField; 

        /// <summary>
        /// Surfactant property
        /// </summary>
		[Description("The surfactant for this interfacial tension test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractFluidComponent")]
		[XmlElement("Surfactant")]
        public AbstractFluidComponent Surfactant {
            get {
                return SurfactantField;
            } 
            set {
                SurfactantField = value;
                NotifyPropertyChanged("Surfactant");
            }
        }

        private AbstractFluidComponent SurfactantField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// InterfacialTensionTestStep property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "InterfacialTensionTestStep")]
		[XmlElement("InterfacialTensionTestStep")]
        public List<InterfacialTensionTestStep> InterfacialTensionTestStep {
            get {
                return InterfacialTensionTestStepField;
            } 
            set {
                InterfacialTensionTestStepField = value;
                NotifyPropertyChanged("InterfacialTensionTestStep");
            }
        }

         /// <summary>
         /// bool to indicate if InterfacialTensionTestStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InterfacialTensionTestStepSpecified
         {
             get {
             if(InterfacialTensionTestStepField!=null)
                 return InterfacialTensionTestStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<InterfacialTensionTestStep> InterfacialTensionTestStepField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the InterfacialTensionTestStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="InterfacialTensionTestStep", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the InterfacialTensionTestStep xsd type.")]
    public partial class InterfacialTensionTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The step number is the index of a (P,T) step in the overall test.
        /// </summary>
		[Required]
        [Description("The step number is the index of a (P,T) step in the overall test.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StepNumber")]
        public long? StepNumber {
            get {
                return StepNumberField;
            } 
            set {
                StepNumberField = value;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private long? StepNumberField; 

        /// <summary>
        /// The pressure for this test step.
        /// </summary>
		[Description("The pressure for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("StepPressure")]
        public PressureMeasure StepPressure {
            get {
                return StepPressureField;
            } 
            set {
                StepPressureField = value;
                NotifyPropertyChanged("StepPressure");
            }
        }

        private PressureMeasure StepPressureField; 

        /// <summary>
        /// The temperature for this test step.
        /// </summary>
		[Description("The temperature for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("StepTemperature")]
        public ThermodynamicTemperatureMeasure StepTemperature {
            get {
                return StepTemperatureField;
            } 
            set {
                StepTemperatureField = value;
                NotifyPropertyChanged("StepTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure StepTemperatureField; 

        /// <summary>
        /// The wetting phase saturation for this test step.
        /// </summary>
		[Description("The wetting phase saturation for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("WettingPhaseSaturation")]
        public DimensionlessMeasure WettingPhaseSaturation {
            get {
                return WettingPhaseSaturationField;
            } 
            set {
                WettingPhaseSaturationField = value;
                NotifyPropertyChanged("WettingPhaseSaturation");
            }
        }

        private DimensionlessMeasure WettingPhaseSaturationField; 

        /// <summary>
        /// The surfactant concentration for this test step.
        /// </summary>
		[Description("The surfactant concentration for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("SurfactantConcentration")]
        public MassPerMassMeasure SurfactantConcentration {
            get {
                return SurfactantConcentrationField;
            } 
            set {
                SurfactantConcentrationField = value;
                NotifyPropertyChanged("SurfactantConcentration");
            }
        }

        private MassPerMassMeasure SurfactantConcentrationField; 

        /// <summary>
        /// The interfacial tension for this test step.
        /// </summary>
		[Description("The interfacial tension for this test step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerLengthMeasure")]
		[XmlElement("InterfacialTension")]
        public ForcePerLengthMeasure InterfacialTension {
            get {
                return InterfacialTensionField;
            } 
            set {
                InterfacialTensionField = value;
                NotifyPropertyChanged("InterfacialTension");
            }
        }

        private ForcePerLengthMeasure InterfacialTensionField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ForcePerLengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ForcePerLengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ForcePerLengthMeasure xsd type.")]
    public partial class ForcePerLengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForcePerLengthMeasure class.
        /// </summary>
        public ForcePerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ForcePerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForcePerLengthMeasure(double value, ForcePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerLengthUom")]
        [XmlAttribute("uom")]
		
        public ForcePerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ForcePerLengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the FluidCharacterization xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the FluidCharacterization xsd type.")]
    public partial class FluidCharacterization : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ApplicationSource property
        /// </summary>
		[Description("The software used to generate  the fluid characterization.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ApplicationInfo")]
		[XmlElement("ApplicationSource")]
        public ApplicationInfo ApplicationSource {
            get {
                return ApplicationSourceField;
            } 
            set {
                ApplicationSourceField = value;
                NotifyPropertyChanged("ApplicationSource");
            }
        }

        private ApplicationInfo ApplicationSourceField; 

        /// <summary>
        /// ApplicationTarget property
        /// </summary>
		[Description("The software which is the consumer of the fluid characterization.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ApplicationInfo")]
		[XmlElement("ApplicationTarget")]
        public List<ApplicationInfo> ApplicationTarget {
            get {
                return ApplicationTargetField;
            } 
            set {
                ApplicationTargetField = value;
                NotifyPropertyChanged("ApplicationTarget");
            }
        }

         /// <summary>
         /// bool to indicate if ApplicationTarget has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ApplicationTargetSpecified
         {
             get {
             if(ApplicationTargetField!=null)
                 return ApplicationTargetField.Count>0?true:false;
             else return false;
             }
         }
        private List<ApplicationInfo> ApplicationTargetField; 

        /// <summary>
        /// FluidSystemCharacterizationType property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The kind of fluid characterization.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FluidSystemCharacterizationType")]
        public string FluidSystemCharacterizationType {
            get {
                return FluidSystemCharacterizationTypeField;
            } 
            set {
                FluidSystemCharacterizationTypeField = value;
                NotifyPropertyChanged("FluidSystemCharacterizationType");
            }
        }

        private string FluidSystemCharacterizationTypeField; 

        /// <summary>
        /// IntendedUsage property
        /// </summary>
		[StringLength(64)]
        [Description("The intended usage of the fluid characterization.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("IntendedUsage")]
        public string IntendedUsage {
            get {
                return IntendedUsageField;
            } 
            set {
                IntendedUsageField = value;
                NotifyPropertyChanged("IntendedUsage");
            }
        }

        private string IntendedUsageField; 

        /// <summary>
        /// RockFluidUnitFeatureReference property
        /// </summary>
		[Description("Reference to a rock fluid unit feature (a RESQML feature).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("RockFluidUnitFeatureReference")]
        public DataObjectReference RockFluidUnitFeatureReference {
            get {
                return RockFluidUnitFeatureReferenceField;
            } 
            set {
                RockFluidUnitFeatureReferenceField = value;
                NotifyPropertyChanged("RockFluidUnitFeatureReference");
            }
        }

        private DataObjectReference RockFluidUnitFeatureReferenceField; 

        /// <summary>
        /// StandardConditions property
        /// </summary>
		[Description("The standard temperature and pressure used for the representation of this fluid characterization.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractTemperaturePressure")]
		[XmlElement("StandardConditions")]
        public AbstractTemperaturePressure StandardConditions {
            get {
                return StandardConditionsField;
            } 
            set {
                StandardConditionsField = value;
                NotifyPropertyChanged("StandardConditions");
            }
        }

        private AbstractTemperaturePressure StandardConditionsField; 

        /// <summary>
        /// FluidCharacterizationSource property
        /// </summary>
		[Description("Reference to the fluid analysis tests which were the source data for this fluid characterization.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidCharacterizationSource")]
		[XmlElement("FluidCharacterizationSource")]
        public List<FluidCharacterizationSource> FluidCharacterizationSource {
            get {
                return FluidCharacterizationSourceField;
            } 
            set {
                FluidCharacterizationSourceField = value;
                NotifyPropertyChanged("FluidCharacterizationSource");
            }
        }

         /// <summary>
         /// bool to indicate if FluidCharacterizationSource has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidCharacterizationSourceSpecified
         {
             get {
             if(FluidCharacterizationSourceField!=null)
                 return FluidCharacterizationSourceField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidCharacterizationSource> FluidCharacterizationSourceField; 

        /// <summary>
        /// FluidComponentCatalog property
        /// </summary>
		[Description("The fluid component catalog for this fluid characterization.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidComponentCatalog")]
		[XmlElement("FluidComponentCatalog")]
        public FluidComponentCatalog FluidComponentCatalog {
            get {
                return FluidComponentCatalogField;
            } 
            set {
                FluidComponentCatalogField = value;
                NotifyPropertyChanged("FluidComponentCatalog");
            }
        }

        private FluidComponentCatalog FluidComponentCatalogField; 

        /// <summary>
        /// FluidCharacterizationModel property
        /// </summary>
		[Description("The model used to generate the fluid characterization.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidCharacterizationModel")]
		[XmlElement("FluidCharacterizationModel")]
        public List<FluidCharacterizationModel> FluidCharacterizationModel {
            get {
                return FluidCharacterizationModelField;
            } 
            set {
                FluidCharacterizationModelField = value;
                NotifyPropertyChanged("FluidCharacterizationModel");
            }
        }

         /// <summary>
         /// bool to indicate if FluidCharacterizationModel has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidCharacterizationModelSpecified
         {
             get {
             if(FluidCharacterizationModelField!=null)
                 return FluidCharacterizationModelField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidCharacterizationModel> FluidCharacterizationModelField; 

        /// <summary>
        /// FluidCharacterizationTableFormatSet property
        /// </summary>
		[Description("The collection of fluid characterization table formats.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidCharacterizationTableFormatSet")]
		[XmlArrayItem("FluidCharacterizationTableFormat")]
        [XmlArray("FluidCharacterizationTableFormatSet")]
        public List<FluidCharacterizationTableFormat> FluidCharacterizationTableFormatSet {
            get {
                return FluidCharacterizationTableFormatSetField;
            } 
            set {
                FluidCharacterizationTableFormatSetField = value;
                NotifyPropertyChanged("FluidCharacterizationTableFormatSet");
            }
        }

         /// <summary>
         /// bool to indicate if FluidCharacterizationTableFormatSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidCharacterizationTableFormatSetSpecified
         {
             get {
             if(FluidCharacterizationTableFormatSetField!=null)
                 return FluidCharacterizationTableFormatSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidCharacterizationTableFormat> FluidCharacterizationTableFormatSetField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// FluidSystem property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("FluidSystem")]
        public DataObjectReference FluidSystem {
            get {
                return FluidSystemField;
            } 
            set {
                FluidSystemField = value;
                NotifyPropertyChanged("FluidSystem");
            }
        }

        private DataObjectReference FluidSystemField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ApplicationInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ApplicationInfo", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ApplicationInfo xsd type.")]
    public partial class ApplicationInfo : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the application that is expected to use these fluid characterization data.
        /// </summary>
		[Description("The name of the application that is expected to use these fluid characterization data.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ApplicationName")]
        public List<string> ApplicationName {
            get {
                return ApplicationNameField;
            } 
            set {
                ApplicationNameField = value;
                NotifyPropertyChanged("ApplicationName");
            }
        }

         /// <summary>
         /// bool to indicate if ApplicationName has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ApplicationNameSpecified
         {
             get {
             if(ApplicationNameField!=null)
                 return ApplicationNameField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> ApplicationNameField; 

		/// <summary>
        /// The version of the application that is expected to use these fluid characterization data.
        /// </summary>
		[StringLength(64)]
        [Description("The version of the application that is expected to use these fluid characterization data.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidCharacterizationSource xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidCharacterizationSource", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidCharacterizationSource xsd type.")]
    public partial class FluidCharacterizationSource : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// FluidAnalysisTestReference property
        /// </summary>
		[Description("A reference to a fluid analysis test which was used as source data for this fluid characterization.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FluidAnalysisTestReference")]
        public List<string> FluidAnalysisTestReference {
            get {
                return FluidAnalysisTestReferenceField;
            } 
            set {
                FluidAnalysisTestReferenceField = value;
                NotifyPropertyChanged("FluidAnalysisTestReference");
            }
        }

         /// <summary>
         /// bool to indicate if FluidAnalysisTestReference has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidAnalysisTestReferenceSpecified
         {
             get {
             if(FluidAnalysisTestReferenceField!=null)
                 return FluidAnalysisTestReferenceField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> FluidAnalysisTestReferenceField; 

        /// <summary>
        /// FluidAnalysisReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("FluidAnalysisReference")]
        public DataObjectReference FluidAnalysisReference {
            get {
                return FluidAnalysisReferenceField;
            } 
            set {
                FluidAnalysisReferenceField = value;
                NotifyPropertyChanged("FluidAnalysisReference");
            }
        }

        private DataObjectReference FluidAnalysisReferenceField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidCharacterizationModel xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidCharacterizationModel", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidCharacterizationModel xsd type.")]
    public partial class FluidCharacterizationModel : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the fluid analysis result.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// ReferencePressure property
        /// </summary>
		[Description("The reference pressure for this fluid characterization.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("ReferencePressure")]
        public AbstractPressureValue ReferencePressure {
            get {
                return ReferencePressureField;
            } 
            set {
                ReferencePressureField = value;
                NotifyPropertyChanged("ReferencePressure");
            }
        }

        private AbstractPressureValue ReferencePressureField; 

        /// <summary>
        /// ReferenceStockTankPressure property
        /// </summary>
		[Description("The reference stock tank pressure for this fluid characterization.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("ReferenceStockTankPressure")]
        public AbstractPressureValue ReferenceStockTankPressure {
            get {
                return ReferenceStockTankPressureField;
            } 
            set {
                ReferenceStockTankPressureField = value;
                NotifyPropertyChanged("ReferenceStockTankPressure");
            }
        }

        private AbstractPressureValue ReferenceStockTankPressureField; 

        /// <summary>
        /// ReferenceTemperature property
        /// </summary>
		[Description("The reference temperature for this fluid characterization.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("ReferenceTemperature")]
        public ThermodynamicTemperatureMeasure ReferenceTemperature {
            get {
                return ReferenceTemperatureField;
            } 
            set {
                ReferenceTemperatureField = value;
                NotifyPropertyChanged("ReferenceTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure ReferenceTemperatureField; 

        /// <summary>
        /// ReferenceStockTankTemperature property
        /// </summary>
		[Description("The reference stock tank temperature for this fluid characterization.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("ReferenceStockTankTemperature")]
        public ThermodynamicTemperatureMeasure ReferenceStockTankTemperature {
            get {
                return ReferenceStockTankTemperatureField;
            } 
            set {
                ReferenceStockTankTemperatureField = value;
                NotifyPropertyChanged("ReferenceStockTankTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure ReferenceStockTankTemperatureField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// ReferenceSeparatorStage property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ReferenceSeparatorStage")]
		[XmlElement("ReferenceSeparatorStage")]
        public List<ReferenceSeparatorStage> ReferenceSeparatorStage {
            get {
                return ReferenceSeparatorStageField;
            } 
            set {
                ReferenceSeparatorStageField = value;
                NotifyPropertyChanged("ReferenceSeparatorStage");
            }
        }

         /// <summary>
         /// bool to indicate if ReferenceSeparatorStage has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ReferenceSeparatorStageSpecified
         {
             get {
             if(ReferenceSeparatorStageField!=null)
                 return ReferenceSeparatorStageField.Count>0?true:false;
             else return false;
             }
         }
        private List<ReferenceSeparatorStage> ReferenceSeparatorStageField; 

        /// <summary>
        /// ModelSpecification property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPvtModel")]
		[XmlElement("ModelSpecification")]
        public AbstractPvtModel ModelSpecification {
            get {
                return ModelSpecificationField;
            } 
            set {
                ModelSpecificationField = value;
                NotifyPropertyChanged("ModelSpecification");
            }
        }

        private AbstractPvtModel ModelSpecificationField; 

        /// <summary>
        /// FluidCharacterizationTable property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidCharacterizationTable")]
		[XmlElement("FluidCharacterizationTable")]
        public List<FluidCharacterizationTable> FluidCharacterizationTable {
            get {
                return FluidCharacterizationTableField;
            } 
            set {
                FluidCharacterizationTableField = value;
                NotifyPropertyChanged("FluidCharacterizationTable");
            }
        }

         /// <summary>
         /// bool to indicate if FluidCharacterizationTable has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidCharacterizationTableSpecified
         {
             get {
             if(FluidCharacterizationTableField!=null)
                 return FluidCharacterizationTableField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidCharacterizationTable> FluidCharacterizationTableField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ReferenceSeparatorStage xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ReferenceSeparatorStage", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ReferenceSeparatorStage xsd type.")]
    public partial class ReferenceSeparatorStage : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The separator pressure for a separator stage used to define the separation train, which is used as the basis of this fluid characterization.
        /// </summary>
		[Description("The separator pressure for a separator stage used to define the separation train, which is used as the basis of this fluid characterization.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("SeparatorPressure")]
        public AbstractPressureValue SeparatorPressure {
            get {
                return SeparatorPressureField;
            } 
            set {
                SeparatorPressureField = value;
                NotifyPropertyChanged("SeparatorPressure");
            }
        }

        private AbstractPressureValue SeparatorPressureField; 

        /// <summary>
        /// The separator temperature for a separator stage used to define the separation train, which is used as the basis of this fluid characterization.
        /// </summary>
		[Description("The separator temperature for a separator stage used to define the separation train, which is used as the basis of this fluid characterization.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasureExt")]
		[XmlElement("SeparatorTemperature")]
        public ThermodynamicTemperatureMeasureExt SeparatorTemperature {
            get {
                return SeparatorTemperatureField;
            } 
            set {
                SeparatorTemperatureField = value;
                NotifyPropertyChanged("SeparatorTemperature");
            }
        }

        private ThermodynamicTemperatureMeasureExt SeparatorTemperatureField; 

        /// <summary>
        /// The separator number for a separator stage used to define the separation train, which is used as the basis of this fluid characterization.
        /// </summary>
		[Description("The separator number for a separator stage used to define the separation train, which is used as the basis of this fluid characterization.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("SeparatorNumber")]
        public long? SeparatorNumber {
            get {
                return SeparatorNumberField;
            } 
            set {
                SeparatorNumberField = value;
                 this.SeparatorNumberSpecified = true;
                NotifyPropertyChanged("SeparatorNumber");
            }
        }

        private long? SeparatorNumberField; 

        /// <summary>
        /// SeparatorNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SeparatorNumberSpecified {
            get {
                return SeparatorNumberSpecifiedField;
            } 
            set {
                SeparatorNumberSpecifiedField = value;
                NotifyPropertyChanged("SeparatorNumberSpecified");
            }
        }

        private bool SeparatorNumberSpecifiedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ThermodynamicTemperatureMeasureExt xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ThermodynamicTemperatureMeasureExt", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ThermodynamicTemperatureMeasureExt xsd type.")]
    public partial class ThermodynamicTemperatureMeasureExt : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperatureMeasureExt class.
        /// </summary>
        public ThermodynamicTemperatureMeasureExt() {}

        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperatureMeasureExt class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ThermodynamicTemperatureMeasureExt(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureUomExt")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractPvtModel xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CorrelationThermalModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityUndersaturatedModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BerganAndSuttonUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityBubblePointModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BergmanSuttonBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationGasViscosityModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Lucas))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LondonoArcherBlasinggame))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LeeGonzalez))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CarrDempsey))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityDeadModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BerganSuttonDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCompositionalModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CompositionalThermalModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCompositionalViscosityModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LohrenzBrayClarkCorrelation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FrictionTheory))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CSPedersen87))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CSPedersen84))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCompositionalEoSModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Srk_EOS))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PengRobinson78_EOS))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PengRobinson76_EOS))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractPvtModel", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractPvtModel xsd type.")]
    public abstract partial class AbstractPvtModel : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CustomPvtModelExtension property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CustomPvtModelExtension")]
		[XmlElement("CustomPvtModelExtension")]
        public CustomPvtModelExtension CustomPvtModelExtension {
            get {
                return CustomPvtModelExtensionField;
            } 
            set {
                CustomPvtModelExtensionField = value;
                NotifyPropertyChanged("CustomPvtModelExtension");
            }
        }

        private CustomPvtModelExtension CustomPvtModelExtensionField; 

        /// <summary>
        /// PvtModelParameterSet property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PvtModelParameterSet")]
		[XmlArrayItem("Coefficient")]
        [XmlArray("PvtModelParameterSet")]
        public List<PvtModelParameter> PvtModelParameterSet {
            get {
                return PvtModelParameterSetField;
            } 
            set {
                PvtModelParameterSetField = value;
                NotifyPropertyChanged("PvtModelParameterSet");
            }
        }

         /// <summary>
         /// bool to indicate if PvtModelParameterSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PvtModelParameterSetSpecified
         {
             get {
             if(PvtModelParameterSetField!=null)
                 return PvtModelParameterSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<PvtModelParameter> PvtModelParameterSetField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CustomPvtModelExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CustomPvtModelExtension", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the CustomPvtModelExtension xsd type.")]
    public partial class CustomPvtModelExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("A description of the custom model.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// CustomPvtModelParameter property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CustomPvtModelParameter")]
		[XmlElement("CustomPvtModelParameter")]
        public List<CustomPvtModelParameter> CustomPvtModelParameter {
            get {
                return CustomPvtModelParameterField;
            } 
            set {
                CustomPvtModelParameterField = value;
                NotifyPropertyChanged("CustomPvtModelParameter");
            }
        }

         /// <summary>
         /// bool to indicate if CustomPvtModelParameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CustomPvtModelParameterSpecified
         {
             get {
             if(CustomPvtModelParameterField!=null)
                 return CustomPvtModelParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<CustomPvtModelParameter> CustomPvtModelParameterField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CustomPvtModelParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CustomPvtModelParameter", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the CustomPvtModelParameter xsd type.")]
    public partial class CustomPvtModelParameter : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CustomParameterValue property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("CustomParameterValue")]
        public ExtensionNameValue CustomParameterValue {
            get {
                return CustomParameterValueField;
            } 
            set {
                CustomParameterValueField = value;
                NotifyPropertyChanged("CustomParameterValue");
            }
        }

        private ExtensionNameValue CustomParameterValueField; 

		/// <summary>
        /// Reference to a fluid component to which this custom model parameter applies.
        /// </summary>
		[StringLength(64)]
        [Description("Reference to a fluid component to which this custom model parameter applies.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("fluidComponentReference")]
		
        public string FluidComponentReference {
            get {
                return fluidComponentReferenceField;
            } 
            set {
                fluidComponentReferenceField = value;
                NotifyPropertyChanged("FluidComponentReference");
            }
        }

        private string fluidComponentReferenceField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PvtModelParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PvtModelParameter", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the PvtModelParameter xsd type.")]
    public partial class PvtModelParameter : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PvtModelParameter class.
        /// </summary>
        public PvtModelParameter() {}

        /// <summary>
        /// Initializes a new instance of the PvtModelParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public PvtModelParameter(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The kind of model parameter. Extensible enum. See PVT model parameter kind ext.
        /// </summary>
		[Required]
        [Description("The kind of model parameter. Extensible enum.  See PVT model parameter kind ext.")]
        [EnergisticsDataTypeAttribute(DataType = "PvtModelParameterKindExt")]
        [XmlAttribute("kind")]
		
        public string Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string kindField; 

		/// <summary>
        /// The user-defined name of a parameter, which can be added to any model.
        /// </summary>
		[StringLength(64)]
        [Description("The  user-defined name of a parameter, which can be added to any model.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("name")]
		
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractCorrelationModel xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CorrelationThermalModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityUndersaturatedModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BerganAndSuttonUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityBubblePointModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BergmanSuttonBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationGasViscosityModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Lucas))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LondonoArcherBlasinggame))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LeeGonzalez))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CarrDempsey))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityDeadModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BerganSuttonDead))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractCorrelationModel", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractCorrelationModel xsd type.")]
    public abstract partial class AbstractCorrelationModel : AbstractPvtModel, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CorrelationThermalModel xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CorrelationThermalModel", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the CorrelationThermalModel xsd type.")]
    public partial class CorrelationThermalModel : AbstractCorrelationModel, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractCorrelationViscosityModel xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityUndersaturatedModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BerganAndSuttonUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityBubblePointModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BergmanSuttonBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationGasViscosityModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Lucas))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LondonoArcherBlasinggame))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LeeGonzalez))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CarrDempsey))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCorrelationViscosityDeadModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BerganSuttonDead))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractCorrelationViscosityModel", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractCorrelationViscosityModel xsd type.")]
    public abstract partial class AbstractCorrelationViscosityModel : AbstractCorrelationModel, INotifyPropertyChanged
    {

        /// <summary>
        /// The molecular weight of the fluid for the viscosity model.
        /// </summary>
		[Description("The molecular weight of the fluid for the viscosity model.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("MolecularWeight")]
        public MolecularWeightMeasure MolecularWeight {
            get {
                return MolecularWeightField;
            } 
            set {
                MolecularWeightField = value;
                NotifyPropertyChanged("MolecularWeight");
            }
        }

        private MolecularWeightMeasure MolecularWeightField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractCorrelationViscosityUndersaturatedModel xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoUndersaturated))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BerganAndSuttonUndersaturated))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractCorrelationViscosityUndersaturatedModel", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractCorrelationViscosityUndersaturatedModel xsd type.")]
    public abstract partial class AbstractCorrelationViscosityUndersaturatedModel : AbstractCorrelationViscosityModel, INotifyPropertyChanged
    {

        /// <summary>
        /// The under saturated viscosity output from the under saturated viscosity model.
        /// </summary>
		[Description("The under saturated viscosity output from the under saturated viscosity model.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("UndersaturatedOilViscosity")]
        public DynamicViscosityMeasure UndersaturatedOilViscosity {
            get {
                return UndersaturatedOilViscosityField;
            } 
            set {
                UndersaturatedOilViscosityField = value;
                NotifyPropertyChanged("UndersaturatedOilViscosity");
            }
        }

        private DynamicViscosityMeasure UndersaturatedOilViscosityField; 

        /// <summary>
        /// The bubble point viscosity input for the under saturated viscosity model.
        /// </summary>
		[Description("The bubble point viscosity input for the under saturated viscosity model.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("BubblePointOilViscosity")]
        public DynamicViscosityMeasure BubblePointOilViscosity {
            get {
                return BubblePointOilViscosityField;
            } 
            set {
                BubblePointOilViscosityField = value;
                NotifyPropertyChanged("BubblePointOilViscosity");
            }
        }

        private DynamicViscosityMeasure BubblePointOilViscosityField; 

        /// <summary>
        /// The bubble point pressure for the under saturated viscosity model.
        /// </summary>
		[Description("The bubble point pressure for the under saturated viscosity model.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("BubblePointPressure")]
        public PressureMeasure BubblePointPressure {
            get {
                return BubblePointPressureField;
            } 
            set {
                BubblePointPressureField = value;
                NotifyPropertyChanged("BubblePointPressure");
            }
        }

        private PressureMeasure BubblePointPressureField; 

        /// <summary>
        /// The pressure for the under saturated viscosity model.
        /// </summary>
		[Description("The pressure for the under saturated viscosity model.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Pressure")]
        public PressureMeasure Pressure {
            get {
                return PressureField;
            } 
            set {
                PressureField = value;
                NotifyPropertyChanged("Pressure");
            }
        }

        private PressureMeasure PressureField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StandingUndersaturated xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StandingUndersaturated", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the StandingUndersaturated xsd type.")]
    public partial class StandingUndersaturated : AbstractCorrelationViscosityUndersaturatedModel, INotifyPropertyChanged
    {

        /// <summary>
        /// ReservoirTemperature property
        /// </summary>
		[ComponentElement]
		[XmlElement("ReservoirTemperature")]
        public ThermodynamicTemperatureMeasure ReservoirTemperature {
            get {
                return ReservoirTemperatureField;
            } 
            set {
                ReservoirTemperatureField = value;
                NotifyPropertyChanged("ReservoirTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure ReservoirTemperatureField; 

        /// <summary>
        /// SolutionGasOilRatio property
        /// </summary>
		[ComponentElement]
		[XmlElement("SolutionGasOilRatio")]
        public VolumePerVolumeMeasure SolutionGasOilRatio {
            get {
                return SolutionGasOilRatioField;
            } 
            set {
                SolutionGasOilRatioField = value;
                NotifyPropertyChanged("SolutionGasOilRatio");
            }
        }

        private VolumePerVolumeMeasure SolutionGasOilRatioField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PetroskyFarshadUndersaturated xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PetroskyFarshadUndersaturated", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the PetroskyFarshadUndersaturated xsd type.")]
    public partial class PetroskyFarshadUndersaturated : AbstractCorrelationViscosityUndersaturatedModel, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DindorukChristmanUndersaturated xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DindorukChristmanUndersaturated", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DindorukChristmanUndersaturated xsd type.")]
    public partial class DindorukChristmanUndersaturated : AbstractCorrelationViscosityUndersaturatedModel, INotifyPropertyChanged
    {

        /// <summary>
        /// ReservoirTemperature property
        /// </summary>
		[ComponentElement]
		[XmlElement("ReservoirTemperature")]
        public ThermodynamicTemperatureMeasure ReservoirTemperature {
            get {
                return ReservoirTemperatureField;
            } 
            set {
                ReservoirTemperatureField = value;
                NotifyPropertyChanged("ReservoirTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure ReservoirTemperatureField; 

        /// <summary>
        /// SolutionGasOilRatio property
        /// </summary>
		[ComponentElement]
		[XmlElement("SolutionGasOilRatio")]
        public VolumePerVolumeMeasure SolutionGasOilRatio {
            get {
                return SolutionGasOilRatioField;
            } 
            set {
                SolutionGasOilRatioField = value;
                NotifyPropertyChanged("SolutionGasOilRatio");
            }
        }

        private VolumePerVolumeMeasure SolutionGasOilRatioField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DeGhettoUndersaturated xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DeGhettoUndersaturated", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DeGhettoUndersaturated xsd type.")]
    public partial class DeGhettoUndersaturated : AbstractCorrelationViscosityUndersaturatedModel, INotifyPropertyChanged
    {

        /// <summary>
        /// ReservoirTemperature property
        /// </summary>
		[ComponentElement]
		[XmlElement("ReservoirTemperature")]
        public ThermodynamicTemperatureMeasure ReservoirTemperature {
            get {
                return ReservoirTemperatureField;
            } 
            set {
                ReservoirTemperatureField = value;
                NotifyPropertyChanged("ReservoirTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure ReservoirTemperatureField; 

        /// <summary>
        /// SolutionGasOilRatio property
        /// </summary>
		[ComponentElement]
		[XmlElement("SolutionGasOilRatio")]
        public VolumePerVolumeMeasure SolutionGasOilRatio {
            get {
                return SolutionGasOilRatioField;
            } 
            set {
                SolutionGasOilRatioField = value;
                NotifyPropertyChanged("SolutionGasOilRatio");
            }
        }

        private VolumePerVolumeMeasure SolutionGasOilRatioField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BerganAndSuttonUndersaturated xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BerganAndSuttonUndersaturated", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the BerganAndSuttonUndersaturated xsd type.")]
    public partial class BerganAndSuttonUndersaturated : AbstractCorrelationViscosityUndersaturatedModel, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractCorrelationViscosityBubblePointModel xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoBubblePoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BergmanSuttonBubblePoint))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractCorrelationViscosityBubblePointModel", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractCorrelationViscosityBubblePointModel xsd type.")]
    public abstract partial class AbstractCorrelationViscosityBubblePointModel : AbstractCorrelationViscosityModel, INotifyPropertyChanged
    {

        /// <summary>
        /// The dead oil viscosity input for the bubble point viscosity model.
        /// </summary>
		[Description("The dead oil viscosity input for the bubble point viscosity model.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("DeadOilViscosity")]
        public DynamicViscosityMeasure DeadOilViscosity {
            get {
                return DeadOilViscosityField;
            } 
            set {
                DeadOilViscosityField = value;
                NotifyPropertyChanged("DeadOilViscosity");
            }
        }

        private DynamicViscosityMeasure DeadOilViscosityField; 

        /// <summary>
        /// The bubble point viscosity output from the bubble point viscosity model.
        /// </summary>
		[Description("The bubble point viscosity output from the bubble point viscosity model.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("BubblePointOilViscosity")]
        public DynamicViscosityMeasure BubblePointOilViscosity {
            get {
                return BubblePointOilViscosityField;
            } 
            set {
                BubblePointOilViscosityField = value;
                NotifyPropertyChanged("BubblePointOilViscosity");
            }
        }

        private DynamicViscosityMeasure BubblePointOilViscosityField; 

        /// <summary>
        /// The solution gas oil ratio for the bubble point viscosity model.
        /// </summary>
		[Description("The solution gas oil ratio for the bubble point viscosity model.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("SolutionGasOilRate")]
        public DimensionlessMeasure SolutionGasOilRate {
            get {
                return SolutionGasOilRateField;
            } 
            set {
                SolutionGasOilRateField = value;
                NotifyPropertyChanged("SolutionGasOilRate");
            }
        }

        private DimensionlessMeasure SolutionGasOilRateField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StandingBubblePoint xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StandingBubblePoint", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the StandingBubblePoint xsd type.")]
    public partial class StandingBubblePoint : AbstractCorrelationViscosityBubblePointModel, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PetroskyFarshadBubblePoint xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PetroskyFarshadBubblePoint", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the PetroskyFarshadBubblePoint xsd type.")]
    public partial class PetroskyFarshadBubblePoint : AbstractCorrelationViscosityBubblePointModel, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DindorukChristmanBubblePoint xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DindorukChristmanBubblePoint", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DindorukChristmanBubblePoint xsd type.")]
    public partial class DindorukChristmanBubblePoint : AbstractCorrelationViscosityBubblePointModel, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DeGhettoBubblePoint xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DeGhettoBubblePoint", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DeGhettoBubblePoint xsd type.")]
    public partial class DeGhettoBubblePoint : AbstractCorrelationViscosityBubblePointModel, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BergmanSuttonBubblePoint xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BergmanSuttonBubblePoint", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the BergmanSuttonBubblePoint xsd type.")]
    public partial class BergmanSuttonBubblePoint : AbstractCorrelationViscosityBubblePointModel, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractCorrelationGasViscosityModel xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Lucas))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LondonoArcherBlasinggame))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LeeGonzalez))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CarrDempsey))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractCorrelationGasViscosityModel", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractCorrelationGasViscosityModel xsd type.")]
    public abstract partial class AbstractCorrelationGasViscosityModel : AbstractCorrelationViscosityModel, INotifyPropertyChanged
    {

        /// <summary>
        /// The gas viscosity output from the gas viscosity model.
        /// </summary>
		[Description("The gas viscosity output from the gas viscosity model.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("GasViscosity")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return GasViscosityField;
            } 
            set {
                GasViscosityField = value;
                NotifyPropertyChanged("GasViscosity");
            }
        }

        private DynamicViscosityMeasure GasViscosityField; 

        /// <summary>
        /// The reservoir temperature for the gas viscosity model.
        /// </summary>
		[Description("The reservoir temperature for the gas viscosity model.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("ReservoirTemperature")]
        public ThermodynamicTemperatureMeasure ReservoirTemperature {
            get {
                return ReservoirTemperatureField;
            } 
            set {
                ReservoirTemperatureField = value;
                NotifyPropertyChanged("ReservoirTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure ReservoirTemperatureField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Lucas xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Lucas", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the Lucas xsd type.")]
    public partial class Lucas : AbstractCorrelationGasViscosityModel, INotifyPropertyChanged
    {

        /// <summary>
        /// The molecular weight of the gas as an input to this viscosity correlation.
        /// </summary>
		[Description("The molecular weight of the gas as an input to this viscosity correlation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("GasMolarWeight")]
        public MolecularWeightMeasure GasMolarWeight {
            get {
                return GasMolarWeightField;
            } 
            set {
                GasMolarWeightField = value;
                NotifyPropertyChanged("GasMolarWeight");
            }
        }

        private MolecularWeightMeasure GasMolarWeightField; 

        /// <summary>
        /// The gas viscosity at 1 atm for the viscosity correlation.
        /// </summary>
		[Description("The gas viscosity at 1 atm for the viscosity correlation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("GasViscosityAt1Atm")]
        public DynamicViscosityMeasure GasViscosityAt1Atm {
            get {
                return GasViscosityAt1AtmField;
            } 
            set {
                GasViscosityAt1AtmField = value;
                NotifyPropertyChanged("GasViscosityAt1Atm");
            }
        }

        private DynamicViscosityMeasure GasViscosityAt1AtmField; 

        /// <summary>
        /// The pseudo critical temperature for the viscosity correlation.
        /// </summary>
		[Description("The pseudo critical temperature for the viscosity correlation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("PseudoCriticalTemperature")]
        public ThermodynamicTemperatureMeasure PseudoCriticalTemperature {
            get {
                return PseudoCriticalTemperatureField;
            } 
            set {
                PseudoCriticalTemperatureField = value;
                NotifyPropertyChanged("PseudoCriticalTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure PseudoCriticalTemperatureField; 

        /// <summary>
        /// The pseudo critical pressure for the viscosity correlation.
        /// </summary>
		[Description("The pseudo critical pressure for the viscosity correlation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PseudoCriticalPressure")]
        public PressureMeasure PseudoCriticalPressure {
            get {
                return PseudoCriticalPressureField;
            } 
            set {
                PseudoCriticalPressureField = value;
                NotifyPropertyChanged("PseudoCriticalPressure");
            }
        }

        private PressureMeasure PseudoCriticalPressureField; 

        /// <summary>
        /// The pseudo reduced temperature for the viscosity correlation.
        /// </summary>
		[Description("The pseudo reduced temperature for the viscosity correlation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperaturePerThermodynamicTemperatureMeasure")]
		[XmlElement("PseudoReducedTemperature")]
        public ThermodynamicTemperaturePerThermodynamicTemperatureMeasure PseudoReducedTemperature {
            get {
                return PseudoReducedTemperatureField;
            } 
            set {
                PseudoReducedTemperatureField = value;
                NotifyPropertyChanged("PseudoReducedTemperature");
            }
        }

        private ThermodynamicTemperaturePerThermodynamicTemperatureMeasure PseudoReducedTemperatureField; 

        /// <summary>
        /// The pseudo reduced pressure for the viscosity correlation.
        /// </summary>
		[Description("The pseudo reduced pressure for the viscosity correlation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressurePerPressureMeasure")]
		[XmlElement("PseudoReducedPressure")]
        public PressurePerPressureMeasure PseudoReducedPressure {
            get {
                return PseudoReducedPressureField;
            } 
            set {
                PseudoReducedPressureField = value;
                NotifyPropertyChanged("PseudoReducedPressure");
            }
        }

        private PressurePerPressureMeasure PseudoReducedPressureField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ThermodynamicTemperaturePerThermodynamicTemperatureMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ThermodynamicTemperaturePerThermodynamicTemperatureMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ThermodynamicTemperaturePerThermodynamicTemperatureMeasure xsd type.")]
    public partial class ThermodynamicTemperaturePerThermodynamicTemperatureMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperaturePerThermodynamicTemperatureMeasure class.
        /// </summary>
        public ThermodynamicTemperaturePerThermodynamicTemperatureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperaturePerThermodynamicTemperatureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ThermodynamicTemperaturePerThermodynamicTemperatureMeasure(double value, ThermodynamicTemperaturePerThermodynamicTemperatureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperaturePerThermodynamicTemperatureUom")]
        [XmlAttribute("uom")]
		
        public ThermodynamicTemperaturePerThermodynamicTemperatureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ThermodynamicTemperaturePerThermodynamicTemperatureUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PressurePerPressureMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PressurePerPressureMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PressurePerPressureMeasure xsd type.")]
    public partial class PressurePerPressureMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PressurePerPressureMeasure class.
        /// </summary>
        public PressurePerPressureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PressurePerPressureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PressurePerPressureMeasure(double value, PressurePerPressureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PressurePerPressureUom")]
        [XmlAttribute("uom")]
		
        public PressurePerPressureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PressurePerPressureUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LondonoArcherBlasinggame xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LondonoArcherBlasinggame", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the LondonoArcherBlasinggame xsd type.")]
    public partial class LondonoArcherBlasinggame : AbstractCorrelationGasViscosityModel, INotifyPropertyChanged
    {

        /// <summary>
        /// GasDensity property
        /// </summary>
		[Description("The gas density at the conditions for this viscosity correlation to be used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("GasDensity")]
        public MassPerVolumeMeasure GasDensity {
            get {
                return GasDensityField;
            } 
            set {
                GasDensityField = value;
                NotifyPropertyChanged("GasDensity");
            }
        }

        private MassPerVolumeMeasure GasDensityField; 

        /// <summary>
        /// GasViscosityAt1Atm property
        /// </summary>
		[Description("The gas viscosity at 1 atm for the viscosity correlation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("GasViscosityAt1Atm")]
        public DynamicViscosityMeasure GasViscosityAt1Atm {
            get {
                return GasViscosityAt1AtmField;
            } 
            set {
                GasViscosityAt1AtmField = value;
                NotifyPropertyChanged("GasViscosityAt1Atm");
            }
        }

        private DynamicViscosityMeasure GasViscosityAt1AtmField; 

        /// <summary>
        /// GasViscosityCoefficient1Atm property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PvtModelParameter")]
		[XmlElement("GasViscosityCoefficient1Atm")]
        public List<PvtModelParameter> GasViscosityCoefficient1Atm {
            get {
                return GasViscosityCoefficient1AtmField;
            } 
            set {
                GasViscosityCoefficient1AtmField = value;
                NotifyPropertyChanged("GasViscosityCoefficient1Atm");
            }
        }

         /// <summary>
         /// bool to indicate if GasViscosityCoefficient1Atm has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GasViscosityCoefficient1AtmSpecified
         {
             get {
             if(GasViscosityCoefficient1AtmField!=null)
                 return GasViscosityCoefficient1AtmField.Count>0?true:false;
             else return false;
             }
         }
        private List<PvtModelParameter> GasViscosityCoefficient1AtmField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LeeGonzalez xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LeeGonzalez", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the LeeGonzalez xsd type.")]
    public partial class LeeGonzalez : AbstractCorrelationGasViscosityModel, INotifyPropertyChanged
    {

        /// <summary>
        /// The molecular weight of the gas as an input to this viscosity correlation.
        /// </summary>
		[Description("The molecular weight of the gas as an input to this viscosity correlation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("GasMolarWeight")]
        public MolecularWeightMeasure GasMolarWeight {
            get {
                return GasMolarWeightField;
            } 
            set {
                GasMolarWeightField = value;
                NotifyPropertyChanged("GasMolarWeight");
            }
        }

        private MolecularWeightMeasure GasMolarWeightField; 

        /// <summary>
        /// The gas density at the conditions for this viscosity correlation to be used.
        /// </summary>
		[Description("The gas density at the conditions for this viscosity correlation to be used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("GasDensity")]
        public MassPerVolumeMeasure GasDensity {
            get {
                return GasDensityField;
            } 
            set {
                GasDensityField = value;
                NotifyPropertyChanged("GasDensity");
            }
        }

        private MassPerVolumeMeasure GasDensityField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CarrDempsey xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CarrDempsey", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the CarrDempsey xsd type.")]
    public partial class CarrDempsey : AbstractCorrelationGasViscosityModel, INotifyPropertyChanged
    {

        /// <summary>
        /// The molecular weight of the gas as an input to this viscosity correlation.
        /// </summary>
		[Description("The molecular weight of the gas as an input to this viscosity correlation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("GasMolarWeight")]
        public MolecularWeightMeasure GasMolarWeight {
            get {
                return GasMolarWeightField;
            } 
            set {
                GasMolarWeightField = value;
                NotifyPropertyChanged("GasMolarWeight");
            }
        }

        private MolecularWeightMeasure GasMolarWeightField; 

        /// <summary>
        /// The gas viscosity at 1 atm for the viscosity correlation.
        /// </summary>
		[Description("The gas viscosity at 1 atm for the viscosity correlation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("GasViscosityAt1Atm")]
        public DynamicViscosityMeasure GasViscosityAt1Atm {
            get {
                return GasViscosityAt1AtmField;
            } 
            set {
                GasViscosityAt1AtmField = value;
                NotifyPropertyChanged("GasViscosityAt1Atm");
            }
        }

        private DynamicViscosityMeasure GasViscosityAt1AtmField; 

        /// <summary>
        /// The pseudo reducedtemperature for the viscosity correlation.
        /// </summary>
		[Description("The pseudo reducedtemperature for the viscosity correlation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperaturePerThermodynamicTemperatureMeasure")]
		[XmlElement("PseudoReducedTemperature")]
        public ThermodynamicTemperaturePerThermodynamicTemperatureMeasure PseudoReducedTemperature {
            get {
                return PseudoReducedTemperatureField;
            } 
            set {
                PseudoReducedTemperatureField = value;
                NotifyPropertyChanged("PseudoReducedTemperature");
            }
        }

        private ThermodynamicTemperaturePerThermodynamicTemperatureMeasure PseudoReducedTemperatureField; 

        /// <summary>
        /// The pseudo reduced pressure for the viscosity correlation.
        /// </summary>
		[Description("The pseudo reduced pressure for the viscosity correlation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressurePerPressureMeasure")]
		[XmlElement("PseudoReducedPressure")]
        public PressurePerPressureMeasure PseudoReducedPressure {
            get {
                return PseudoReducedPressureField;
            } 
            set {
                PseudoReducedPressureField = value;
                NotifyPropertyChanged("PseudoReducedPressure");
            }
        }

        private PressurePerPressureMeasure PseudoReducedPressureField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractCorrelationViscosityDeadModel xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandingDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PetroskyFarshadDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DindorukChristmanDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeGhettoDead))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BerganSuttonDead))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractCorrelationViscosityDeadModel", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractCorrelationViscosityDeadModel xsd type.")]
    public abstract partial class AbstractCorrelationViscosityDeadModel : AbstractCorrelationViscosityModel, INotifyPropertyChanged
    {

        /// <summary>
        /// The dead oil viscosity output from the dead oil viscosity model.
        /// </summary>
		[Description("The dead oil viscosity output from the dead oil viscosity model.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("DeadOilViscosity")]
        public DynamicViscosityMeasure DeadOilViscosity {
            get {
                return DeadOilViscosityField;
            } 
            set {
                DeadOilViscosityField = value;
                NotifyPropertyChanged("DeadOilViscosity");
            }
        }

        private DynamicViscosityMeasure DeadOilViscosityField; 

        /// <summary>
        /// The reservoir temperature for the dead oil viscosity model.
        /// </summary>
		[Description("The reservoir temperature for the dead oil viscosity model.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("ReservoirTemperature")]
        public ThermodynamicTemperatureMeasure ReservoirTemperature {
            get {
                return ReservoirTemperatureField;
            } 
            set {
                ReservoirTemperatureField = value;
                NotifyPropertyChanged("ReservoirTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure ReservoirTemperatureField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StandingDead xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StandingDead", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the StandingDead xsd type.")]
    public partial class StandingDead : AbstractCorrelationViscosityDeadModel, INotifyPropertyChanged
    {

        /// <summary>
        /// OilGravityAtStockTank property
        /// </summary>
		[ComponentElement]
		[XmlElement("OilGravityAtStockTank")]
        public APIGravityMeasure OilGravityAtStockTank {
            get {
                return OilGravityAtStockTankField;
            } 
            set {
                OilGravityAtStockTankField = value;
                NotifyPropertyChanged("OilGravityAtStockTank");
            }
        }

        private APIGravityMeasure OilGravityAtStockTankField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PetroskyFarshadDead xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PetroskyFarshadDead", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the PetroskyFarshadDead xsd type.")]
    public partial class PetroskyFarshadDead : AbstractCorrelationViscosityDeadModel, INotifyPropertyChanged
    {

        /// <summary>
        /// OilGravityAtStockTank property
        /// </summary>
		[ComponentElement]
		[XmlElement("OilGravityAtStockTank")]
        public APIGravityMeasure OilGravityAtStockTank {
            get {
                return OilGravityAtStockTankField;
            } 
            set {
                OilGravityAtStockTankField = value;
                NotifyPropertyChanged("OilGravityAtStockTank");
            }
        }

        private APIGravityMeasure OilGravityAtStockTankField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DindorukChristmanDead xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DindorukChristmanDead", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DindorukChristmanDead xsd type.")]
    public partial class DindorukChristmanDead : AbstractCorrelationViscosityDeadModel, INotifyPropertyChanged
    {

        /// <summary>
        /// OilGravityAtStockTank property
        /// </summary>
		[ComponentElement]
		[XmlElement("OilGravityAtStockTank")]
        public APIGravityMeasure OilGravityAtStockTank {
            get {
                return OilGravityAtStockTankField;
            } 
            set {
                OilGravityAtStockTankField = value;
                NotifyPropertyChanged("OilGravityAtStockTank");
            }
        }

        private APIGravityMeasure OilGravityAtStockTankField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DeGhettoDead xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DeGhettoDead", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DeGhettoDead xsd type.")]
    public partial class DeGhettoDead : AbstractCorrelationViscosityDeadModel, INotifyPropertyChanged
    {

        /// <summary>
        /// OilAPIAtStockTank property
        /// </summary>
		[ComponentElement]
		[XmlElement("OilAPIAtStockTank")]
        public APIGravityMeasure OilAPIAtStockTank {
            get {
                return OilAPIAtStockTankField;
            } 
            set {
                OilAPIAtStockTankField = value;
                NotifyPropertyChanged("OilAPIAtStockTank");
            }
        }

        private APIGravityMeasure OilAPIAtStockTankField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BerganSuttonDead xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BerganSuttonDead", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the BerganSuttonDead xsd type.")]
    public partial class BerganSuttonDead : AbstractCorrelationViscosityDeadModel, INotifyPropertyChanged
    {

        /// <summary>
        /// DeadOilViscosityAt100F property
        /// </summary>
		[ComponentElement]
		[XmlElement("DeadOilViscosityAt100F")]
        public DynamicViscosityMeasure DeadOilViscosityAt100F {
            get {
                return DeadOilViscosityAt100FField;
            } 
            set {
                DeadOilViscosityAt100FField = value;
                NotifyPropertyChanged("DeadOilViscosityAt100F");
            }
        }

        private DynamicViscosityMeasure DeadOilViscosityAt100FField; 

        /// <summary>
        /// DeadOilViscosityAt210F property
        /// </summary>
		[ComponentElement]
		[XmlElement("DeadOilViscosityAt210F")]
        public DynamicViscosityMeasure DeadOilViscosityAt210F {
            get {
                return DeadOilViscosityAt210FField;
            } 
            set {
                DeadOilViscosityAt210FField = value;
                NotifyPropertyChanged("DeadOilViscosityAt210F");
            }
        }

        private DynamicViscosityMeasure DeadOilViscosityAt210FField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractCompositionalModel xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CompositionalThermalModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCompositionalViscosityModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LohrenzBrayClarkCorrelation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FrictionTheory))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CSPedersen87))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CSPedersen84))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCompositionalEoSModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Srk_EOS))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PengRobinson78_EOS))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PengRobinson76_EOS))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractCompositionalModel", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractCompositionalModel xsd type.")]
    public abstract partial class AbstractCompositionalModel : AbstractPvtModel, INotifyPropertyChanged
    {

        /// <summary>
        /// MixingRule property
        /// </summary>
		[Description("The mixing rule which was applied in the compositional model. Enum. See mixing rule.")]
        [EnergisticsDataTypeAttribute(DataType = "MixingRule")]
		[XmlElement("MixingRule")]
        public MixingRule? MixingRule {
            get {
                return MixingRuleField;
            } 
            set {
                MixingRuleField = value;
                 this.MixingRuleSpecified = true;
                NotifyPropertyChanged("MixingRule");
            }
        }

        private MixingRule? MixingRuleField; 

        /// <summary>
        /// MixingRuleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MixingRuleSpecified {
            get {
                return MixingRuleSpecifiedField;
            } 
            set {
                MixingRuleSpecifiedField = value;
                NotifyPropertyChanged("MixingRuleSpecified");
            }
        }

        private bool MixingRuleSpecifiedField; 

        /// <summary>
        /// ComponentPropertySet property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ComponentPropertySet")]
		[XmlArrayItem("FluidComponentProperty")]
        [XmlArray("ComponentPropertySet")]
        public List<FluidComponentProperty> ComponentPropertySet {
            get {
                return ComponentPropertySetField;
            } 
            set {
                ComponentPropertySetField = value;
                NotifyPropertyChanged("ComponentPropertySet");
            }
        }

         /// <summary>
         /// bool to indicate if ComponentPropertySet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ComponentPropertySetSpecified
         {
             get {
             if(ComponentPropertySetField!=null)
                 return ComponentPropertySetField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidComponentProperty> ComponentPropertySetField; 

        /// <summary>
        /// BinaryInteractionCoefficientSet property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "BinaryInteractionCoefficientSet")]
		[XmlArrayItem("BinaryInteractionCoefficient")]
        [XmlArray("BinaryInteractionCoefficientSet")]
        public List<BinaryInteractionCoefficient> BinaryInteractionCoefficientSet {
            get {
                return BinaryInteractionCoefficientSetField;
            } 
            set {
                BinaryInteractionCoefficientSetField = value;
                NotifyPropertyChanged("BinaryInteractionCoefficientSet");
            }
        }

         /// <summary>
         /// bool to indicate if BinaryInteractionCoefficientSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BinaryInteractionCoefficientSetSpecified
         {
             get {
             if(BinaryInteractionCoefficientSetField!=null)
                 return BinaryInteractionCoefficientSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<BinaryInteractionCoefficient> BinaryInteractionCoefficientSetField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidComponentProperty xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidComponentProperty", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidComponentProperty xsd type.")]
    public partial class FluidComponentProperty : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The critical pressure for this fluid component.
        /// </summary>
		[Description("The critical pressure for this fluid component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("CriticalPressure")]
        public PressureMeasure CriticalPressure {
            get {
                return CriticalPressureField;
            } 
            set {
                CriticalPressureField = value;
                NotifyPropertyChanged("CriticalPressure");
            }
        }

        private PressureMeasure CriticalPressureField; 

        /// <summary>
        /// The critical temperature for this fluid component.
        /// </summary>
		[Description("The critical temperature for this fluid component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("CriticalTemperature")]
        public ThermodynamicTemperatureMeasure CriticalTemperature {
            get {
                return CriticalTemperatureField;
            } 
            set {
                CriticalTemperatureField = value;
                NotifyPropertyChanged("CriticalTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure CriticalTemperatureField; 

        /// <summary>
        /// The critical viscosity for this fluid component.
        /// </summary>
		[Description("The critical viscosity for this fluid component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("CriticalViscosity")]
        public DynamicViscosityMeasure CriticalViscosity {
            get {
                return CriticalViscosityField;
            } 
            set {
                CriticalViscosityField = value;
                NotifyPropertyChanged("CriticalViscosity");
            }
        }

        private DynamicViscosityMeasure CriticalViscosityField; 

        /// <summary>
        /// The compact volume for this fluid component.
        /// </summary>
		[Description("The compact volume for this fluid component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("CompactVolume")]
        public VolumeMeasure CompactVolume {
            get {
                return CompactVolumeField;
            } 
            set {
                CompactVolumeField = value;
                NotifyPropertyChanged("CompactVolume");
            }
        }

        private VolumeMeasure CompactVolumeField; 

        /// <summary>
        /// The critical volume for this fluid component.
        /// </summary>
		[Description("The critical volume for this fluid component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolarVolumeMeasure")]
		[XmlElement("CriticalVolume")]
        public MolarVolumeMeasure CriticalVolume {
            get {
                return CriticalVolumeField;
            } 
            set {
                CriticalVolumeField = value;
                NotifyPropertyChanged("CriticalVolume");
            }
        }

        private MolarVolumeMeasure CriticalVolumeField; 

        /// <summary>
        /// The acentric factor for this fluid component.
        /// </summary>
		[Description("The acentric factor for this fluid component.")]
        [EnergisticsDataTypeAttribute(DataType = "decimal")]
		[XmlElement("AcentricFactor")]
        public decimal? AcentricFactor {
            get {
                return AcentricFactorField;
            } 
            set {
                AcentricFactorField = value;
                 this.AcentricFactorSpecified = true;
                NotifyPropertyChanged("AcentricFactor");
            }
        }

        private decimal? AcentricFactorField; 

        /// <summary>
        /// AcentricFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AcentricFactorSpecified {
            get {
                return AcentricFactorSpecifiedField;
            } 
            set {
                AcentricFactorSpecifiedField = value;
                NotifyPropertyChanged("AcentricFactorSpecified");
            }
        }

        private bool AcentricFactorSpecifiedField; 

        /// <summary>
        /// The mass density for this fluid component.
        /// </summary>
		[Description("The mass density for this fluid component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("MassDensity")]
        public MassPerVolumeMeasure MassDensity {
            get {
                return MassDensityField;
            } 
            set {
                MassDensityField = value;
                NotifyPropertyChanged("MassDensity");
            }
        }

        private MassPerVolumeMeasure MassDensityField; 

        /// <summary>
        /// The omega A for this fluid component.
        /// </summary>
		[Description("The omega A for this fluid component.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("OmegaA")]
        public double? OmegaA {
            get {
                return OmegaAField;
            } 
            set {
                OmegaAField = value;
                 this.OmegaASpecified = true;
                NotifyPropertyChanged("OmegaA");
            }
        }

        private double? OmegaAField; 

        /// <summary>
        /// OmegaASpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OmegaASpecified {
            get {
                return OmegaASpecifiedField;
            } 
            set {
                OmegaASpecifiedField = value;
                NotifyPropertyChanged("OmegaASpecified");
            }
        }

        private bool OmegaASpecifiedField; 

        /// <summary>
        /// The omega B for this fluid component.
        /// </summary>
		[Description("The omega B for this fluid component.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("OmegaB")]
        public double? OmegaB {
            get {
                return OmegaBField;
            } 
            set {
                OmegaBField = value;
                 this.OmegaBSpecified = true;
                NotifyPropertyChanged("OmegaB");
            }
        }

        private double? OmegaBField; 

        /// <summary>
        /// OmegaBSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OmegaBSpecified {
            get {
                return OmegaBSpecifiedField;
            } 
            set {
                OmegaBSpecifiedField = value;
                NotifyPropertyChanged("OmegaBSpecified");
            }
        }

        private bool OmegaBSpecifiedField; 

        /// <summary>
        /// The volume shift parameter for this fluid component.
        /// </summary>
		[Description("The volume shift parameter for this fluid component.")]
        [EnergisticsDataTypeAttribute(DataType = "decimal")]
		[XmlElement("VolumeShiftParameter")]
        public decimal? VolumeShiftParameter {
            get {
                return VolumeShiftParameterField;
            } 
            set {
                VolumeShiftParameterField = value;
                 this.VolumeShiftParameterSpecified = true;
                NotifyPropertyChanged("VolumeShiftParameter");
            }
        }

        private decimal? VolumeShiftParameterField; 

        /// <summary>
        /// VolumeShiftParameterSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool VolumeShiftParameterSpecified {
            get {
                return VolumeShiftParameterSpecifiedField;
            } 
            set {
                VolumeShiftParameterSpecifiedField = value;
                NotifyPropertyChanged("VolumeShiftParameterSpecified");
            }
        }

        private bool VolumeShiftParameterSpecifiedField; 

        /// <summary>
        /// The partial molar density for this fluid component.
        /// </summary>
		[Description("The partial molar density for this fluid component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("PartialMolarDensity")]
        public MassPerVolumeMeasure PartialMolarDensity {
            get {
                return PartialMolarDensityField;
            } 
            set {
                PartialMolarDensityField = value;
                NotifyPropertyChanged("PartialMolarDensity");
            }
        }

        private MassPerVolumeMeasure PartialMolarDensityField; 

        /// <summary>
        /// The parachor for this fluid component.
        /// </summary>
		[Description("The parachor for this fluid component.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Parachor")]
        public double? Parachor {
            get {
                return ParachorField;
            } 
            set {
                ParachorField = value;
                 this.ParachorSpecified = true;
                NotifyPropertyChanged("Parachor");
            }
        }

        private double? ParachorField; 

        /// <summary>
        /// ParachorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ParachorSpecified {
            get {
                return ParachorSpecifiedField;
            } 
            set {
                ParachorSpecifiedField = value;
                NotifyPropertyChanged("ParachorSpecified");
            }
        }

        private bool ParachorSpecifiedField; 

        /// <summary>
        /// The partial molar volume for this fluid component.
        /// </summary>
		[Description("The partial molar volume for this fluid component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolarVolumeMeasure")]
		[XmlElement("PartialMolarVolume")]
        public MolarVolumeMeasure PartialMolarVolume {
            get {
                return PartialMolarVolumeField;
            } 
            set {
                PartialMolarVolumeField = value;
                NotifyPropertyChanged("PartialMolarVolume");
            }
        }

        private MolarVolumeMeasure PartialMolarVolumeField; 

        /// <summary>
        /// The reference density for this fluid component.
        /// </summary>
		[Description("The reference density for this fluid component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("ReferenceDensityZJ")]
        public MassPerVolumeMeasure ReferenceDensityZJ {
            get {
                return ReferenceDensityZJField;
            } 
            set {
                ReferenceDensityZJField = value;
                NotifyPropertyChanged("ReferenceDensityZJ");
            }
        }

        private MassPerVolumeMeasure ReferenceDensityZJField; 

        /// <summary>
        /// The reference gravity for this fluid component.
        /// </summary>
		[Description("The reference gravity for this fluid component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "APIGravityMeasure")]
		[XmlElement("ReferenceGravityZJ")]
        public APIGravityMeasure ReferenceGravityZJ {
            get {
                return ReferenceGravityZJField;
            } 
            set {
                ReferenceGravityZJField = value;
                NotifyPropertyChanged("ReferenceGravityZJ");
            }
        }

        private APIGravityMeasure ReferenceGravityZJField; 

        /// <summary>
        /// The reference temperature for this fluid component.
        /// </summary>
		[Description("The reference temperature for this fluid component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("ReferenceTemperatureZJ")]
        public ThermodynamicTemperatureMeasure ReferenceTemperatureZJ {
            get {
                return ReferenceTemperatureZJField;
            } 
            set {
                ReferenceTemperatureZJField = value;
                NotifyPropertyChanged("ReferenceTemperatureZJ");
            }
        }

        private ThermodynamicTemperatureMeasure ReferenceTemperatureZJField; 

        /// <summary>
        /// The viscous compressibility for this fluid component.
        /// </summary>
		[Description("The viscous compressibility for this fluid component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ReciprocalPressureMeasure")]
		[XmlElement("ViscousCompressibility")]
        public ReciprocalPressureMeasure ViscousCompressibility {
            get {
                return ViscousCompressibilityField;
            } 
            set {
                ViscousCompressibilityField = value;
                NotifyPropertyChanged("ViscousCompressibility");
            }
        }

        private ReciprocalPressureMeasure ViscousCompressibilityField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

		/// <summary>
        /// The reference to the fluid component to which these properties apply.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The reference to the fluid component to which these properties apply.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("fluidComponentReference")]
		
        public string FluidComponentReference {
            get {
                return fluidComponentReferenceField;
            } 
            set {
                fluidComponentReferenceField = value;
                NotifyPropertyChanged("FluidComponentReference");
            }
        }

        private string fluidComponentReferenceField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MolarVolumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MolarVolumeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MolarVolumeMeasure xsd type.")]
    public partial class MolarVolumeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MolarVolumeMeasure class.
        /// </summary>
        public MolarVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MolarVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MolarVolumeMeasure(double value, MolarVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MolarVolumeUom")]
        [XmlAttribute("uom")]
		
        public MolarVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MolarVolumeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BinaryInteractionCoefficient xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BinaryInteractionCoefficient", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the BinaryInteractionCoefficient xsd type.")]
    public partial class BinaryInteractionCoefficient : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the BinaryInteractionCoefficient class.
        /// </summary>
        public BinaryInteractionCoefficient() {}

        /// <summary>
        /// Initializes a new instance of the BinaryInteractionCoefficient class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public BinaryInteractionCoefficient(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// Reference to the first fluid component for this binary interaction coefficient.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Reference to the first fluid component for this binary interaction coefficient.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("fluidComponent1Reference")]
		
        public string FluidComponent1Reference {
            get {
                return fluidComponent1ReferenceField;
            } 
            set {
                fluidComponent1ReferenceField = value;
                NotifyPropertyChanged("FluidComponent1Reference");
            }
        }

        private string fluidComponent1ReferenceField; 

		/// <summary>
        /// Reference to the second fluid component for this binary interaction coefficient.
        /// </summary>
		[StringLength(64)]
        [Description("Reference to the second fluid component for this binary interaction coefficient.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("fluidComponent2Reference")]
		
        public string FluidComponent2Reference {
            get {
                return fluidComponent2ReferenceField;
            } 
            set {
                fluidComponent2ReferenceField = value;
                NotifyPropertyChanged("FluidComponent2Reference");
            }
        }

        private string fluidComponent2ReferenceField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CompositionalThermalModel xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CompositionalThermalModel", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the CompositionalThermalModel xsd type.")]
    public partial class CompositionalThermalModel : AbstractCompositionalModel, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractCompositionalViscosityModel xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LohrenzBrayClarkCorrelation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FrictionTheory))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CSPedersen87))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CSPedersen84))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractCompositionalViscosityModel", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractCompositionalViscosityModel xsd type.")]
    public abstract partial class AbstractCompositionalViscosityModel : AbstractCompositionalModel, INotifyPropertyChanged
    {

		/// <summary>
        /// phase property
        /// </summary>
		[Required]
        [Description("The phase the compositional viscosity model applies to.")]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicPhase")]
        [XmlAttribute("phase")]
		
        public ThermodynamicPhase Phase {
            get {
                return phaseField;
            } 
            set {
                phaseField = value;
                NotifyPropertyChanged("Phase");
            }
        }

        private ThermodynamicPhase phaseField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LohrenzBrayClarkCorrelation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LohrenzBrayClarkCorrelation", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the LohrenzBrayClarkCorrelation xsd type.")]
    public partial class LohrenzBrayClarkCorrelation : AbstractCompositionalViscosityModel, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FrictionTheory xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FrictionTheory", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FrictionTheory xsd type.")]
    public partial class FrictionTheory : AbstractCompositionalViscosityModel, INotifyPropertyChanged
    {

        /// <summary>
        /// PrsvParameter property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PrsvParameter")]
		[XmlElement("PrsvParameter")]
        public List<PrsvParameter> PrsvParameter {
            get {
                return PrsvParameterField;
            } 
            set {
                PrsvParameterField = value;
                NotifyPropertyChanged("PrsvParameter");
            }
        }

         /// <summary>
         /// bool to indicate if PrsvParameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PrsvParameterSpecified
         {
             get {
             if(PrsvParameterField!=null)
                 return PrsvParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<PrsvParameter> PrsvParameterField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PrsvParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PrsvParameter", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the PrsvParameter xsd type.")]
    public partial class PrsvParameter : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The parameter a1.
        /// </summary>
		[Required]
        [Description("The parameter a1.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("a1")]
        public double? A1 {
            get {
                return a1Field;
            } 
            set {
                a1Field = value;
                NotifyPropertyChanged("A1");
            }
        }

        private double? a1Field; 

        /// <summary>
        /// The parameter a2.
        /// </summary>
		[Required]
        [Description("The parameter a2.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("a2")]
        public double? A2 {
            get {
                return a2Field;
            } 
            set {
                a2Field = value;
                NotifyPropertyChanged("A2");
            }
        }

        private double? a2Field; 

        /// <summary>
        /// The parameter b1.
        /// </summary>
		[Required]
        [Description("The parameter b1.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("b1")]
        public double? B1 {
            get {
                return b1Field;
            } 
            set {
                b1Field = value;
                NotifyPropertyChanged("B1");
            }
        }

        private double? b1Field; 

        /// <summary>
        /// The parameter b2.
        /// </summary>
		[Required]
        [Description("The parameter b2.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("b2")]
        public double? B2 {
            get {
                return b2Field;
            } 
            set {
                b2Field = value;
                NotifyPropertyChanged("B2");
            }
        }

        private double? b2Field; 

        /// <summary>
        /// The parameter c2.
        /// </summary>
		[Required]
        [Description("The parameter c2.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("c2")]
        public double? C2 {
            get {
                return c2Field;
            } 
            set {
                c2Field = value;
                NotifyPropertyChanged("C2");
            }
        }

        private double? c2Field; 

		/// <summary>
        /// The fluid component to which this PRSV parameter set applies.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The fluid component to which this PRSV parameter set applies.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("fluidComponentReference")]
		
        public string FluidComponentReference {
            get {
                return fluidComponentReferenceField;
            } 
            set {
                fluidComponentReferenceField = value;
                NotifyPropertyChanged("FluidComponentReference");
            }
        }

        private string fluidComponentReferenceField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CSPedersen87 xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CSPedersen87", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the CSPedersen87 xsd type.")]
    public partial class CSPedersen87 : AbstractCompositionalViscosityModel, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CSPedersen84 xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CSPedersen84", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the CSPedersen84 xsd type.")]
    public partial class CSPedersen84 : AbstractCompositionalViscosityModel, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractCompositionalEoSModel xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Srk_EOS))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PengRobinson78_EOS))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PengRobinson76_EOS))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractCompositionalEoSModel", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractCompositionalEoSModel xsd type.")]
    public abstract partial class AbstractCompositionalEoSModel : AbstractCompositionalModel, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// PengRobinson76_EOS.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Srk_EOS", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("PengRobinson76_EOS.")]
    public partial class Srk_EOS : AbstractCompositionalEoSModel, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// PengRobinson76_EOS.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PengRobinson78_EOS", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("PengRobinson76_EOS.")]
    public partial class PengRobinson78_EOS : AbstractCompositionalEoSModel, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// PengRobinson76_EOS.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PengRobinson76_EOS", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("PengRobinson76_EOS.")]
    public partial class PengRobinson76_EOS : AbstractCompositionalEoSModel, INotifyPropertyChanged
    {


    } //here
    }

    /// <summary>
    /// This class represents the FluidSample xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the FluidSample xsd type.")]
    public partial class FluidSample : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// SampleKind property
        /// </summary>
		[Description("The kind of sample. Enum.  See fluid sample kind.")]
        [EnergisticsDataTypeAttribute(DataType = "FluidSampleKind")]
		[XmlElement("SampleKind")]
        public FluidSampleKind? SampleKind {
            get {
                return SampleKindField;
            } 
            set {
                SampleKindField = value;
                 this.SampleKindSpecified = true;
                NotifyPropertyChanged("SampleKind");
            }
        }

        private FluidSampleKind? SampleKindField; 

        /// <summary>
        /// SampleKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SampleKindSpecified {
            get {
                return SampleKindSpecifiedField;
            } 
            set {
                SampleKindSpecifiedField = value;
                NotifyPropertyChanged("SampleKindSpecified");
            }
        }

        private bool SampleKindSpecifiedField; 

        /// <summary>
        /// RockFluidUnitFeatureReference property
        /// </summary>
		[Description("Reference to a RockFluidUnitFeature (a RESQML feature).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("RockFluidUnitFeatureReference")]
        public DataObjectReference RockFluidUnitFeatureReference {
            get {
                return RockFluidUnitFeatureReferenceField;
            } 
            set {
                RockFluidUnitFeatureReferenceField = value;
                NotifyPropertyChanged("RockFluidUnitFeatureReference");
            }
        }

        private DataObjectReference RockFluidUnitFeatureReferenceField; 

        /// <summary>
        /// Representative property
        /// </summary>
		[Description("Boolean to state whether the sample is representative or not.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Representative")]
        public bool? Representative {
            get {
                return RepresentativeField;
            } 
            set {
                RepresentativeField = value;
                 this.RepresentativeSpecified = true;
                NotifyPropertyChanged("Representative");
            }
        }

        private bool? RepresentativeField; 

        /// <summary>
        /// RepresentativeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RepresentativeSpecified {
            get {
                return RepresentativeSpecifiedField;
            } 
            set {
                RepresentativeSpecifiedField = value;
                NotifyPropertyChanged("RepresentativeSpecified");
            }
        }

        private bool RepresentativeSpecifiedField; 

        /// <summary>
        /// SampleDisposition property
        /// </summary>
		[StringLength(64)]
        [Description("The sample disposition, if any.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SampleDisposition")]
        public string SampleDisposition {
            get {
                return SampleDispositionField;
            } 
            set {
                SampleDispositionField = value;
                NotifyPropertyChanged("SampleDisposition");
            }
        }

        private string SampleDispositionField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// FluidSystemReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("FluidSystemReference")]
        public DataObjectReference FluidSystemReference {
            get {
                return FluidSystemReferenceField;
            } 
            set {
                FluidSystemReferenceField = value;
                NotifyPropertyChanged("FluidSystemReference");
            }
        }

        private DataObjectReference FluidSystemReferenceField; 

        /// <summary>
        /// FluidSampleChainofCustodyEvent property
        /// </summary>
		[Description("chain of chustody")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidSampleChainofCustodyEvent")]
		[XmlElement("FluidSampleChainofCustodyEvent")]
        public List<FluidSampleChainofCustodyEvent> FluidSampleChainofCustodyEvent {
            get {
                return FluidSampleChainofCustodyEventField;
            } 
            set {
                FluidSampleChainofCustodyEventField = value;
                NotifyPropertyChanged("FluidSampleChainofCustodyEvent");
            }
        }

         /// <summary>
         /// bool to indicate if FluidSampleChainofCustodyEvent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidSampleChainofCustodyEventSpecified
         {
             get {
             if(FluidSampleChainofCustodyEventField!=null)
                 return FluidSampleChainofCustodyEventField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidSampleChainofCustodyEvent> FluidSampleChainofCustodyEventField; 

        /// <summary>
        /// FluidSampleComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidSampleComposition")]
		[XmlElement("FluidSampleComposition")]
        public List<FluidSampleComposition> FluidSampleComposition {
            get {
                return FluidSampleCompositionField;
            } 
            set {
                FluidSampleCompositionField = value;
                NotifyPropertyChanged("FluidSampleComposition");
            }
        }

         /// <summary>
         /// bool to indicate if FluidSampleComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidSampleCompositionSpecified
         {
             get {
             if(FluidSampleCompositionField!=null)
                 return FluidSampleCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidSampleComposition> FluidSampleCompositionField; 

        /// <summary>
        /// SampleRecombinationRequirement property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SampleRecombinationRequirement")]
		[XmlElement("SampleRecombinationRequirement")]
        public SampleRecombinationRequirement SampleRecombinationRequirement {
            get {
                return SampleRecombinationRequirementField;
            } 
            set {
                SampleRecombinationRequirementField = value;
                NotifyPropertyChanged("SampleRecombinationRequirement");
            }
        }

        private SampleRecombinationRequirement SampleRecombinationRequirementField; 

        /// <summary>
        /// FluidSampleAcquisitionJobSource property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidSampleAcquisitionJobSource")]
		[XmlElement("FluidSampleAcquisitionJobSource")]
        public FluidSampleAcquisitionJobSource FluidSampleAcquisitionJobSource {
            get {
                return FluidSampleAcquisitionJobSourceField;
            } 
            set {
                FluidSampleAcquisitionJobSourceField = value;
                NotifyPropertyChanged("FluidSampleAcquisitionJobSource");
            }
        }

        private FluidSampleAcquisitionJobSource FluidSampleAcquisitionJobSourceField; 

        /// <summary>
        /// OriginalSampleContainerReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("OriginalSampleContainerReference")]
        public DataObjectReference OriginalSampleContainerReference {
            get {
                return OriginalSampleContainerReferenceField;
            } 
            set {
                OriginalSampleContainerReferenceField = value;
                NotifyPropertyChanged("OriginalSampleContainerReference");
            }
        }

        private DataObjectReference OriginalSampleContainerReferenceField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidSampleChainofCustodyEvent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidSampleChainofCustodyEvent", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidSampleChainofCustodyEvent xsd type.")]
    public partial class FluidSampleChainofCustodyEvent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TransferVolume property
        /// </summary>
		[Description("The transfer volume for this chain of custody event.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("TransferVolume")]
        public VolumeMeasure TransferVolume {
            get {
                return TransferVolumeField;
            } 
            set {
                TransferVolumeField = value;
                NotifyPropertyChanged("TransferVolume");
            }
        }

        private VolumeMeasure TransferVolumeField; 

        /// <summary>
        /// TransferPressure property
        /// </summary>
		[Description("The transfer pressure for this chain of custody event.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("TransferPressure")]
        public AbstractPressureValue TransferPressure {
            get {
                return TransferPressureField;
            } 
            set {
                TransferPressureField = value;
                NotifyPropertyChanged("TransferPressure");
            }
        }

        private AbstractPressureValue TransferPressureField; 

        /// <summary>
        /// TransferTemperature property
        /// </summary>
		[Description("The transfer temperature for this chain of custody event.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TransferTemperature")]
        public ThermodynamicTemperatureMeasure TransferTemperature {
            get {
                return TransferTemperatureField;
            } 
            set {
                TransferTemperatureField = value;
                NotifyPropertyChanged("TransferTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure TransferTemperatureField; 

        /// <summary>
        /// SampleIntegrity property
        /// </summary>
		[Required]
        [Description("The sample integrity for this chain of custody event. Enum. See sample quality.")]
        [EnergisticsDataTypeAttribute(DataType = "SampleQuality")]
		[XmlElement("SampleIntegrity")]
        public SampleQuality? SampleIntegrity {
            get {
                return SampleIntegrityField;
            } 
            set {
                SampleIntegrityField = value;
                 this.SampleIntegritySpecified = true;
                NotifyPropertyChanged("SampleIntegrity");
            }
        }

        
        private bool SampleIntegritySpecifiedField = false;
        
        /// <summary>
        /// SampleIntegritySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SampleIntegritySpecified {
            get {
                return SampleIntegritySpecifiedField;
            } 
            set {
                SampleIntegritySpecifiedField = value;
                NotifyPropertyChanged("SampleIntegritySpecified");
            }
        }
        
        private SampleQuality? SampleIntegrityField; 

        /// <summary>
        /// RemainingVolume property
        /// </summary>
		[Description("The remaining volume of sample for this chain of custody event.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("RemainingVolume")]
        public VolumeMeasure RemainingVolume {
            get {
                return RemainingVolumeField;
            } 
            set {
                RemainingVolumeField = value;
                NotifyPropertyChanged("RemainingVolume");
            }
        }

        private VolumeMeasure RemainingVolumeField; 

        /// <summary>
        /// LostVolume property
        /// </summary>
		[Description("The lost volume of sample for this chain of custody event.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("LostVolume")]
        public VolumeMeasure LostVolume {
            get {
                return LostVolumeField;
            } 
            set {
                LostVolumeField = value;
                NotifyPropertyChanged("LostVolume");
            }
        }

        private VolumeMeasure LostVolumeField; 

        /// <summary>
        /// CustodyDate property
        /// </summary>
		[Description("The date for this chain of custody event.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("CustodyDate", DataType="date")]
        public DateTime? CustodyDate {
            get {
                return CustodyDateField;
            } 
            set {
                CustodyDateField = value;
                 this.CustodyDateSpecified = true;
                NotifyPropertyChanged("CustodyDate");
            }
        }

        private DateTime? CustodyDateField; 

        /// <summary>
        /// CustodyDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CustodyDateSpecified {
            get {
                return CustodyDateSpecifiedField;
            } 
            set {
                CustodyDateSpecifiedField = value;
                NotifyPropertyChanged("CustodyDateSpecified");
            }
        }

        private bool CustodyDateSpecifiedField; 

        /// <summary>
        /// CustodyAction property
        /// </summary>
		[Description("The action for this chain of custody event. Enum. See sample action.")]
        [EnergisticsDataTypeAttribute(DataType = "SampleAction")]
		[XmlElement("CustodyAction")]
        public SampleAction? CustodyAction {
            get {
                return CustodyActionField;
            } 
            set {
                CustodyActionField = value;
                 this.CustodyActionSpecified = true;
                NotifyPropertyChanged("CustodyAction");
            }
        }

        private SampleAction? CustodyActionField; 

        /// <summary>
        /// CustodyActionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CustodyActionSpecified {
            get {
                return CustodyActionSpecifiedField;
            } 
            set {
                CustodyActionSpecifiedField = value;
                NotifyPropertyChanged("CustodyActionSpecified");
            }
        }

        private bool CustodyActionSpecifiedField; 

        /// <summary>
        /// Custodian property
        /// </summary>
		[StringLength(64)]
        [Description("The custodian for this chain of custody event.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Custodian")]
        public string Custodian {
            get {
                return CustodianField;
            } 
            set {
                CustodianField = value;
                NotifyPropertyChanged("Custodian");
            }
        }

        private string CustodianField; 

        /// <summary>
        /// ContainerLocation property
        /// </summary>
		[StringLength(64)]
        [Description("The container location for this chain of custody event.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ContainerLocation")]
        public string ContainerLocation {
            get {
                return ContainerLocationField;
            } 
            set {
                ContainerLocationField = value;
                NotifyPropertyChanged("ContainerLocation");
            }
        }

        private string ContainerLocationField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// PrevContainer property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("PrevContainer")]
        public DataObjectReference PrevContainer {
            get {
                return PrevContainerField;
            } 
            set {
                PrevContainerField = value;
                NotifyPropertyChanged("PrevContainer");
            }
        }

        private DataObjectReference PrevContainerField; 

        /// <summary>
        /// CurrentContainer property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("CurrentContainer")]
        public DataObjectReference CurrentContainer {
            get {
                return CurrentContainerField;
            } 
            set {
                CurrentContainerField = value;
                NotifyPropertyChanged("CurrentContainer");
            }
        }

        private DataObjectReference CurrentContainerField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidSampleComposition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidSampleComposition", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidSampleComposition xsd type.")]
    public partial class FluidSampleComposition : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// VolumeFraction property
        /// </summary>
		[Description("The volume fraction of this parent sample within this combined sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("VolumeFraction")]
        public VolumePerVolumeMeasure VolumeFraction {
            get {
                return VolumeFractionField;
            } 
            set {
                VolumeFractionField = value;
                NotifyPropertyChanged("VolumeFraction");
            }
        }

        private VolumePerVolumeMeasure VolumeFractionField; 

        /// <summary>
        /// MassFraction property
        /// </summary>
		[Description("The mass fraction of this parent sample within this combined sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("MassFraction")]
        public MassPerMassMeasure MassFraction {
            get {
                return MassFractionField;
            } 
            set {
                MassFractionField = value;
                NotifyPropertyChanged("MassFraction");
            }
        }

        private MassPerMassMeasure MassFractionField; 

        /// <summary>
        /// MoleFraction property
        /// </summary>
		[Description("The mole fraction of this parent sample within this combined sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AmountOfSubstancePerAmountOfSubstanceMeasure")]
		[XmlElement("MoleFraction")]
        public AmountOfSubstancePerAmountOfSubstanceMeasure MoleFraction {
            get {
                return MoleFractionField;
            } 
            set {
                MoleFractionField = value;
                NotifyPropertyChanged("MoleFraction");
            }
        }

        private AmountOfSubstancePerAmountOfSubstanceMeasure MoleFractionField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// FluidSample property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("FluidSample")]
        public DataObjectReference FluidSample {
            get {
                return FluidSampleField;
            } 
            set {
                FluidSampleField = value;
                NotifyPropertyChanged("FluidSample");
            }
        }

        private DataObjectReference FluidSampleField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SampleRecombinationRequirement xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SampleRecombinationRequirement", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the SampleRecombinationRequirement xsd type.")]
    public partial class SampleRecombinationRequirement : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Reference to the liquid sample used in this sample recombination.
        /// </summary>
		[Description("Reference to the liquid sample used in this sample recombination.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("LiquidSample")]
        public DataObjectReference LiquidSample {
            get {
                return LiquidSampleField;
            } 
            set {
                LiquidSampleField = value;
                NotifyPropertyChanged("LiquidSample");
            }
        }

        private DataObjectReference LiquidSampleField; 

        /// <summary>
        /// Reference to the vapor sample used in this sample recombination.
        /// </summary>
		[Description("Reference to the vapor sample used in this sample recombination.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("VaporSample")]
        public DataObjectReference VaporSample {
            get {
                return VaporSampleField;
            } 
            set {
                VaporSampleField = value;
                NotifyPropertyChanged("VaporSample");
            }
        }

        private DataObjectReference VaporSampleField; 

        /// <summary>
        /// The recombination pressure for this sample recombination.
        /// </summary>
		[Description("The recombination pressure for this sample recombination.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPressureValue")]
		[XmlElement("RecombinationPressure")]
        public AbstractPressureValue RecombinationPressure {
            get {
                return RecombinationPressureField;
            } 
            set {
                RecombinationPressureField = value;
                NotifyPropertyChanged("RecombinationPressure");
            }
        }

        private AbstractPressureValue RecombinationPressureField; 

        /// <summary>
        /// The recombination temperature for this sample recombination.
        /// </summary>
		[Description("The recombination temperature for this sample recombination.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("RecombinationTemperature")]
        public ThermodynamicTemperatureMeasure RecombinationTemperature {
            get {
                return RecombinationTemperatureField;
            } 
            set {
                RecombinationTemperatureField = value;
                NotifyPropertyChanged("RecombinationTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure RecombinationTemperatureField; 

        /// <summary>
        /// The recombination gas-oil ratio for this sample recombination.
        /// </summary>
		[Description("The recombination gas-oil ratio for this sample recombination.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("RecombinationGOR")]
        public VolumePerVolumeMeasure RecombinationGOR {
            get {
                return RecombinationGORField;
            } 
            set {
                RecombinationGORField = value;
                NotifyPropertyChanged("RecombinationGOR");
            }
        }

        private VolumePerVolumeMeasure RecombinationGORField; 

        /// <summary>
        /// The recombination saturation pressure for this sample recombination.
        /// </summary>
		[Description("The recombination saturation pressure for this sample recombination.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SaturationPressure")]
		[XmlElement("RecombinationSaturationPressure")]
        public SaturationPressure RecombinationSaturationPressure {
            get {
                return RecombinationSaturationPressureField;
            } 
            set {
                RecombinationSaturationPressureField = value;
                NotifyPropertyChanged("RecombinationSaturationPressure");
            }
        }

        private SaturationPressure RecombinationSaturationPressureField; 

        /// <summary>
        /// The fluid sampling recombination started with this liquid composition.
        /// </summary>
		[Description("The fluid sampling recombination started with this liquid composition.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LiquidComposition")]
		[XmlElement("LiquidComposition")]
        public LiquidComposition LiquidComposition {
            get {
                return LiquidCompositionField;
            } 
            set {
                LiquidCompositionField = value;
                NotifyPropertyChanged("LiquidComposition");
            }
        }

        private LiquidComposition LiquidCompositionField; 

        /// <summary>
        /// The fluid sampling recombination started with this vapor composition.
        /// </summary>
		[Description("The fluid sampling recombination started with this vapor composition.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VaporComposition")]
		[XmlElement("VaporComposition")]
        public VaporComposition VaporComposition {
            get {
                return VaporCompositionField;
            } 
            set {
                VaporCompositionField = value;
                NotifyPropertyChanged("VaporComposition");
            }
        }

        private VaporComposition VaporCompositionField; 

        /// <summary>
        /// The aim of the fluid sampling recombination was this overall composition.
        /// </summary>
		[Description("The aim of the fluid sampling recombination was this overall composition.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "OverallComposition")]
		[XmlElement("OverallComposition")]
        public OverallComposition OverallComposition {
            get {
                return OverallCompositionField;
            } 
            set {
                OverallCompositionField = value;
                NotifyPropertyChanged("OverallComposition");
            }
        }

        private OverallComposition OverallCompositionField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidSampleAcquisitionJobSource xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidSampleAcquisitionJobSource", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FluidSampleAcquisitionJobSource xsd type.")]
    public partial class FluidSampleAcquisitionJobSource : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// FluidSampleAcquisitionReference property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Reference to the fluid sample acquisition (by uid) within a fluid sample acquisition job (which is referred to as a top-level object) which acquired this fluid sample.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FluidSampleAcquisitionReference")]
        public string FluidSampleAcquisitionReference {
            get {
                return FluidSampleAcquisitionReferenceField;
            } 
            set {
                FluidSampleAcquisitionReferenceField = value;
                NotifyPropertyChanged("FluidSampleAcquisitionReference");
            }
        }

        private string FluidSampleAcquisitionReferenceField; 

        /// <summary>
        /// FluidSampleAcquisitionJobReference property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("FluidSampleAcquisitionJobReference")]
        public DataObjectReference FluidSampleAcquisitionJobReference {
            get {
                return FluidSampleAcquisitionJobReferenceField;
            } 
            set {
                FluidSampleAcquisitionJobReferenceField = value;
                NotifyPropertyChanged("FluidSampleAcquisitionJobReference");
            }
        }

        private DataObjectReference FluidSampleAcquisitionJobReferenceField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the FluidSampleContainer xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the FluidSampleContainer xsd type.")]
    public partial class FluidSampleContainer : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The make of this fluid sample container.
        /// </summary>
		[StringLength(64)]
        [Description("The make of this fluid sample container.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Make")]
        public string Make {
            get {
                return MakeField;
            } 
            set {
                MakeField = value;
                NotifyPropertyChanged("Make");
            }
        }

        private string MakeField; 

        /// <summary>
        /// The model of this fluid sample container.
        /// </summary>
		[StringLength(64)]
        [Description("The model of this fluid sample container.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Model")]
        public string Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string ModelField; 

        /// <summary>
        /// The serial number of this fluid sample container.
        /// </summary>
		[StringLength(64)]
        [Description("The serial number of this fluid sample container.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SerialNumber")]
        public string SerialNumber {
            get {
                return SerialNumberField;
            } 
            set {
                SerialNumberField = value;
                NotifyPropertyChanged("SerialNumber");
            }
        }

        private string SerialNumberField; 

        /// <summary>
        /// The reference ID of a bottle or a chamber.
        /// </summary>
		[StringLength(64)]
        [Description("The reference ID  of a bottle or a chamber.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("BottleID")]
        public string BottleID {
            get {
                return BottleIDField;
            } 
            set {
                BottleIDField = value;
                NotifyPropertyChanged("BottleID");
            }
        }

        private string BottleIDField; 

        /// <summary>
        /// The volume of a bottle or chamber. 
        /// </summary>
		[Description("The volume of a bottle or chamber.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("Capacity")]
        public VolumeMeasure Capacity {
            get {
                return CapacityField;
            } 
            set {
                CapacityField = value;
                NotifyPropertyChanged("Capacity");
            }
        }

        private VolumeMeasure CapacityField; 

        /// <summary>
        /// The owner of this fluid sample container.
        /// </summary>
		[StringLength(64)]
        [Description("The owner of this fluid sample container.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Owner")]
        public string Owner {
            get {
                return OwnerField;
            } 
            set {
                OwnerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string OwnerField; 

        /// <summary>
        /// The kind of this fluid sample container.
        /// </summary>
		[StringLength(64)]
        [Description("The kind of this fluid sample container.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Kind")]
        public string Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string KindField; 

        /// <summary>
        /// The metallurgy of this fluid sample container.
        /// </summary>
		[StringLength(64)]
        [Description("The metallurgy of this fluid sample container.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Metallurgy")]
        public string Metallurgy {
            get {
                return MetallurgyField;
            } 
            set {
                MetallurgyField = value;
                NotifyPropertyChanged("Metallurgy");
            }
        }

        private string MetallurgyField; 

        /// <summary>
        /// The pressure rating of this fluid sample container.
        /// </summary>
		[Description("The pressure rating of this fluid sample container.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PressureRating")]
        public PressureMeasure PressureRating {
            get {
                return PressureRatingField;
            } 
            set {
                PressureRatingField = value;
                NotifyPropertyChanged("PressureRating");
            }
        }

        private PressureMeasure PressureRatingField; 

        /// <summary>
        /// The temperature rating of this fluid sample container.
        /// </summary>
		[Description("The temperature rating of this fluid sample container.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TemperatureRating")]
        public ThermodynamicTemperatureMeasure TemperatureRating {
            get {
                return TemperatureRatingField;
            } 
            set {
                TemperatureRatingField = value;
                NotifyPropertyChanged("TemperatureRating");
            }
        }

        private ThermodynamicTemperatureMeasure TemperatureRatingField; 

        /// <summary>
        /// The date when this fluid sample container was last inspected.
        /// </summary>
		[Description("The date when this fluid sample container was last inspected.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("LastInspectionDate", DataType="date")]
        public DateTime? LastInspectionDate {
            get {
                return LastInspectionDateField;
            } 
            set {
                LastInspectionDateField = value;
                 this.LastInspectionDateSpecified = true;
                NotifyPropertyChanged("LastInspectionDate");
            }
        }

        private DateTime? LastInspectionDateField; 

        /// <summary>
        /// LastInspectionDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastInspectionDateSpecified {
            get {
                return LastInspectionDateSpecifiedField;
            } 
            set {
                LastInspectionDateSpecifiedField = value;
                NotifyPropertyChanged("LastInspectionDateSpecified");
            }
        }

        private bool LastInspectionDateSpecifiedField; 

        /// <summary>
        /// The reference uid of an attached object which stores the transport certificate. 
        /// </summary>
		[Description("The reference uid of an attached object which stores the transport certificate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("TransportCertificateReference")]
        public DataObjectReference TransportCertificateReference {
            get {
                return TransportCertificateReferenceField;
            } 
            set {
                TransportCertificateReferenceField = value;
                NotifyPropertyChanged("TransportCertificateReference");
            }
        }

        private DataObjectReference TransportCertificateReferenceField; 

        /// <summary>
        /// Remarks and comments about this data item.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this data item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 


    } //here

    /// <summary>
    /// This class represents the DtsMeasurement xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the DtsMeasurement xsd type.")]
    public partial class DtsMeasurement : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// BadSetFlag property
        /// </summary>
		[Required]
        [Description("Set to 'true' when a measurement is included but is known to be bad (i.e., all the values are null). Use this flag in situations when you want to keep track of the fact that a measurement was generated/received, however the measurement was bad.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("BadSetFlag")]
        public bool? BadSetFlag {
            get {
                return BadSetFlagField;
            } 
            set {
                BadSetFlagField = value;
                NotifyPropertyChanged("BadSetFlag");
            }
        }

        private bool? BadSetFlagField; 

        /// <summary>
        /// EmptySetFlag property
        /// </summary>
		[Required]
        [Description("Set to 'true' when the measurement set is empty (only the header is provided). Use this flag for situations when the instrument box attempts to get a reading, but nothing is generated (fiber is disconnected, for example).")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("EmptySetFlag")]
        public bool? EmptySetFlag {
            get {
                return EmptySetFlagField;
            } 
            set {
                EmptySetFlagField = value;
                NotifyPropertyChanged("EmptySetFlag");
            }
        }

        private bool? EmptySetFlagField; 

        /// <summary>
        /// TimeStart property
        /// </summary>
		[Required]
        [Description("Time when the installed system began taking the measurement.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("TimeStart")]
        public DateTime? TimeStart {
            get {
                return TimeStartField;
            } 
            set {
                TimeStartField = value;
                NotifyPropertyChanged("TimeStart");
            }
        }

        private DateTime? TimeStartField; 

        /// <summary>
        /// TimeEnd property
        /// </summary>
		[Description("Time when the installed system finished taking the measurement.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("TimeEnd")]
        public DateTime? TimeEnd {
            get {
                return TimeEndField;
            } 
            set {
                TimeEndField = value;
                 this.TimeEndSpecified = true;
                NotifyPropertyChanged("TimeEnd");
            }
        }

        private DateTime? TimeEndField; 

        /// <summary>
        /// TimeEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TimeEndSpecified {
            get {
                return TimeEndSpecifiedField;
            } 
            set {
                TimeEndSpecifiedField = value;
                NotifyPropertyChanged("TimeEndSpecified");
            }
        }

        private bool TimeEndSpecifiedField; 

        /// <summary>
        /// TimeSinceInstrumentStartup property
        /// </summary>
		[Description("Length of time that the instrument box has been up and running since its last power up.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("TimeSinceInstrumentStartup")]
        public TimeMeasure TimeSinceInstrumentStartup {
            get {
                return TimeSinceInstrumentStartupField;
            } 
            set {
                TimeSinceInstrumentStartupField = value;
                NotifyPropertyChanged("TimeSinceInstrumentStartup");
            }
        }

        private TimeMeasure TimeSinceInstrumentStartupField; 

        /// <summary>
        /// MeasurementTags property
        /// </summary>
		[Description("This supports user-defined \"tags\" (in the form of text strings) to be attached to the measurement. Example: to indicate other operations under way at the time (e.g., start of injection).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("MeasurementTags")]
        public List<string> MeasurementTags {
            get {
                return MeasurementTagsField;
            } 
            set {
                MeasurementTagsField = value;
                NotifyPropertyChanged("MeasurementTags");
            }
        }

         /// <summary>
         /// bool to indicate if MeasurementTags has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MeasurementTagsSpecified
         {
             get {
             if(MeasurementTagsField!=null)
                 return MeasurementTagsField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> MeasurementTagsField; 

        /// <summary>
        /// InstalledSystemReference property
        /// </summary>
		[Required]
        [Description("Reference to the installed system used to take the measurement (combination of instrument box and optical path).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("InstalledSystemReference")]
        public DataObjectReference InstalledSystemReference {
            get {
                return InstalledSystemReferenceField;
            } 
            set {
                InstalledSystemReferenceField = value;
                NotifyPropertyChanged("InstalledSystemReference");
            }
        }

        private DataObjectReference InstalledSystemReferenceField; 

        /// <summary>
        /// MeasurementConfiguration property
        /// </summary>
		[Required]
        [Description("Enum. The configuration of the optical path. This may be varied from measurement to measurement, independent of the fiber path network.")]
        [EnergisticsDataTypeAttribute(DataType = "OpticalPathConfiguration")]
		[XmlElement("MeasurementConfiguration")]
        public OpticalPathConfiguration? MeasurementConfiguration {
            get {
                return MeasurementConfigurationField;
            } 
            set {
                MeasurementConfigurationField = value;
                 this.MeasurementConfigurationSpecified = true;
                NotifyPropertyChanged("MeasurementConfiguration");
            }
        }

        
        private bool MeasurementConfigurationSpecifiedField = false;
        
        /// <summary>
        /// MeasurementConfigurationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasurementConfigurationSpecified {
            get {
                return MeasurementConfigurationSpecifiedField;
            } 
            set {
                MeasurementConfigurationSpecifiedField = value;
                NotifyPropertyChanged("MeasurementConfigurationSpecified");
            }
        }
        
        private OpticalPathConfiguration? MeasurementConfigurationField; 

        /// <summary>
        /// FacilityIdentifier property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifier")]
		[XmlElement("FacilityIdentifier")]
        public FacilityIdentifier FacilityIdentifier {
            get {
                return FacilityIdentifierField;
            } 
            set {
                FacilityIdentifierField = value;
                NotifyPropertyChanged("FacilityIdentifier");
            }
        }

        private FacilityIdentifier FacilityIdentifierField; 

        /// <summary>
        /// MeasurementTrace property
        /// </summary>
		[Description("Header data for raw (measured) traces collections")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DtsMeasurementTrace")]
		[XmlElement("MeasurementTrace")]
        public List<DtsMeasurementTrace> MeasurementTrace {
            get {
                return MeasurementTraceField;
            } 
            set {
                MeasurementTraceField = value;
                NotifyPropertyChanged("MeasurementTrace");
            }
        }

         /// <summary>
         /// bool to indicate if MeasurementTrace has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MeasurementTraceSpecified
         {
             get {
             if(MeasurementTraceField!=null)
                 return MeasurementTraceField.Count>0?true:false;
             else return false;
             }
         }
        private List<DtsMeasurementTrace> MeasurementTraceField; 

        /// <summary>
        /// DiagnosticParameters property
        /// </summary>
		[Description("Diagnostic information generated by the instrument box at the time the measurement was taken.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("DiagnosticParameters")]
        public List<ExtensionNameValue> DiagnosticParameters {
            get {
                return DiagnosticParametersField;
            } 
            set {
                DiagnosticParametersField = value;
                NotifyPropertyChanged("DiagnosticParameters");
            }
        }

         /// <summary>
         /// bool to indicate if DiagnosticParameters has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DiagnosticParametersSpecified
         {
             get {
             if(DiagnosticParametersField!=null)
                 return DiagnosticParametersField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> DiagnosticParametersField; 

        /// <summary>
        /// InterpretationLog property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DtsInterpretationLogSet")]
		[XmlElement("InterpretationLog")]
        public DtsInterpretationLogSet InterpretationLog {
            get {
                return InterpretationLogField;
            } 
            set {
                InterpretationLogField = value;
                NotifyPropertyChanged("InterpretationLog");
            }
        }

        private DtsInterpretationLogSet InterpretationLogField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FacilityIdentifier xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FacilityIdentifier", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FacilityIdentifier xsd type.")]
    public partial class FacilityIdentifier : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name of the facility.
        /// </summary>
		[Required]
        [Description("Name of the facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "NameStruct")]
		[XmlElement("Name")]
        public NameStruct Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private NameStruct NameField; 

        /// <summary>
        /// The name of the facility that is represented by this facility mapping.
        /// </summary>
		[Description("The name of the facility that is represented by this facility mapping.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("Installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return InstallationField;
            } 
            set {
                InstallationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct InstallationField; 

        /// <summary>
        /// Type of facility where the fiber is deployed.
        /// </summary>
		[StringLength(64)]
        [Description("Type of facility where the fiber is deployed.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Kind")]
        public string Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string KindField; 

        /// <summary>
        /// The name and type of a facility whose context is relevant to the represented installation.
        /// </summary>
		[Description("The name and type of a facility whose context is relevant to the represented installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("ContextFacility")]
        public FacilityIdentifierStruct ContextFacility {
            get {
                return ContextFacilityField;
            } 
            set {
                ContextFacilityField = value;
                NotifyPropertyChanged("ContextFacility");
            }
        }

        private FacilityIdentifierStruct ContextFacilityField; 

        /// <summary>
        /// Identifier of the business unit responsible for the facility.
        /// </summary>
		[Description("Identifier of the business unit responsible for the facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeBusinessUnit")]
		[XmlElement("BusinessUnit")]
        public ProductVolumeBusinessUnit BusinessUnit {
            get {
                return BusinessUnitField;
            } 
            set {
                BusinessUnitField = value;
                NotifyPropertyChanged("BusinessUnit");
            }
        }

        private ProductVolumeBusinessUnit BusinessUnitField; 

        /// <summary>
        /// Contact for the company/person operating the facility
        /// </summary>
		[Description("Contact for the company/person operating the facility")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BusinessAssociate")]
		[XmlElement("Operator")]
        public BusinessAssociate Operator {
            get {
                return OperatorField;
            } 
            set {
                OperatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private BusinessAssociate OperatorField; 

        /// <summary>
        /// The geographical information about the facility.
        /// </summary>
		[Description("The geographical information about the facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GeographicContext")]
		[XmlElement("GeographicContext")]
        public GeographicContext GeographicContext {
            get {
                return GeographicContextField;
            } 
            set {
                GeographicContextField = value;
                NotifyPropertyChanged("GeographicContext");
            }
        }

        private GeographicContext GeographicContextField; 

        /// <summary>
        /// Text property
        /// </summary>
        [RecurringElement]
        [XmlText]
        public List<string> Text {
            get {
                return TextField;
            } 
            set {
                TextField = value;
                NotifyPropertyChanged("Text");
            }
        }

         /// <summary>
         /// bool to indicate if Text has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TextSpecified
         {
             get {
             if(TextField!=null)
                 return TextField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> TextField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductVolumeBusinessUnit xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductVolumeBusinessUnit", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductVolumeBusinessUnit xsd type.")]
    public partial class ProductVolumeBusinessUnit : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of business unit.
        /// </summary>
		[Required]
        [Description("The type of business unit.")]
        [EnergisticsDataTypeAttribute(DataType = "BusinessUnitKind")]
		[XmlElement("Kind")]
        public BusinessUnitKind? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        
        private bool KindSpecifiedField = false;
        
        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }
        
        private BusinessUnitKind? KindField; 

        /// <summary>
        /// The human contextual name of the business unit.
        /// </summary>
		[StringLength(64)]
        [Description("The human contextual name of the business unit.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// A textual description of the business unit.
        /// </summary>
		[StringLength(2000)]
        [Description("A textual description of the business unit.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// A component part of the unit. The composition of a unit may vary with time. This defines the ownership share or account information for a sub unit within the context of the whole unit. For ownership shares, at any one point in time the sum of the shares should be 100%.
        /// </summary>
		[Description("A component part of the unit.  The composition of a unit may vary with time. This defines the ownership share or account information for a sub unit within the context of the whole unit. For ownership shares, at any one point in time the sum of the shares should be 100%.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeBusinessSubUnit")]
		[XmlElement("SubUnit")]
        public List<ProductVolumeBusinessSubUnit> SubUnit {
            get {
                return SubUnitField;
            } 
            set {
                SubUnitField = value;
                NotifyPropertyChanged("SubUnit");
            }
        }

         /// <summary>
         /// bool to indicate if SubUnit has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SubUnitSpecified
         {
             get {
             if(SubUnitField!=null)
                 return SubUnitField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeBusinessSubUnit> SubUnitField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductVolumeBusinessSubUnit xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductVolumeBusinessSubUnit", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductVolumeBusinessSubUnit xsd type.")]
    public partial class ProductVolumeBusinessSubUnit : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Kind property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Points to business unit which is part of another business unit.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Kind")]
        public string Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string KindField; 

        /// <summary>
        /// OwnershipBusinessAcct property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "OwnershipBusinessAcct")]
		[XmlElement("OwnershipBusinessAcct")]
        public OwnershipBusinessAcct OwnershipBusinessAcct {
            get {
                return OwnershipBusinessAcctField;
            } 
            set {
                OwnershipBusinessAcctField = value;
                NotifyPropertyChanged("OwnershipBusinessAcct");
            }
        }

        private OwnershipBusinessAcct OwnershipBusinessAcctField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the OwnershipBusinessAcct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="OwnershipBusinessAcct", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the OwnershipBusinessAcct xsd type.")]
    public partial class OwnershipBusinessAcct : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Item property
        /// </summary>
		
		[XmlElement("Item")]
        public Object Item {
            get {
                return ItemField;
            } 
            set {
                ItemField = value;
                NotifyPropertyChanged("Item");
            }
        }

        private Object ItemField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DtsMeasurementTrace xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DtsMeasurementTrace", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DtsMeasurementTrace xsd type.")]
    public partial class DtsMeasurementTrace : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Denotes whether the trace was stored as acquired by the measurement device or recalibrated in any way.
        /// </summary>
		[Required]
        [Description("Denotes whether the trace was stored as acquired by the measurement device or recalibrated in any way.")]
        [EnergisticsDataTypeAttribute(DataType = "TraceProcessingType")]
		[XmlElement("TraceProcessingType")]
        public TraceProcessingType? TraceProcessingType {
            get {
                return TraceProcessingTypeField;
            } 
            set {
                TraceProcessingTypeField = value;
                 this.TraceProcessingTypeSpecified = true;
                NotifyPropertyChanged("TraceProcessingType");
            }
        }

        
        private bool TraceProcessingTypeSpecifiedField = false;
        
        /// <summary>
        /// TraceProcessingTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TraceProcessingTypeSpecified {
            get {
                return TraceProcessingTypeSpecifiedField;
            } 
            set {
                TraceProcessingTypeSpecifiedField = value;
                NotifyPropertyChanged("TraceProcessingTypeSpecified");
            }
        }
        
        private TraceProcessingType? TraceProcessingTypeField; 

        /// <summary>
        /// The difference in fiber distance between consecutive temperature sample points in a single temperature trace.
        /// </summary>
		[Required]
        [Description("The difference in fiber distance between consecutive temperature sample points in a single temperature trace.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SamplingInterval")]
        public LengthMeasure SamplingInterval {
            get {
                return SamplingIntervalField;
            } 
            set {
                SamplingIntervalField = value;
                NotifyPropertyChanged("SamplingInterval");
            }
        }

        private LengthMeasure SamplingIntervalField; 

        /// <summary>
        /// The mnemonic of the channel in the MeasuredTraceSet that represents the index to the data (expected to be a length along the facility (e.g., wellbore, pipeline) being measured.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The mnemonic of the channel in the MeasuredTraceSet that represents the index to the data (expected to be a length along the facility (e.g., wellbore, pipeline) being measured.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("IndexMnemonic")]
        public string IndexMnemonic {
            get {
                return IndexMnemonicField;
            } 
            set {
                IndexMnemonicField = value;
                NotifyPropertyChanged("IndexMnemonic");
            }
        }

        private string IndexMnemonicField; 

        /// <summary>
        /// The number of rows in this interpreted data object. Each row or "point" represents a measurement along the fiber.
        /// </summary>
		[Required]
        [Description("The number of rows in this interpreted data object. Each row or \"point\" represents a measurement along the fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("PointCount", DataType="nonNegativeInteger")]
        public string PointCount {
            get {
                return PointCountField;
            } 
            set {
                PointCountField = value;
                NotifyPropertyChanged("PointCount");
            }
        }

        private string PointCountField; 

        /// <summary>
        /// Frequency reference for Rayleigh 1 measurement.
        /// </summary>
		[Description("Frequency reference for Rayleigh 1 measurement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FrequencyMeasure")]
		[XmlElement("FrequencyRayleigh1")]
        public FrequencyMeasure FrequencyRayleigh1 {
            get {
                return FrequencyRayleigh1Field;
            } 
            set {
                FrequencyRayleigh1Field = value;
                NotifyPropertyChanged("FrequencyRayleigh1");
            }
        }

        private FrequencyMeasure FrequencyRayleigh1Field; 

        /// <summary>
        /// Frequency reference for Rayleigh 2 measurement.
        /// </summary>
		[Description("Frequency reference for Rayleigh 2 measurement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FrequencyMeasure")]
		[XmlElement("FrequencyRayleigh2")]
        public FrequencyMeasure FrequencyRayleigh2 {
            get {
                return FrequencyRayleigh2Field;
            } 
            set {
                FrequencyRayleigh2Field = value;
                NotifyPropertyChanged("FrequencyRayleigh2");
            }
        }

        private FrequencyMeasure FrequencyRayleigh2Field; 

        /// <summary>
        /// Pointer to a ChannelSet containing the comma-delimited list of mnemonics and units, and channel data representing the measurement trace. BUSINESS RULE: The mnemonics and the units must follow a strict order. The mnemonic list must be in this order: fiberDistance, antistokes, stokes, reverseAntiStokes, reverseStokes, rayleigh1, rayleigh2, brillouinfrequency, loss, lossRatio, cumulativeExcessLoss, frequencyQualityMeasure, measurementUncertainty, brillouinAmplitude, opticalPathTemperature, uncalibratedTemperature1, uncalibratedTemperature2 The unit list must be one of the following: - m, mW, mW, mW, mW, mW, mW, GHz, dB/Km, dB/Km, dB, dimensionless, degC, mW, degC, DegC, degC - ft, mW, mW, mW, mW,mW, mW, GHz, dB/Km, dB/Km,dB, dimensionless, degF, mW, degF, degF, degF
        /// </summary>
		[Required]
        [Description("Pointer to a ChannelSet containing the comma-delimited list of mnemonics and units, and channel data representing the measurement trace.  BUSINESS RULE: The mnemonics and the units must follow a strict order.   The mnemonic list must be in this order: fiberDistance, antistokes, stokes, reverseAntiStokes, reverseStokes, rayleigh1, rayleigh2, brillouinfrequency, loss, lossRatio, cumulativeExcessLoss, frequencyQualityMeasure, measurementUncertainty, brillouinAmplitude, opticalPathTemperature, uncalibratedTemperature1, uncalibratedTemperature2  The unit list must be one of the following: - m, mW, mW, mW, mW, mW, mW, GHz, dB/Km, dB/Km, dB, dimensionless, degC, mW, degC, DegC, degC  - ft, mW, mW, mW, mW,mW, mW, GHz, dB/Km, dB/Km,dB, dimensionless, degF, mW, degF, degF, degF")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ChannelSetReference")]
        public DataObjectReference ChannelSetReference {
            get {
                return ChannelSetReferenceField;
            } 
            set {
                ChannelSetReferenceField = value;
                NotifyPropertyChanged("ChannelSetReference");
            }
        }

        private DataObjectReference ChannelSetReferenceField; 

        /// <summary>
        /// A descriptive remark about the measured trace set.
        /// </summary>
		[StringLength(2000)]
        [Description("A descriptive remark about the measured trace set.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

		/// <summary>
        /// Where this dtsMeasuredTraceSet was derived from a parent dtsMeasuredTraceSet (having been recalibrated for example), the parent dtsMeasuredTraceSet can be indicated by referencing its UID with this element.
        /// </summary>
		[StringLength(64)]
        [Description("Where this dtsMeasuredTraceSet was derived from a parent dtsMeasuredTraceSet (having been recalibrated for example), the parent dtsMeasuredTraceSet can be indicated by referencing its UID with this element.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("parentMeasurementReference")]
		
        public string ParentMeasurementReference {
            get {
                return parentMeasurementReferenceField;
            } 
            set {
                parentMeasurementReferenceField = value;
                NotifyPropertyChanged("ParentMeasurementReference");
            }
        }

        private string parentMeasurementReferenceField; 

		/// <summary>
        /// Unique identifier of this object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier of this object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DtsInterpretationLogSet xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DtsInterpretationLogSet", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DtsInterpretationLogSet xsd type.")]
    public partial class DtsInterpretationLogSet : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// PreferredInterpretationReference property
        /// </summary>
		[StringLength(64)]
        [Description("For a set of dtsInterpretedData logs that are generated from the same measurement (each log having gone through a different post-processing type, for example), if there is one log that is ‘preferred’ for additional business decisions (while the other ones were merely what-if scenarios), then this preferred log in the collection of child dtsInterpretedData can be flagged by referencing its UID with this element.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PreferredInterpretationReference")]
        public string PreferredInterpretationReference {
            get {
                return PreferredInterpretationReferenceField;
            } 
            set {
                PreferredInterpretationReferenceField = value;
                NotifyPropertyChanged("PreferredInterpretationReference");
            }
        }

        private string PreferredInterpretationReferenceField; 

        /// <summary>
        /// InterpretationData property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DtsInterpretationData")]
		[XmlElement("InterpretationData")]
        public List<DtsInterpretationData> InterpretationData {
            get {
                return InterpretationDataField;
            } 
            set {
                InterpretationDataField = value;
                NotifyPropertyChanged("InterpretationData");
            }
        }

         /// <summary>
         /// bool to indicate if InterpretationData has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InterpretationDataSpecified
         {
             get {
             if(InterpretationDataField!=null)
                 return InterpretationDataField.Count>0?true:false;
             else return false;
             }
         }
        private List<DtsInterpretationData> InterpretationDataField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DtsInterpretationData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DtsInterpretationData", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DtsInterpretationData xsd type.")]
    public partial class DtsInterpretationData : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A reference to the facilityMapping to which this InterpretationData relates. The facility mapping relates a length of fiber to a corresponding length of a facility (probably a wellbore or pipeline). The facilityMapping also contains the datum from which the InterpretedData is indexed.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A reference to the facilityMapping to which this InterpretationData relates. The facility mapping relates a length of fiber to a corresponding length of a facility (probably a wellbore or pipeline). The facilityMapping also contains the datum from which the InterpretedData is indexed.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FacilityMapping")]
        public string FacilityMapping {
            get {
                return FacilityMappingField;
            } 
            set {
                FacilityMappingField = value;
                NotifyPropertyChanged("FacilityMapping");
            }
        }

        private string FacilityMappingField; 

        /// <summary>
        /// The difference in fiber distance between consecutive temperature sample points in a single temperature trace.
        /// </summary>
		[Required]
        [Description("The difference in fiber distance between consecutive temperature sample points in a single temperature trace.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SamplingInterval")]
        public LengthMeasure SamplingInterval {
            get {
                return SamplingIntervalField;
            } 
            set {
                SamplingIntervalField = value;
                NotifyPropertyChanged("SamplingInterval");
            }
        }

        private LengthMeasure SamplingIntervalField; 

        /// <summary>
        /// Indicates whether or not the interpretation log contains bad data. This flag allows you to keep bad data (so at least you know that something was generated/acquired) and filter it out when doing relevant data operations.
        /// </summary>
		[Required]
        [Description("Indicates whether or not the interpretation log contains bad data. This flag allows you to keep bad data  (so at least you know that something was generated/acquired) and filter it out when doing relevant data operations.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("BadFlag")]
        public bool? BadFlag {
            get {
                return BadFlagField;
            } 
            set {
                BadFlagField = value;
                NotifyPropertyChanged("BadFlag");
            }
        }

        private bool? BadFlagField; 

        /// <summary>
        /// Time when the interpretation log data was generated.
        /// </summary>
		[Required]
        [Description("Time when the interpretation log data was generated.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("CreationStartTime", DataType="date")]
        public DateTime? CreationStartTime {
            get {
                return CreationStartTimeField;
            } 
            set {
                CreationStartTimeField = value;
                NotifyPropertyChanged("CreationStartTime");
            }
        }

        private DateTime? CreationStartTimeField; 

        /// <summary>
        /// Indicates what type of post-processing technique was used to generate this interpretation log. Enum list. The meaning is that this process was applied to the InterpretedData referenced by the parentInterpretationID.
        /// </summary>
		[Required]
        [Description("Indicates what type of post-processing technique was used to generate this interpretation log. Enum list. The meaning is that this process was applied to the InterpretedData referenced by the parentInterpretationID.")]
        [EnergisticsDataTypeAttribute(DataType = "InterpretationProcessingType")]
		[XmlElement("InterpretationProcessingType")]
        public InterpretationProcessingType? InterpretationProcessingType {
            get {
                return InterpretationProcessingTypeField;
            } 
            set {
                InterpretationProcessingTypeField = value;
                 this.InterpretationProcessingTypeSpecified = true;
                NotifyPropertyChanged("InterpretationProcessingType");
            }
        }

        
        private bool InterpretationProcessingTypeSpecifiedField = false;
        
        /// <summary>
        /// InterpretationProcessingTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InterpretationProcessingTypeSpecified {
            get {
                return InterpretationProcessingTypeSpecifiedField;
            } 
            set {
                InterpretationProcessingTypeSpecifiedField = value;
                NotifyPropertyChanged("InterpretationProcessingTypeSpecified");
            }
        }
        
        private InterpretationProcessingType? InterpretationProcessingTypeField; 

        /// <summary>
        /// The mnemonic of the channel in the InterpretedData that represents the index to the data (expected to be a length along the facility (e.g., wellbore, pipeline) being measured.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The mnemonic of the channel in the InterpretedData that represents the index to the data (expected to be a length along the facility (e.g., wellbore, pipeline) being measured.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("IndexMnemonic")]
        public string IndexMnemonic {
            get {
                return IndexMnemonicField;
            } 
            set {
                IndexMnemonicField = value;
                NotifyPropertyChanged("IndexMnemonic");
            }
        }

        private string IndexMnemonicField; 

        /// <summary>
        /// The number of rows in this interpreted data object. Each row or "point" represents a measurement along the fiber.
        /// </summary>
		[Required]
        [Description("The number of rows in this interpreted data object. Each row or \"point\" represents a measurement along the fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("PointCount", DataType="nonNegativeInteger")]
        public string PointCount {
            get {
                return PointCountField;
            } 
            set {
                PointCountField = value;
                NotifyPropertyChanged("PointCount");
            }
        }

        private string PointCountField; 

        /// <summary>
        /// Pointer to a ChannelSet containing the comma-delimited list of mnemonics and units, and channel data representing the interpretation data. BUSINESS RULE: The mnemonics and the units must follow a strict order. The mnemonic list must be in this order: facilityDistance, adjustedTemperature The unit list must be one of the following: - m,degC - ft,degF
        /// </summary>
		[Required]
        [Description("Pointer to a ChannelSet containing the comma-delimited list of mnemonics and units, and channel data representing the interpretation data.  BUSINESS RULE: The mnemonics and the units must follow a strict order.   The mnemonic list must be in this order: facilityDistance, adjustedTemperature  The unit list must be one of the following: - m,degC - ft,degF")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ChannelSetReference")]
        public DataObjectReference ChannelSetReference {
            get {
                return ChannelSetReferenceField;
            } 
            set {
                ChannelSetReferenceField = value;
                NotifyPropertyChanged("ChannelSetReference");
            }
        }

        private DataObjectReference ChannelSetReferenceField; 

        /// <summary>
        /// A descriptive remark about the interpretation log.
        /// </summary>
		[StringLength(2000)]
        [Description("A descriptive remark about the interpretation log.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

		/// <summary>
        /// Mandatory element indicating that the referenced MeasuredTraceSet object is the raw trace data from which this InterpretedData is derived. This is needed so that any InterpretedData can be related to the raw measurement from which it is derived.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Mandatory element indicating that the referenced MeasuredTraceSet object is the raw trace data from which this InterpretedData is derived. This is needed so that any InterpretedData can be related to the raw measurement from which it is derived.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("measurementReference")]
		
        public string MeasurementReference {
            get {
                return measurementReferenceField;
            } 
            set {
                measurementReferenceField = value;
                NotifyPropertyChanged("MeasurementReference");
            }
        }

        private string measurementReferenceField; 

		/// <summary>
        /// Optional element indicating that the referenced InterpretedData object is the parent from which this InterpretedData is derived. Example, this instance may be derived from a parent by the data having been temperature-shifted to match an external data source. The element InterpretationProcessingType is provided to record which type of operation was performed on the parent data to obtain this instance of data.
        /// </summary>
		[StringLength(64)]
        [Description("Optional element indicating that the referenced InterpretedData object is the parent from which this InterpretedData is derived. Example, this instance may be derived from a parent by the data having been temperature-shifted to match an external data source. The element InterpretationProcessingType is provided to record which type of operation was performed on the parent data to obtain this instance of data.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("parentInterpretationReference")]
		
        public string ParentInterpretationReference {
            get {
                return parentInterpretationReferenceField;
            } 
            set {
                parentInterpretationReferenceField = value;
                NotifyPropertyChanged("ParentInterpretationReference");
            }
        }

        private string parentInterpretationReferenceField; 

		/// <summary>
        /// Unique identifier of this object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier of this object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the DasInstrumentBox xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the DasInstrumentBox xsd type.")]
    public partial class DasInstrumentBox : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// An identification tag for the instrument box. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[StringLength(64)]
        [Description("An identification tag for the instrument box. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SerialNumber")]
        public string SerialNumber {
            get {
                return SerialNumberField;
            } 
            set {
                SerialNumberField = value;
                NotifyPropertyChanged("SerialNumber");
            }
        }

        private string SerialNumberField; 

        /// <summary>
        /// Additional parameters to define the instrument box as a piece of equipment. These should not be parameters to define the installation or use of the box in the wellbore, or other system. This element should be used only if an appropriate parameter is not available as an element, or in the calibration operation.
        /// </summary>
		[Description("Additional parameters to define the instrument box as a piece of equipment. These should not be parameters to define the installation or use of the box in the wellbore, or other system. This element should be used only if an appropriate parameter is not available as an element, or in the calibration operation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "IndexedObject")]
		[XmlElement("Parameter")]
        public List<IndexedObject> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(ParameterField!=null)
                 return ParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<IndexedObject> ParameterField; 

        /// <summary>
        /// Identifies the facility to which an instrument is attached. Type is the PRODML Common Facility Identifier.
        /// </summary>
		[Description("Identifies the facility to which an instrument is attached.  Type is the PRODML Common Facility Identifier.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifier")]
		[XmlElement("FacilityIdentifier")]
        public FacilityIdentifier FacilityIdentifier {
            get {
                return FacilityIdentifierField;
            } 
            set {
                FacilityIdentifierField = value;
                NotifyPropertyChanged("FacilityIdentifier");
            }
        }

        private FacilityIdentifier FacilityIdentifierField; 

        /// <summary>
        /// The general data of an instrument, including vendor information, in the installed system.
        /// </summary>
		[Required]
        [Description("The general data of an instrument, including vendor information, in the installed system.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Instrument")]
		[XmlElement("Instrument")]
        public Instrument Instrument {
            get {
                return InstrumentField;
            } 
            set {
                InstrumentField = value;
                NotifyPropertyChanged("Instrument");
            }
        }

        private Instrument InstrumentField; 

        /// <summary>
        /// Firmware version of the DAS Instrument box. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Firmware version of the DAS Instrument box.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FirmwareVersion")]
        public string FirmwareVersion {
            get {
                return FirmwareVersionField;
            } 
            set {
                FirmwareVersionField = value;
                NotifyPropertyChanged("FirmwareVersion");
            }
        }

        private string FirmwareVersionField; 

        /// <summary>
        /// Description of the patch cord connecting the fiber optic path to the DAS instrument box connector. 
        /// </summary>
		[Description("Description of the patch cord connecting the fiber optic path to the DAS instrument box connector.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DtsPatchCord")]
		[XmlElement("PatchCord")]
        public DtsPatchCord PatchCord {
            get {
                return PatchCordField;
            } 
            set {
                PatchCordField = value;
                NotifyPropertyChanged("PatchCord");
            }
        }

        private DtsPatchCord PatchCordField; 

        /// <summary>
        /// An identification tag for the instrument box. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[StringLength(2000)]
        [Description("An identification tag for the instrument box. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("InstrumentBoxDescription")]
        public string InstrumentBoxDescription {
            get {
                return InstrumentBoxDescriptionField;
            } 
            set {
                InstrumentBoxDescriptionField = value;
                NotifyPropertyChanged("InstrumentBoxDescription");
            }
        }

        private string InstrumentBoxDescriptionField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IndexedObject xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IndexedObject", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the IndexedObject xsd type.")]
    public partial class IndexedObject : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// Index.
        /// </summary>
		[Description("Index.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
        [XmlAttribute("index")]
		
        public long Index {
            get {
                return indexField;
            } 
            set {
                indexField = value;
                 this.IndexSpecified = true;
                NotifyPropertyChanged("Index");
            }
        }

        private long indexField; 

        /// <summary>
        /// indexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexSpecified {
            get {
                return indexSpecifiedField;
            } 
            set {
                indexSpecifiedField = value;
                NotifyPropertyChanged("IndexSpecified");
            }
        }

        private bool indexSpecifiedField; 

		/// <summary>
        /// Name.
        /// </summary>
		[StringLength(64)]
        [Description("Name.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("name")]
		
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

		/// <summary>
        /// Unit of measure.
        /// </summary>
		[Description("Unit of measure.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

		/// <summary>
        /// Description.
        /// </summary>
		[StringLength(2000)]
        [Description("Description.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
        [XmlAttribute("description")]
		
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Instrument xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberOTDRInstrumentBox))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Instrument", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the Instrument xsd type.")]
    public partial class Instrument : AbstractDtsEquipment, INotifyPropertyChanged
    {

        /// <summary>
        /// Contact information for the person/company that provided the equipment
        /// </summary>
		[Description("Contact information for the person/company that provided the equipment")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BusinessAssociate")]
		[XmlElement("InstrumentVendor")]
        public BusinessAssociate InstrumentVendor {
            get {
                return InstrumentVendorField;
            } 
            set {
                InstrumentVendorField = value;
                NotifyPropertyChanged("InstrumentVendor");
            }
        }

        private BusinessAssociate InstrumentVendorField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractDtsEquipment xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Instrument))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberOTDRInstrumentBox))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberCommon))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberTurnaround))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberTerminator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberSplice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberOpticalPathSegment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberConnection))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractDtsEquipment", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractDtsEquipment xsd type.")]
    public abstract partial class AbstractDtsEquipment : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The DTS instrument equipment name.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The DTS instrument equipment name.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// The manufacturer for this item of equipment.
        /// </summary>
		[StringLength(64)]
        [Description("The manufacturer for this item of equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Manufacturer")]
        public string Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string ManufacturerField; 

        /// <summary>
        /// Date when the equipment (e.g., instrument box) was manufactured.
        /// </summary>
		[Description("Date when the equipment (e.g., instrument box) was manufactured.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("ManufacturingDate", DataType="date")]
        public DateTime? ManufacturingDate {
            get {
                return ManufacturingDateField;
            } 
            set {
                ManufacturingDateField = value;
                 this.ManufacturingDateSpecified = true;
                NotifyPropertyChanged("ManufacturingDate");
            }
        }

        private DateTime? ManufacturingDateField; 

        /// <summary>
        /// ManufacturingDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ManufacturingDateSpecified {
            get {
                return ManufacturingDateSpecifiedField;
            } 
            set {
                ManufacturingDateSpecifiedField = value;
                NotifyPropertyChanged("ManufacturingDateSpecified");
            }
        }

        private bool ManufacturingDateSpecifiedField; 

        /// <summary>
        /// The type of equipment. This might include the model type.
        /// </summary>
		[StringLength(64)]
        [Description("The type of equipment. This might include the model type.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Type")]
        public string Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string TypeField; 

        /// <summary>
        /// The date on which this fiber segment was supplied.
        /// </summary>
		[Description("The date on which this fiber segment was supplied.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("SupplyDate", DataType="date")]
        public DateTime? SupplyDate {
            get {
                return SupplyDateField;
            } 
            set {
                SupplyDateField = value;
                 this.SupplyDateSpecified = true;
                NotifyPropertyChanged("SupplyDate");
            }
        }

        private DateTime? SupplyDateField; 

        /// <summary>
        /// SupplyDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SupplyDateSpecified {
            get {
                return SupplyDateSpecifiedField;
            } 
            set {
                SupplyDateSpecifiedField = value;
                NotifyPropertyChanged("SupplyDateSpecified");
            }
        }

        private bool SupplyDateSpecifiedField; 

        /// <summary>
        /// The model number (alphanumeric) that is used by the supplier to reference the type of fiber that is supplied to the user.
        /// </summary>
		[StringLength(64)]
        [Description("The model number (alphanumeric) that is used by the supplier to reference the type of fiber that is supplied to the user.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SupplierModelNumber")]
        public string SupplierModelNumber {
            get {
                return SupplierModelNumberField;
            } 
            set {
                SupplierModelNumberField = value;
                NotifyPropertyChanged("SupplierModelNumber");
            }
        }

        private string SupplierModelNumberField; 

        /// <summary>
        /// Latest known version of the software/firmware that is running in the equipment
        /// </summary>
		[StringLength(64)]
        [Description("Latest known version of the software/firmware that is running in the equipment")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SoftwareVersion")]
        public string SoftwareVersion {
            get {
                return SoftwareVersionField;
            } 
            set {
                SoftwareVersionField = value;
                NotifyPropertyChanged("SoftwareVersion");
            }
        }

        private string SoftwareVersionField; 

        /// <summary>
        /// A descriptive remark about the equipment (e.g., optical fiber).
        /// </summary>
		[StringLength(2000)]
        [Description("A descriptive remark about the equipment (e.g., optical fiber).")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// Contact details for the company/person supplying the equipment. 
        /// </summary>
		[Description("Contact details for the company/person supplying the equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BusinessAssociate")]
		[XmlElement("Supplier")]
        public BusinessAssociate Supplier {
            get {
                return SupplierField;
            } 
            set {
                SupplierField = value;
                NotifyPropertyChanged("Supplier");
            }
        }

        private BusinessAssociate SupplierField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberCommon xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberTurnaround))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberTerminator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberSplice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberOpticalPathSegment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberConnection))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberCommon", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberCommon xsd type.")]
    public partial class FiberCommon : AbstractDtsEquipment, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The fraction of incident light that is reflected by a fiber path component. Measured in dB.
        /// </summary>
		[Description("The fraction of incident light that is reflected by a fiber path component. Measured in dB.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("Reflectance")]
        public DimensionlessMeasure Reflectance {
            get {
                return ReflectanceField;
            } 
            set {
                ReflectanceField = value;
                NotifyPropertyChanged("Reflectance");
            }
        }

        private DimensionlessMeasure ReflectanceField; 

        /// <summary>
        /// The fraction of incident light that is lost by a fiber path component. Measured in dB.
        /// </summary>
		[Description("The fraction of incident light that is lost by a fiber path component. Measured in dB.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("Loss")]
        public DimensionlessMeasure Loss {
            get {
                return LossField;
            } 
            set {
                LossField = value;
                NotifyPropertyChanged("Loss");
            }
        }

        private DimensionlessMeasure LossField; 

        /// <summary>
        /// Any remarks that help understand why the optical fiber is no longer in use.
        /// </summary>
		[StringLength(2000)]
        [Description("Any remarks that help understand why the optical fiber is no longer in use.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("ReasonForDecommissioning")]
        public string ReasonForDecommissioning {
            get {
                return ReasonForDecommissioningField;
            } 
            set {
                ReasonForDecommissioningField = value;
                NotifyPropertyChanged("ReasonForDecommissioning");
            }
        }

        private string ReasonForDecommissioningField; 

		/// <summary>
        /// Unique identifier of this object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier of this object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberTurnaround xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberTurnaround", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberTurnaround xsd type.")]
    public partial class FiberTurnaround : FiberCommon, IUniqueId, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberTerminator xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberTerminator", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberTerminator xsd type.")]
    public partial class FiberTerminator : FiberCommon, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the termination used for the fiber.
        /// </summary>
		[Required]
        [Description("Information about the termination used for the fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "TerminationType")]
		[XmlElement("TerminationType")]
        public TerminationType? TerminationType {
            get {
                return TerminationTypeField;
            } 
            set {
                TerminationTypeField = value;
                 this.TerminationTypeSpecified = true;
                NotifyPropertyChanged("TerminationType");
            }
        }

        
        private bool TerminationTypeSpecifiedField = false;
        
        /// <summary>
        /// TerminationTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TerminationTypeSpecified {
            get {
                return TerminationTypeSpecifiedField;
            } 
            set {
                TerminationTypeSpecifiedField = value;
                NotifyPropertyChanged("TerminationTypeSpecified");
            }
        }
        
        private TerminationType? TerminationTypeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberSplice xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberSplice", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberSplice xsd type.")]
    public partial class FiberSplice : FiberCommon, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A useful description of the equipment used to create the splice.
        /// </summary>
		[StringLength(64)]
        [Description("A useful description of the equipment used to create the splice.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SpliceEquipmentUsedReference")]
        public string SpliceEquipmentUsedReference {
            get {
                return SpliceEquipmentUsedReferenceField;
            } 
            set {
                SpliceEquipmentUsedReferenceField = value;
                NotifyPropertyChanged("SpliceEquipmentUsedReference");
            }
        }

        private string SpliceEquipmentUsedReferenceField; 

        /// <summary>
        /// A useful description of the stripping type that was conducted.
        /// </summary>
		[StringLength(64)]
        [Description("A useful description of the stripping type that was conducted.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("StrippingType")]
        public string StrippingType {
            get {
                return StrippingTypeField;
            } 
            set {
                StrippingTypeField = value;
                NotifyPropertyChanged("StrippingType");
            }
        }

        private string StrippingTypeField; 

        /// <summary>
        /// A useful description of the type of protector used in the splice.
        /// </summary>
		[StringLength(64)]
        [Description("A useful description of the type of protector used in the splice.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ProtectorType")]
        public string ProtectorType {
            get {
                return ProtectorTypeField;
            } 
            set {
                ProtectorTypeField = value;
                NotifyPropertyChanged("ProtectorType");
            }
        }

        private string ProtectorTypeField; 

        /// <summary>
        /// Enum. The type of splice.
        /// </summary>
		[Required]
        [Description("Enum. The type of splice.")]
        [EnergisticsDataTypeAttribute(DataType = "FiberSpliceTypes")]
		[XmlElement("FiberSpliceType")]
        public FiberSpliceTypes? FiberSpliceType {
            get {
                return FiberSpliceTypeField;
            } 
            set {
                FiberSpliceTypeField = value;
                 this.FiberSpliceTypeSpecified = true;
                NotifyPropertyChanged("FiberSpliceType");
            }
        }

        
        private bool FiberSpliceTypeSpecifiedField = false;
        
        /// <summary>
        /// FiberSpliceTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FiberSpliceTypeSpecified {
            get {
                return FiberSpliceTypeSpecifiedField;
            } 
            set {
                FiberSpliceTypeSpecifiedField = value;
                NotifyPropertyChanged("FiberSpliceTypeSpecified");
            }
        }
        
        private FiberSpliceTypes? FiberSpliceTypeField; 

        /// <summary>
        /// The pressure rating for which the splice is expected to withstand.
        /// </summary>
		[Description("The pressure rating for which the splice is expected to withstand.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PressureRating")]
        public PressureMeasure PressureRating {
            get {
                return PressureRatingField;
            } 
            set {
                PressureRatingField = value;
                NotifyPropertyChanged("PressureRating");
            }
        }

        private PressureMeasure PressureRatingField; 

        /// <summary>
        /// The measurement of the bend on the splice.
        /// </summary>
		[Description("The measurement of the bend on the splice.")]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleUom")]
		[XmlElement("BendAngle")]
        public PlaneAngleUom? BendAngle {
            get {
                return BendAngleField;
            } 
            set {
                BendAngleField = value;
                 this.BendAngleSpecified = true;
                NotifyPropertyChanged("BendAngle");
            }
        }

        private PlaneAngleUom? BendAngleField; 

        /// <summary>
        /// BendAngleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BendAngleSpecified {
            get {
                return BendAngleSpecifiedField;
            } 
            set {
                BendAngleSpecifiedField = value;
                NotifyPropertyChanged("BendAngleSpecified");
            }
        }

        private bool BendAngleSpecifiedField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberOpticalPathSegment xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberOpticalPathSegment", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberOpticalPathSegment xsd type.")]
    public partial class FiberOpticalPathSegment : FiberCommon, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The length of fiber in this optical path section.
        /// </summary>
		[Required]
        [Description("The length of fiber in this optical path section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("FiberLength")]
        public LengthMeasure FiberLength {
            get {
                return FiberLengthField;
            } 
            set {
                FiberLengthField = value;
                NotifyPropertyChanged("FiberLength");
            }
        }

        private LengthMeasure FiberLengthField; 

        /// <summary>
        /// For this fiber segment, the amount of "overstuffing", i.e., the excess length of fiber that was installed compared to the length of the facility that is to be surveyed. Example: if 110 m of fiber were to be installed to measure 100 m length of pipeline, the overstuffing would be 10 m. Overstuffing can be allowed for in the facilityMapping section. The overstuffing is assumed to be linear distributed along the facility being measured.
        /// </summary>
		[Description("For this fiber segment, the amount of \"overstuffing\", i.e., the excess length of fiber that was installed compared to the length of the facility that is to be surveyed. Example: if 110 m of fiber were to be installed to measure 100 m length of pipeline, the overstuffing would be 10 m. Overstuffing can be allowed for in the facilityMapping section. The overstuffing is assumed to be linear distributed along the facility being measured.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OverStuffing")]
        public LengthMeasure OverStuffing {
            get {
                return OverStuffingField;
            } 
            set {
                OverStuffingField = value;
                NotifyPropertyChanged("OverStuffing");
            }
        }

        private LengthMeasure OverStuffingField; 

        /// <summary>
        /// The inner diameter of the core, generally measured in microns (um).
        /// </summary>
		[Description("The inner diameter of the core, generally measured in microns (um).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("CoreDiameter")]
        public LengthMeasure CoreDiameter {
            get {
                return CoreDiameterField;
            } 
            set {
                CoreDiameterField = value;
                NotifyPropertyChanged("CoreDiameter");
            }
        }

        private LengthMeasure CoreDiameterField; 

        /// <summary>
        /// The diameter of the core plus the cladding, generally measured in microns (um).
        /// </summary>
		[Description("The diameter of the core plus the cladding, generally measured in microns (um).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("CladdedDiameter")]
        public LengthMeasure CladdedDiameter {
            get {
                return CladdedDiameterField;
            } 
            set {
                CladdedDiameterField = value;
                NotifyPropertyChanged("CladdedDiameter");
            }
        }

        private LengthMeasure CladdedDiameterField; 

        /// <summary>
        /// The diameter of the cable containing the fiber, including all its sheathing layers.
        /// </summary>
		[Description("The diameter of the cable containing the fiber, including all its sheathing layers.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OutsideDiameter")]
        public LengthMeasure OutsideDiameter {
            get {
                return OutsideDiameterField;
            } 
            set {
                OutsideDiameterField = value;
                NotifyPropertyChanged("OutsideDiameter");
            }
        }

        private LengthMeasure OutsideDiameterField; 

        /// <summary>
        /// The mode of fiber. Enum. Values are single- or multi- mode fiber, or other/unknown.
        /// </summary>
		[Description("The mode of fiber. Enum. Values are single- or multi- mode fiber, or other/unknown.")]
        [EnergisticsDataTypeAttribute(DataType = "FiberMode")]
		[XmlElement("Mode")]
        public FiberMode? Mode {
            get {
                return ModeField;
            } 
            set {
                ModeField = value;
                 this.ModeSpecified = true;
                NotifyPropertyChanged("Mode");
            }
        }

        private FiberMode? ModeField; 

        /// <summary>
        /// ModeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ModeSpecified {
            get {
                return ModeSpecifiedField;
            } 
            set {
                ModeSpecifiedField = value;
                NotifyPropertyChanged("ModeSpecified");
            }
        }

        private bool ModeSpecifiedField; 

        /// <summary>
        /// The type of coating on the fiber.
        /// </summary>
		[StringLength(64)]
        [Description("The type of coating on the fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Coating")]
        public string Coating {
            get {
                return CoatingField;
            } 
            set {
                CoatingField = value;
                NotifyPropertyChanged("Coating");
            }
        }

        private string CoatingField; 

        /// <summary>
        /// The type of jacket covering the fiber.
        /// </summary>
		[StringLength(64)]
        [Description("The type of jacket covering the fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Jacket")]
        public string Jacket {
            get {
                return JacketField;
            } 
            set {
                JacketField = value;
                NotifyPropertyChanged("Jacket");
            }
        }

        private string JacketField; 

        /// <summary>
        /// Property of the fiber core.
        /// </summary>
		[StringLength(64)]
        [Description("Property of the fiber core.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CoreType")]
        public string CoreType {
            get {
                return CoreTypeField;
            } 
            set {
                CoreTypeField = value;
                NotifyPropertyChanged("CoreType");
            }
        }

        private string CoreTypeField; 

        /// <summary>
        /// Additional parameters to define the fiber as a material.
        /// </summary>
		[Description("Additional parameters to define the fiber as a material.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "IndexedObject")]
		[XmlElement("Parameter")]
        public List<IndexedObject> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(ParameterField!=null)
                 return ParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<IndexedObject> ParameterField; 

        /// <summary>
        /// The spool number of the particular spool from which this fiber segment was taken. The spool number may contain alphanumeric characters.
        /// </summary>
		[StringLength(64)]
        [Description("The spool number of the particular spool from which this fiber segment was taken. The spool number may contain alphanumeric characters.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SpoolNumberTag")]
        public string SpoolNumberTag {
            get {
                return SpoolNumberTagField;
            } 
            set {
                SpoolNumberTagField = value;
                NotifyPropertyChanged("SpoolNumberTag");
            }
        }

        private string SpoolNumberTagField; 

        /// <summary>
        /// The length of the fiber on the spool when purchased.
        /// </summary>
		[Description("The length of the fiber on the spool when purchased.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SpoolLength")]
        public LengthMeasure SpoolLength {
            get {
                return SpoolLengthField;
            } 
            set {
                SpoolLengthField = value;
                NotifyPropertyChanged("SpoolLength");
            }
        }

        private LengthMeasure SpoolLengthField; 

        /// <summary>
        /// Enum. The type of cable used in this segment. Example: single-fiber-cable.
        /// </summary>
		[Description("Enum. The type of cable used in this segment. Example: single-fiber-cable.")]
        [EnergisticsDataTypeAttribute(DataType = "CableType")]
		[XmlElement("CableType")]
        public CableType? CableType {
            get {
                return CableTypeField;
            } 
            set {
                CableTypeField = value;
                 this.CableTypeSpecified = true;
                NotifyPropertyChanged("CableType");
            }
        }

        private CableType? CableTypeField; 

        /// <summary>
        /// CableTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CableTypeSpecified {
            get {
                return CableTypeSpecifiedField;
            } 
            set {
                CableTypeSpecifiedField = value;
                NotifyPropertyChanged("CableTypeSpecified");
            }
        }

        private bool CableTypeSpecifiedField; 

        /// <summary>
        /// The refractive index of a material depends on the frequency (or wavelength) of the light. Hence it is necessary to include both the value (a unitless number) and the frequency (or wavelength) it was measured at. The frequency will be a quantity type with a frequency unit such as Hz. 
        /// </summary>
		[Description("The refractive index of a material depends on the frequency (or wavelength) of the light. Hence it is necessary to include both the value (a unitless number) and the frequency (or wavelength) it was measured at. The frequency will be a quantity type with a frequency unit such as Hz.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberRefractiveIndex")]
		[XmlElement("RefractiveIndex")]
        public List<FiberRefractiveIndex> RefractiveIndex {
            get {
                return RefractiveIndexField;
            } 
            set {
                RefractiveIndexField = value;
                NotifyPropertyChanged("RefractiveIndex");
            }
        }

         /// <summary>
         /// bool to indicate if RefractiveIndex has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RefractiveIndexSpecified
         {
             get {
             if(RefractiveIndexField!=null)
                 return RefractiveIndexField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberRefractiveIndex> RefractiveIndexField; 

        /// <summary>
        /// The means by which this fiber segment is conveyed into the well.
        /// </summary>
		[Description("The means by which this fiber segment is conveyed into the well.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberConveyance")]
		[XmlElement("FiberConveyance")]
        public FiberConveyance FiberConveyance {
            get {
                return FiberConveyanceField;
            } 
            set {
                FiberConveyanceField = value;
                NotifyPropertyChanged("FiberConveyance");
            }
        }

        private FiberConveyance FiberConveyanceField; 

        /// <summary>
        /// The power loss for one way travel of a beam of light, usually measured in decibels per unit length. It is necessary to include both the value (and its unit) and the wavelength. The wavelength varies with the refractive index, while the frequency remains constant. The wavelength given to specify this type is the wavelength in a vacuum (refractive index = 1). 
        /// </summary>
		[Description("The power loss for one way travel of a beam of light, usually measured in decibels per unit length. It is necessary to include both the value (and its unit) and the wavelength. The wavelength varies with the refractive index, while the frequency remains constant.  The wavelength given to specify this type is the wavelength in a vacuum (refractive index = 1).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberOneWayAttenuation")]
		[XmlElement("OneWayAttenuation")]
        public List<FiberOneWayAttenuation> OneWayAttenuation {
            get {
                return OneWayAttenuationField;
            } 
            set {
                OneWayAttenuationField = value;
                NotifyPropertyChanged("OneWayAttenuation");
            }
        }

         /// <summary>
         /// bool to indicate if OneWayAttenuation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OneWayAttenuationSpecified
         {
             get {
             if(OneWayAttenuationField!=null)
                 return OneWayAttenuationField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberOneWayAttenuation> OneWayAttenuationField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberRefractiveIndex xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberRefractiveIndex", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberRefractiveIndex xsd type.")]
    public partial class FiberRefractiveIndex : Object, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the FiberRefractiveIndex class.
        /// </summary>
        public FiberRefractiveIndex() {}

        /// <summary>
        /// Initializes a new instance of the FiberRefractiveIndex class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public FiberRefractiveIndex(LogarithmicPowerRatioPerLengthMeasure value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// The value of the refractive index.
        /// </summary>
		[Required]
        [Description("The value of the refractive index.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LogarithmicPowerRatioPerLengthMeasure")]
		[XmlElement("Value")]
        public LogarithmicPowerRatioPerLengthMeasure Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private LogarithmicPowerRatioPerLengthMeasure ValueField; 

        /// <summary>
        /// The frequency (and UOM) for which the refractive index is measured.
        /// </summary>
		[Description("The frequency (and UOM) for which the refractive index is measured.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FrequencyMeasure")]
		[XmlElement("Frequency")]
        public FrequencyMeasure Frequency {
            get {
                return FrequencyField;
            } 
            set {
                FrequencyField = value;
                NotifyPropertyChanged("Frequency");
            }
        }

        private FrequencyMeasure FrequencyField; 

        /// <summary>
        /// The wavelength (and UOM) for which the refractive index is measured. The reported wavelength should be the wavelength of the light in a vacuum.
        /// </summary>
		[Description("The wavelength (and UOM) for which the refractive index is measured. The reported wavelength should be the wavelength of the light in a vacuum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Wavelength")]
        public LengthMeasure Wavelength {
            get {
                return WavelengthField;
            } 
            set {
                WavelengthField = value;
                NotifyPropertyChanged("Wavelength");
            }
        }

        private LengthMeasure WavelengthField; 

		/// <summary>
        /// Unique identifier of this object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier of this object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LogarithmicPowerRatioPerLengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LogarithmicPowerRatioPerLengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the LogarithmicPowerRatioPerLengthMeasure xsd type.")]
    public partial class LogarithmicPowerRatioPerLengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LogarithmicPowerRatioPerLengthMeasure class.
        /// </summary>
        public LogarithmicPowerRatioPerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LogarithmicPowerRatioPerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LogarithmicPowerRatioPerLengthMeasure(double value, LogarithmicPowerRatioPerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LogarithmicPowerRatioPerLengthUom")]
        [XmlAttribute("uom")]
		
        public LogarithmicPowerRatioPerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LogarithmicPowerRatioPerLengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberConveyance xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberConveyance", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberConveyance xsd type.")]
    public partial class FiberConveyance : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Cable property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractCable")]
		[XmlElement("Cable")]
        public AbstractCable Cable {
            get {
                return CableField;
            } 
            set {
                CableField = value;
                NotifyPropertyChanged("Cable");
            }
        }

        private AbstractCable CableField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractCable xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PermanentCable))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(InterventionConveyance))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberControlLine))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractCable", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractCable xsd type.")]
    public abstract partial class AbstractCable : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PermanentCable xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PermanentCable", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the PermanentCable xsd type.")]
    public partial class PermanentCable : AbstractCable, INotifyPropertyChanged
    {

        /// <summary>
        /// Enum. For permanent conveyance option, the type of conveyance. Example: clamped to tubular.
        /// </summary>
		[Required]
        [Description("Enum. For permanent conveyance option, the type of conveyance. Example: clamped to tubular.")]
        [EnergisticsDataTypeAttribute(DataType = "PermanentCableInstallationType")]
		[XmlElement("PermanentCableInstallationType")]
        public PermanentCableInstallationType? PermanentCableInstallationType {
            get {
                return PermanentCableInstallationTypeField;
            } 
            set {
                PermanentCableInstallationTypeField = value;
                 this.PermanentCableInstallationTypeSpecified = true;
                NotifyPropertyChanged("PermanentCableInstallationType");
            }
        }

        
        private bool PermanentCableInstallationTypeSpecifiedField = false;
        
        /// <summary>
        /// PermanentCableInstallationTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PermanentCableInstallationTypeSpecified {
            get {
                return PermanentCableInstallationTypeSpecifiedField;
            } 
            set {
                PermanentCableInstallationTypeSpecifiedField = value;
                NotifyPropertyChanged("PermanentCableInstallationTypeSpecified");
            }
        }
        
        private PermanentCableInstallationType? PermanentCableInstallationTypeField; 

        /// <summary>
        /// Comment about the intervention conveyance.
        /// </summary>
		[StringLength(2000)]
        [Description("Comment about the intervention conveyance.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the InterventionConveyance xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="InterventionConveyance", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the InterventionConveyance xsd type.")]
    public partial class InterventionConveyance : AbstractCable, INotifyPropertyChanged
    {

        /// <summary>
        /// The type from the enumeration list of InterventionConveyanceType.
        /// </summary>
		[Required]
        [Description("The type from the enumeration list of InterventionConveyanceType.")]
        [EnergisticsDataTypeAttribute(DataType = "InterventionConveyanceType")]
		[XmlElement("InterventionConveyanceType")]
        public InterventionConveyanceType? InterventionConveyanceType {
            get {
                return InterventionConveyanceTypeField;
            } 
            set {
                InterventionConveyanceTypeField = value;
                 this.InterventionConveyanceTypeSpecified = true;
                NotifyPropertyChanged("InterventionConveyanceType");
            }
        }

        
        private bool InterventionConveyanceTypeSpecifiedField = false;
        
        /// <summary>
        /// InterventionConveyanceTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InterventionConveyanceTypeSpecified {
            get {
                return InterventionConveyanceTypeSpecifiedField;
            } 
            set {
                InterventionConveyanceTypeSpecifiedField = value;
                NotifyPropertyChanged("InterventionConveyanceTypeSpecified");
            }
        }
        
        private InterventionConveyanceType? InterventionConveyanceTypeField; 

        /// <summary>
        /// Comment about the intervention conveyance.
        /// </summary>
		[StringLength(2000)]
        [Description("Comment about the intervention conveyance.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberControlLine xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberControlLine", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberControlLine xsd type.")]
    public partial class FiberControlLine : AbstractCable, INotifyPropertyChanged
    {

        /// <summary>
        /// Enum of the common sizes of control line. The enum list gives diameters and weight per length values. A fiber may be installed inside the control line.
        /// </summary>
		[Required]
        [Description("Enum of the common sizes of control line. The enum list gives diameters and weight per length values. A fiber may be installed inside the control line.")]
        [EnergisticsDataTypeAttribute(DataType = "ControlLineSize")]
		[XmlElement("Size")]
        public ControlLineSize? Size {
            get {
                return SizeField;
            } 
            set {
                SizeField = value;
                 this.SizeSpecified = true;
                NotifyPropertyChanged("Size");
            }
        }

        
        private bool SizeSpecifiedField = false;
        
        /// <summary>
        /// SizeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SizeSpecified {
            get {
                return SizeSpecifiedField;
            } 
            set {
                SizeSpecifiedField = value;
                NotifyPropertyChanged("SizeSpecified");
            }
        }
        
        private ControlLineSize? SizeField; 

        /// <summary>
        /// Enum of the common materials from which a control line may be made. A fiber may be installed inside the control line.
        /// </summary>
		[Required]
        [Description("Enum of the common materials from which a control line may be made. A fiber may be installed inside the control line.")]
        [EnergisticsDataTypeAttribute(DataType = "ControlLineMaterial")]
		[XmlElement("Material")]
        public ControlLineMaterial? Material {
            get {
                return MaterialField;
            } 
            set {
                MaterialField = value;
                 this.MaterialSpecified = true;
                NotifyPropertyChanged("Material");
            }
        }

        
        private bool MaterialSpecifiedField = false;
        
        /// <summary>
        /// MaterialSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MaterialSpecified {
            get {
                return MaterialSpecifiedField;
            } 
            set {
                MaterialSpecifiedField = value;
                NotifyPropertyChanged("MaterialSpecified");
            }
        }
        
        private ControlLineMaterial? MaterialField; 

        /// <summary>
        /// Enum of square or round encapsulation for a control line. A fiber may be installed inside the control line.
        /// </summary>
		[Required]
        [Description("Enum of square or round encapsulation for a control line. A fiber may be installed inside the control line.")]
        [EnergisticsDataTypeAttribute(DataType = "ControlLineEncapsulationType")]
		[XmlElement("EncapsulationType")]
        public ControlLineEncapsulationType? EncapsulationType {
            get {
                return EncapsulationTypeField;
            } 
            set {
                EncapsulationTypeField = value;
                 this.EncapsulationTypeSpecified = true;
                NotifyPropertyChanged("EncapsulationType");
            }
        }

        
        private bool EncapsulationTypeSpecifiedField = false;
        
        /// <summary>
        /// EncapsulationTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EncapsulationTypeSpecified {
            get {
                return EncapsulationTypeSpecifiedField;
            } 
            set {
                EncapsulationTypeSpecifiedField = value;
                NotifyPropertyChanged("EncapsulationTypeSpecified");
            }
        }
        
        private ControlLineEncapsulationType? EncapsulationTypeField; 

        /// <summary>
        /// Enum of the size of encapsulation of a fiber within a control line.
        /// </summary>
		[Required]
        [Description("Enum of the size of encapsulation of a fiber within a control line.")]
        [EnergisticsDataTypeAttribute(DataType = "ControlLineEncapsulationSize")]
		[XmlElement("EncapsulationSize")]
        public ControlLineEncapsulationSize? EncapsulationSize {
            get {
                return EncapsulationSizeField;
            } 
            set {
                EncapsulationSizeField = value;
                 this.EncapsulationSizeSpecified = true;
                NotifyPropertyChanged("EncapsulationSize");
            }
        }

        
        private bool EncapsulationSizeSpecifiedField = false;
        
        /// <summary>
        /// EncapsulationSizeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EncapsulationSizeSpecified {
            get {
                return EncapsulationSizeSpecifiedField;
            } 
            set {
                EncapsulationSizeSpecifiedField = value;
                NotifyPropertyChanged("EncapsulationSizeSpecified");
            }
        }
        
        private ControlLineEncapsulationSize? EncapsulationSizeField; 

        /// <summary>
        /// A descriptive remark about the fiber control line.
        /// </summary>
		[StringLength(2000)]
        [Description("A descriptive remark about the fiber control line.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// The activity of pumping the fiber downhole into a control line (small diameter tube). 
        /// </summary>
		[Description("The activity of pumping the fiber downhole into a control line (small diameter tube).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberPumpActivity")]
		[XmlElement("PumpActivity")]
        public List<FiberPumpActivity> PumpActivity {
            get {
                return PumpActivityField;
            } 
            set {
                PumpActivityField = value;
                NotifyPropertyChanged("PumpActivity");
            }
        }

         /// <summary>
         /// bool to indicate if PumpActivity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PumpActivitySpecified
         {
             get {
             if(PumpActivityField!=null)
                 return PumpActivityField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberPumpActivity> PumpActivityField; 

		/// <summary>
        /// A reference to the control line string in a completion data object that represents this control line containing a fiber.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A reference to the control line string in a completion data object that represents this control line containing a fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("downholeControlLineReference")]
		
        public string DownholeControlLineReference {
            get {
                return downholeControlLineReferenceField;
            } 
            set {
                downholeControlLineReferenceField = value;
                NotifyPropertyChanged("DownholeControlLineReference");
            }
        }

        private string downholeControlLineReferenceField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberPumpActivity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberPumpActivity", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberPumpActivity xsd type.")]
    public partial class FiberPumpActivity : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A name that can be used to reference the pumping activity. In general, a pumping activity does not have a natural name, so this element is often not used.
        /// </summary>
		[StringLength(64)]
        [Description("A name that can be used to reference the pumping activity. In general, a pumping activity does not have a natural name, so this element is often not used.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// The name of the InstalledFiberInstance that this activity relates to.
        /// </summary>
		[StringLength(64)]
        [Description("The name of the InstalledFiberInstance that this activity relates to.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("InstalledFiber")]
        public string InstalledFiber {
            get {
                return InstalledFiberField;
            } 
            set {
                InstalledFiberField = value;
                NotifyPropertyChanged("InstalledFiber");
            }
        }

        private string InstalledFiberField; 

        /// <summary>
        /// The date of the pumping activity.
        /// </summary>
		[Description("The date of the pumping activity.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("PumpingDate", DataType="date")]
        public DateTime? PumpingDate {
            get {
                return PumpingDateField;
            } 
            set {
                PumpingDateField = value;
                 this.PumpingDateSpecified = true;
                NotifyPropertyChanged("PumpingDate");
            }
        }

        private DateTime? PumpingDateField; 

        /// <summary>
        /// PumpingDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PumpingDateSpecified {
            get {
                return PumpingDateSpecifiedField;
            } 
            set {
                PumpingDateSpecifiedField = value;
                NotifyPropertyChanged("PumpingDateSpecified");
            }
        }

        private bool PumpingDateSpecifiedField; 

        /// <summary>
        /// The person in charge of the pumping activity.
        /// </summary>
		[StringLength(64)]
        [Description("The person in charge of the pumping activity.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("EngineerName")]
        public string EngineerName {
            get {
                return EngineerNameField;
            } 
            set {
                EngineerNameField = value;
                NotifyPropertyChanged("EngineerName");
            }
        }

        private string EngineerNameField; 

        /// <summary>
        /// The company that performed the pumping activity.
        /// </summary>
		[StringLength(64)]
        [Description("The company that performed the pumping activity.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ServiceCompany")]
        public string ServiceCompany {
            get {
                return ServiceCompanyField;
            } 
            set {
                ServiceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private string ServiceCompanyField; 

        /// <summary>
        /// The type of fluid used in the pump.
        /// </summary>
		[StringLength(64)]
        [Description("The type of fluid used in the pump.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PumpFluidType")]
        public string PumpFluidType {
            get {
                return PumpFluidTypeField;
            } 
            set {
                PumpFluidTypeField = value;
                NotifyPropertyChanged("PumpFluidType");
            }
        }

        private string PumpFluidTypeField; 

        /// <summary>
        /// The type of fluid used in the control line.
        /// </summary>
		[StringLength(64)]
        [Description("The type of fluid used in the control line.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ControlLineFluid")]
        public string ControlLineFluid {
            get {
                return ControlLineFluidField;
            } 
            set {
                ControlLineFluidField = value;
                NotifyPropertyChanged("ControlLineFluid");
            }
        }

        private string ControlLineFluidField; 

        /// <summary>
        /// The direction of the pumping.
        /// </summary>
		[StringLength(64)]
        [Description("The direction of the pumping.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PumpDirection")]
        public string PumpDirection {
            get {
                return PumpDirectionField;
            } 
            set {
                PumpDirectionField = value;
                NotifyPropertyChanged("PumpDirection");
            }
        }

        private string PumpDirectionField; 

        /// <summary>
        /// The type of end seal on the fiber.
        /// </summary>
		[StringLength(64)]
        [Description("The type of end seal on the fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FiberEndSeal")]
        public string FiberEndSeal {
            get {
                return FiberEndSealField;
            } 
            set {
                FiberEndSealField = value;
                NotifyPropertyChanged("FiberEndSeal");
            }
        }

        private string FiberEndSealField; 

        /// <summary>
        /// The type of cable meter.
        /// </summary>
		[StringLength(64)]
        [Description("The type of cable meter.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CableMeterType")]
        public string CableMeterType {
            get {
                return CableMeterTypeField;
            } 
            set {
                CableMeterTypeField = value;
                NotifyPropertyChanged("CableMeterType");
            }
        }

        private string CableMeterTypeField; 

        /// <summary>
        /// The serial number of the cable meter.
        /// </summary>
		[StringLength(64)]
        [Description("The serial number of the cable meter.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CableMeterSerialNumber")]
        public string CableMeterSerialNumber {
            get {
                return CableMeterSerialNumberField;
            } 
            set {
                CableMeterSerialNumberField = value;
                NotifyPropertyChanged("CableMeterSerialNumber");
            }
        }

        private string CableMeterSerialNumberField; 

        /// <summary>
        /// The date the cable meter was calibrated.
        /// </summary>
		[Description("The date the cable meter was calibrated.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("CableMeterCalibrationDate", DataType="date")]
        public DateTime? CableMeterCalibrationDate {
            get {
                return CableMeterCalibrationDateField;
            } 
            set {
                CableMeterCalibrationDateField = value;
                 this.CableMeterCalibrationDateSpecified = true;
                NotifyPropertyChanged("CableMeterCalibrationDate");
            }
        }

        private DateTime? CableMeterCalibrationDateField; 

        /// <summary>
        /// CableMeterCalibrationDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CableMeterCalibrationDateSpecified {
            get {
                return CableMeterCalibrationDateSpecifiedField;
            } 
            set {
                CableMeterCalibrationDateSpecifiedField = value;
                NotifyPropertyChanged("CableMeterCalibrationDateSpecified");
            }
        }

        private bool CableMeterCalibrationDateSpecifiedField; 

        /// <summary>
        /// The length of the excess fiber that was removed.
        /// </summary>
		[Description("The length of the excess fiber that was removed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("ExcessFiberRecovered")]
        public LengthMeasure ExcessFiberRecovered {
            get {
                return ExcessFiberRecoveredField;
            } 
            set {
                ExcessFiberRecoveredField = value;
                NotifyPropertyChanged("ExcessFiberRecovered");
            }
        }

        private LengthMeasure ExcessFiberRecoveredField; 

        /// <summary>
        /// Comment about the pump activity.
        /// </summary>
		[StringLength(2000)]
        [Description("Comment about the pump activity.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

		/// <summary>
        /// Unique identifier of this object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier of this object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberOneWayAttenuation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberOneWayAttenuation", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberOneWayAttenuation xsd type.")]
    public partial class FiberOneWayAttenuation : Object, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the FiberOneWayAttenuation class.
        /// </summary>
        public FiberOneWayAttenuation() {}

        /// <summary>
        /// Initializes a new instance of the FiberOneWayAttenuation class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public FiberOneWayAttenuation(LogarithmicPowerRatioPerLengthMeasure value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("The value of the one-way loss per unit of length. The usual UOM is decibels per kilometer (dB/km) although this might vary depending on the calibration method used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LogarithmicPowerRatioPerLengthMeasure")]
		[XmlElement("Value")]
        public LogarithmicPowerRatioPerLengthMeasure Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private LogarithmicPowerRatioPerLengthMeasure ValueField; 

        /// <summary>
        /// AttenuationMeasure property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractAttenuationMeasure")]
		[XmlElement("AttenuationMeasure")]
        public AbstractAttenuationMeasure AttenuationMeasure {
            get {
                return AttenuationMeasureField;
            } 
            set {
                AttenuationMeasureField = value;
                NotifyPropertyChanged("AttenuationMeasure");
            }
        }

        private AbstractAttenuationMeasure AttenuationMeasureField; 

		/// <summary>
        /// Unique identifier of this object.
        /// </summary>
		[Required]
        [RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("Unique identifier of this object.")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractAttenuationMeasure xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WaveLength))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Frequency))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractAttenuationMeasure", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractAttenuationMeasure xsd type.")]
    public abstract partial class AbstractAttenuationMeasure : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WaveLength xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WaveLength", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the WaveLength xsd type.")]
    public partial class WaveLength : AbstractAttenuationMeasure, INotifyPropertyChanged
    {

        /// <summary>
        /// WaveLength1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("WaveLength")]
        public LengthMeasure WaveLength1 {
            get {
                return WaveLength1Field;
            } 
            set {
                WaveLength1Field = value;
                NotifyPropertyChanged("WaveLength1");
            }
        }

        private LengthMeasure WaveLength1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Frequency xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Frequency", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the Frequency xsd type.")]
    public partial class Frequency : AbstractAttenuationMeasure, INotifyPropertyChanged
    {

        /// <summary>
        /// Frequency1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("Frequency")]
        public FrequencyMeasure Frequency1 {
            get {
                return Frequency1Field;
            } 
            set {
                Frequency1Field = value;
                NotifyPropertyChanged("Frequency1");
            }
        }

        private FrequencyMeasure Frequency1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberConnection xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberConnection", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberConnection xsd type.")]
    public partial class FiberConnection : FiberCommon, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Specifies whether this is a dry mate or wet mate.
        /// </summary>
		[Required]
        [Description("Specifies whether this is a dry mate or wet mate.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberConnectorTypes")]
		[XmlElement("ConnectorType")]
        public List<FiberConnectorTypes> ConnectorType {
            get {
                return ConnectorTypeField;
            } 
            set {
                ConnectorTypeField = value;
                NotifyPropertyChanged("ConnectorType");
            }
        }

         /// <summary>
         /// bool to indicate if ConnectorType has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ConnectorTypeSpecified
         {
             get {
             if(ConnectorTypeField!=null)
                 return ConnectorTypeField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberConnectorTypes> ConnectorTypeField; 

        /// <summary>
        /// Describes whether the fiber end is angle polished or flat polished.
        /// </summary>
		[Description("Describes whether the fiber end is angle polished or flat polished.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberEndType")]
		[XmlElement("EndType")]
        public List<FiberEndType> EndType {
            get {
                return EndTypeField;
            } 
            set {
                EndTypeField = value;
                NotifyPropertyChanged("EndType");
            }
        }

         /// <summary>
         /// bool to indicate if EndType has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EndTypeSpecified
         {
             get {
             if(EndTypeField!=null)
                 return EndTypeField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberEndType> EndTypeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberOTDRInstrumentBox xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberOTDRInstrumentBox", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberOTDRInstrumentBox xsd type.")]
    public partial class FiberOTDRInstrumentBox : Instrument, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DtsPatchCord xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DtsPatchCord", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DtsPatchCord xsd type.")]
    public partial class DtsPatchCord : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Optical distance between the instrument and the end of the patch cord that will be attached to the rest of the optical path from which a measurement will be taken.
        /// </summary>
		[Description("Optical distance between the instrument and the end of the patch cord that will be attached to the rest of the optical path from which a measurement will be taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("FiberLength")]
        public LengthMeasure FiberLength {
            get {
                return FiberLengthField;
            } 
            set {
                FiberLengthField = value;
                NotifyPropertyChanged("FiberLength");
            }
        }

        private LengthMeasure FiberLengthField; 

        /// <summary>
        /// A textual description of the patch cord.
        /// </summary>
		[StringLength(2000)]
        [Description("A textual description of the patch cord.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the DasAcquisition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the DasAcquisition xsd type.")]
    public partial class DasAcquisition : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// AcquisitionId property
        /// </summary>
		[Required]
        [RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("A universally unique identifier (UUID) for an instance of a DAS acquisition.")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
		[XmlElement("AcquisitionId")]
        public string AcquisitionId {
            get {
                return AcquisitionIdField;
            } 
            set {
                AcquisitionIdField = value;
                NotifyPropertyChanged("AcquisitionId");
            }
        }

        private string AcquisitionIdField; 

        /// <summary>
        /// AcquisitionDescription property
        /// </summary>
		[StringLength(2000)]
        [Description("Free format description of the acquired DAS data.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("AcquisitionDescription")]
        public string AcquisitionDescription {
            get {
                return AcquisitionDescriptionField;
            } 
            set {
                AcquisitionDescriptionField = value;
                NotifyPropertyChanged("AcquisitionDescription");
            }
        }

        private string AcquisitionDescriptionField; 

        /// <summary>
        /// OpticalPath property
        /// </summary>
		[Required]
        [Description("Description of the fiber optical path. A fiber optical path consists of a series of fibers, connectors, etc. together forming the path for the light pulse emitted from the measurement instrument.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("OpticalPath")]
        public DataObjectReference OpticalPath {
            get {
                return OpticalPathField;
            } 
            set {
                OpticalPathField = value;
                NotifyPropertyChanged("OpticalPath");
            }
        }

        private DataObjectReference OpticalPathField; 

        /// <summary>
        /// DasInstrumentBox property
        /// </summary>
		[Required]
        [Description("Description of the measurement instrument. Often referred to as interrogator unit or IU.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("DasInstrumentBox")]
        public DataObjectReference DasInstrumentBox {
            get {
                return DasInstrumentBoxField;
            } 
            set {
                DasInstrumentBoxField = value;
                NotifyPropertyChanged("DasInstrumentBox");
            }
        }

        private DataObjectReference DasInstrumentBoxField; 

        /// <summary>
        /// FacilityId property
        /// </summary>
		[Required]
        [Description("This is a human-readable name for the facility or facilities which this acquisition is measuring.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FacilityId")]
        public List<string> FacilityId {
            get {
                return FacilityIdField;
            } 
            set {
                FacilityIdField = value;
                NotifyPropertyChanged("FacilityId");
            }
        }

         /// <summary>
         /// bool to indicate if FacilityId has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacilityIdSpecified
         {
             get {
             if(FacilityIdField!=null)
                 return FacilityIdField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> FacilityIdField; 

        /// <summary>
        /// VendorCode property
        /// </summary>
		[Required]
        [Description("Description of the vendor providing the DAS data acquisition service.  Note that in the HDF5 (H5) file, this is a single string describing vendor name and some additional information that the vendor deems relevant, e.g., ‘VendorX FBE data version 2.3’.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BusinessAssociate")]
		[XmlElement("VendorCode")]
        public BusinessAssociate VendorCode {
            get {
                return VendorCodeField;
            } 
            set {
                VendorCodeField = value;
                NotifyPropertyChanged("VendorCode");
            }
        }

        private BusinessAssociate VendorCodeField; 

        /// <summary>
        /// PulseRate property
        /// </summary>
		[Required]
        [Description("The rate at which the interrogator unit interrogates the fiber sensor. For most interrogators, this element is informally known as the ‘pulse rate’.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FrequencyMeasure")]
		[XmlElement("PulseRate")]
        public FrequencyMeasure PulseRate {
            get {
                return PulseRateField;
            } 
            set {
                PulseRateField = value;
                NotifyPropertyChanged("PulseRate");
            }
        }

        private FrequencyMeasure PulseRateField; 

        /// <summary>
        /// PulseWidth property
        /// </summary>
		[Required]
        [Description("The width of the ‘pulse’ sent down the fiber.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("PulseWidth")]
        public TimeMeasure PulseWidth {
            get {
                return PulseWidthField;
            } 
            set {
                PulseWidthField = value;
                NotifyPropertyChanged("PulseWidth");
            }
        }

        private TimeMeasure PulseWidthField; 

        /// <summary>
        /// GaugeLength property
        /// </summary>
		[Required]
        [Description("A distance (length along the fiber) which the DAS interrogator unit manufacturer designs and implements by hardware or software to affect the interrogator unit spatial resolution.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("GaugeLength")]
        public LengthMeasure GaugeLength {
            get {
                return GaugeLengthField;
            } 
            set {
                GaugeLengthField = value;
                NotifyPropertyChanged("GaugeLength");
            }
        }

        private LengthMeasure GaugeLengthField; 

        /// <summary>
        /// GaugeLengthUnit property
        /// </summary>
		[StringLength(64)]
        [Description("Only required in an HDF5 (H5) file to record the unit of measure of the gauge length.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("GaugeLengthUnit")]
        public string GaugeLengthUnit {
            get {
                return GaugeLengthUnitField;
            } 
            set {
                GaugeLengthUnitField = value;
                NotifyPropertyChanged("GaugeLengthUnit");
            }
        }

        private string GaugeLengthUnitField; 

        /// <summary>
        /// SpatialSamplingInterval property
        /// </summary>
		[Required]
        [Description("The separation between two consecutive ‘spatial sample’ points on the fiber at which the signal is measured. Not to be confused with ‘spatial resolution’.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SpatialSamplingInterval")]
        public LengthMeasure SpatialSamplingInterval {
            get {
                return SpatialSamplingIntervalField;
            } 
            set {
                SpatialSamplingIntervalField = value;
                NotifyPropertyChanged("SpatialSamplingInterval");
            }
        }

        private LengthMeasure SpatialSamplingIntervalField; 

        /// <summary>
        /// SpatialSamplingIntervalUnit property
        /// </summary>
		[StringLength(64)]
        [Description("Only required in an HDF5 (H5) file to record the unit of measure of the sampling interval.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SpatialSamplingIntervalUnit")]
        public string SpatialSamplingIntervalUnit {
            get {
                return SpatialSamplingIntervalUnitField;
            } 
            set {
                SpatialSamplingIntervalUnitField = value;
                NotifyPropertyChanged("SpatialSamplingIntervalUnit");
            }
        }

        private string SpatialSamplingIntervalUnitField; 

        /// <summary>
        /// MinimumFrequency property
        /// </summary>
		[Required]
        [Description("The minimum signal frequency a measurement instrument can provide as specified by the vendor.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FrequencyMeasure")]
		[XmlElement("MinimumFrequency")]
        public FrequencyMeasure MinimumFrequency {
            get {
                return MinimumFrequencyField;
            } 
            set {
                MinimumFrequencyField = value;
                NotifyPropertyChanged("MinimumFrequency");
            }
        }

        private FrequencyMeasure MinimumFrequencyField; 

        /// <summary>
        /// MaximumFrequency property
        /// </summary>
		[Required]
        [Description("The maximum signal frequency a measurement instrument can provide as specified by the vendor. This is the Nyquist frequency (or some fraction thereof) of PulseRate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FrequencyMeasure")]
		[XmlElement("MaximumFrequency")]
        public FrequencyMeasure MaximumFrequency {
            get {
                return MaximumFrequencyField;
            } 
            set {
                MaximumFrequencyField = value;
                NotifyPropertyChanged("MaximumFrequency");
            }
        }

        private FrequencyMeasure MaximumFrequencyField; 

        /// <summary>
        /// NumberOfLoci property
        /// </summary>
		[Required]
        [Description("The total number of ‘loci’ (acoustic sample points) acquired by the measurement instrument in a single ‘scan’ of the fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("NumberOfLoci")]
        public long? NumberOfLoci {
            get {
                return NumberOfLociField;
            } 
            set {
                NumberOfLociField = value;
                NotifyPropertyChanged("NumberOfLoci");
            }
        }

        private long? NumberOfLociField; 

        /// <summary>
        /// StartLocusIndex property
        /// </summary>
		[Required]
        [Description("The first ‘locus’ acquired by the interrogator unit. Where ‘Locus Index 0’ is the acoustic sample point at the connector of the measurement instrument.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StartLocusIndex")]
        public long? StartLocusIndex {
            get {
                return StartLocusIndexField;
            } 
            set {
                StartLocusIndexField = value;
                NotifyPropertyChanged("StartLocusIndex");
            }
        }

        private long? StartLocusIndexField; 

        /// <summary>
        /// MeasurementStartTime property
        /// </summary>
		[Required]
        [Description("The time-date specification of the beginning of a data ‘sample’ in a ‘time series’ in ISO 8601 compatible format. This is typically a GPS-locked time measurement.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("MeasurementStartTime")]
        public Timestamp? MeasurementStartTime {
            get {
                return MeasurementStartTimeField;
            } 
            set {
                MeasurementStartTimeField = value;
                 this.MeasurementStartTimeSpecified = true;
                NotifyPropertyChanged("MeasurementStartTime");
            }
        }

        
        private bool MeasurementStartTimeSpecifiedField = false;
        
        /// <summary>
        /// MeasurementStartTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasurementStartTimeSpecified {
            get {
                return MeasurementStartTimeSpecifiedField;
            } 
            set {
                MeasurementStartTimeSpecifiedField = value;
                NotifyPropertyChanged("MeasurementStartTimeSpecified");
            }
        }
        
        private Timestamp? MeasurementStartTimeField; 

        /// <summary>
        /// TriggeredMeasurement property
        /// </summary>
		[Required]
        [Description("Measurement for an acquisition that requires synchronization between a transmitting source (Tx) and a recording (Rx) measurement system. It must be recorded for every measurement regardless of what application it will serve.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("TriggeredMeasurement")]
        public bool? TriggeredMeasurement {
            get {
                return TriggeredMeasurementField;
            } 
            set {
                TriggeredMeasurementField = value;
                NotifyPropertyChanged("TriggeredMeasurement");
            }
        }

        private bool? TriggeredMeasurementField; 

        /// <summary>
        /// PulseWidthUnit property
        /// </summary>
		[StringLength(64)]
        [Description("Only required in an HDF5 (H5) file to record the unit of measure of the pulse width. Default is nanoseconds (ns).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PulseWidthUnit")]
        public string PulseWidthUnit {
            get {
                return PulseWidthUnitField;
            } 
            set {
                PulseWidthUnitField = value;
                NotifyPropertyChanged("PulseWidthUnit");
            }
        }

        private string PulseWidthUnitField; 

        /// <summary>
        /// Raw property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DasRaw")]
		[XmlElement("Raw")]
        public List<DasRaw> Raw {
            get {
                return RawField;
            } 
            set {
                RawField = value;
                NotifyPropertyChanged("Raw");
            }
        }

         /// <summary>
         /// bool to indicate if Raw has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RawSpecified
         {
             get {
             if(RawField!=null)
                 return RawField.Count>0?true:false;
             else return false;
             }
         }
        private List<DasRaw> RawField; 

        /// <summary>
        /// Custom property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "DasCustom")]
		[XmlElement("Custom")]
        public DasCustom Custom {
            get {
                return CustomField;
            } 
            set {
                CustomField = value;
                NotifyPropertyChanged("Custom");
            }
        }

        private DasCustom CustomField; 

        /// <summary>
        /// Calibration property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DasCalibration")]
		[XmlElement("Calibration")]
        public List<DasCalibration> Calibration {
            get {
                return CalibrationField;
            } 
            set {
                CalibrationField = value;
                NotifyPropertyChanged("Calibration");
            }
        }

         /// <summary>
         /// bool to indicate if Calibration has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CalibrationSpecified
         {
             get {
             if(CalibrationField!=null)
                 return CalibrationField.Count>0?true:false;
             else return false;
             }
         }
        private List<DasCalibration> CalibrationField; 

        /// <summary>
        /// Processed property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DasProcessed")]
		[XmlElement("Processed")]
        public DasProcessed Processed {
            get {
                return ProcessedField;
            } 
            set {
                ProcessedField = value;
                NotifyPropertyChanged("Processed");
            }
        }

        private DasProcessed ProcessedField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DasRaw xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DasRaw", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DasRaw xsd type.")]
    public partial class DasRaw : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// RawIndex property
        /// </summary>
		[Description("The nth count of this Raw instance in the Acquisition.  Recommended if there is more than 1 Raw instance in this Acquisition.  This index corresponds to the Raw array number in the H5 file.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("RawIndex")]
        public long? RawIndex {
            get {
                return RawIndexField;
            } 
            set {
                RawIndexField = value;
                 this.RawIndexSpecified = true;
                NotifyPropertyChanged("RawIndex");
            }
        }

        private long? RawIndexField; 

        /// <summary>
        /// RawIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RawIndexSpecified {
            get {
                return RawIndexSpecifiedField;
            } 
            set {
                RawIndexSpecifiedField = value;
                NotifyPropertyChanged("RawIndexSpecified");
            }
        }

        private bool RawIndexSpecifiedField; 

        /// <summary>
        /// RawDescription property
        /// </summary>
		[StringLength(2000)]
        [Description("Free format description of the raw DAS data acquired.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("RawDescription")]
        public string RawDescription {
            get {
                return RawDescriptionField;
            } 
            set {
                RawDescriptionField = value;
                NotifyPropertyChanged("RawDescription");
            }
        }

        private string RawDescriptionField; 

        /// <summary>
        /// RawDataUnit property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Data unit for the DAS measurement instrument.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("RawDataUnit")]
        public string RawDataUnit {
            get {
                return RawDataUnitField;
            } 
            set {
                RawDataUnitField = value;
                NotifyPropertyChanged("RawDataUnit");
            }
        }

        private string RawDataUnitField; 

        /// <summary>
        /// OutputDataRate property
        /// </summary>
		[Description("The rate at which the spectra data is provided for all ‘loci’ (spatial samples). This is typically equal to the interrogation rate/pulse rate of the DAS measurement system or an integer fraction thereof. This attribute is optional in the Raw Data object. If present, it overrides the Acquisition PulseRate. If not present, then OutputDataRate is assumed equal to the PulseRate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FrequencyMeasure")]
		[XmlElement("OutputDataRate")]
        public FrequencyMeasure OutputDataRate {
            get {
                return OutputDataRateField;
            } 
            set {
                OutputDataRateField = value;
                NotifyPropertyChanged("OutputDataRate");
            }
        }

        private FrequencyMeasure OutputDataRateField; 

        /// <summary>
        /// StartLocusIndex property
        /// </summary>
		[Required]
        [Description("The first ‘locus’ acquired by the interrogator unit. Where ‘Locus Index 0’ is the acoustic sample point at the connector of the measurement instrument.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StartLocusIndex")]
        public long? StartLocusIndex {
            get {
                return StartLocusIndexField;
            } 
            set {
                StartLocusIndexField = value;
                NotifyPropertyChanged("StartLocusIndex");
            }
        }

        private long? StartLocusIndexField; 

        /// <summary>
        /// NumberOfLoci property
        /// </summary>
		[Required]
        [Description("The total number of ‘loci’ (acoustic sample points) acquired by the measurement instrument in a single ‘scan’ of the fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("NumberOfLoci")]
        public long? NumberOfLoci {
            get {
                return NumberOfLociField;
            } 
            set {
                NumberOfLociField = value;
                NotifyPropertyChanged("NumberOfLoci");
            }
        }

        private long? NumberOfLociField; 

        /// <summary>
        /// RawData property
        /// </summary>
		[Required]
        [Description("A DAS array object containing the raw DAS data.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DasRawData")]
		[XmlElement("RawData")]
        public DasRawData RawData {
            get {
                return RawDataField;
            } 
            set {
                RawDataField = value;
                NotifyPropertyChanged("RawData");
            }
        }

        private DasRawData RawDataField; 

        /// <summary>
        /// RawDataTime property
        /// </summary>
		[Required]
        [Description("A DAS array object containing the sample times corresponding to a single ‘scan’ of the fiber. In a single ‘scan’, the DAS measurement system acquires raw data samples for all the loci specified by StartLocusIndex . The ‘scan’ frequency is equal to the DAS Acquisition Pulse Rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DasTimeArray")]
		[XmlElement("RawDataTime")]
        public DasTimeArray RawDataTime {
            get {
                return RawDataTimeField;
            } 
            set {
                RawDataTimeField = value;
                NotifyPropertyChanged("RawDataTime");
            }
        }

        private DasTimeArray RawDataTimeField; 

        /// <summary>
        /// RawDataTriggerTime property
        /// </summary>
		[Description("A DAS array object containing the times of the triggers in a triggered measurement. Multiple times may be stored to indicate multiple triggers within a single DAS raw data recording. This array contains only valid data if TriggeredMeasurement is set to ‘true’ in DAS Acquisition.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DasTimeArray")]
		[XmlElement("RawDataTriggerTime")]
        public DasTimeArray RawDataTriggerTime {
            get {
                return RawDataTriggerTimeField;
            } 
            set {
                RawDataTriggerTimeField = value;
                NotifyPropertyChanged("RawDataTriggerTime");
            }
        }

        private DasTimeArray RawDataTriggerTimeField; 

        /// <summary>
        /// Custom property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "DasCustom")]
		[XmlElement("Custom")]
        public DasCustom Custom {
            get {
                return CustomField;
            } 
            set {
                CustomField = value;
                NotifyPropertyChanged("Custom");
            }
        }

        private DasCustom CustomField; 

		/// <summary>
        /// A universally unique identifier (UUID) for an instance of raw DAS data.
        /// </summary>
		[Required]
        [RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("A universally unique identifier (UUID) for an instance of raw DAS data.")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
        [XmlAttribute("uuid")]
		
        public string Uuid {
            get {
                return uuidField;
            } 
            set {
                uuidField = value;
                NotifyPropertyChanged("Uuid");
            }
        }

        private string uuidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DasRawData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DasRawData", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DasRawData xsd type.")]
    public partial class DasRawData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Dimensions property
        /// </summary>
		[Required]
        [Description("An array of two elements describing the ordering of the raw data array. The fastest running index is stored in the second element. For the DAS measurement instrument, the ordering is typically {‘time’, ‘locus’} indicating that the locus is the fastest running index, but in some cases the order may be reversed.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DasDimensions")]
		[XmlElement("Dimensions")]
        public List<DasDimensions> Dimensions {
            get {
                return DimensionsField;
            } 
            set {
                DimensionsField = value;
                NotifyPropertyChanged("Dimensions");
            }
        }

         /// <summary>
         /// bool to indicate if Dimensions has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DimensionsSpecified
         {
             get {
             if(DimensionsField!=null)
                 return DimensionsField.Count>0?true:false;
             else return false;
             }
         }
        private List<DasDimensions> DimensionsField; 

        /// <summary>
        /// RawDataArray property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractNumericArray")]
		[XmlElement("RawDataArray")]
        public AbstractNumericArray RawDataArray {
            get {
                return RawDataArrayField;
            } 
            set {
                RawDataArrayField = value;
                NotifyPropertyChanged("RawDataArray");
            }
        }

        private AbstractNumericArray RawDataArrayField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractNumericArray xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractIntegerArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerRangeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerArrayFromBooleanMaskArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractFloatingPointArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointConstantArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractNumericArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractNumericArray xsd type.")]
    public abstract partial class AbstractNumericArray : AbstractValueArray, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractValueArray xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractStringArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractNumericArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractIntegerArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerRangeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerArrayFromBooleanMaskArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractFloatingPointArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractBooleanArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanArrayFromIndexArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractValueArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractValueArray xsd type.")]
    public abstract partial class AbstractValueArray : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractStringArray xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringConstantArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractStringArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractStringArray xsd type.")]
    public abstract partial class AbstractStringArray : AbstractValueArray, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StringExternalArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StringExternalArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the StringExternalArray xsd type.")]
    public partial class StringExternalArray : AbstractStringArray, INotifyPropertyChanged
    {

        /// <summary>
        /// Values property
        /// </summary>
		[Required]
        [Description("Reference to HDF5 array of integer or double")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExternalDataset")]
		[XmlArrayItem("ExternalFileProxy")]
        [XmlArray("Values")]
        public List<ExternalDatasetPart> Values {
            get {
                return ValuesField;
            } 
            set {
                ValuesField = value;
                NotifyPropertyChanged("Values");
            }
        }

         /// <summary>
         /// bool to indicate if Values has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ValuesSpecified
         {
             get {
             if(ValuesField!=null)
                 return ValuesField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExternalDatasetPart> ValuesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ExternalDatasetPart xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DasExternalDatasetPart))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ExternalDatasetPart", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ExternalDatasetPart xsd type.")]
    public partial class ExternalDatasetPart : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Count property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("Count")]
        public long? Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private long? CountField; 

        /// <summary>
        /// PathInExternalFile property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("A string which is meaningful to the API which will store and retrieve data from the external file.  For an HDF file this is the path of the referenced dataset in the external file. The separator between groups and final dataset is a slash '/' in an hdf file.  For a LAS file this could be the list of mnemonics in the ~A block.  For a SEG-Y file this could be a list of trace headers.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("PathInExternalFile")]
        public string PathInExternalFile {
            get {
                return PathInExternalFileField;
            } 
            set {
                PathInExternalFileField = value;
                NotifyPropertyChanged("PathInExternalFile");
            }
        }

        private string PathInExternalFileField; 

        /// <summary>
        /// StartIndex property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StartIndex")]
        public long? StartIndex {
            get {
                return StartIndexField;
            } 
            set {
                StartIndexField = value;
                NotifyPropertyChanged("StartIndex");
            }
        }

        private long? StartIndexField; 

        /// <summary>
        /// EpcExternalPartReference property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("EpcExternalPartReference")]
        public DataObjectReference EpcExternalPartReference {
            get {
                return EpcExternalPartReferenceField;
            } 
            set {
                EpcExternalPartReferenceField = value;
                NotifyPropertyChanged("EpcExternalPartReference");
            }
        }

        private DataObjectReference EpcExternalPartReferenceField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DasExternalDatasetPart xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DasExternalDatasetPart", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DasExternalDatasetPart xsd type.")]
    public partial class DasExternalDatasetPart : ExternalDatasetPart, INotifyPropertyChanged
    {

        /// <summary>
        /// The timestamp in human readable, ISO 8601 format of the first recorded sample in the sub-record of the raw data array stored in the corresponding HDF data file. 
        /// </summary>
		[Description("The timestamp in human readable, ISO 8601 format of the first recorded sample in the sub-record of the raw data array stored in the corresponding HDF data file.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("PartStartTime")]
        public Timestamp? PartStartTime {
            get {
                return PartStartTimeField;
            } 
            set {
                PartStartTimeField = value;
                 this.PartStartTimeSpecified = true;
                NotifyPropertyChanged("PartStartTime");
            }
        }

        private Timestamp? PartStartTimeField; 

        /// <summary>
        /// PartStartTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PartStartTimeSpecified {
            get {
                return PartStartTimeSpecifiedField;
            } 
            set {
                PartStartTimeSpecifiedField = value;
                NotifyPropertyChanged("PartStartTimeSpecified");
            }
        }

        private bool PartStartTimeSpecifiedField; 

        /// <summary>
        /// The timestamp in human readable, ISO 8601 format of the last recorded sample in the sub-record of the raw data array stored in the corresponding HDF data file. 
        /// </summary>
		[Description("The timestamp in human readable, ISO 8601 format of the last recorded sample in the sub-record of the raw data array stored in the corresponding HDF data file.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("PartEndTime")]
        public Timestamp? PartEndTime {
            get {
                return PartEndTimeField;
            } 
            set {
                PartEndTimeField = value;
                 this.PartEndTimeSpecified = true;
                NotifyPropertyChanged("PartEndTime");
            }
        }

        private Timestamp? PartEndTimeField; 

        /// <summary>
        /// PartEndTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PartEndTimeSpecified {
            get {
                return PartEndTimeSpecifiedField;
            } 
            set {
                PartEndTimeSpecifiedField = value;
                NotifyPropertyChanged("PartEndTimeSpecified");
            }
        }

        private bool PartEndTimeSpecifiedField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StringConstantArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StringConstantArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the StringConstantArray xsd type.")]
    public partial class StringConstantArray : AbstractStringArray, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StringConstantArray class.
        /// </summary>
        public StringConstantArray() {}

        /// <summary>
        /// Initializes a new instance of the StringConstantArray class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public StringConstantArray(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Value inside all the elements of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Value")]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 

        /// <summary>
        /// Count property
        /// </summary>
		[Required]
        [Description("Size of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("Count")]
        public long? Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private long? CountField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractBooleanArray xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanArrayFromIndexArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractBooleanArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractBooleanArray xsd type.")]
    public abstract partial class AbstractBooleanArray : AbstractValueArray, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BooleanExternalArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BooleanExternalArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the BooleanExternalArray xsd type.")]
    public partial class BooleanExternalArray : AbstractBooleanArray, INotifyPropertyChanged
    {

        /// <summary>
        /// Values property
        /// </summary>
		[Required]
        [Description("Reference to an HDF5 array of values.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExternalDataset")]
		[XmlArrayItem("ExternalFileProxy")]
        [XmlArray("Values")]
        public List<ExternalDatasetPart> Values {
            get {
                return ValuesField;
            } 
            set {
                ValuesField = value;
                NotifyPropertyChanged("Values");
            }
        }

         /// <summary>
         /// bool to indicate if Values has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ValuesSpecified
         {
             get {
             if(ValuesField!=null)
                 return ValuesField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExternalDatasetPart> ValuesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BooleanConstantArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BooleanConstantArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the BooleanConstantArray xsd type.")]
    public partial class BooleanConstantArray : AbstractBooleanArray, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the BooleanConstantArray class.
        /// </summary>
        public BooleanConstantArray() {}

        /// <summary>
        /// Initializes a new instance of the BooleanConstantArray class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public BooleanConstantArray(bool value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("Value inside all the elements of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Value")]
        public bool? Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private bool? ValueField; 

        /// <summary>
        /// Count property
        /// </summary>
		[Required]
        [Description("Size of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("Count")]
        public long? Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private long? CountField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BooleanArrayFromIndexArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BooleanArrayFromIndexArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the BooleanArrayFromIndexArray xsd type.")]
    public partial class BooleanArrayFromIndexArray : AbstractBooleanArray, INotifyPropertyChanged
    {

        /// <summary>
        /// Count property
        /// </summary>
		[Required]
        [Description("Total number of Boolean elements in the array. This number is different from the number of indices used to represent the array.")]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("Count")]
        public long? Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private long? CountField; 

        /// <summary>
        /// Indices property
        /// </summary>
		[Required]
        [Description("Array of integer indices.  BUSINESS RULE: Must be non-negative.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("Indices")]
        public AbstractIntegerArray Indices {
            get {
                return IndicesField;
            } 
            set {
                IndicesField = value;
                NotifyPropertyChanged("Indices");
            }
        }

        private AbstractIntegerArray IndicesField; 

        /// <summary>
        /// IndexIsTrue property
        /// </summary>
		[Required]
        [Description("Indicates whether the specified elements are true or false.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IndexIsTrue")]
        public bool? IndexIsTrue {
            get {
                return IndexIsTrueField;
            } 
            set {
                IndexIsTrueField = value;
                NotifyPropertyChanged("IndexIsTrue");
            }
        }

        private bool? IndexIsTrueField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractIntegerArray xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerRangeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerArrayFromBooleanMaskArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractIntegerArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractIntegerArray xsd type.")]
    public abstract partial class AbstractIntegerArray : AbstractNumericArray, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IntegerRangeArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IntegerRangeArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the IntegerRangeArray xsd type.")]
    public partial class IntegerRangeArray : AbstractIntegerArray, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IntegerRangeArray class.
        /// </summary>
        public IntegerRangeArray() {}

        /// <summary>
        /// Initializes a new instance of the IntegerRangeArray class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public IntegerRangeArray(long value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Count property
        /// </summary>
		[Required]
        [Description("Size of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("Count")]
        public long? Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private long? CountField; 

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("Start value for the range. End value is start+count-1.")]
        [EnergisticsDataTypeAttribute(DataType = "long")]
		[XmlElement("Value")]
        public long? Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private long? ValueField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IntegerLatticeArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IntegerLatticeArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the IntegerLatticeArray xsd type.")]
    public partial class IntegerLatticeArray : AbstractIntegerArray, INotifyPropertyChanged
    {

        /// <summary>
        /// StartValue property
        /// </summary>
		[Required]
        [Description("Value representing the global start for the lattice: i.e., iStart + jStart*ni + kStart*ni*nj")]
        [EnergisticsDataTypeAttribute(DataType = "long")]
		[XmlElement("StartValue")]
        public long? StartValue {
            get {
                return StartValueField;
            } 
            set {
                StartValueField = value;
                NotifyPropertyChanged("StartValue");
            }
        }

        private long? StartValueField; 

        /// <summary>
        /// Offset property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "IntegerConstantArray")]
		[XmlElement("Offset")]
        public List<IntegerConstantArray> Offset {
            get {
                return OffsetField;
            } 
            set {
                OffsetField = value;
                NotifyPropertyChanged("Offset");
            }
        }

         /// <summary>
         /// bool to indicate if Offset has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OffsetSpecified
         {
             get {
             if(OffsetField!=null)
                 return OffsetField.Count>0?true:false;
             else return false;
             }
         }
        private List<IntegerConstantArray> OffsetField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IntegerConstantArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IntegerConstantArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the IntegerConstantArray xsd type.")]
    public partial class IntegerConstantArray : AbstractIntegerArray, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IntegerConstantArray class.
        /// </summary>
        public IntegerConstantArray() {}

        /// <summary>
        /// Initializes a new instance of the IntegerConstantArray class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public IntegerConstantArray(long value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("Values inside all the elements of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "long")]
		[XmlElement("Value")]
        public long? Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private long? ValueField; 

        /// <summary>
        /// Count property
        /// </summary>
		[Required]
        [Description("Size of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("Count")]
        public long? Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private long? CountField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IntegerExternalArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IntegerExternalArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the IntegerExternalArray xsd type.")]
    public partial class IntegerExternalArray : AbstractIntegerArray, INotifyPropertyChanged
    {

        /// <summary>
        /// NullValue property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "long")]
		[XmlElement("NullValue")]
        public long? NullValue {
            get {
                return NullValueField;
            } 
            set {
                NullValueField = value;
                NotifyPropertyChanged("NullValue");
            }
        }

        private long? NullValueField; 

        /// <summary>
        /// Values property
        /// </summary>
		[Required]
        [Description("Reference to an HDF5 array of integers or doubles.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExternalDataset")]
		[XmlArrayItem("ExternalFileProxy")]
        [XmlArray("Values")]
        public List<ExternalDatasetPart> Values {
            get {
                return ValuesField;
            } 
            set {
                ValuesField = value;
                NotifyPropertyChanged("Values");
            }
        }

         /// <summary>
         /// bool to indicate if Values has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ValuesSpecified
         {
             get {
             if(ValuesField!=null)
                 return ValuesField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExternalDatasetPart> ValuesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IntegerArrayFromBooleanMaskArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IntegerArrayFromBooleanMaskArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the IntegerArrayFromBooleanMaskArray xsd type.")]
    public partial class IntegerArrayFromBooleanMaskArray : AbstractIntegerArray, INotifyPropertyChanged
    {

        /// <summary>
        /// TotalIndexCount property
        /// </summary>
		[Required]
        [Description("Total number of integer elements in the array. This number is different from the number of Boolean mask values used to represent the array.")]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("TotalIndexCount")]
        public long? TotalIndexCount {
            get {
                return TotalIndexCountField;
            } 
            set {
                TotalIndexCountField = value;
                NotifyPropertyChanged("TotalIndexCount");
            }
        }

        private long? TotalIndexCountField; 

        /// <summary>
        /// Mask property
        /// </summary>
		[Required]
        [Description("Boolean mask. A true element indicates that the index is included on the list of integer values.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractBooleanArray")]
		[XmlElement("Mask")]
        public AbstractBooleanArray Mask {
            get {
                return MaskField;
            } 
            set {
                MaskField = value;
                NotifyPropertyChanged("Mask");
            }
        }

        private AbstractBooleanArray MaskField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractFloatingPointArray xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointConstantArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractFloatingPointArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractFloatingPointArray xsd type.")]
    public abstract partial class AbstractFloatingPointArray : AbstractNumericArray, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FloatingPointLatticeArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FloatingPointLatticeArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the FloatingPointLatticeArray xsd type.")]
    public partial class FloatingPointLatticeArray : AbstractFloatingPointArray, INotifyPropertyChanged
    {

        /// <summary>
        /// StartValue property
        /// </summary>
		[Required]
        [Description("Value representing the global start for the lattice.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("StartValue")]
        public double? StartValue {
            get {
                return StartValueField;
            } 
            set {
                StartValueField = value;
                NotifyPropertyChanged("StartValue");
            }
        }

        private double? StartValueField; 

        /// <summary>
        /// Offset property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FloatingPointConstantArray")]
		[XmlElement("Offset")]
        public List<FloatingPointConstantArray> Offset {
            get {
                return OffsetField;
            } 
            set {
                OffsetField = value;
                NotifyPropertyChanged("Offset");
            }
        }

         /// <summary>
         /// bool to indicate if Offset has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OffsetSpecified
         {
             get {
             if(OffsetField!=null)
                 return OffsetField.Count>0?true:false;
             else return false;
             }
         }
        private List<FloatingPointConstantArray> OffsetField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FloatingPointConstantArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FloatingPointConstantArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the FloatingPointConstantArray xsd type.")]
    public partial class FloatingPointConstantArray : AbstractFloatingPointArray, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the FloatingPointConstantArray class.
        /// </summary>
        public FloatingPointConstantArray() {}

        /// <summary>
        /// Initializes a new instance of the FloatingPointConstantArray class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public FloatingPointConstantArray(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("Values inside all the elements of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Value")]
        public double? Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double? ValueField; 

        /// <summary>
        /// Count property
        /// </summary>
		[Required]
        [Description("Size of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("Count")]
        public long? Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private long? CountField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FloatingPointExternalArray xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatExternalArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleExternalArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FloatingPointExternalArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the FloatingPointExternalArray xsd type.")]
    public partial class FloatingPointExternalArray : AbstractFloatingPointArray, INotifyPropertyChanged
    {

        /// <summary>
        /// Values property
        /// </summary>
		[Required]
        [Description("Reference to an HDF5 array of doubles.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExternalDataset")]
		[XmlArrayItem("ExternalFileProxy")]
        [XmlArray("Values")]
        public List<ExternalDatasetPart> Values {
            get {
                return ValuesField;
            } 
            set {
                ValuesField = value;
                NotifyPropertyChanged("Values");
            }
        }

         /// <summary>
         /// bool to indicate if Values has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ValuesSpecified
         {
             get {
             if(ValuesField!=null)
                 return ValuesField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExternalDatasetPart> ValuesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FloatExternalArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FloatExternalArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the FloatExternalArray xsd type.")]
    public partial class FloatExternalArray : FloatingPointExternalArray, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DoubleExternalArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DoubleExternalArray", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DoubleExternalArray xsd type.")]
    public partial class DoubleExternalArray : FloatingPointExternalArray, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DasTimeArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DasTimeArray", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DasTimeArray xsd type.")]
    public partial class DasTimeArray : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// StartTime property
        /// </summary>
		[Description("The timestamp in human readable, ISO 8601 format of the last recorded sample in the acquistion. Note that this is the start time of the acquistion if a raw dataset is stored in multiple HDF files. The end time of the sub-record stored in an individual HDF file is stored in PartStartTime.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("StartTime")]
        public Timestamp? StartTime {
            get {
                return StartTimeField;
            } 
            set {
                StartTimeField = value;
                 this.StartTimeSpecified = true;
                NotifyPropertyChanged("StartTime");
            }
        }

        
        private bool StartTimeSpecifiedField = false;
        
        /// <summary>
        /// StartTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartTimeSpecified {
            get {
                return StartTimeSpecifiedField;
            } 
            set {
                StartTimeSpecifiedField = value;
                NotifyPropertyChanged("StartTimeSpecified");
            }
        }
        
        private Timestamp? StartTimeField; 

        /// <summary>
        /// EndTime property
        /// </summary>
		[Description("The timestamp in human readable, ISO 8601 format of the last recorded sample in the acquisition. Note that this is the end time of the acquistion if a raw data set is stored in multiple HDF files. The end time of the sub-record stored in an individual HDF file is stored in PartEndTime.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("EndTime")]
        public Timestamp? EndTime {
            get {
                return EndTimeField;
            } 
            set {
                EndTimeField = value;
                 this.EndTimeSpecified = true;
                NotifyPropertyChanged("EndTime");
            }
        }

        private Timestamp? EndTimeField; 

        /// <summary>
        /// EndTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndTimeSpecified {
            get {
                return EndTimeSpecifiedField;
            } 
            set {
                EndTimeSpecifiedField = value;
                NotifyPropertyChanged("EndTimeSpecified");
            }
        }

        private bool EndTimeSpecifiedField; 

        /// <summary>
        /// TimeArray property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IntegerExternalArray")]
		[XmlElement("TimeArray")]
        public IntegerExternalArray TimeArray {
            get {
                return TimeArrayField;
            } 
            set {
                TimeArrayField = value;
                NotifyPropertyChanged("TimeArray");
            }
        }

        private IntegerExternalArray TimeArrayField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DasCustom xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DasCustom", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DasCustom xsd type.")]
    public partial class DasCustom : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DasCalibration xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DasCalibration", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DasCalibration xsd type.")]
    public partial class DasCalibration : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CalibrationIndex property
        /// </summary>
		[Description("The nth count of this Calibration in the Acquisition.  Recommended if there is more than 1 Calibration in this Acquisition.  This index corresponds to the Calibration array number in the H5 file.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("CalibrationIndex")]
        public long? CalibrationIndex {
            get {
                return CalibrationIndexField;
            } 
            set {
                CalibrationIndexField = value;
                 this.CalibrationIndexSpecified = true;
                NotifyPropertyChanged("CalibrationIndex");
            }
        }

        private long? CalibrationIndexField; 

        /// <summary>
        /// CalibrationIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CalibrationIndexSpecified {
            get {
                return CalibrationIndexSpecifiedField;
            } 
            set {
                CalibrationIndexSpecifiedField = value;
                NotifyPropertyChanged("CalibrationIndexSpecified");
            }
        }

        private bool CalibrationIndexSpecifiedField; 

        /// <summary>
        /// NumberOfCalibrationPoints property
        /// </summary>
		[Required]
        [Description("The total number of calibration points in the array.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("NumberOfCalibrationPoints")]
        public long? NumberOfCalibrationPoints {
            get {
                return NumberOfCalibrationPointsField;
            } 
            set {
                NumberOfCalibrationPointsField = value;
                NotifyPropertyChanged("NumberOfCalibrationPoints");
            }
        }

        private long? NumberOfCalibrationPointsField; 

        /// <summary>
        /// CalibrationDescription property
        /// </summary>
		[StringLength(2000)]
        [Description("Free format description of the DAS calibration provided for an instance of a DAS acquisition.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("CalibrationDescription")]
        public string CalibrationDescription {
            get {
                return CalibrationDescriptionField;
            } 
            set {
                CalibrationDescriptionField = value;
                NotifyPropertyChanged("CalibrationDescription");
            }
        }

        private string CalibrationDescriptionField; 

        /// <summary>
        /// CalibrationOpticalPathDistanceUnit property
        /// </summary>
		[StringLength(64)]
        [Description("Unit of measurement of OpticalPathDistance value CalibrationPoints")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CalibrationOpticalPathDistanceUnit")]
        public string CalibrationOpticalPathDistanceUnit {
            get {
                return CalibrationOpticalPathDistanceUnitField;
            } 
            set {
                CalibrationOpticalPathDistanceUnitField = value;
                NotifyPropertyChanged("CalibrationOpticalPathDistanceUnit");
            }
        }

        private string CalibrationOpticalPathDistanceUnitField; 

        /// <summary>
        /// CalibrationFacilityLengthUnit property
        /// </summary>
		[StringLength(64)]
        [Description("Unit of measurement of FacilityLength value CalibrationPoints")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CalibrationFacilityLengthUnit")]
        public string CalibrationFacilityLengthUnit {
            get {
                return CalibrationFacilityLengthUnitField;
            } 
            set {
                CalibrationFacilityLengthUnitField = value;
                NotifyPropertyChanged("CalibrationFacilityLengthUnit");
            }
        }

        private string CalibrationFacilityLengthUnitField; 

        /// <summary>
        /// CalibrationDatum property
        /// </summary>
		[Description("Datum used as basis for measurement of calibration point distance and length.")]
        [EnergisticsDataTypeAttribute(DataType = "WellboreDatumReference")]
		[XmlElement("CalibrationDatum")]
        public WellboreDatumReference? CalibrationDatum {
            get {
                return CalibrationDatumField;
            } 
            set {
                CalibrationDatumField = value;
                 this.CalibrationDatumSpecified = true;
                NotifyPropertyChanged("CalibrationDatum");
            }
        }

        private WellboreDatumReference? CalibrationDatumField; 

        /// <summary>
        /// CalibrationDatumSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CalibrationDatumSpecified {
            get {
                return CalibrationDatumSpecifiedField;
            } 
            set {
                CalibrationDatumSpecifiedField = value;
                NotifyPropertyChanged("CalibrationDatumSpecified");
            }
        }

        private bool CalibrationDatumSpecifiedField; 

        /// <summary>
        /// FacilityName property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Indicates which facility is being calibrated.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FacilityName")]
        public string FacilityName {
            get {
                return FacilityNameField;
            } 
            set {
                FacilityNameField = value;
                NotifyPropertyChanged("FacilityName");
            }
        }

        private string FacilityNameField; 

        /// <summary>
        /// FacilityKind property
        /// </summary>
		[Required]
        [Description("Enumeration to indicate the type of facility (well or pipeline) for this acquisition.")]
        [EnergisticsDataTypeAttribute(DataType = "FacilityKind")]
		[XmlElement("FacilityKind")]
        public FacilityKind? FacilityKind {
            get {
                return FacilityKindField;
            } 
            set {
                FacilityKindField = value;
                 this.FacilityKindSpecified = true;
                NotifyPropertyChanged("FacilityKind");
            }
        }

        
        private bool FacilityKindSpecifiedField = false;
        
        /// <summary>
        /// FacilityKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FacilityKindSpecified {
            get {
                return FacilityKindSpecifiedField;
            } 
            set {
                FacilityKindSpecifiedField = value;
                NotifyPropertyChanged("FacilityKindSpecified");
            }
        }
        
        private FacilityKind? FacilityKindField; 

        /// <summary>
        /// CalibrationDataPoints property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DasCalibrationPoint")]
		[XmlElement("CalibrationDataPoints")]
        public List<DasCalibrationPoint> CalibrationDataPoints {
            get {
                return CalibrationDataPointsField;
            } 
            set {
                CalibrationDataPointsField = value;
                NotifyPropertyChanged("CalibrationDataPoints");
            }
        }

         /// <summary>
         /// bool to indicate if CalibrationDataPoints has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CalibrationDataPointsSpecified
         {
             get {
             if(CalibrationDataPointsField!=null)
                 return CalibrationDataPointsField.Count>0?true:false;
             else return false;
             }
         }
        private List<DasCalibrationPoint> CalibrationDataPointsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DasCalibrationPoint xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DasCalibrationPoint", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DasCalibrationPoint xsd type.")]
    public partial class DasCalibrationPoint : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The locus index for the calibration point. Where ‘Locus Index 0’ is the acoustic sample point at the connector of the measurement instrument.
        /// </summary>
		[Required]
        [Description("The locus index for the calibration point. Where ‘Locus Index 0’ is the acoustic sample point at the connector of the measurement instrument.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("CalibrationLocusIndex")]
        public long? CalibrationLocusIndex {
            get {
                return CalibrationLocusIndexField;
            } 
            set {
                CalibrationLocusIndexField = value;
                NotifyPropertyChanged("CalibrationLocusIndex");
            }
        }

        private long? CalibrationLocusIndexField; 

        /// <summary>
        /// The ‘fiber distance’ corresponding with the locus index of the calibration point. This is similar to the OpticalPathDistance used in DTS. This ‘fiber distance’ is the distance from the connector of the measurement instrument to the acoustic sample point along the fiber that is the furthest from the measurement instrument for that particular test.
        /// </summary>
		[Required]
        [Description("The ‘fiber distance’ corresponding with the locus index of the calibration point. This is similar to the OpticalPathDistance used in DTS. This ‘fiber distance’ is the distance from the connector of the measurement instrument to the acoustic sample point along the fiber that is the furthest from the measurement instrument for that particular test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("CalibrationOpticalPathDistance")]
        public LengthMeasure CalibrationOpticalPathDistance {
            get {
                return CalibrationOpticalPathDistanceField;
            } 
            set {
                CalibrationOpticalPathDistanceField = value;
                NotifyPropertyChanged("CalibrationOpticalPathDistance");
            }
        }

        private LengthMeasure CalibrationOpticalPathDistanceField; 

        /// <summary>
        /// The ‘facility length’ corresponding to the CalibrationOpticPathDistance. The ‘facility length’ is the length along the ‘optical path’ and is corrected for overstuffing, additional fiber in turnaround-subs or H-splices that increase the optical path length on the OTDR, but not the actual facility length. 
        /// </summary>
		[Required]
        [Description("The ‘facility length’ corresponding to the CalibrationOpticPathDistance. The ‘facility length’ is the length along the ‘optical path’ and is corrected for overstuffing, additional fiber in turnaround-subs or H-splices that increase the optical path length on the OTDR, but not the actual facility length.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("CalibrationFacilityLength")]
        public LengthMeasure CalibrationFacilityLength {
            get {
                return CalibrationFacilityLengthField;
            } 
            set {
                CalibrationFacilityLengthField = value;
                NotifyPropertyChanged("CalibrationFacilityLength");
            }
        }

        private LengthMeasure CalibrationFacilityLengthField; 

        /// <summary>
        /// A brief meaningful description of the type of calibration point. This is an extensible enumeration type. Current reserved keywords are ‘locus calibration’, ‘tap test’ and ‘last locus to end of fiber’ for commonly used calibration points.
        /// </summary>
		[Description("A brief meaningful description of the type of calibration point. This is an extensible enumeration type. Current reserved keywords are ‘locus calibration’, ‘tap test’ and ‘last locus to end of fiber’ for commonly used calibration points.")]
        [EnergisticsDataTypeAttribute(DataType = "DasCalibrationTypeExt")]
		[XmlElement("CalibrationType")]
        public ExtensibleEnum<DasCalibrationType>? CalibrationType {
            get {
                return CalibrationTypeField;
            } 
            set {
                CalibrationTypeField = value;
                NotifyPropertyChanged("CalibrationType");
            }
        }

        private ExtensibleEnum<DasCalibrationType>? CalibrationTypeField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DasProcessed xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DasProcessed", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DasProcessed xsd type.")]
    public partial class DasProcessed : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Fbe property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DasFbe")]
		[XmlElement("Fbe")]
        public List<DasFbe> Fbe {
            get {
                return FbeField;
            } 
            set {
                FbeField = value;
                NotifyPropertyChanged("Fbe");
            }
        }

         /// <summary>
         /// bool to indicate if Fbe has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FbeSpecified
         {
             get {
             if(FbeField!=null)
                 return FbeField.Count>0?true:false;
             else return false;
             }
         }
        private List<DasFbe> FbeField; 

        /// <summary>
        /// Spectra property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DasSpectra")]
		[XmlElement("Spectra")]
        public List<DasSpectra> Spectra {
            get {
                return SpectraField;
            } 
            set {
                SpectraField = value;
                NotifyPropertyChanged("Spectra");
            }
        }

         /// <summary>
         /// bool to indicate if Spectra has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SpectraSpecified
         {
             get {
             if(SpectraField!=null)
                 return SpectraField.Count>0?true:false;
             else return false;
             }
         }
        private List<DasSpectra> SpectraField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DasFbe xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DasFbe", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DasFbe xsd type.")]
    public partial class DasFbe : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// FbeIndex property
        /// </summary>
		[Description("The nth count of this Fbe instance in the Acquisition.  Recommended if there is more than 1 Fbe instance in this Acquisition.  This index corresponds to the Fbe array number in the H5 file.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("FbeIndex")]
        public long? FbeIndex {
            get {
                return FbeIndexField;
            } 
            set {
                FbeIndexField = value;
                 this.FbeIndexSpecified = true;
                NotifyPropertyChanged("FbeIndex");
            }
        }

        private long? FbeIndexField; 

        /// <summary>
        /// FbeIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FbeIndexSpecified {
            get {
                return FbeIndexSpecifiedField;
            } 
            set {
                FbeIndexSpecifiedField = value;
                NotifyPropertyChanged("FbeIndexSpecified");
            }
        }

        private bool FbeIndexSpecifiedField; 

        /// <summary>
        /// FbeDescription property
        /// </summary>
		[StringLength(2000)]
        [Description("Description of the FBE data.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("FbeDescription")]
        public string FbeDescription {
            get {
                return FbeDescriptionField;
            } 
            set {
                FbeDescriptionField = value;
                NotifyPropertyChanged("FbeDescription");
            }
        }

        private string FbeDescriptionField; 

        /// <summary>
        /// FbeDataUnit property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Data unit for the FBE data.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FbeDataUnit")]
        public string FbeDataUnit {
            get {
                return FbeDataUnitField;
            } 
            set {
                FbeDataUnitField = value;
                NotifyPropertyChanged("FbeDataUnit");
            }
        }

        private string FbeDataUnitField; 

        /// <summary>
        /// OutputDataRate property
        /// </summary>
		[Required]
        [Description("The rate at which the FBE data is provided for all ‘loci’ (spatial samples). This is typically equal to the interrogation rate/pulse rate of the DAS measurement system or an integer fraction thereof. Note this attribute is mandatory for FBE and spectrum data. For raw data this attribute is optional.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FrequencyMeasure")]
		[XmlElement("OutputDataRate")]
        public FrequencyMeasure OutputDataRate {
            get {
                return OutputDataRateField;
            } 
            set {
                OutputDataRateField = value;
                NotifyPropertyChanged("OutputDataRate");
            }
        }

        private FrequencyMeasure OutputDataRateField; 

        /// <summary>
        /// StartLocusIndex property
        /// </summary>
		[Required]
        [Description("The first ‘locus’ acquired by the interrogator unit, where ‘Locus Index 0’ is the acoustic sample point at the connector of the measurement instrument.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StartLocusIndex")]
        public long? StartLocusIndex {
            get {
                return StartLocusIndexField;
            } 
            set {
                StartLocusIndexField = value;
                NotifyPropertyChanged("StartLocusIndex");
            }
        }

        private long? StartLocusIndexField; 

        /// <summary>
        /// NumberOfLoci property
        /// </summary>
		[Required]
        [Description("The total number of ‘loci’ (acoustic sample points) acquired by the measurement instrument in a single ‘scan’ of the fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("NumberOfLoci")]
        public long? NumberOfLoci {
            get {
                return NumberOfLociField;
            } 
            set {
                NumberOfLociField = value;
                NotifyPropertyChanged("NumberOfLoci");
            }
        }

        private long? NumberOfLociField; 

        /// <summary>
        /// SpatialSamplingInterval property
        /// </summary>
		[Description("The separation between two consecutive ‘spatial sample’ points on the fiber at which the signal is measured. It should not be confused with ‘spatial resolution’. If this data element is present in the DASFbe object, then it overwrites the SpatialSamplingInterval value described in DASAcquistion.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SpatialSamplingInterval")]
        public LengthMeasure SpatialSamplingInterval {
            get {
                return SpatialSamplingIntervalField;
            } 
            set {
                SpatialSamplingIntervalField = value;
                NotifyPropertyChanged("SpatialSamplingInterval");
            }
        }

        private LengthMeasure SpatialSamplingIntervalField; 

        /// <summary>
        /// SpatialSamplingIntervalUnit property
        /// </summary>
		[StringLength(64)]
        [Description("Only required in Hdf5 file to record the unit of measure of the sampling interval of the Fbe.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SpatialSamplingIntervalUnit")]
        public string SpatialSamplingIntervalUnit {
            get {
                return SpatialSamplingIntervalUnitField;
            } 
            set {
                SpatialSamplingIntervalUnitField = value;
                NotifyPropertyChanged("SpatialSamplingIntervalUnit");
            }
        }

        private string SpatialSamplingIntervalUnitField; 

        /// <summary>
        /// FilterType property
        /// </summary>
		[StringLength(64)]
        [Description("A string describing the type of filter applied by the vendor. Important frequency type filter classes are: frequency response filters (low-pass, high-pass, band-pass, notch filters) and butterworth, chebyshev and bessel filters. The filter type and characteristics applied to the acquired or processed data is important information for end-user applications.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FilterType")]
        public string FilterType {
            get {
                return FilterTypeField;
            } 
            set {
                FilterTypeField = value;
                NotifyPropertyChanged("FilterType");
            }
        }

        private string FilterTypeField; 

        /// <summary>
        /// WindowSize property
        /// </summary>
		[Description("The number of samples in the filter window applied.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("WindowSize")]
        public long? WindowSize {
            get {
                return WindowSizeField;
            } 
            set {
                WindowSizeField = value;
                 this.WindowSizeSpecified = true;
                NotifyPropertyChanged("WindowSize");
            }
        }

        private long? WindowSizeField; 

        /// <summary>
        /// WindowSizeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool WindowSizeSpecified {
            get {
                return WindowSizeSpecifiedField;
            } 
            set {
                WindowSizeSpecifiedField = value;
                NotifyPropertyChanged("WindowSizeSpecified");
            }
        }

        private bool WindowSizeSpecifiedField; 

        /// <summary>
        /// WindowOverlap property
        /// </summary>
		[Description("The number of sample overlaps between consecutive filter windows applied.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("WindowOverlap")]
        public long? WindowOverlap {
            get {
                return WindowOverlapField;
            } 
            set {
                WindowOverlapField = value;
                 this.WindowOverlapSpecified = true;
                NotifyPropertyChanged("WindowOverlap");
            }
        }

        private long? WindowOverlapField; 

        /// <summary>
        /// WindowOverlapSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool WindowOverlapSpecified {
            get {
                return WindowOverlapSpecifiedField;
            } 
            set {
                WindowOverlapSpecifiedField = value;
                NotifyPropertyChanged("WindowOverlapSpecified");
            }
        }

        private bool WindowOverlapSpecifiedField; 

        /// <summary>
        /// WindowFunction property
        /// </summary>
		[StringLength(64)]
        [Description("The window function applied to the sample window used to calculate the frequency band. Example 'HANNING', 'HAMMING', 'BESSEL' window.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("WindowFunction")]
        public string WindowFunction {
            get {
                return WindowFunctionField;
            } 
            set {
                WindowFunctionField = value;
                NotifyPropertyChanged("WindowFunction");
            }
        }

        private string WindowFunctionField; 

        /// <summary>
        /// TransformType property
        /// </summary>
		[StringLength(64)]
        [Description("A string describing the type of mathematical transformation applied by the vendor. Typically this is some type of discrete fast Fourier transform (often abbreviated as DFT, DFFT or FFT).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TransformType")]
        public string TransformType {
            get {
                return TransformTypeField;
            } 
            set {
                TransformTypeField = value;
                NotifyPropertyChanged("TransformType");
            }
        }

        private string TransformTypeField; 

        /// <summary>
        /// TransformSize property
        /// </summary>
		[Description("The number of samples used in the TransformType.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("TransformSize")]
        public long? TransformSize {
            get {
                return TransformSizeField;
            } 
            set {
                TransformSizeField = value;
                 this.TransformSizeSpecified = true;
                NotifyPropertyChanged("TransformSize");
            }
        }

        private long? TransformSizeField; 

        /// <summary>
        /// TransformSizeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TransformSizeSpecified {
            get {
                return TransformSizeSpecifiedField;
            } 
            set {
                TransformSizeSpecifiedField = value;
                NotifyPropertyChanged("TransformSizeSpecified");
            }
        }

        private bool TransformSizeSpecifiedField; 

        /// <summary>
        /// RawReference property
        /// </summary>
		[RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("A universally unique identifier (UUID) for the HDF file containing the raw data.")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
		[XmlElement("RawReference")]
        public string RawReference {
            get {
                return RawReferenceField;
            } 
            set {
                RawReferenceField = value;
                NotifyPropertyChanged("RawReference");
            }
        }

        private string RawReferenceField; 

        /// <summary>
        /// SpectraReference property
        /// </summary>
		[RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("A universally unique identifier (UUID) for the HDF file containing the spectra data.")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
		[XmlElement("SpectraReference")]
        public string SpectraReference {
            get {
                return SpectraReferenceField;
            } 
            set {
                SpectraReferenceField = value;
                NotifyPropertyChanged("SpectraReference");
            }
        }

        private string SpectraReferenceField; 

        /// <summary>
        /// FbeData property
        /// </summary>
		[Required]
        [Description("A DAS array object containing the FBE DAS data.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DasFbeData")]
		[XmlElement("FbeData")]
        public List<DasFbeData> FbeData {
            get {
                return FbeDataField;
            } 
            set {
                FbeDataField = value;
                NotifyPropertyChanged("FbeData");
            }
        }

         /// <summary>
         /// bool to indicate if FbeData has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FbeDataSpecified
         {
             get {
             if(FbeDataField!=null)
                 return FbeDataField.Count>0?true:false;
             else return false;
             }
         }
        private List<DasFbeData> FbeDataField; 

        /// <summary>
        /// FbeDataTime property
        /// </summary>
		[Required]
        [Description("A DAS array object containing the sample times corresponding to a single ‘scan’ of the fiber. In a single ‘scan’, the DAS measurement system acquires raw data samples for all the loci specified by StartLocusIndex and NumberOfLoci. The ‘scan’ frequency is equal to the DAS acquisition pulse rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DasTimeArray")]
		[XmlElement("FbeDataTime")]
        public DasTimeArray FbeDataTime {
            get {
                return FbeDataTimeField;
            } 
            set {
                FbeDataTimeField = value;
                NotifyPropertyChanged("FbeDataTime");
            }
        }

        private DasTimeArray FbeDataTimeField; 

        /// <summary>
        /// Custom property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "DasCustom")]
		[XmlElement("Custom")]
        public DasCustom Custom {
            get {
                return CustomField;
            } 
            set {
                CustomField = value;
                NotifyPropertyChanged("Custom");
            }
        }

        private DasCustom CustomField; 

		/// <summary>
        /// A universally unique identifier (UUID) of an instance of FBE DAS data.
        /// </summary>
		[Required]
        [RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("A universally unique identifier (UUID) of an instance of FBE DAS data.")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
        [XmlAttribute("uuid")]
		
        public string Uuid {
            get {
                return uuidField;
            } 
            set {
                uuidField = value;
                NotifyPropertyChanged("Uuid");
            }
        }

        private string uuidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DasFbeData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DasFbeData", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DasFbeData xsd type.")]
    public partial class DasFbeData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// FbeDataIndex property
        /// </summary>
		[Description("The nth count of this DasFbeData in the DasFbe.  Recommended if there is more than 1 dataset in this Fbe.  This index corresponds to the FbeData array number in the H5 file.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("FbeDataIndex")]
        public long? FbeDataIndex {
            get {
                return FbeDataIndexField;
            } 
            set {
                FbeDataIndexField = value;
                 this.FbeDataIndexSpecified = true;
                NotifyPropertyChanged("FbeDataIndex");
            }
        }

        private long? FbeDataIndexField; 

        /// <summary>
        /// FbeDataIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FbeDataIndexSpecified {
            get {
                return FbeDataIndexSpecifiedField;
            } 
            set {
                FbeDataIndexSpecifiedField = value;
                NotifyPropertyChanged("FbeDataIndexSpecified");
            }
        }

        private bool FbeDataIndexSpecifiedField; 

        /// <summary>
        /// StartFrequency property
        /// </summary>
		[Required]
        [Description("Start of an individual frequency band in a DAS FBE data set. This typically corresponds to the frequency of the 3dB point of the filter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FrequencyMeasure")]
		[XmlElement("StartFrequency")]
        public FrequencyMeasure StartFrequency {
            get {
                return StartFrequencyField;
            } 
            set {
                StartFrequencyField = value;
                NotifyPropertyChanged("StartFrequency");
            }
        }

        private FrequencyMeasure StartFrequencyField; 

        /// <summary>
        /// EndFrequency property
        /// </summary>
		[Required]
        [Description("End of an individual frequency band in a DAS FBE data set. This typically corresponds to the frequency of the 3dB point of the filter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FrequencyMeasure")]
		[XmlElement("EndFrequency")]
        public FrequencyMeasure EndFrequency {
            get {
                return EndFrequencyField;
            } 
            set {
                EndFrequencyField = value;
                NotifyPropertyChanged("EndFrequency");
            }
        }

        private FrequencyMeasure EndFrequencyField; 

        /// <summary>
        /// Dimensions property
        /// </summary>
		[Required]
        [Description("An array of two elements describing the ordering of the FBE data array. The fastest running index is stored in the second element. For example the  {‘time’, ‘locus’} indicates that ‘locus’ is the fastest running index. Note that vendors may deliver data with different orderings.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DasDimensions")]
		[XmlElement("Dimensions")]
        public List<DasDimensions> Dimensions {
            get {
                return DimensionsField;
            } 
            set {
                DimensionsField = value;
                NotifyPropertyChanged("Dimensions");
            }
        }

         /// <summary>
         /// bool to indicate if Dimensions has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DimensionsSpecified
         {
             get {
             if(DimensionsField!=null)
                 return DimensionsField.Count>0?true:false;
             else return false;
             }
         }
        private List<DasDimensions> DimensionsField; 

        /// <summary>
        /// FbeDataArray property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractNumericArray")]
		[XmlElement("FbeDataArray")]
        public AbstractNumericArray FbeDataArray {
            get {
                return FbeDataArrayField;
            } 
            set {
                FbeDataArrayField = value;
                NotifyPropertyChanged("FbeDataArray");
            }
        }

        private AbstractNumericArray FbeDataArrayField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DasSpectra xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DasSpectra", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DasSpectra xsd type.")]
    public partial class DasSpectra : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// SpectraIndex property
        /// </summary>
		[Description("The nth count of this Spectra instance in the acquisition. Recommended if there is more than 1 Spectra instance in this acquisition.  This index corresponds to the Spectra array number in the H5 file.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("SpectraIndex")]
        public long? SpectraIndex {
            get {
                return SpectraIndexField;
            } 
            set {
                SpectraIndexField = value;
                 this.SpectraIndexSpecified = true;
                NotifyPropertyChanged("SpectraIndex");
            }
        }

        private long? SpectraIndexField; 

        /// <summary>
        /// SpectraIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SpectraIndexSpecified {
            get {
                return SpectraIndexSpecifiedField;
            } 
            set {
                SpectraIndexSpecifiedField = value;
                NotifyPropertyChanged("SpectraIndexSpecified");
            }
        }

        private bool SpectraIndexSpecifiedField; 

        /// <summary>
        /// SpectraDescription property
        /// </summary>
		[StringLength(2000)]
        [Description("Description of the spectra data.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("SpectraDescription")]
        public string SpectraDescription {
            get {
                return SpectraDescriptionField;
            } 
            set {
                SpectraDescriptionField = value;
                NotifyPropertyChanged("SpectraDescription");
            }
        }

        private string SpectraDescriptionField; 

        /// <summary>
        /// SpectraDataUnit property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Data unit for the spectra data.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SpectraDataUnit")]
        public string SpectraDataUnit {
            get {
                return SpectraDataUnitField;
            } 
            set {
                SpectraDataUnitField = value;
                NotifyPropertyChanged("SpectraDataUnit");
            }
        }

        private string SpectraDataUnitField; 

        /// <summary>
        /// OutputDataRate property
        /// </summary>
		[Required]
        [Description("The rate at which the spectra data is provided for all ‘loci’ (spatial samples). This is typically equal to the interrogation rate/pulse rate of the DAS measurement system or an integer fraction thereof. Note this attribute is mandatory for FBE and spectrum data. For raw data this attribute is optional.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FrequencyMeasure")]
		[XmlElement("OutputDataRate")]
        public FrequencyMeasure OutputDataRate {
            get {
                return OutputDataRateField;
            } 
            set {
                OutputDataRateField = value;
                NotifyPropertyChanged("OutputDataRate");
            }
        }

        private FrequencyMeasure OutputDataRateField; 

        /// <summary>
        /// StartLocusIndex property
        /// </summary>
		[Required]
        [Description("The first ‘locus’ acquired by the interrogator unit, where ‘Locus Index 0’ is the acoustic sample point at the connector of the measurement instrument.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StartLocusIndex")]
        public long? StartLocusIndex {
            get {
                return StartLocusIndexField;
            } 
            set {
                StartLocusIndexField = value;
                NotifyPropertyChanged("StartLocusIndex");
            }
        }

        private long? StartLocusIndexField; 

        /// <summary>
        /// NumberOfLoci property
        /// </summary>
		[Required]
        [Description("The total number of ‘loci’ (acoustic sample points) acquired by the measurement instrument in a single ‘scan’ of the fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("NumberOfLoci")]
        public long? NumberOfLoci {
            get {
                return NumberOfLociField;
            } 
            set {
                NumberOfLociField = value;
                NotifyPropertyChanged("NumberOfLoci");
            }
        }

        private long? NumberOfLociField; 

        /// <summary>
        /// SpatialSamplingInterval property
        /// </summary>
		[Description("The separation between two consecutive ‘spatial sample’ points on the fiber at which the signal is measured. It should not be confused with ‘spatial resolution’. If this data element is present in the DasSpectrum object, then it overwrites the SpatialSamplingInterval value described in DasAcquistion.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SpatialSamplingInterval")]
        public LengthMeasure SpatialSamplingInterval {
            get {
                return SpatialSamplingIntervalField;
            } 
            set {
                SpatialSamplingIntervalField = value;
                NotifyPropertyChanged("SpatialSamplingInterval");
            }
        }

        private LengthMeasure SpatialSamplingIntervalField; 

        /// <summary>
        /// SpatialSamplingIntervalUnit property
        /// </summary>
		[StringLength(64)]
        [Description("Only required in an HDF5 file to record the unit of measure of the sampling interval of the spectra.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SpatialSamplingIntervalUnit")]
        public string SpatialSamplingIntervalUnit {
            get {
                return SpatialSamplingIntervalUnitField;
            } 
            set {
                SpatialSamplingIntervalUnitField = value;
                NotifyPropertyChanged("SpatialSamplingIntervalUnit");
            }
        }

        private string SpatialSamplingIntervalUnitField; 

        /// <summary>
        /// FilterType property
        /// </summary>
		[StringLength(64)]
        [Description("A string describing the type of filter applied by the vendor. Important frequency type filter classes are: frequency response filters (low-pass, high-pass, band-pass, notch filters) and butterworth, chebyshev and bessel filters. The filter type and characteristics applied to the acquired or processed data is important information for end-user applications.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FilterType")]
        public string FilterType {
            get {
                return FilterTypeField;
            } 
            set {
                FilterTypeField = value;
                NotifyPropertyChanged("FilterType");
            }
        }

        private string FilterTypeField; 

        /// <summary>
        /// WindowSize property
        /// </summary>
		[Description("The number of samples in the filter window applied.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("WindowSize")]
        public long? WindowSize {
            get {
                return WindowSizeField;
            } 
            set {
                WindowSizeField = value;
                 this.WindowSizeSpecified = true;
                NotifyPropertyChanged("WindowSize");
            }
        }

        private long? WindowSizeField; 

        /// <summary>
        /// WindowSizeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool WindowSizeSpecified {
            get {
                return WindowSizeSpecifiedField;
            } 
            set {
                WindowSizeSpecifiedField = value;
                NotifyPropertyChanged("WindowSizeSpecified");
            }
        }

        private bool WindowSizeSpecifiedField; 

        /// <summary>
        /// WindowOverlap property
        /// </summary>
		[Description("The number of sample overlaps between consecutive filter windows applied.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("WindowOverlap")]
        public long? WindowOverlap {
            get {
                return WindowOverlapField;
            } 
            set {
                WindowOverlapField = value;
                 this.WindowOverlapSpecified = true;
                NotifyPropertyChanged("WindowOverlap");
            }
        }

        private long? WindowOverlapField; 

        /// <summary>
        /// WindowOverlapSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool WindowOverlapSpecified {
            get {
                return WindowOverlapSpecifiedField;
            } 
            set {
                WindowOverlapSpecifiedField = value;
                NotifyPropertyChanged("WindowOverlapSpecified");
            }
        }

        private bool WindowOverlapSpecifiedField; 

        /// <summary>
        /// WindowFunction property
        /// </summary>
		[StringLength(64)]
        [Description("A string describing the window function applied by the vendor.  Examples are \"Hamming\" or \"Hanning\".")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("WindowFunction")]
        public string WindowFunction {
            get {
                return WindowFunctionField;
            } 
            set {
                WindowFunctionField = value;
                NotifyPropertyChanged("WindowFunction");
            }
        }

        private string WindowFunctionField; 

        /// <summary>
        /// TransformType property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A string describing the type of mathematical transformation applied by the vendor. Typically this is some type of discrete fast Fourier transform (often abbreviated as DFT, DFFT or FFT).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TransformType")]
        public string TransformType {
            get {
                return TransformTypeField;
            } 
            set {
                TransformTypeField = value;
                NotifyPropertyChanged("TransformType");
            }
        }

        private string TransformTypeField; 

        /// <summary>
        /// TransformSize property
        /// </summary>
		[Required]
        [Description("The number of samples used in the TransformType.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("TransformSize")]
        public long? TransformSize {
            get {
                return TransformSizeField;
            } 
            set {
                TransformSizeField = value;
                NotifyPropertyChanged("TransformSize");
            }
        }

        private long? TransformSizeField; 

        /// <summary>
        /// RawReference property
        /// </summary>
		[RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("Unique identifier for the HDF5 file containing the raw data.")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
		[XmlElement("RawReference")]
        public string RawReference {
            get {
                return RawReferenceField;
            } 
            set {
                RawReferenceField = value;
                NotifyPropertyChanged("RawReference");
            }
        }

        private string RawReferenceField; 

        /// <summary>
        /// FbeReference property
        /// </summary>
		[RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("A universally unique identifier (UUID) of an instance of DAS FBE data.")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
		[XmlElement("FbeReference")]
        public string FbeReference {
            get {
                return FbeReferenceField;
            } 
            set {
                FbeReferenceField = value;
                NotifyPropertyChanged("FbeReference");
            }
        }

        private string FbeReferenceField; 

        /// <summary>
        /// SpectraData property
        /// </summary>
		[Required]
        [Description("A DAS array object containing the spectra DAS data.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DasSpectraData")]
		[XmlElement("SpectraData")]
        public DasSpectraData SpectraData {
            get {
                return SpectraDataField;
            } 
            set {
                SpectraDataField = value;
                NotifyPropertyChanged("SpectraData");
            }
        }

        private DasSpectraData SpectraDataField; 

        /// <summary>
        /// SpectraDataTime property
        /// </summary>
		[Required]
        [Description("A DAS array object containing the sample times corresponding to a single ‘scan’ of the fiber. In a single ‘scan’, the DAS measurement system acquires raw data samples for all the loci specified by StartLocusIndex and NumberOfLoci. The ‘scan’ frequency is equal to the DAS acquisition pulse rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DasTimeArray")]
		[XmlElement("SpectraDataTime")]
        public DasTimeArray SpectraDataTime {
            get {
                return SpectraDataTimeField;
            } 
            set {
                SpectraDataTimeField = value;
                NotifyPropertyChanged("SpectraDataTime");
            }
        }

        private DasTimeArray SpectraDataTimeField; 

        /// <summary>
        /// Custom property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "DasCustom")]
		[XmlElement("Custom")]
        public DasCustom Custom {
            get {
                return CustomField;
            } 
            set {
                CustomField = value;
                NotifyPropertyChanged("Custom");
            }
        }

        private DasCustom CustomField; 

		/// <summary>
        /// A universally unique identifier (UUID) for an instance of spectra DAS data.
        /// </summary>
		[Required]
        [RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("A universally unique identifier (UUID) for an instance of spectra DAS data.")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
        [XmlAttribute("uuid")]
		
        public string Uuid {
            get {
                return uuidField;
            } 
            set {
                uuidField = value;
                NotifyPropertyChanged("Uuid");
            }
        }

        private string uuidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DasSpectraData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DasSpectraData", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DasSpectraData xsd type.")]
    public partial class DasSpectraData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// StartFrequency property
        /// </summary>
		[Required]
        [Description("Start frequency in a DAS spectra data set. This value typically is set to the minimum frequency present in the spectra data set.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FrequencyMeasure")]
		[XmlElement("StartFrequency")]
        public FrequencyMeasure StartFrequency {
            get {
                return StartFrequencyField;
            } 
            set {
                StartFrequencyField = value;
                NotifyPropertyChanged("StartFrequency");
            }
        }

        private FrequencyMeasure StartFrequencyField; 

        /// <summary>
        /// EndFrequency property
        /// </summary>
		[Required]
        [Description("End frequency in a DAS spectra data set. This value is typically set to the maximum frequency present in the spectra data set.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FrequencyMeasure")]
		[XmlElement("EndFrequency")]
        public FrequencyMeasure EndFrequency {
            get {
                return EndFrequencyField;
            } 
            set {
                EndFrequencyField = value;
                NotifyPropertyChanged("EndFrequency");
            }
        }

        private FrequencyMeasure EndFrequencyField; 

        /// <summary>
        /// Dimensions property
        /// </summary>
		[Required]
        [Description("An array of three elements describing the ordering of the raw data array. The fastest running index is stored in the last element. For example {‘time’, ‘locus’, ‘frequency’} indicates that the frequency is the fastest running index. Note that vendors may deliver data with different orderings.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DasDimensions")]
		[XmlElement("Dimensions")]
        public List<DasDimensions> Dimensions {
            get {
                return DimensionsField;
            } 
            set {
                DimensionsField = value;
                NotifyPropertyChanged("Dimensions");
            }
        }

         /// <summary>
         /// bool to indicate if Dimensions has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DimensionsSpecified
         {
             get {
             if(DimensionsField!=null)
                 return DimensionsField.Count>0?true:false;
             else return false;
             }
         }
        private List<DasDimensions> DimensionsField; 

        /// <summary>
        /// SpectraDataArray property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractNumericArray")]
		[XmlElement("SpectraDataArray")]
        public AbstractNumericArray SpectraDataArray {
            get {
                return SpectraDataArrayField;
            } 
            set {
                SpectraDataArrayField = value;
                NotifyPropertyChanged("SpectraDataArray");
            }
        }

        private AbstractNumericArray SpectraDataArrayField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the DtsInstrumentBox xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the DtsInstrumentBox xsd type.")]
    public partial class DtsInstrumentBox : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// SerialNumber property
        /// </summary>
		[StringLength(64)]
        [Description("An identification tag for the instrument box. A serial number is a type of identification tag; however, some tags contain many pieces of information. This structure only identifies the tag and does not describe the contents.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SerialNumber")]
        public string SerialNumber {
            get {
                return SerialNumberField;
            } 
            set {
                SerialNumberField = value;
                NotifyPropertyChanged("SerialNumber");
            }
        }

        private string SerialNumberField; 

        /// <summary>
        /// InternalOvenLocationNear property
        /// </summary>
		[Description("Near distance of the oven from the beginning of the fiber.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("InternalOvenLocationNear")]
        public LengthMeasure InternalOvenLocationNear {
            get {
                return InternalOvenLocationNearField;
            } 
            set {
                InternalOvenLocationNearField = value;
                NotifyPropertyChanged("InternalOvenLocationNear");
            }
        }

        private LengthMeasure InternalOvenLocationNearField; 

        /// <summary>
        /// InternalOvenLocationFar property
        /// </summary>
		[Description("Far distance of the oven from the beginning of the fiber.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("InternalOvenLocationFar")]
        public LengthMeasure InternalOvenLocationFar {
            get {
                return InternalOvenLocationFarField;
            } 
            set {
                InternalOvenLocationFarField = value;
                NotifyPropertyChanged("InternalOvenLocationFar");
            }
        }

        private LengthMeasure InternalOvenLocationFarField; 

        /// <summary>
        /// ReferenceCoilTemperature property
        /// </summary>
		[Description("The temperature of the oven.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("ReferenceCoilTemperature")]
        public ThermodynamicTemperatureMeasure ReferenceCoilTemperature {
            get {
                return ReferenceCoilTemperatureField;
            } 
            set {
                ReferenceCoilTemperatureField = value;
                NotifyPropertyChanged("ReferenceCoilTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure ReferenceCoilTemperatureField; 

        /// <summary>
        /// Parameter property
        /// </summary>
		[Description("Additional parameters to define the instrument box as a piece of equipment. These should not be parameters to define the installation or use of the box in the wellbore or other system. Only use this element if an appropriate parameter is not available as an element or in the calibration operation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "IndexedObject")]
		[XmlElement("Parameter")]
        public List<IndexedObject> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(ParameterField!=null)
                 return ParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<IndexedObject> ParameterField; 

        /// <summary>
        /// WarmupTime property
        /// </summary>
		[Description("The duration of time starting from the initiation of the first temperature measurement until the unit complies with the stated values of the main measurement specifications.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("WarmupTime")]
        public TimeMeasure WarmupTime {
            get {
                return WarmupTimeField;
            } 
            set {
                WarmupTimeField = value;
                NotifyPropertyChanged("WarmupTime");
            }
        }

        private TimeMeasure WarmupTimeField; 

        /// <summary>
        /// StartupTime property
        /// </summary>
		[Description("The duration of time from the initial powering on of the instrument until the first temperature measurement is permitted.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("StartupTime")]
        public TimeMeasure StartupTime {
            get {
                return StartupTimeField;
            } 
            set {
                StartupTimeField = value;
                NotifyPropertyChanged("StartupTime");
            }
        }

        private TimeMeasure StartupTimeField; 

        /// <summary>
        /// FacilityIdentifier property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifier")]
		[XmlElement("FacilityIdentifier")]
        public FacilityIdentifier FacilityIdentifier {
            get {
                return FacilityIdentifierField;
            } 
            set {
                FacilityIdentifierField = value;
                NotifyPropertyChanged("FacilityIdentifier");
            }
        }

        private FacilityIdentifier FacilityIdentifierField; 

        /// <summary>
        /// DtsPatchCord property
        /// </summary>
		[Description("Information regarding the patch cord used to connect the instrument box to the start of the optical fiber path.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DtsPatchCord")]
		[XmlElement("DtsPatchCord")]
        public DtsPatchCord DtsPatchCord {
            get {
                return DtsPatchCordField;
            } 
            set {
                DtsPatchCordField = value;
                NotifyPropertyChanged("DtsPatchCord");
            }
        }

        private DtsPatchCord DtsPatchCordField; 

        /// <summary>
        /// InstrumentCalibration property
        /// </summary>
		[Description("Calibration parameters vary from vendor to vendor, depending  on the calibration method being used. This is a general type that allows a calibration  date, business associate, and many  name/value pairs.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DtsCalibration")]
		[XmlElement("InstrumentCalibration")]
        public List<DtsCalibration> InstrumentCalibration {
            get {
                return InstrumentCalibrationField;
            } 
            set {
                InstrumentCalibrationField = value;
                NotifyPropertyChanged("InstrumentCalibration");
            }
        }

         /// <summary>
         /// bool to indicate if InstrumentCalibration has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InstrumentCalibrationSpecified
         {
             get {
             if(InstrumentCalibrationField!=null)
                 return InstrumentCalibrationField.Count>0?true:false;
             else return false;
             }
         }
        private List<DtsCalibration> InstrumentCalibrationField; 

        /// <summary>
        /// Instrument property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Instrument")]
		[XmlElement("Instrument")]
        public Instrument Instrument {
            get {
                return InstrumentField;
            } 
            set {
                InstrumentField = value;
                NotifyPropertyChanged("Instrument");
            }
        }

        private Instrument InstrumentField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DtsCalibration xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DtsCalibration", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the DtsCalibration xsd type.")]
    public partial class DtsCalibration : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTimCalibration property
        /// </summary>
		[Description("The date of the calibration.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("DTimCalibration", DataType="date")]
        public DateTime? DateTimeCalibration {
            get {
                return DTimCalibrationField;
            } 
            set {
                DTimCalibrationField = value;
                 this.DateTimeCalibrationSpecified = true;
                NotifyPropertyChanged("DateTimeCalibration");
            }
        }

        private DateTime? DTimCalibrationField; 

        /// <summary>
        /// DTimCalibrationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeCalibrationSpecified {
            get {
                return DTimCalibrationSpecifiedField;
            } 
            set {
                DTimCalibrationSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCalibrationSpecified");
            }
        }

        private bool DTimCalibrationSpecifiedField; 

        /// <summary>
        /// CalibratedBy property
        /// </summary>
		[StringLength(64)]
        [Description("The business associate that performed the calibration.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CalibratedBy")]
        public string CalibratedBy {
            get {
                return CalibratedByField;
            } 
            set {
                CalibratedByField = value;
                NotifyPropertyChanged("CalibratedBy");
            }
        }

        private string CalibratedByField; 

        /// <summary>
        /// CalibrationProtocol property
        /// </summary>
		[StringLength(64)]
        [Description("This may be a standard protocol or a software application.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CalibrationProtocol")]
        public string CalibrationProtocol {
            get {
                return CalibrationProtocolField;
            } 
            set {
                CalibrationProtocolField = value;
                NotifyPropertyChanged("CalibrationProtocol");
            }
        }

        private string CalibrationProtocolField; 

        /// <summary>
        /// Parameter property
        /// </summary>
		[Description("Attribute name is the name of the parameter. Optional attribute uom is the unit of measure of the parameter. The value of the element is the value of the parameter. Note that a string value may appear as a parameter.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CalibrationParameter")]
		[XmlElement("Parameter")]
        public List<CalibrationParameter> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(ParameterField!=null)
                 return ParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<CalibrationParameter> ParameterField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Any remarks that may be useful regarding the calibration information.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// A unique identifier (UID) of an instance of DtsCalibration.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A  unique identifier (UID) of an instance of DtsCalibration.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CalibrationParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CalibrationParameter", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the CalibrationParameter xsd type.")]
    public partial class CalibrationParameter : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// The unit of measure of the parameter value.
        /// </summary>
		[StringLength(32)]
        [Description("The unit of measure of the parameter value.")]
        [EnergisticsDataTypeAttribute(DataType = "UomEnum")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

		/// <summary>
        /// The name of the parameter.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("name")]
		
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the DtsInstalledSystem xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the DtsInstalledSystem xsd type.")]
    public partial class DtsInstalledSystem : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// DateMin property
        /// </summary>
		[Required]
        [Description("The minimum date index contained within the object. The minimum and maximum indexes are server query parameters and are populated with valid values in a \"get\" result. That is, all measurements for a well in the specified period defined by the min/max.  For a description of the behavior related to this parameter in WITSML v1.4.1, see the WITSML API Specification appendix on \"Special Handling\" of growing objects.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DateMin")]
        public DateTime? DateMin {
            get {
                return DateMinField;
            } 
            set {
                DateMinField = value;
                NotifyPropertyChanged("DateMin");
            }
        }

        private DateTime? DateMinField; 

        /// <summary>
        /// DateMax property
        /// </summary>
		[Description("The maximum date index contained within the object. The minimum and maximum indexes are server query parameters and are populated with valid values in a \"get\" result.  For a description of the behavior related to this parameter in WITSML v1.4.1, see the WITSML API Specification appendix on \"Special Handling\" of growing objects.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DateMax")]
        public DateTime? DateMax {
            get {
                return DateMaxField;
            } 
            set {
                DateMaxField = value;
                 this.DateMaxSpecified = true;
                NotifyPropertyChanged("DateMax");
            }
        }

        private DateTime? DateMaxField; 

        /// <summary>
        /// DateMaxSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateMaxSpecified {
            get {
                return DateMaxSpecifiedField;
            } 
            set {
                DateMaxSpecifiedField = value;
                NotifyPropertyChanged("DateMaxSpecified");
            }
        }

        private bool DateMaxSpecifiedField; 

        /// <summary>
        /// OpticalPathLength property
        /// </summary>
		[Description("The length of the fiber installed in the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OpticalPathLength")]
        public LengthMeasure OpticalPathLength {
            get {
                return OpticalPathLengthField;
            } 
            set {
                OpticalPathLengthField = value;
                NotifyPropertyChanged("OpticalPathLength");
            }
        }

        private LengthMeasure OpticalPathLengthField; 

        /// <summary>
        /// OpticalBudget property
        /// </summary>
		[Description("Total light budget available for the installation. This is generally measured in decibels, and indicates the total power loss for two-way travel of the light in the installed fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("OpticalBudget")]
        public double? OpticalBudget {
            get {
                return OpticalBudgetField;
            } 
            set {
                OpticalBudgetField = value;
                 this.OpticalBudgetSpecified = true;
                NotifyPropertyChanged("OpticalBudget");
            }
        }

        private double? OpticalBudgetField; 

        /// <summary>
        /// OpticalBudgetSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OpticalBudgetSpecified {
            get {
                return OpticalBudgetSpecifiedField;
            } 
            set {
                OpticalBudgetSpecifiedField = value;
                NotifyPropertyChanged("OpticalBudgetSpecified");
            }
        }

        private bool OpticalBudgetSpecifiedField; 

        /// <summary>
        /// OpticalPathReference property
        /// </summary>
		[Required]
        [Description("A reference to the optical path data object that is used in this installed system.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("OpticalPathReference")]
        public DataObjectReference OpticalPathReference {
            get {
                return OpticalPathReferenceField;
            } 
            set {
                OpticalPathReferenceField = value;
                NotifyPropertyChanged("OpticalPathReference");
            }
        }

        private DataObjectReference OpticalPathReferenceField; 

        /// <summary>
        /// InstrumentBoxReference property
        /// </summary>
		[Required]
        [Description("A reference to the instrument box data object used in this installed system.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("InstrumentBoxReference")]
        public DataObjectReference InstrumentBoxReference {
            get {
                return InstrumentBoxReferenceField;
            } 
            set {
                InstrumentBoxReferenceField = value;
                NotifyPropertyChanged("InstrumentBoxReference");
            }
        }

        private DataObjectReference InstrumentBoxReferenceField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("Comment about this installed system.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// FacilityIdentifier property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifier")]
		[XmlElement("FacilityIdentifier")]
        public FacilityIdentifier FacilityIdentifier {
            get {
                return FacilityIdentifierField;
            } 
            set {
                FacilityIdentifierField = value;
                NotifyPropertyChanged("FacilityIdentifier");
            }
        }

        private FacilityIdentifier FacilityIdentifierField; 

        /// <summary>
        /// Calibration parameters vary from vendor to vendor, depending on the calibration method being used. This is a general type that allows a calibration date, business associate, and many name/value pairs. 
        /// </summary>
		[Description("Calibration parameters vary from vendor to vendor, depending  on the calibration method being used. This is a general type that allows a calibration  date, business associate, and many  name/value pairs.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DtsCalibration")]
		[XmlElement("DtsCalibration")]
        public List<DtsCalibration> DtsCalibration {
            get {
                return DtsCalibrationField;
            } 
            set {
                DtsCalibrationField = value;
                NotifyPropertyChanged("DtsCalibration");
            }
        }

         /// <summary>
         /// bool to indicate if DtsCalibration has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DtsCalibrationSpecified
         {
             get {
             if(DtsCalibrationField!=null)
                 return DtsCalibrationField.Count>0?true:false;
             else return false;
             }
         }
        private List<DtsCalibration> DtsCalibrationField; 


    } //here

    /// <summary>
    /// This class represents the FiberOpticalPath xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the FiberOpticalPath xsd type.")]
    public partial class FiberOpticalPath : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Inventory property
        /// </summary>
		[Required]
        [Description("The list of equipment used in the optical path.  Equipment may be used in the optical path for different periods of time, so this inventory contains all items of equipment which are used at some period of time.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberOpticalPathInventory")]
		[XmlElement("Inventory")]
        public FiberOpticalPathInventory Inventory {
            get {
                return InventoryField;
            } 
            set {
                InventoryField = value;
                NotifyPropertyChanged("Inventory");
            }
        }

        private FiberOpticalPathInventory InventoryField; 

        /// <summary>
        /// OpticalPathNetwork property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberOpticalPathNetwork")]
		[XmlElement("OpticalPathNetwork")]
        public List<FiberOpticalPathNetwork> OpticalPathNetwork {
            get {
                return OpticalPathNetworkField;
            } 
            set {
                OpticalPathNetworkField = value;
                NotifyPropertyChanged("OpticalPathNetwork");
            }
        }

         /// <summary>
         /// bool to indicate if OpticalPathNetwork has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OpticalPathNetworkSpecified
         {
             get {
             if(OpticalPathNetworkField!=null)
                 return OpticalPathNetworkField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberOpticalPathNetwork> OpticalPathNetworkField; 

        /// <summary>
        /// FacilityMapping property
        /// </summary>
		[Description("Relates distances measured along the optical path to specific lengths along facilities (wellbores or pipelines).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberFacilityMapping")]
		[XmlElement("FacilityMapping")]
        public List<FiberFacilityMapping> FacilityMapping {
            get {
                return FacilityMappingField;
            } 
            set {
                FacilityMappingField = value;
                NotifyPropertyChanged("FacilityMapping");
            }
        }

         /// <summary>
         /// bool to indicate if FacilityMapping has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacilityMappingSpecified
         {
             get {
             if(FacilityMappingField!=null)
                 return FacilityMappingField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberFacilityMapping> FacilityMappingField; 

        /// <summary>
        /// Defect property
        /// </summary>
		[Description("A zone of the fibre which has defective optical properties (e.g., darkening).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberPathDefect")]
		[XmlElement("Defect")]
        public List<FiberPathDefect> Defect {
            get {
                return DefectField;
            } 
            set {
                DefectField = value;
                NotifyPropertyChanged("Defect");
            }
        }

         /// <summary>
         /// bool to indicate if Defect has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DefectSpecified
         {
             get {
             if(DefectField!=null)
                 return DefectField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberPathDefect> DefectField; 

        /// <summary>
        /// Otdr property
        /// </summary>
		[Description("This records the result arrays along with context information for an Optical Time Domain Reflectometry (OTDR) survey.  The arrays will define the relative scattered power from the Rayleigh scattering vs distance along the fiber.  The actual data values are recorded in a OTDR file and/or image file, which are referenced in subelements.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberOTDR")]
		[XmlElement("Otdr")]
        public List<FiberOTDR> Otdr {
            get {
                return OtdrField;
            } 
            set {
                OtdrField = value;
                NotifyPropertyChanged("Otdr");
            }
        }

         /// <summary>
         /// bool to indicate if Otdr has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OtdrSpecified
         {
             get {
             if(OtdrField!=null)
                 return OtdrField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberOTDR> OtdrField; 

        /// <summary>
        /// InstallingVendor property
        /// </summary>
		[Description("The vendor who performed the physical deployment")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BusinessAssociate")]
		[XmlElement("InstallingVendor")]
        public BusinessAssociate InstallingVendor {
            get {
                return InstallingVendorField;
            } 
            set {
                InstallingVendorField = value;
                NotifyPropertyChanged("InstallingVendor");
            }
        }

        private BusinessAssociate InstallingVendorField; 

        /// <summary>
        /// FacilityIdentifier property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifier")]
		[XmlElement("FacilityIdentifier")]
        public FacilityIdentifier FacilityIdentifier {
            get {
                return FacilityIdentifierField;
            } 
            set {
                FacilityIdentifierField = value;
                NotifyPropertyChanged("FacilityIdentifier");
            }
        }

        private FacilityIdentifier FacilityIdentifierField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberOpticalPathInventory xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberOpticalPathInventory", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberOpticalPathInventory xsd type.")]
    public partial class FiberOpticalPathInventory : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A connection component within the optical path. 
        /// </summary>
		[Description("A connection component within the optical path.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberConnection")]
		[XmlElement("Connection")]
        public List<FiberConnection> Connection {
            get {
                return ConnectionField;
            } 
            set {
                ConnectionField = value;
                NotifyPropertyChanged("Connection");
            }
        }

         /// <summary>
         /// bool to indicate if Connection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ConnectionSpecified
         {
             get {
             if(ConnectionField!=null)
                 return ConnectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberConnection> ConnectionField; 

        /// <summary>
        /// A turnaround component within the optical path. 
        /// </summary>
		[Description("A turnaround component within the optical path.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberTurnaround")]
		[XmlElement("Turnaround")]
        public List<FiberTurnaround> Turnaround {
            get {
                return TurnaroundField;
            } 
            set {
                TurnaroundField = value;
                NotifyPropertyChanged("Turnaround");
            }
        }

         /// <summary>
         /// bool to indicate if Turnaround has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TurnaroundSpecified
         {
             get {
             if(TurnaroundField!=null)
                 return TurnaroundField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberTurnaround> TurnaroundField; 

        /// <summary>
        /// A single segment of the optical fiber used for distributed temperature surveys. Multiple such segments may be connected by other types of component including connectors, splices and fiber turnarounds. 
        /// </summary>
		[Required]
        [Description("A single segment of the optical fiber used for distributed temperature surveys. Multiple such segments may be connected by other types of component including connectors, splices and fiber turnarounds.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberOpticalPathSegment")]
		[XmlElement("Segment")]
        public List<FiberOpticalPathSegment> Segment {
            get {
                return SegmentField;
            } 
            set {
                SegmentField = value;
                NotifyPropertyChanged("Segment");
            }
        }

         /// <summary>
         /// bool to indicate if Segment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SegmentSpecified
         {
             get {
             if(SegmentField!=null)
                 return SegmentField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberOpticalPathSegment> SegmentField; 

        /// <summary>
        /// The terminator of the optical path. This may be a component (in the case of a single ended fiber installation), or it may be a connection back into the instrument box in the case of a double ended fiber installation. 
        /// </summary>
		[Required]
        [Description("The terminator of the optical path. This may be a component (in the case of a single ended fiber installation), or it may be a connection back into the instrument box in the case of a double ended fiber installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberTerminator")]
		[XmlElement("Terminator")]
        public FiberTerminator Terminator {
            get {
                return TerminatorField;
            } 
            set {
                TerminatorField = value;
                NotifyPropertyChanged("Terminator");
            }
        }

        private FiberTerminator TerminatorField; 

        /// <summary>
        /// A splice component within the optical path. 
        /// </summary>
		[Description("A splice component within the optical path.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberSplice")]
		[XmlElement("Splice")]
        public List<FiberSplice> Splice {
            get {
                return SpliceField;
            } 
            set {
                SpliceField = value;
                NotifyPropertyChanged("Splice");
            }
        }

         /// <summary>
         /// bool to indicate if Splice has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SpliceSpecified
         {
             get {
             if(SpliceField!=null)
                 return SpliceField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberSplice> SpliceField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberOpticalPathNetwork xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberOpticalPathNetwork", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberOpticalPathNetwork xsd type.")]
    public partial class FiberOpticalPathNetwork : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Installation property
        /// </summary>
		[Description("Installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("Installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return InstallationField;
            } 
            set {
                InstallationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct InstallationField; 

        /// <summary>
        /// ContextFacility property
        /// </summary>
		[Required]
        [Description("Context facility.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("ContextFacility")]
        public List<FacilityIdentifierStruct> ContextFacility {
            get {
                return ContextFacilityField;
            } 
            set {
                ContextFacilityField = value;
                NotifyPropertyChanged("ContextFacility");
            }
        }

         /// <summary>
         /// bool to indicate if ContextFacility has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContextFacilitySpecified
         {
             get {
             if(ContextFacilityField!=null)
                 return ContextFacilityField.Count>0?true:false;
             else return false;
             }
         }
        private List<FacilityIdentifierStruct> ContextFacilityField; 

        /// <summary>
        /// DTimStart property
        /// </summary>
		[Description("DTimStart.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimStart")]
        public DateTime? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? DTimStartField; 

        /// <summary>
        /// DTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DTimStartSpecifiedField;
            } 
            set {
                DTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool DTimStartSpecifiedField; 

        /// <summary>
        /// DTimeEnd property
        /// </summary>
		[Description("DTimeEnd.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimeEnd")]
        public DateTime? DTimeEnd {
            get {
                return DTimeEndField;
            } 
            set {
                DTimeEndField = value;
                 this.DTimeEndSpecified = true;
                NotifyPropertyChanged("DTimeEnd");
            }
        }

        private DateTime? DTimeEndField; 

        /// <summary>
        /// DTimeEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DTimeEndSpecified {
            get {
                return DTimeEndSpecifiedField;
            } 
            set {
                DTimeEndSpecifiedField = value;
                NotifyPropertyChanged("DTimeEndSpecified");
            }
        }

        private bool DTimeEndSpecifiedField; 

        /// <summary>
        /// ExistenceTime property
        /// </summary>
		[Description("ExistenceTime.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQualifiedDateTime")]
		[XmlElement("ExistenceTime")]
        public EndpointQualifiedDateTime ExistenceTime {
            get {
                return ExistenceTimeField;
            } 
            set {
                ExistenceTimeField = value;
                NotifyPropertyChanged("ExistenceTime");
            }
        }

        private EndpointQualifiedDateTime ExistenceTimeField; 

        /// <summary>
        /// DTimMin property
        /// </summary>
		[Description("DTimMin.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQualifiedDateTime")]
		[XmlElement("DTimMin")]
        public EndpointQualifiedDateTime DateTimeMin {
            get {
                return DTimMinField;
            } 
            set {
                DTimMinField = value;
                NotifyPropertyChanged("DateTimeMin");
            }
        }

        private EndpointQualifiedDateTime DTimMinField; 

        /// <summary>
        /// DTimMax property
        /// </summary>
		[Description("DTimMax.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQualifiedDateTime")]
		[XmlElement("DTimMax")]
        public EndpointQualifiedDateTime DateTimeMax {
            get {
                return DTimMaxField;
            } 
            set {
                DTimMaxField = value;
                NotifyPropertyChanged("DateTimeMax");
            }
        }

        private EndpointQualifiedDateTime DTimMaxField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("Comment.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// ExternalConnect property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowExternalReference")]
		[XmlElement("ExternalConnect")]
        public List<ProductFlowExternalReference> ExternalConnect {
            get {
                return ExternalConnectField;
            } 
            set {
                ExternalConnectField = value;
                NotifyPropertyChanged("ExternalConnect");
            }
        }

         /// <summary>
         /// bool to indicate if ExternalConnect has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExternalConnectSpecified
         {
             get {
             if(ExternalConnectField!=null)
                 return ExternalConnectField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowExternalReference> ExternalConnectField; 

        /// <summary>
        /// Network property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowNetwork")]
		[XmlElement("Network")]
        public List<ProductFlowNetwork> Network {
            get {
                return NetworkField;
            } 
            set {
                NetworkField = value;
                NotifyPropertyChanged("Network");
            }
        }

         /// <summary>
         /// bool to indicate if Network has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NetworkSpecified
         {
             get {
             if(NetworkField!=null)
                 return NetworkField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowNetwork> NetworkField; 

		/// <summary>
        /// Unique identifier of this object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier of this object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductFlowExternalReference xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductFlowExternalReference", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductFlowExternalReference xsd type.")]
    public partial class ProductFlowExternalReference : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// PortReference property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Reference to a type of port.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PortReference")]
        public string PortReference {
            get {
                return PortReferenceField;
            } 
            set {
                PortReferenceField = value;
                NotifyPropertyChanged("PortReference");
            }
        }

        private string PortReferenceField; 

        /// <summary>
        /// ConnectedPortReference property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Reference to the connected port.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ConnectedPortReference")]
        public string ConnectedPortReference {
            get {
                return ConnectedPortReferenceField;
            } 
            set {
                ConnectedPortReferenceField = value;
                NotifyPropertyChanged("ConnectedPortReference");
            }
        }

        private string ConnectedPortReferenceField; 

        /// <summary>
        /// ConnectedModelReference property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Reference to the connected model.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ConnectedModelReference")]
        public string ConnectedModelReference {
            get {
                return ConnectedModelReferenceField;
            } 
            set {
                ConnectedModelReferenceField = value;
                NotifyPropertyChanged("ConnectedModelReference");
            }
        }

        private string ConnectedModelReferenceField; 

        /// <summary>
        /// ConnectedInstallation property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("ConnectedInstallation")]
        public FacilityIdentifierStruct ConnectedInstallation {
            get {
                return ConnectedInstallationField;
            } 
            set {
                ConnectedInstallationField = value;
                NotifyPropertyChanged("ConnectedInstallation");
            }
        }

        private FacilityIdentifierStruct ConnectedInstallationField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductFlowNetwork xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductFlowNetwork", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductFlowNetwork xsd type.")]
    public partial class ProductFlowNetwork : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the product flow network. This must be unique within the context of the overall product flow model.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the product flow network. This must be unique within the context of the overall product flow model.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// The name of a network plan. This indicates a planned network. All child network components must all be planned and be part of the same plan. The parent network must either contain the plan (i.e., be an actual) or be part of the same plan. Not specified indicates an actual network.
        /// </summary>
		[StringLength(64)]
        [Description("The name of a network plan. This indicates a planned network. All child network components must all be planned and be part of the same plan. The parent network must either contain the plan (i.e., be an actual) or be part of the same plan. Not specified indicates an actual network.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PlanName")]
        public string PlanName {
            get {
                return PlanNameField;
            } 
            set {
                PlanNameField = value;
                NotifyPropertyChanged("PlanName");
            }
        }

        private string PlanNameField; 

        /// <summary>
        /// A pointer to the network containing the unit that this network represents. That is, the unit must exist in a different network. If a parent network is not specified then the network represents the model. A model should only be represented by one network. The model network represents the overall installation. All other networks represent internal detail and should not be referenced from outside the model. The external ports on the model network represent the external ports to the overall product flow model. A pointer to an external port on the product flow model does not require the name of the model network because it is redundant to knowledge of the model name (i.e., there is a one-to-one correspondence).
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the network containing the unit that this network represents. That is, the unit must exist in a different network. If a parent network is not specified then the network represents the model. A model should only be represented by one network. The model network represents the overall installation. All other networks represent internal detail and should not be referenced from outside the model. The external ports on the model network represent the external ports to the overall product flow model. A pointer to an external port on the product flow model does not require the name of the model network because it is redundant to knowledge of the model name (i.e., there is a one-to-one correspondence).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ParentNetworkReference")]
        public string ParentNetworkReference {
            get {
                return ParentNetworkReferenceField;
            } 
            set {
                ParentNetworkReferenceField = value;
                NotifyPropertyChanged("ParentNetworkReference");
            }
        }

        private string ParentNetworkReferenceField; 

        /// <summary>
        /// A descriptive remark about the network.
        /// </summary>
		[StringLength(2000)]
        [Description("A descriptive remark about the network.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// An external port. This exposes an internal node for the purpose of allowing connections to the internal behavior of the network. Networks that represent a Flow Unit should always have external ports. If this network represents a Unit then the name of the external port must match the name of a port on the Unit (i.e., they are logically the same port).
        /// </summary>
		[Description("An external port. This exposes an internal node for the purpose of allowing connections to the internal behavior of the network. Networks that represent a Flow Unit should always have external ports. If this network represents a Unit then the name of the external port must match the name of a port on the Unit (i.e., they are logically the same port).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowExternalPort")]
		[XmlElement("Port")]
        public List<ProductFlowExternalPort> Port {
            get {
                return PortField;
            } 
            set {
                PortField = value;
                NotifyPropertyChanged("Port");
            }
        }

         /// <summary>
         /// bool to indicate if Port has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PortSpecified
         {
             get {
             if(PortField!=null)
                 return PortField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowExternalPort> PortField; 

        /// <summary>
        /// Defines the existance of a planned network which is a variant of this network beginning at a specified point in time. Any changes to the actual network after that time do not affect the plan.
        /// </summary>
		[Description("Defines the existance of a planned network which is a variant of this network beginning at a specified point in time. Any changes to the actual network after that time do not affect the plan.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowNetworkPlan")]
		[XmlElement("Plan")]
        public List<ProductFlowNetworkPlan> Plan {
            get {
                return PlanField;
            } 
            set {
                PlanField = value;
                NotifyPropertyChanged("Plan");
            }
        }

         /// <summary>
         /// bool to indicate if Plan has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PlanSpecified
         {
             get {
             if(PlanField!=null)
                 return PlanField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowNetworkPlan> PlanField; 

        /// <summary>
        /// Documents that a change occurred at a particular time.
        /// </summary>
		[Description("Documents that a change occurred at a particular time.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowChangeLog")]
		[XmlElement("ChangeLog")]
        public List<ProductFlowChangeLog> ChangeLog {
            get {
                return ChangeLogField;
            } 
            set {
                ChangeLogField = value;
                NotifyPropertyChanged("ChangeLog");
            }
        }

         /// <summary>
         /// bool to indicate if ChangeLog has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ChangeLogSpecified
         {
             get {
             if(ChangeLogField!=null)
                 return ChangeLogField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowChangeLog> ChangeLogField; 

        /// <summary>
        /// A flow behavior for one unit. Within this context, a unit represents a usage of equipment for some purpose. The unit is generally identified by its function rather than the actual equipment used to realize the function. A unit might represent something complex like a field or separator or something simple like a valve or pump.
        /// </summary>
		[Required]
        [Description("A flow behavior for one unit. Within this context, a unit represents a usage of equipment for some purpose. The unit is generally identified by its function rather than the actual equipment used to realize the function. A unit might represent something complex like a field or separator or something simple  like a valve or pump.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowUnit")]
		[XmlElement("Unit")]
        public List<ProductFlowUnit> Unit {
            get {
                return UnitField;
            } 
            set {
                UnitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

         /// <summary>
         /// bool to indicate if Unit has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool UnitSpecified
         {
             get {
             if(UnitField!=null)
                 return UnitField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowUnit> UnitField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductFlowExternalPort xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductFlowExternalPort", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductFlowExternalPort xsd type.")]
    public partial class ProductFlowExternalPort : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the external port within the context of the current product flow network.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the external port within the context of the current product flow network.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Defines whether this port is an inlet or outlet. Note that this is a nominal intended direction.
        /// </summary>
		[Required]
        [Description("Defines whether this port is an inlet or outlet. Note that this is a nominal intended direction.")]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowPortType")]
		[XmlElement("Direction")]
        public ProductFlowPortType? Direction {
            get {
                return DirectionField;
            } 
            set {
                DirectionField = value;
                 this.DirectionSpecified = true;
                NotifyPropertyChanged("Direction");
            }
        }

        
        private bool DirectionSpecifiedField = false;
        
        /// <summary>
        /// DirectionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DirectionSpecified {
            get {
                return DirectionSpecifiedField;
            } 
            set {
                DirectionSpecifiedField = value;
                NotifyPropertyChanged("DirectionSpecified");
            }
        }
        
        private ProductFlowPortType? DirectionField; 

        /// <summary>
        /// True ("true" or "1") indicates that the port is an exposed internal port and cannot be used in a connection external to the network. False ("false" or "0") or not given indicates a normal port.
        /// </summary>
		[Description("True (\"true\" or \"1\") indicates that the port is an exposed internal port and cannot be used in a connection external to the network. False (\"false\" or \"0\") or not given indicates a normal port.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Exposed")]
        public bool? Exposed {
            get {
                return ExposedField;
            } 
            set {
                ExposedField = value;
                 this.ExposedSpecified = true;
                NotifyPropertyChanged("Exposed");
            }
        }

        private bool? ExposedField; 

        /// <summary>
        /// ExposedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ExposedSpecified {
            get {
                return ExposedSpecifiedField;
            } 
            set {
                ExposedSpecifiedField = value;
                NotifyPropertyChanged("ExposedSpecified");
            }
        }

        private bool ExposedSpecifiedField; 

        /// <summary>
        /// Defines the internal node to which this external port is connected. All ports (whether internal or external) that are connected to a node with the same name are connected to each other. Node names are unique to each network. The purpose of the external port is to provide input to or output from the internal network except when the port is an "exposed" port. The purpose of an exposed port is to allow the properties of the port to be seen external to the network. For an exposed port, the connection points to the associated port.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Defines the internal node to which this external port is connected. All ports (whether internal or external) that are connected to a node with the same name are connected to each other. Node names are unique to each network. The purpose of the external port is to provide input to or output from the internal network except when the port is an \"exposed\" port. The purpose of an exposed port is to allow the properties of the port to be seen external to the network. For an exposed port, the connection points to the associated port.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ConnectedNode")]
        public string ConnectedNode {
            get {
                return ConnectedNodeField;
            } 
            set {
                ConnectedNodeField = value;
                NotifyPropertyChanged("ConnectedNode");
            }
        }

        private string ConnectedNodeField; 

        /// <summary>
        /// A descriptive remark about the port.
        /// </summary>
		[StringLength(2000)]
        [Description("A descriptive remark about the port.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductFlowNetworkPlan xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductFlowNetworkPlan", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductFlowNetworkPlan xsd type.")]
    public partial class ProductFlowNetworkPlan : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name assigned to the plan.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name assigned to the plan.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// The date and time of the start of the plan. This point coincides with the end of the actual configuration. The configuration of the actual at this point in time represents the configuration of the plan at this starting point. All changes to this plan must be in the future from this point in time.
        /// </summary>
		[Required]
        [Description("The date and time of the start of the plan. This point coincides with the end of the actual configuration. The configuration of the actual at this point in time represents the configuration of the plan at this starting point. All changes to this plan must be in the future from this point in time.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimStart")]
        public DateTime? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? DTimStartField; 

        /// <summary>
        /// A textual description of the purpose of the plan.
        /// </summary>
		[StringLength(2000)]
        [Description("A textual description of the purpose of the plan.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Purpose")]
        public string Purpose {
            get {
                return PurposeField;
            } 
            set {
                PurposeField = value;
                NotifyPropertyChanged("Purpose");
            }
        }

        private string PurposeField; 

        /// <summary>
        /// Documents that a change occurred at a particular time.
        /// </summary>
		[Description("Documents that a change occurred at a particular time.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowChangeLog")]
		[XmlElement("ChangeLog")]
        public List<ProductFlowChangeLog> ChangeLog {
            get {
                return ChangeLogField;
            } 
            set {
                ChangeLogField = value;
                NotifyPropertyChanged("ChangeLog");
            }
        }

         /// <summary>
         /// bool to indicate if ChangeLog has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ChangeLogSpecified
         {
             get {
             if(ChangeLogField!=null)
                 return ChangeLogField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowChangeLog> ChangeLogField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductFlowChangeLog xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductFlowChangeLog", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductFlowChangeLog xsd type.")]
    public partial class ProductFlowChangeLog : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A name assigned to the change.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A name assigned to the change.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// The timestamp associated with the change. All changes must use this timestamp.
        /// </summary>
		[Required]
        [Description("The timestamp associated with the change. All changes must use this timestamp.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTim")]
        public DateTime? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? DTimField; 

        /// <summary>
        /// A textual reason for the change.
        /// </summary>
		[StringLength(2000)]
        [Description("A textual reason for the change.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Reason")]
        public string Reason {
            get {
                return ReasonField;
            } 
            set {
                ReasonField = value;
                NotifyPropertyChanged("Reason");
            }
        }

        private string ReasonField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductFlowUnit xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductFlowUnit", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductFlowUnit xsd type.")]
    public partial class ProductFlowUnit : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the ProductFlowUnit within the context of the ProductFlowNetwork.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// PlanName property
        /// </summary>
		[StringLength(64)]
        [Description("The name of a network plan. This indicates a planned unit. All child network components must all be planned and be part of the same plan. The parent network must either contain the plan (i.e., be an actual) or be part of the same plan. Not specified indicates an actual unit.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PlanName")]
        public string PlanName {
            get {
                return PlanNameField;
            } 
            set {
                PlanNameField = value;
                NotifyPropertyChanged("PlanName");
            }
        }

        private string PlanNameField; 

        /// <summary>
        /// InternalNetworkReference property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the network representing the internal behavior of this unit. The names of the external ports on the internal network must match the names of the ports on this unit. That is they are logically the same ports.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("InternalNetworkReference")]
        public string InternalNetworkReference {
            get {
                return InternalNetworkReferenceField;
            } 
            set {
                InternalNetworkReferenceField = value;
                NotifyPropertyChanged("InternalNetworkReference");
            }
        }

        private string InternalNetworkReferenceField; 

        /// <summary>
        /// Facility property
        /// </summary>
		[Description("The name of the facility for which this Product Flow Unit describes fluid flow connection behavior. The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("Facility")]
        public FacilityIdentifierStruct Facility {
            get {
                return FacilityField;
            } 
            set {
                FacilityField = value;
                NotifyPropertyChanged("Facility");
            }
        }

        private FacilityIdentifierStruct FacilityField; 

        /// <summary>
        /// FacilityParent1 property
        /// </summary>
		[Description("For facilities whose name is unique within the context of another facility, the name of the parent facility this named facility. The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("FacilityParent1")]
        public FacilityIdentifierStruct FacilityParent1 {
            get {
                return FacilityParent1Field;
            } 
            set {
                FacilityParent1Field = value;
                NotifyPropertyChanged("FacilityParent1");
            }
        }

        private FacilityIdentifierStruct FacilityParent1Field; 

        /// <summary>
        /// FacilityParent2 property
        /// </summary>
		[Description("For facilities whose name is unique within the context of another facility, the name of the parent facility of facilityParent1. The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("FacilityParent2")]
        public FacilityIdentifierStruct FacilityParent2 {
            get {
                return FacilityParent2Field;
            } 
            set {
                FacilityParent2Field = value;
                NotifyPropertyChanged("FacilityParent2");
            }
        }

        private FacilityIdentifierStruct FacilityParent2Field; 

        /// <summary>
        /// ContextFacility property
        /// </summary>
		[Description("The name and type of a facility whose context is relevant to the represented facility.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("ContextFacility")]
        public List<FacilityIdentifierStruct> ContextFacility {
            get {
                return ContextFacilityField;
            } 
            set {
                ContextFacilityField = value;
                NotifyPropertyChanged("ContextFacility");
            }
        }

         /// <summary>
         /// bool to indicate if ContextFacility has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContextFacilitySpecified
         {
             get {
             if(ContextFacilityField!=null)
                 return ContextFacilityField.Count>0?true:false;
             else return false;
             }
         }
        private List<FacilityIdentifierStruct> ContextFacilityField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("A descriptive remark associated with this unit.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// ExpectedProperty property
        /// </summary>
		[Description("Defines an expected property of the facility represented by this unit.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowExpectedUnitProperty")]
		[XmlElement("ExpectedProperty")]
        public List<ProductFlowExpectedUnitProperty> ExpectedProperty {
            get {
                return ExpectedPropertyField;
            } 
            set {
                ExpectedPropertyField = value;
                NotifyPropertyChanged("ExpectedProperty");
            }
        }

         /// <summary>
         /// bool to indicate if ExpectedProperty has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExpectedPropertySpecified
         {
             get {
             if(ExpectedPropertyField!=null)
                 return ExpectedPropertyField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowExpectedUnitProperty> ExpectedPropertyField; 

        /// <summary>
        /// Port property
        /// </summary>
		[Description("An inlet or outlet port associated with this unit. If there is an internal network then the name of this port must match the name of  an external port for that network. Any properties (e.g., volume, pressure, temperature) that are assigned to this port  are inherently assigned to the corresponding external port on the internal network.  That is, the ports are logically the same port. Similar to a node, there is no pressure drop across a port.   Also similar to a node, conservation of mass exists across the port and the flow direction across the port can change over time if the relative pressures across connected units change.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowPort")]
		[XmlElement("Port")]
        public List<ProductFlowPort> Port {
            get {
                return PortField;
            } 
            set {
                PortField = value;
                NotifyPropertyChanged("Port");
            }
        }

         /// <summary>
         /// bool to indicate if Port has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PortSpecified
         {
             get {
             if(PortField!=null)
                 return PortField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowPort> PortField; 

        /// <summary>
        /// RelativeCoordinate property
        /// </summary>
		[Description("Defines the relative coordinate of the unit on a display screen. This is not intended for detailed diagrams. Rather it is intended to allow different applications to present a user view which has a consistent layout.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "RelativeCoordinate")]
		[XmlElement("RelativeCoordinate")]
        public RelativeCoordinate RelativeCoordinate {
            get {
                return RelativeCoordinateField;
            } 
            set {
                RelativeCoordinateField = value;
                NotifyPropertyChanged("RelativeCoordinate");
            }
        }

        private RelativeCoordinate RelativeCoordinateField; 

        /// <summary>
        /// FacilityAlias property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NameStruct")]
		[XmlElement("FacilityAlias")]
        public List<NameStruct> FacilityAlias {
            get {
                return FacilityAliasField;
            } 
            set {
                FacilityAliasField = value;
                NotifyPropertyChanged("FacilityAlias");
            }
        }

         /// <summary>
         /// bool to indicate if FacilityAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacilityAliasSpecified
         {
             get {
             if(FacilityAliasField!=null)
                 return FacilityAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> FacilityAliasField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductFlowExpectedUnitProperty xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductFlowExpectedUnitProperty", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductFlowExpectedUnitProperty xsd type.")]
    public partial class ProductFlowExpectedUnitProperty : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Property property
        /// </summary>
		[Required]
        [Description("The expected kind of facility property. Each property is documented to have values of a particular type.")]
        [EnergisticsDataTypeAttribute(DataType = "FacilityParameter")]
		[XmlElement("Property")]
        public FacilityParameter? Property {
            get {
                return PropertyField;
            } 
            set {
                PropertyField = value;
                 this.PropertySpecified = true;
                NotifyPropertyChanged("Property");
            }
        }

        
        private bool PropertySpecifiedField = false;
        
        /// <summary>
        /// PropertySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PropertySpecified {
            get {
                return PropertySpecifiedField;
            } 
            set {
                PropertySpecifiedField = value;
                NotifyPropertyChanged("PropertySpecified");
            }
        }
        
        private FacilityParameter? PropertyField; 

        /// <summary>
        /// ChildFacilityIdentifier property
        /// </summary>
		[Description("The PRODML Relative Identifier (or URI) of a child of the parent facility. The identifier path is presumed to begin with the identity of the parent facility. This identifies a sub-facility which is identified within the context of the parent facilityParent2/facilityParent1/name identification hierarchy. The property is only expected to be defined for this child and not for the parent. For more information about URIs, see the Energistics Identifier Specification, which is available in the zip file when download PRODML.")]
        [EnergisticsDataTypeAttribute(DataType = "ProdmlRelativeIdentifier")]
		[XmlElement("ChildFacilityIdentifier", DataType="anyURI")]
        public string ChildFacilityIdentifier {
            get {
                return ChildFacilityIdentifierField;
            } 
            set {
                ChildFacilityIdentifierField = value;
                NotifyPropertyChanged("ChildFacilityIdentifier");
            }
        }

        private string ChildFacilityIdentifierField; 

        /// <summary>
        /// TagAlias property
        /// </summary>
		[Description("An alternative name for the sensor that  measures the property.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NameStruct")]
		[XmlElement("TagAlias")]
        public List<NameStruct> TagAlias {
            get {
                return TagAliasField;
            } 
            set {
                TagAliasField = value;
                NotifyPropertyChanged("TagAlias");
            }
        }

         /// <summary>
         /// bool to indicate if TagAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TagAliasSpecified
         {
             get {
             if(TagAliasField!=null)
                 return TagAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> TagAliasField; 

        /// <summary>
        /// Deadband property
        /// </summary>
		[Description("Difference between two consecutive readings, which must exceed deadband value to be accepted.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GeneralMeasureType")]
		[XmlElement("Deadband")]
        public GeneralMeasureType Deadband {
            get {
                return DeadbandField;
            } 
            set {
                DeadbandField = value;
                NotifyPropertyChanged("Deadband");
            }
        }

        private GeneralMeasureType DeadbandField; 

        /// <summary>
        /// MaximumFrequency property
        /// </summary>
		[Description("The maximum time difference from the last sent event before the next event is sent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("MaximumFrequency")]
        public TimeMeasure MaximumFrequency {
            get {
                return MaximumFrequencyField;
            } 
            set {
                MaximumFrequencyField = value;
                NotifyPropertyChanged("MaximumFrequency");
            }
        }

        private TimeMeasure MaximumFrequencyField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("A descriptive remark associated with this property.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// ExpectedFlowQualifier property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "ExpectedFlowQualifier")]
		[XmlElement("ExpectedFlowQualifier")]
        public ExpectedFlowQualifier ExpectedFlowQualifier {
            get {
                return ExpectedFlowQualifierField;
            } 
            set {
                ExpectedFlowQualifierField = value;
                NotifyPropertyChanged("ExpectedFlowQualifier");
            }
        }

        private ExpectedFlowQualifier ExpectedFlowQualifierField; 

        /// <summary>
        /// Defines the expected flow and product pairs to be assigned to this port by a Product Volume report. A set of expected qualifiers can be defined for each pair. The aggregate of expectations on all properties should be a subset of the aggregate of expectations on the port. If no expectations are defined on the port then the port aggregate will be defined by the properties.
        /// </summary>
		[Description("Defines the expected flow and product pairs to be  assigned to this port by a Product Volume report. A set of expected qualifiers can be defined for each pair. The aggregate of expectations on all properties should be a subset of  the aggregate of expectations on the port.  If no expectations are defined on the port then the port aggregate will be defined by the properties.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowQualifierExpected")]
		[XmlElement("ExpectedFlowProduct")]
        public List<ProductFlowQualifierExpected> ExpectedFlowProduct {
            get {
                return ExpectedFlowProductField;
            } 
            set {
                ExpectedFlowProductField = value;
                NotifyPropertyChanged("ExpectedFlowProduct");
            }
        }

         /// <summary>
         /// bool to indicate if ExpectedFlowProduct has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExpectedFlowProductSpecified
         {
             get {
             if(ExpectedFlowProductField!=null)
                 return ExpectedFlowProductField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowQualifierExpected> ExpectedFlowProductField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeneralMeasureType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeneralMeasureType", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the GeneralMeasureType xsd type.")]
    public partial class GeneralMeasureType : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// The unit of measure. 
        /// </summary>
		[StringLength(32)]
        [Description("The unit of measure.")]
        [EnergisticsDataTypeAttribute(DataType = "UomEnum")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ExpectedFlowQualifier xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Qualifier))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductFlowQualifierExpected))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ExpectedFlowQualifier", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ExpectedFlowQualifier xsd type.")]
    public partial class ExpectedFlowQualifier : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Qualifier xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Qualifier", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the Qualifier xsd type.")]
    public partial class Qualifier : ExpectedFlowQualifier, INotifyPropertyChanged
    {

        /// <summary>
        /// Qualifier1 property
        /// </summary>
		[RecurringElement]
		[XmlElement("Qualifier")]
        public List<FlowQualifier> Qualifier1 {
            get {
                return Qualifier1Field;
            } 
            set {
                Qualifier1Field = value;
                NotifyPropertyChanged("Qualifier1");
            }
        }

         /// <summary>
         /// bool to indicate if Qualifier1 has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool Qualifier1Specified
         {
             get {
             if(Qualifier1Field!=null)
                 return Qualifier1Field.Count>0?true:false;
             else return false;
             }
         }
        private List<FlowQualifier> Qualifier1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductFlowQualifierExpected xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductFlowQualifierExpected", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductFlowQualifierExpected xsd type.")]
    public partial class ProductFlowQualifierExpected : ExpectedFlowQualifier, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The expected kind of flow.
        /// </summary>
		[Required]
        [Description("The expected kind of flow.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingFlow")]
		[XmlElement("Flow")]
        public ReportingFlow? Flow {
            get {
                return FlowField;
            } 
            set {
                FlowField = value;
                 this.FlowSpecified = true;
                NotifyPropertyChanged("Flow");
            }
        }

        
        private bool FlowSpecifiedField = false;
        
        /// <summary>
        /// FlowSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FlowSpecified {
            get {
                return FlowSpecifiedField;
            } 
            set {
                FlowSpecifiedField = value;
                NotifyPropertyChanged("FlowSpecified");
            }
        }
        
        private ReportingFlow? FlowField; 

        /// <summary>
        /// The expected kind of product within the flow.
        /// </summary>
		[Description("The expected kind of product within the flow.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingProduct")]
		[XmlElement("Product")]
        public ReportingProduct? Product {
            get {
                return ProductField;
            } 
            set {
                ProductField = value;
                 this.ProductSpecified = true;
                NotifyPropertyChanged("Product");
            }
        }

        private ReportingProduct? ProductField; 

        /// <summary>
        /// ProductSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ProductSpecified {
            get {
                return ProductSpecifiedField;
            } 
            set {
                ProductSpecifiedField = value;
                NotifyPropertyChanged("ProductSpecified");
            }
        }

        private bool ProductSpecifiedField; 

        /// <summary>
        /// The expected kind of qualifier of the flow.
        /// </summary>
		[Description("The expected kind of qualifier of the flow.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FlowQualifier")]
		[XmlElement("Qualifier")]
        public List<FlowQualifier> Qualifier {
            get {
                return QualifierField;
            } 
            set {
                QualifierField = value;
                NotifyPropertyChanged("Qualifier");
            }
        }

         /// <summary>
         /// bool to indicate if Qualifier has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool QualifierSpecified
         {
             get {
             if(QualifierField!=null)
                 return QualifierField.Count>0?true:false;
             else return false;
             }
         }
        private List<FlowQualifier> QualifierField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductFlowPort xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductFlowPort", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductFlowPort xsd type.")]
    public partial class ProductFlowPort : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Defines whether this port is an inlet or outlet. This is a nominal intended direction.
        /// </summary>
		[Required]
        [Description("Defines whether this port is an inlet or outlet. This is a nominal intended direction.")]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowPortType")]
		[XmlElement("Direction")]
        public ProductFlowPortType? Direction {
            get {
                return DirectionField;
            } 
            set {
                DirectionField = value;
                 this.DirectionSpecified = true;
                NotifyPropertyChanged("Direction");
            }
        }

        
        private bool DirectionSpecifiedField = false;
        
        /// <summary>
        /// DirectionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DirectionSpecified {
            get {
                return DirectionSpecifiedField;
            } 
            set {
                DirectionSpecifiedField = value;
                NotifyPropertyChanged("DirectionSpecified");
            }
        }
        
        private ProductFlowPortType? DirectionField; 

        /// <summary>
        /// The name of the port within the context of the product flow unit.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the port within the context of the product flow unit.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// The name of a network plan. This indicates a planned port. All child network components must all be planned and be part of the same plan. The parent unit must be part of the same plan or be an actual. Not specified indicates an actual port.
        /// </summary>
		[StringLength(64)]
        [Description("The name of a network plan. This indicates a planned port. All child network components must all be planned and be part of the same plan. The parent unit must be part of the same plan or be an actual. Not specified indicates an actual port.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PlanName")]
        public string PlanName {
            get {
                return PlanNameField;
            } 
            set {
                PlanNameField = value;
                NotifyPropertyChanged("PlanName");
            }
        }

        private string PlanNameField; 

        /// <summary>
        /// The name of the facility represented by this ProductFlowPort The name can be qualified by a naming system. The facility name is assumed to be unique within the context of the facility represented by the unit. This also defines the kind of facility.
        /// </summary>
		[Description("The name of the facility represented by this ProductFlowPort The name can be qualified by a naming system. The facility name is assumed to be unique within the context of the facility represented by the unit. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("Facility")]
        public FacilityIdentifierStruct Facility {
            get {
                return FacilityField;
            } 
            set {
                FacilityField = value;
                NotifyPropertyChanged("Facility");
            }
        }

        private FacilityIdentifierStruct FacilityField; 

        /// <summary>
        /// An alternative name of a facility. This is generally unique within a naming system. The above contextually unique name should also be listed as an alias.
        /// </summary>
		[Description("An alternative name of a facility. This is generally unique within a naming system. The above contextually unique name should also be listed as an alias.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NameStruct")]
		[XmlElement("FacilityAlias")]
        public List<NameStruct> FacilityAlias {
            get {
                return FacilityAliasField;
            } 
            set {
                FacilityAliasField = value;
                NotifyPropertyChanged("FacilityAlias");
            }
        }

         /// <summary>
         /// bool to indicate if FacilityAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacilityAliasSpecified
         {
             get {
             if(FacilityAliasField!=null)
                 return FacilityAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> FacilityAliasField; 

        /// <summary>
        /// True ("true" or "1") indicates that the port is an exposed internal port and cannot be used in a connection external to the unit. False ("false" or "0") or not given indicates a normal port.
        /// </summary>
		[Description("True (\"true\" or \"1\") indicates that the port is an exposed internal port and cannot be used in a connection external to the unit. False (\"false\" or \"0\") or not given indicates a normal port.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Exposed")]
        public bool? Exposed {
            get {
                return ExposedField;
            } 
            set {
                ExposedField = value;
                 this.ExposedSpecified = true;
                NotifyPropertyChanged("Exposed");
            }
        }

        private bool? ExposedField; 

        /// <summary>
        /// ExposedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ExposedSpecified {
            get {
                return ExposedSpecifiedField;
            } 
            set {
                ExposedSpecifiedField = value;
                NotifyPropertyChanged("ExposedSpecified");
            }
        }

        private bool ExposedSpecifiedField; 

        /// <summary>
        /// A descriptive remark associated with this port.
        /// </summary>
		[StringLength(2000)]
        [Description("A descriptive remark associated with this port.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// Defines the properties that are expected to be measured at this port. This can also specify the equipment tag(s) of the sensor that will read the value. Only one of each property kind should be active at any point in time.
        /// </summary>
		[Description("Defines the properties that are expected to be measured at this port. This can also specify the equipment tag(s) of the sensor that will read the value. Only one of each property kind should be active at any point in time.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowExpectedUnitProperty")]
		[XmlElement("ExpectedFlowProperty")]
        public List<ProductFlowExpectedUnitProperty> ExpectedFlowProperty {
            get {
                return ExpectedFlowPropertyField;
            } 
            set {
                ExpectedFlowPropertyField = value;
                NotifyPropertyChanged("ExpectedFlowProperty");
            }
        }

         /// <summary>
         /// bool to indicate if ExpectedFlowProperty has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExpectedFlowPropertySpecified
         {
             get {
             if(ExpectedFlowPropertyField!=null)
                 return ExpectedFlowPropertyField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowExpectedUnitProperty> ExpectedFlowPropertyField; 

        /// <summary>
        /// Defines the node to which this port is connected. A timestamp activates and deactivates the connection. Only one connectedNode should be active at any one point in time. There are no semantics for the node except common connection. All ports that are connected to a node with the the same name are inherently connected to each other. The name of the node is only required to be unique within the context of the current Product Flow Network (that is, not the overall model). All ports must be connected to a node and whether or not any other port is connected to the same node depends on the requirements of the network. Any node that is internally connected to only one port is presumably a candidate to be connected to an external node. The behavior of ports connected at a common node is as follows: a) There is no pressure drop across the node. All ports connected to the node have the same pressure. That is, there is an assumption of steady state fluid flow. b) Conservation of mass exists across the node. The mass into the node via all connected ports equals the mass out of the node via all connected ports. c) The flow direction of a port connected to the node may be transient. That is, flow direction may change toward any port(s) if the relative internal pressure of the Product Flow Units change and a new steady state is achieved.
        /// </summary>
		[Required]
        [Description("Defines the node to which this port is connected. A timestamp activates and deactivates the connection.  Only one connectedNode should be active at any one point in time. There are no semantics for the node except common connection. All ports that are connected to a node with the the same name are inherently connected to each other. The name of the node is only required to be unique within the context of the current Product Flow Network (that is, not the overall model). All ports must be connected to a node and whether or not any other port is connected to the same node depends on the requirements of the network.  Any node that is internally connected to only one port is presumably a candidate  to be connected to an external node. The behavior of ports connected at a common node is as follows:  a) There is no pressure drop across the node. All ports connected to the node have   the same pressure. That is, there is an assumption of steady state fluid flow.  b) Conservation of mass exists across the node. The mass into the node via all   connected ports equals the mass out of the node via all connected ports.  c) The flow direction of a port connected to the node may be transient. That is, flow   direction may change toward any port(s) if the relative internal pressure of  the Product Flow Units change and a new steady state is achieved.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ConnectedNode")]
		[XmlElement("ConnectedNode")]
        public List<ConnectedNode> ConnectedNode {
            get {
                return ConnectedNodeField;
            } 
            set {
                ConnectedNodeField = value;
                NotifyPropertyChanged("ConnectedNode");
            }
        }

         /// <summary>
         /// bool to indicate if ConnectedNode has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ConnectedNodeSpecified
         {
             get {
             if(ConnectedNodeField!=null)
                 return ConnectedNodeField.Count>0?true:false;
             else return false;
             }
         }
        private List<ConnectedNode> ConnectedNodeField; 

        /// <summary>
        /// Defines the expected flow and product pairs to be assigned to this port by a Product Volume report. A set of expected qualifiers can be defined for each pair.
        /// </summary>
		[Description("Defines the expected flow and product pairs to be  assigned to this port by a Product Volume report. A set of expected qualifiers can be defined for each pair.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowQualifierExpected")]
		[XmlElement("ExpectedFlowProduct")]
        public List<ProductFlowQualifierExpected> ExpectedFlowProduct {
            get {
                return ExpectedFlowProductField;
            } 
            set {
                ExpectedFlowProductField = value;
                NotifyPropertyChanged("ExpectedFlowProduct");
            }
        }

         /// <summary>
         /// bool to indicate if ExpectedFlowProduct has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExpectedFlowProductSpecified
         {
             get {
             if(ExpectedFlowProductField!=null)
                 return ExpectedFlowProductField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowQualifierExpected> ExpectedFlowProductField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ConnectedNode xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ConnectedNode", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ConnectedNode xsd type.")]
    public partial class ConnectedNode : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Defines the node to which this port is connected. Only two ports should be actively connected to the same node at the same point in time. That is, a port should only be connected to one other port. There are no semantics for the node except common connection. All ports that are connected to a node with the same name are inherently connected to each other. The name of the node is only required to be unique within the context of the current Product Flow Network (that is, not the overall model). All ports must be connected to a node and whether or not any other port is connected to the same node depends on the requirements of the network. Any node that is internally connected to only one node is presumably a candidate to be connected to an external node. The behavior of ports connected at a common node is as follows: a) There is no pressure drop across the node. All ports connected to the node have the same pressure. That is, there is an assumption of steady state fluid flow. b) Conservation of mass exists across the node. The mass into the node via all connected ports equals the mass out of the node via all connected ports. c) The flow direction of a port connected to the node may be transient. That is, flow direction may change toward any port if the relative internal pressure of the Product Flow Units change and a new steady state is achieved.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Defines the node to which this port is connected. Only two ports should be actively connected to the same node at the same point in time. That is, a port should only be connected to one other port. There are no semantics for the node except common connection. All ports that are connected to a node with the same name are inherently connected to each other. The name of the node is only required to be unique within the context of the current Product Flow Network (that is, not the overall model). All ports must be connected to a node and whether or not any other port is connected to the same node depends on the requirements of the network. Any node that is internally connected to only one node is presumably a candidate to be connected to an external node. The behavior of ports connected at a common node is as follows: a) There is no pressure drop across the node. All ports connected to the node have the same pressure. That is, there is an assumption of steady state fluid flow. b) Conservation of mass exists across the node. The mass into the node via all connected ports equals the mass out of the node via all connected ports. c) The flow direction of a port connected to the node may be transient. That is, flow direction may change toward any port if the relative internal pressure of the Product Flow Units change and a new steady state is achieved.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Node")]
        public string Node {
            get {
                return NodeField;
            } 
            set {
                NodeField = value;
                NotifyPropertyChanged("Node");
            }
        }

        private string NodeField; 

        /// <summary>
        /// The name of a network plan. This indicates a planned connection. The connected port must be part of the same plan or be an actual. Not specified indicates an actual connection.
        /// </summary>
		[StringLength(64)]
        [Description("The name of a network plan. This indicates a planned connection. The connected port must be part of the same plan or be an actual. Not specified indicates an actual connection.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PlanName")]
        public string PlanName {
            get {
                return PlanNameField;
            } 
            set {
                PlanNameField = value;
                NotifyPropertyChanged("PlanName");
            }
        }

        private string PlanNameField; 

        /// <summary>
        /// The date and time that the connection was activated.
        /// </summary>
		[Description("The date and time that the connection was activated.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimStart")]
        public DateTime? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? DTimStartField; 

        /// <summary>
        /// DTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DTimStartSpecifiedField;
            } 
            set {
                DTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool DTimStartSpecifiedField; 

        /// <summary>
        /// The date and time that the connection was terminated.
        /// </summary>
		[Description("The date and time that the connection was terminated.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? DTimEndField; 

        /// <summary>
        /// DTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DTimEndSpecifiedField;
            } 
            set {
                DTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool DTimEndSpecifiedField; 

        /// <summary>
        /// A descriptive remark associated with this connection, possibly including a reason for termination.
        /// </summary>
		[StringLength(2000)]
        [Description("A descriptive remark associated with this connection, possibly including a reason for termination.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RelativeCoordinate xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RelativeCoordinate", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the RelativeCoordinate xsd type.")]
    public partial class RelativeCoordinate : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Defines the relative from-left-to-right location on a display screen. The display origin (0,0) is the upper left-hand corner of the display as viewed by the user.
        /// </summary>
		[Description("Defines the relative from-left-to-right location on a display screen. The display origin (0,0) is the upper left-hand corner of the display as viewed by the user.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerLengthMeasure")]
		[XmlElement("X")]
        public LengthPerLengthMeasure X {
            get {
                return XField;
            } 
            set {
                XField = value;
                NotifyPropertyChanged("X");
            }
        }

        private LengthPerLengthMeasure XField; 

        /// <summary>
        /// Defines the relative from-top-to-bottom location on a display screen. The display origin (0,0) is the upper left-hand corner of the display as viewed by the user.
        /// </summary>
		[Description("Defines the relative from-top-to-bottom location on a display screen. The display origin (0,0) is the upper left-hand corner of the display as viewed by the user.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerLengthMeasure")]
		[XmlElement("Y")]
        public LengthPerLengthMeasure Y {
            get {
                return YField;
            } 
            set {
                YField = value;
                NotifyPropertyChanged("Y");
            }
        }

        private LengthPerLengthMeasure YField; 

        /// <summary>
        /// Defines the relative from-front-to-back location in a 3D system. The unrotated display origin (0,0) is the upper left-hand corner of the display as viewed by the user. The "3D picture" may be rotated on the 2D display.
        /// </summary>
		[Description("Defines the relative from-front-to-back location in a 3D system. The unrotated display origin (0,0) is the upper left-hand corner of the display as viewed by the user. The \"3D picture\" may be rotated on the 2D display.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerLengthMeasure")]
		[XmlElement("Z")]
        public LengthPerLengthMeasure Z {
            get {
                return ZField;
            } 
            set {
                ZField = value;
                NotifyPropertyChanged("Z");
            }
        }

        private LengthPerLengthMeasure ZField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberFacilityMapping xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberFacilityMapping", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberFacilityMapping xsd type.")]
    public partial class FiberFacilityMapping : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date when the mapping between the facility and the optical path becomes effective.
        /// </summary>
		[Required]
        [Description("Date when the mapping between the facility and the optical path becomes effective.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("TimeStart")]
        public DateTime? TimeStart {
            get {
                return TimeStartField;
            } 
            set {
                TimeStartField = value;
                NotifyPropertyChanged("TimeStart");
            }
        }

        private DateTime? TimeStartField; 

        /// <summary>
        /// Date when the mapping between the facility and the optical path is no longer valid.
        /// </summary>
		[Description("Date when the mapping between the facility and the optical path is no longer valid.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("TimeEnd")]
        public DateTime? TimeEnd {
            get {
                return TimeEndField;
            } 
            set {
                TimeEndField = value;
                 this.TimeEndSpecified = true;
                NotifyPropertyChanged("TimeEnd");
            }
        }

        private DateTime? TimeEndField; 

        /// <summary>
        /// TimeEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TimeEndSpecified {
            get {
                return TimeEndSpecifiedField;
            } 
            set {
                TimeEndSpecifiedField = value;
                NotifyPropertyChanged("TimeEndSpecified");
            }
        }

        private bool TimeEndSpecifiedField; 

        /// <summary>
        /// A descriptive remark about the facility mapping.
        /// </summary>
		[StringLength(2000)]
        [Description("A descriptive remark about the facility mapping.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// Relates distances measured along the optical path to specific lengths along facilities (wellbores or pipelines).
        /// </summary>
		[Required]
        [Description("Relates distances measured along the optical path to specific lengths along facilities (wellbores or pipelines).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberFacilityMappingPart")]
		[XmlElement("FiberFacilityMappingPart")]
        public List<FiberFacilityMappingPart> FiberFacilityMappingPart {
            get {
                return FiberFacilityMappingPartField;
            } 
            set {
                FiberFacilityMappingPartField = value;
                NotifyPropertyChanged("FiberFacilityMappingPart");
            }
        }

         /// <summary>
         /// bool to indicate if FiberFacilityMappingPart has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FiberFacilityMappingPartSpecified
         {
             get {
             if(FiberFacilityMappingPartField!=null)
                 return FiberFacilityMappingPartField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberFacilityMappingPart> FiberFacilityMappingPartField; 

		/// <summary>
        /// Unique identifier of this object. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier of this object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberFacilityMappingPart xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberFacilityMappingPart", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberFacilityMappingPart xsd type.")]
    public partial class FiberFacilityMappingPart : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// OpticalPathDistanceStart property
        /// </summary>
		[Required]
        [Description("Distance between the beginning of the optical path to the distance where the mapping with the facility takes place.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OpticalPathDistanceStart")]
        public LengthMeasure OpticalPathDistanceStart {
            get {
                return OpticalPathDistanceStartField;
            } 
            set {
                OpticalPathDistanceStartField = value;
                NotifyPropertyChanged("OpticalPathDistanceStart");
            }
        }

        private LengthMeasure OpticalPathDistanceStartField; 

        /// <summary>
        /// OpticalPathDistanceEnd property
        /// </summary>
		[Required]
        [Description("Distance between the beginning of the optical path to the distance where the mapping with the facility ends.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OpticalPathDistanceEnd")]
        public LengthMeasure OpticalPathDistanceEnd {
            get {
                return OpticalPathDistanceEndField;
            } 
            set {
                OpticalPathDistanceEndField = value;
                NotifyPropertyChanged("OpticalPathDistanceEnd");
            }
        }

        private LengthMeasure OpticalPathDistanceEndField; 

        /// <summary>
        /// FacilityLengthStart property
        /// </summary>
		[Required]
        [Description("Distance between the facility datum and the distance where the mapping with the optical path takes place.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("FacilityLengthStart")]
        public LengthMeasure FacilityLengthStart {
            get {
                return FacilityLengthStartField;
            } 
            set {
                FacilityLengthStartField = value;
                NotifyPropertyChanged("FacilityLengthStart");
            }
        }

        private LengthMeasure FacilityLengthStartField; 

        /// <summary>
        /// FacilityLengthEnd property
        /// </summary>
		[Required]
        [Description("Distance between the facility datum and the distance where the mapping with the optical path ends.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("FacilityLengthEnd")]
        public LengthMeasure FacilityLengthEnd {
            get {
                return FacilityLengthEndField;
            } 
            set {
                FacilityLengthEndField = value;
                NotifyPropertyChanged("FacilityLengthEnd");
            }
        }

        private LengthMeasure FacilityLengthEndField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("A descriptive remark about the facility mapping.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// FiberFacility property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractFiberFacility")]
		[XmlElement("FiberFacility")]
        public AbstractFiberFacility FiberFacility {
            get {
                return FiberFacilityField;
            } 
            set {
                FiberFacilityField = value;
                NotifyPropertyChanged("FiberFacility");
            }
        }

        private AbstractFiberFacility FiberFacilityField; 

		/// <summary>
        /// Unique identifier or this object. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier or this object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractFiberFacility xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberFacilityWell))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberFacilityPipeline))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberFacilityGeneric))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractFiberFacility", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractFiberFacility xsd type.")]
    public abstract partial class AbstractFiberFacility : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberFacilityWell xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberFacilityWell", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberFacilityWell xsd type.")]
    public partial class FiberFacilityWell : AbstractFiberFacility, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of this facilityMapping instance.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// WellDatum property
        /// </summary>
		[Description("A reference to the wellDatum from which the facilityLength (i.e., in this case, depth of a wellbore being mapped) is measured from.")]
        [EnergisticsDataTypeAttribute(DataType = "WellboreDatumReference")]
		[XmlElement("WellDatum")]
        public WellboreDatumReference? WellDatum {
            get {
                return WellDatumField;
            } 
            set {
                WellDatumField = value;
                 this.WellDatumSpecified = true;
                NotifyPropertyChanged("WellDatum");
            }
        }

        private WellboreDatumReference? WellDatumField; 

        /// <summary>
        /// WellDatumSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool WellDatumSpecified {
            get {
                return WellDatumSpecifiedField;
            } 
            set {
                WellDatumSpecifiedField = value;
                NotifyPropertyChanged("WellDatumSpecified");
            }
        }

        private bool WellDatumSpecifiedField; 

        /// <summary>
        /// WellboreReference property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WellboreReference")]
        public DataObjectReference WellboreReference {
            get {
                return WellboreReferenceField;
            } 
            set {
                WellboreReferenceField = value;
                NotifyPropertyChanged("WellboreReference");
            }
        }

        private DataObjectReference WellboreReferenceField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberFacilityPipeline xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberFacilityPipeline", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberFacilityPipeline xsd type.")]
    public partial class FiberFacilityPipeline : AbstractFiberFacility, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of this facilityMapping instance.
        /// </summary>
		[Required]
        [Description("The name of this facilityMapping instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "NameStruct")]
		[XmlElement("Name")]
        public NameStruct Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private NameStruct NameField; 

        /// <summary>
        /// A description of which "port" (i.e., connection/end or defined point on a pipeline) the facilityLength is indexed from.
        /// </summary>
		[StringLength(64)]
        [Description("A description of which \"port\" (i.e., connection/end or defined point on a pipeline) the facilityLength is indexed from.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DatumPortReference")]
        public string DatumPortReference {
            get {
                return DatumPortReferenceField;
            } 
            set {
                DatumPortReferenceField = value;
                NotifyPropertyChanged("DatumPortReference");
            }
        }

        private string DatumPortReferenceField; 

        /// <summary>
        /// The name of the facility that is represented by this facilityMapping.
        /// </summary>
		[Description("The name of the facility that is represented by this facilityMapping.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("Installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return InstallationField;
            } 
            set {
                InstallationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct InstallationField; 

        /// <summary>
        /// The kind of facility mapped to the optical path. Expected to be a pipeline, but this element can be used to show other facilities being mapped to fiber length in future.
        /// </summary>
		[StringLength(64)]
        [Description("The kind of facility mapped to the optical path. Expected to be a pipeline, but this element can be used to show other facilities being mapped to fiber length in future.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Kind")]
        public string Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string KindField; 

        /// <summary>
        /// The name and type of a facility whose context is relevant to the represented installation.
        /// </summary>
		[Description("The name and type of a facility whose context is relevant to the represented installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("ContextFacility")]
        public FacilityIdentifierStruct ContextFacility {
            get {
                return ContextFacilityField;
            } 
            set {
                ContextFacilityField = value;
                NotifyPropertyChanged("ContextFacility");
            }
        }

        private FacilityIdentifierStruct ContextFacilityField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberFacilityGeneric xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberFacilityGeneric", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberFacilityGeneric xsd type.")]
    public partial class FiberFacilityGeneric : AbstractFiberFacility, INotifyPropertyChanged
    {

        /// <summary>
        /// The name or description of the facility.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name or description of the facility.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FacilityName")]
        public string FacilityName {
            get {
                return FacilityNameField;
            } 
            set {
                FacilityNameField = value;
                NotifyPropertyChanged("FacilityName");
            }
        }

        private string FacilityNameField; 

        /// <summary>
        /// A comment to describe this facility.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A comment to describe this facility.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FacilityKind")]
        public string FacilityKind {
            get {
                return FacilityKindField;
            } 
            set {
                FacilityKindField = value;
                NotifyPropertyChanged("FacilityKind");
            }
        }

        private string FacilityKindField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberPathDefect xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberPathDefect", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberPathDefect xsd type.")]
    public partial class FiberPathDefect : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Starting point of the detected defect as distance in the optical path from the lightbox.
        /// </summary>
		[Description("Starting point of the detected defect as distance in the optical path from the lightbox.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OpticalPathDistanceStart")]
        public List<LengthMeasure> OpticalPathDistanceStart {
            get {
                return OpticalPathDistanceStartField;
            } 
            set {
                OpticalPathDistanceStartField = value;
                NotifyPropertyChanged("OpticalPathDistanceStart");
            }
        }

         /// <summary>
         /// bool to indicate if OpticalPathDistanceStart has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OpticalPathDistanceStartSpecified
         {
             get {
             if(OpticalPathDistanceStartField!=null)
                 return OpticalPathDistanceStartField.Count>0?true:false;
             else return false;
             }
         }
        private List<LengthMeasure> OpticalPathDistanceStartField; 

        /// <summary>
        /// Ending point of the detected defect as distance in the optical path from the lightbox. if the defect is found at a specific location rather than a segment, then it can have the same value as the opticalPathDistanceStart.
        /// </summary>
		[Description("Ending point of the detected defect as distance in the optical path from the lightbox. if the defect is found at a specific location rather than a segment, then it can have the same value as the opticalPathDistanceStart.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OpticalPathDistanceEnd")]
        public List<LengthMeasure> OpticalPathDistanceEnd {
            get {
                return OpticalPathDistanceEndField;
            } 
            set {
                OpticalPathDistanceEndField = value;
                NotifyPropertyChanged("OpticalPathDistanceEnd");
            }
        }

         /// <summary>
         /// bool to indicate if OpticalPathDistanceEnd has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OpticalPathDistanceEndSpecified
         {
             get {
             if(OpticalPathDistanceEndField!=null)
                 return OpticalPathDistanceEndField.Count>0?true:false;
             else return false;
             }
         }
        private List<LengthMeasure> OpticalPathDistanceEndField; 

        /// <summary>
        /// Enum. The type of defect on the optical path.
        /// </summary>
		[Description("Enum. The type of defect on the optical path.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PathDefectTypes")]
		[XmlElement("DefectType")]
        public List<PathDefectTypes> DefectType {
            get {
                return DefectTypeField;
            } 
            set {
                DefectTypeField = value;
                NotifyPropertyChanged("DefectType");
            }
        }

         /// <summary>
         /// bool to indicate if DefectType has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DefectTypeSpecified
         {
             get {
             if(DefectTypeField!=null)
                 return DefectTypeField.Count>0?true:false;
             else return false;
             }
         }
        private List<PathDefectTypes> DefectTypeField; 

        /// <summary>
        /// Date when the defect was detected.
        /// </summary>
		[Description("Date when the defect was detected.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("TimeStart")]
        public List<DateTime> TimeStart {
            get {
                return TimeStartField;
            } 
            set {
                TimeStartField = value;
                NotifyPropertyChanged("TimeStart");
            }
        }

         /// <summary>
         /// bool to indicate if TimeStart has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TimeStartSpecified
         {
             get {
             if(TimeStartField!=null)
                 return TimeStartField.Count>0?true:false;
             else return false;
             }
         }
        private List<DateTime> TimeStartField; 

        /// <summary>
        /// Date when the defect was no longer detected (or was corrected).
        /// </summary>
		[Description("Date when the defect was no longer detected (or was corrected).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("TimeEnd")]
        public List<DateTime> TimeEnd {
            get {
                return TimeEndField;
            } 
            set {
                TimeEndField = value;
                NotifyPropertyChanged("TimeEnd");
            }
        }

         /// <summary>
         /// bool to indicate if TimeEnd has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TimeEndSpecified
         {
             get {
             if(TimeEndField!=null)
                 return TimeEndField.Count>0?true:false;
             else return false;
             }
         }
        private List<DateTime> TimeEndField; 

        /// <summary>
        /// A descriptive remark about the defect found on this location.
        /// </summary>
		[Description("A descriptive remark about the defect found on this location.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public List<string> Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(CommentField!=null)
                 return CommentField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> CommentField; 

		/// <summary>
        /// The unique identifier of this object. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The unique identifier of this object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("defectID")]
		
        public string DefectID {
            get {
                return defectIDField;
            } 
            set {
                defectIDField = value;
                NotifyPropertyChanged("DefectID");
            }
        }

        private string defectIDField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FiberOTDR xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FiberOTDR", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FiberOTDR xsd type.")]
    public partial class FiberOTDR : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of this object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// ReasonForRun property
        /// </summary>
		[Description("The reason the OTDR test was run. Reasons include: - pre-installation, which is before the installation of the fiber  - post-installation, which is used to validate a successful fiber installation  - DTS run, a quality check of the fiber before a DTS run - Other")]
        [EnergisticsDataTypeAttribute(DataType = "OTDRReason")]
		[XmlElement("ReasonForRun")]
        public OTDRReason? ReasonForRun {
            get {
                return ReasonForRunField;
            } 
            set {
                ReasonForRunField = value;
                 this.ReasonForRunSpecified = true;
                NotifyPropertyChanged("ReasonForRun");
            }
        }

        private OTDRReason? ReasonForRunField; 

        /// <summary>
        /// ReasonForRunSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReasonForRunSpecified {
            get {
                return ReasonForRunSpecifiedField;
            } 
            set {
                ReasonForRunSpecifiedField = value;
                NotifyPropertyChanged("ReasonForRunSpecified");
            }
        }

        private bool ReasonForRunSpecifiedField; 

        /// <summary>
        /// DTimRun property
        /// </summary>
		[Required]
        [Description("The dateTime of the run.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimRun")]
        public DateTime? DateTimeRun {
            get {
                return DTimRunField;
            } 
            set {
                DTimRunField = value;
                NotifyPropertyChanged("DateTimeRun");
            }
        }

        private DateTime? DTimRunField; 

        /// <summary>
        /// DataInOTDRFile property
        /// </summary>
		[StringLength(64)]
        [Description("A reference to the external file used to record the OTDR data. Note this file will not be in an Energistics format but likely in a special OTDR format.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DataInOTDRFile")]
        public string DataInOTDRFile {
            get {
                return DataInOTDRFileField;
            } 
            set {
                DataInOTDRFileField = value;
                NotifyPropertyChanged("DataInOTDRFile");
            }
        }

        private string DataInOTDRFileField; 

        /// <summary>
        /// OTDRImageFile property
        /// </summary>
		[StringLength(64)]
        [Description("A reference to the well log used to record the table of data.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("OTDRImageFile")]
        public string OTDRImageFile {
            get {
                return OTDRImageFileField;
            } 
            set {
                OTDRImageFileField = value;
                NotifyPropertyChanged("OTDRImageFile");
            }
        }

        private string OTDRImageFileField; 

        /// <summary>
        /// OpticalPathDistanceStart property
        /// </summary>
		[Required]
        [Description("The point measured along the optical path at which this OTDR survey starts.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OpticalPathDistanceStart")]
        public LengthMeasure OpticalPathDistanceStart {
            get {
                return OpticalPathDistanceStartField;
            } 
            set {
                OpticalPathDistanceStartField = value;
                NotifyPropertyChanged("OpticalPathDistanceStart");
            }
        }

        private LengthMeasure OpticalPathDistanceStartField; 

        /// <summary>
        /// OpticalPathDistanceEnd property
        /// </summary>
		[Required]
        [Description("The point measured along the optical path at which this OTDR survey ends.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OpticalPathDistanceEnd")]
        public LengthMeasure OpticalPathDistanceEnd {
            get {
                return OpticalPathDistanceEndField;
            } 
            set {
                OpticalPathDistanceEndField = value;
                NotifyPropertyChanged("OpticalPathDistanceEnd");
            }
        }

        private LengthMeasure OpticalPathDistanceEndField; 

        /// <summary>
        /// Direction property
        /// </summary>
		[Required]
        [Description("Enum. The direction of the OTDR survey. \"Forward\" means \"in the same direction as the positive direction along the optical path\".")]
        [EnergisticsDataTypeAttribute(DataType = "OTDRDirection")]
		[XmlElement("Direction")]
        public OTDRDirection? Direction {
            get {
                return DirectionField;
            } 
            set {
                DirectionField = value;
                 this.DirectionSpecified = true;
                NotifyPropertyChanged("Direction");
            }
        }

        
        private bool DirectionSpecifiedField = false;
        
        /// <summary>
        /// DirectionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DirectionSpecified {
            get {
                return DirectionSpecifiedField;
            } 
            set {
                DirectionSpecifiedField = value;
                NotifyPropertyChanged("DirectionSpecified");
            }
        }
        
        private OTDRDirection? DirectionField; 

        /// <summary>
        /// Wavelength property
        /// </summary>
		[Required]
        [Description("The wavelength at which this OTDR survey was carried out.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Wavelength")]
        public LengthMeasure Wavelength {
            get {
                return WavelengthField;
            } 
            set {
                WavelengthField = value;
                NotifyPropertyChanged("Wavelength");
            }
        }

        private LengthMeasure WavelengthField; 

        /// <summary>
        /// FiberOTDRInstrumentBox property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberOTDRInstrumentBox")]
		[XmlElement("FiberOTDRInstrumentBox")]
        public FiberOTDRInstrumentBox FiberOTDRInstrumentBox {
            get {
                return FiberOTDRInstrumentBoxField;
            } 
            set {
                FiberOTDRInstrumentBoxField = value;
                NotifyPropertyChanged("FiberOTDRInstrumentBox");
            }
        }

        private FiberOTDRInstrumentBox FiberOTDRInstrumentBoxField; 

        /// <summary>
        /// Contact for the person who performed the OTDR reading
        /// </summary>
		[Description("Contact for the person who performed the OTDR reading")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BusinessAssociate")]
		[XmlElement("MeasurementContact")]
        public BusinessAssociate MeasurementContact {
            get {
                return MeasurementContactField;
            } 
            set {
                MeasurementContactField = value;
                NotifyPropertyChanged("MeasurementContact");
            }
        }

        private BusinessAssociate MeasurementContactField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier of this object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier of this object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the ProductVolume xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the ProductVolume xsd type.")]
    public partial class ProductVolume : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Installation property
        /// </summary>
		[Description("The name of the facility which is represented by this report. The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("Installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return InstallationField;
            } 
            set {
                InstallationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct InstallationField; 

        /// <summary>
        /// ContextFacility property
        /// </summary>
		[Description("The name and type of a facility whose context is relevant to the represented installation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("ContextFacility")]
        public List<FacilityIdentifierStruct> ContextFacility {
            get {
                return ContextFacilityField;
            } 
            set {
                ContextFacilityField = value;
                NotifyPropertyChanged("ContextFacility");
            }
        }

         /// <summary>
         /// bool to indicate if ContextFacility has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContextFacilitySpecified
         {
             get {
             if(ContextFacilityField!=null)
                 return ContextFacilityField.Count>0?true:false;
             else return false;
             }
         }
        private List<FacilityIdentifierStruct> ContextFacilityField; 

        /// <summary>
        /// Kind property
        /// </summary>
		[StringLength(64)]
        [Description("The type of report.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Kind")]
        public string Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string KindField; 

        /// <summary>
        /// PeriodKind property
        /// </summary>
		[Description("The type of period that is being reported. This value must be consistent with the reporting start and end values.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingDurationKind")]
		[XmlElement("PeriodKind")]
        public ReportingDurationKind? PeriodKind {
            get {
                return PeriodKindField;
            } 
            set {
                PeriodKindField = value;
                 this.PeriodKindSpecified = true;
                NotifyPropertyChanged("PeriodKind");
            }
        }

        private ReportingDurationKind? PeriodKindField; 

        /// <summary>
        /// PeriodKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PeriodKindSpecified {
            get {
                return PeriodKindSpecifiedField;
            } 
            set {
                PeriodKindSpecifiedField = value;
                NotifyPropertyChanged("PeriodKindSpecified");
            }
        }

        private bool PeriodKindSpecifiedField; 

        /// <summary>
        /// DTimMin property
        /// </summary>
		[Description("The minimum time index contained within the report. For the purposes of this parameter, a \"period\" or \"facility parameter\" without any time data should be assumed to have the time associated with the overall report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a \"get\" result.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQualifiedDateTime")]
		[XmlElement("DTimMin")]
        public EndpointQualifiedDateTime DateTimeMin {
            get {
                return DTimMinField;
            } 
            set {
                DTimMinField = value;
                NotifyPropertyChanged("DateTimeMin");
            }
        }

        private EndpointQualifiedDateTime DTimMinField; 

        /// <summary>
        /// DTimMax property
        /// </summary>
		[Description("The maximum time index contained within the report. For the purposes of this parameter, a \"period\" or \"facility parameter\" without any time data should be assumed to have the time associated with the overall report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a \"get\" result.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQualifiedDateTime")]
		[XmlElement("DTimMax")]
        public EndpointQualifiedDateTime DateTimeMax {
            get {
                return DTimMaxField;
            } 
            set {
                DTimMaxField = value;
                NotifyPropertyChanged("DateTimeMax");
            }
        }

        private EndpointQualifiedDateTime DTimMaxField; 

        /// <summary>
        /// DTimCurrent property
        /// </summary>
		[Description("The definition of the \"current time\" index for this report. The current time index is a server query parameter which requests the selection of a single node from a recurring \"period\" set (e.g., the data related to one point in a time series). For the purposes of this parameter, a \"period\" without any time data should be assumed to have the time associated with the overall report.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimCurrent")]
        public DateTime? DateTimeCurrent {
            get {
                return DTimCurrentField;
            } 
            set {
                DTimCurrentField = value;
                 this.DateTimeCurrentSpecified = true;
                NotifyPropertyChanged("DateTimeCurrent");
            }
        }

        private DateTime? DTimCurrentField; 

        /// <summary>
        /// DTimCurrentSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeCurrentSpecified {
            get {
                return DTimCurrentSpecifiedField;
            } 
            set {
                DTimCurrentSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCurrentSpecified");
            }
        }

        private bool DTimCurrentSpecifiedField; 

        /// <summary>
        /// CalculationMethod property
        /// </summary>
		[Description("The calculation method for  \"filling in\" values in an indexed set. If not given, the default is that no calculations are performed to create data where none exists within an existing set. This is not to be construed as to prevent concepts such as simulation and forecasting from being applied in order to create a new set. This is a server query parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "CalculationMethod")]
		[XmlElement("CalculationMethod")]
        public CalculationMethod? CalculationMethod {
            get {
                return CalculationMethodField;
            } 
            set {
                CalculationMethodField = value;
                 this.CalculationMethodSpecified = true;
                NotifyPropertyChanged("CalculationMethod");
            }
        }

        private CalculationMethod? CalculationMethodField; 

        /// <summary>
        /// CalculationMethodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CalculationMethodSpecified {
            get {
                return CalculationMethodSpecifiedField;
            } 
            set {
                CalculationMethodSpecifiedField = value;
                NotifyPropertyChanged("CalculationMethodSpecified");
            }
        }

        private bool CalculationMethodSpecifiedField; 

        /// <summary>
        /// Operator property
        /// </summary>
		[Description("The operator of the facilities in the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BusinessAssociate")]
		[XmlElement("Operator")]
        public BusinessAssociate Operator {
            get {
                return OperatorField;
            } 
            set {
                OperatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private BusinessAssociate OperatorField; 

        /// <summary>
        /// Title property
        /// </summary>
		[Description("The tile of the report if different from the name of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "NameStruct")]
		[XmlElement("Title")]
        public NameStruct Title {
            get {
                return TitleField;
            } 
            set {
                TitleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private NameStruct TitleField; 

        /// <summary>
        /// GeographicContext property
        /// </summary>
		[Description("The geographic context of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GeographicContext")]
		[XmlElement("GeographicContext")]
        public GeographicContext GeographicContext {
            get {
                return GeographicContextField;
            } 
            set {
                GeographicContextField = value;
                NotifyPropertyChanged("GeographicContext");
            }
        }

        private GeographicContext GeographicContextField; 

        /// <summary>
        /// IssueDate property
        /// </summary>
		[Description("The date that the report was issued.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("IssueDate", DataType="date")]
        public DateTime? IssueDate {
            get {
                return IssueDateField;
            } 
            set {
                IssueDateField = value;
                 this.IssueDateSpecified = true;
                NotifyPropertyChanged("IssueDate");
            }
        }

        private DateTime? IssueDateField; 

        /// <summary>
        /// IssueDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IssueDateSpecified {
            get {
                return IssueDateSpecifiedField;
            } 
            set {
                IssueDateSpecifiedField = value;
                NotifyPropertyChanged("IssueDateSpecified");
            }
        }

        private bool IssueDateSpecifiedField; 

        /// <summary>
        /// IssuedBy property
        /// </summary>
		[Description("The person or company that issued the report. This may contain the role of the person or company within the context of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BusinessAssociate")]
		[XmlElement("IssuedBy")]
        public BusinessAssociate IssuedBy {
            get {
                return IssuedByField;
            } 
            set {
                IssuedByField = value;
                NotifyPropertyChanged("IssuedBy");
            }
        }

        private BusinessAssociate IssuedByField; 

        /// <summary>
        /// ApprovalDate property
        /// </summary>
		[Description("The date that the report was approved.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("ApprovalDate", DataType="date")]
        public DateTime? ApprovalDate {
            get {
                return ApprovalDateField;
            } 
            set {
                ApprovalDateField = value;
                 this.ApprovalDateSpecified = true;
                NotifyPropertyChanged("ApprovalDate");
            }
        }

        private DateTime? ApprovalDateField; 

        /// <summary>
        /// ApprovalDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ApprovalDateSpecified {
            get {
                return ApprovalDateSpecifiedField;
            } 
            set {
                ApprovalDateSpecifiedField = value;
                NotifyPropertyChanged("ApprovalDateSpecified");
            }
        }

        private bool ApprovalDateSpecifiedField; 

        /// <summary>
        /// Approver property
        /// </summary>
		[Description("The person or company that approved the report. This may contain the role of the person or company within the context of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BusinessAssociate")]
		[XmlElement("Approver")]
        public BusinessAssociate Approver {
            get {
                return ApproverField;
            } 
            set {
                ApproverField = value;
                NotifyPropertyChanged("Approver");
            }
        }

        private BusinessAssociate ApproverField; 

        /// <summary>
        /// StandardTempPres property
        /// </summary>
		[Description("Defines the default standard temperature and pressure to which all volumes, densities and flow rates in this report have been corrected. The default may be locally overridden for an individual value. If not specified, then the conditions must be presumed to be ambient conditions (i.e., uncorrected) unless otherwise specified at a local level.")]
        [EnergisticsDataTypeAttribute(DataType = "ReferenceCondition")]
		[XmlElement("StandardTempPres")]
        public ReferenceCondition? StandardTempPres {
            get {
                return StandardTempPresField;
            } 
            set {
                StandardTempPresField = value;
                 this.StandardTempPresSpecified = true;
                NotifyPropertyChanged("StandardTempPres");
            }
        }

        private ReferenceCondition? StandardTempPresField; 

        /// <summary>
        /// StandardTempPresSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StandardTempPresSpecified {
            get {
                return StandardTempPresSpecifiedField;
            } 
            set {
                StandardTempPresSpecifiedField = value;
                NotifyPropertyChanged("StandardTempPresSpecified");
            }
        }

        private bool StandardTempPresSpecifiedField; 

        /// <summary>
        /// ProductFlowModel property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ProductFlowModel")]
        public DataObjectReference ProductFlowModel {
            get {
                return ProductFlowModelField;
            } 
            set {
                ProductFlowModelField = value;
                NotifyPropertyChanged("ProductFlowModel");
            }
        }

        private DataObjectReference ProductFlowModelField; 

        /// <summary>
        /// DateTime property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDateTimeClass")]
		[XmlElement("DateTime")]
        public AbstractDateTimeClass DateTime {
            get {
                return DateTimeField;
            } 
            set {
                DateTimeField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private AbstractDateTimeClass DateTimeField; 

        /// <summary>
        /// A facility for which product information is being reported.
        /// </summary>
		[Required]
        [Description("A facility for which product information is being reported.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeFacility")]
		[XmlElement("Facility")]
        public List<ProductVolumeFacility> Facility {
            get {
                return FacilityField;
            } 
            set {
                FacilityField = value;
                NotifyPropertyChanged("Facility");
            }
        }

         /// <summary>
         /// bool to indicate if Facility has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacilitySpecified
         {
             get {
             if(FacilityField!=null)
                 return FacilityField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeFacility> FacilityField; 

        /// <summary>
        /// A business unit and related account or ownership share information.
        /// </summary>
		[Description("A business unit and related account or ownership share information.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeBusinessUnit")]
		[XmlElement("BusinessUnit")]
        public List<ProductVolumeBusinessUnit> BusinessUnit {
            get {
                return BusinessUnitField;
            } 
            set {
                BusinessUnitField = value;
                NotifyPropertyChanged("BusinessUnit");
            }
        }

         /// <summary>
         /// bool to indicate if BusinessUnit has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BusinessUnitSpecified
         {
             get {
             if(BusinessUnitField!=null)
                 return BusinessUnitField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeBusinessUnit> BusinessUnitField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductVolumeFacility xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductVolumeFacility", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductVolumeFacility xsd type.")]
    public partial class ProductVolumeFacility : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// FacilityParent property
        /// </summary>
		[Description("Facility parent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("FacilityParent")]
        public FacilityIdentifierStruct FacilityParent {
            get {
                return FacilityParentField;
            } 
            set {
                FacilityParentField = value;
                NotifyPropertyChanged("FacilityParent");
            }
        }

        private FacilityIdentifierStruct FacilityParentField; 

        /// <summary>
        /// FacilityParent2 property
        /// </summary>
		[Description("Facility parent2.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("FacilityParent2")]
        public FacilityIdentifierStruct FacilityParent2 {
            get {
                return FacilityParent2Field;
            } 
            set {
                FacilityParent2Field = value;
                NotifyPropertyChanged("FacilityParent2");
            }
        }

        private FacilityIdentifierStruct FacilityParent2Field; 

        /// <summary>
        /// FacilityAlias property
        /// </summary>
		[Description("An alternative name of a facility. This is generally unique within a naming system. The above contextually unique name (that is, within the context of a parent) should also be listed as an alias.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NameStruct")]
		[XmlElement("FacilityAlias")]
        public List<NameStruct> FacilityAlias {
            get {
                return FacilityAliasField;
            } 
            set {
                FacilityAliasField = value;
                NotifyPropertyChanged("FacilityAlias");
            }
        }

         /// <summary>
         /// bool to indicate if FacilityAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacilityAliasSpecified
         {
             get {
             if(FacilityAliasField!=null)
                 return FacilityAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> FacilityAliasField; 

        /// <summary>
        /// Unit property
        /// </summary>
		[StringLength(64)]
        [Description("Unit.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Unit")]
        public string Unit {
            get {
                return UnitField;
            } 
            set {
                UnitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private string UnitField; 

        /// <summary>
        /// NetWork property
        /// </summary>
		[StringLength(64)]
        [Description("Network.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NetWork")]
        public string NetWork {
            get {
                return NetWorkField;
            } 
            set {
                NetWorkField = value;
                NotifyPropertyChanged("NetWork");
            }
        }

        private string NetWorkField; 

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [Description("The name of the facility. The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("Name")]
        public FacilityIdentifierStruct Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private FacilityIdentifierStruct NameField; 

        /// <summary>
        /// StatusWell property
        /// </summary>
		[Description("Status of the well.")]
        [EnergisticsDataTypeAttribute(DataType = "WellStatus")]
		[XmlElement("StatusWell")]
        public WellStatus? StatusWell {
            get {
                return StatusWellField;
            } 
            set {
                StatusWellField = value;
                 this.StatusWellSpecified = true;
                NotifyPropertyChanged("StatusWell");
            }
        }

        private WellStatus? StatusWellField; 

        /// <summary>
        /// StatusWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusWellSpecified {
            get {
                return StatusWellSpecifiedField;
            } 
            set {
                StatusWellSpecifiedField = value;
                NotifyPropertyChanged("StatusWellSpecified");
            }
        }

        private bool StatusWellSpecifiedField; 

        /// <summary>
        /// FluidWell property
        /// </summary>
		[Description("POSC well fluid. The type of fluid being produced from or injected into a well facility.")]
        [EnergisticsDataTypeAttribute(DataType = "WellFluid")]
		[XmlElement("FluidWell")]
        public WellFluid? FluidWell {
            get {
                return FluidWellField;
            } 
            set {
                FluidWellField = value;
                 this.FluidWellSpecified = true;
                NotifyPropertyChanged("FluidWell");
            }
        }

        private WellFluid? FluidWellField; 

        /// <summary>
        /// FluidWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidWellSpecified {
            get {
                return FluidWellSpecifiedField;
            } 
            set {
                FluidWellSpecifiedField = value;
                NotifyPropertyChanged("FluidWellSpecified");
            }
        }

        private bool FluidWellSpecifiedField; 

        /// <summary>
        /// OperatingMethod property
        /// </summary>
		[Description("The lift method being used to operate the well.")]
        [EnergisticsDataTypeAttribute(DataType = "WellOperationMethod")]
		[XmlElement("OperatingMethod")]
        public WellOperationMethod? OperatingMethod {
            get {
                return OperatingMethodField;
            } 
            set {
                OperatingMethodField = value;
                 this.OperatingMethodSpecified = true;
                NotifyPropertyChanged("OperatingMethod");
            }
        }

        private WellOperationMethod? OperatingMethodField; 

        /// <summary>
        /// OperatingMethodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OperatingMethodSpecified {
            get {
                return OperatingMethodSpecifiedField;
            } 
            set {
                OperatingMethodSpecifiedField = value;
                NotifyPropertyChanged("OperatingMethodSpecified");
            }
        }

        private bool OperatingMethodSpecifiedField; 

        /// <summary>
        /// WellProducing property
        /// </summary>
		[Description("True (or 1) indicates that the well is producing. False (or 0) or not given indicates that the well is not producing. This only applies if the facility is a well or wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("WellProducing")]
        public bool? WellProducing {
            get {
                return WellProducingField;
            } 
            set {
                WellProducingField = value;
                 this.WellProducingSpecified = true;
                NotifyPropertyChanged("WellProducing");
            }
        }

        private bool? WellProducingField; 

        /// <summary>
        /// WellProducingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool WellProducingSpecified {
            get {
                return WellProducingSpecifiedField;
            } 
            set {
                WellProducingSpecifiedField = value;
                NotifyPropertyChanged("WellProducingSpecified");
            }
        }

        private bool WellProducingSpecifiedField; 

        /// <summary>
        /// WellInjecting property
        /// </summary>
		[Description("True (or 1) indicates that the well is injecting. False (or 0) or not given indicates that the well is not injecting. This only applies if the facility is a well or wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("WellInjecting")]
        public bool? WellInjecting {
            get {
                return WellInjectingField;
            } 
            set {
                WellInjectingField = value;
                 this.WellInjectingSpecified = true;
                NotifyPropertyChanged("WellInjecting");
            }
        }

        private bool? WellInjectingField; 

        /// <summary>
        /// WellInjectingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool WellInjectingSpecified {
            get {
                return WellInjectingSpecifiedField;
            } 
            set {
                WellInjectingSpecifiedField = value;
                NotifyPropertyChanged("WellInjectingSpecified");
            }
        }

        private bool WellInjectingSpecifiedField; 

        /// <summary>
        /// Capacity property
        /// </summary>
		[Description("The storage capacity of the facility (e.g., a tank).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("Capacity")]
        public VolumeMeasure Capacity {
            get {
                return CapacityField;
            } 
            set {
                CapacityField = value;
                NotifyPropertyChanged("Capacity");
            }
        }

        private VolumeMeasure CapacityField; 

        /// <summary>
        /// OperationTime property
        /// </summary>
		[Description("The amount of time that the facility was active during the reporting period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("OperationTime")]
        public TimeMeasure OperationTime {
            get {
                return OperationTimeField;
            } 
            set {
                OperationTimeField = value;
                NotifyPropertyChanged("OperationTime");
            }
        }

        private TimeMeasure OperationTimeField; 

        /// <summary>
        /// Flow property
        /// </summary>
		[Description("Reports a flow of a product.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeFlow")]
		[XmlElement("Flow")]
        public List<ProductVolumeFlow> Flow {
            get {
                return FlowField;
            } 
            set {
                FlowField = value;
                NotifyPropertyChanged("Flow");
            }
        }

         /// <summary>
         /// bool to indicate if Flow has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FlowSpecified
         {
             get {
             if(FlowField!=null)
                 return FlowField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeFlow> FlowField; 

        /// <summary>
        /// ParameterSet property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeParameterSet")]
		[XmlElement("ParameterSet")]
        public List<ProductVolumeParameterSet> ParameterSet {
            get {
                return ParameterSetField;
            } 
            set {
                ParameterSetField = value;
                NotifyPropertyChanged("ParameterSet");
            }
        }

         /// <summary>
         /// bool to indicate if ParameterSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSetSpecified
         {
             get {
             if(ParameterSetField!=null)
                 return ParameterSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeParameterSet> ParameterSetField; 

        /// <summary>
        /// DowntimeReason property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DatedComment")]
		[XmlElement("DowntimeReason")]
        public List<DatedComment> DowntimeReason {
            get {
                return DowntimeReasonField;
            } 
            set {
                DowntimeReasonField = value;
                NotifyPropertyChanged("DowntimeReason");
            }
        }

         /// <summary>
         /// bool to indicate if DowntimeReason has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DowntimeReasonSpecified
         {
             get {
             if(DowntimeReasonField!=null)
                 return DowntimeReasonField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> DowntimeReasonField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DatedComment")]
		[XmlElement("Comment")]
        public List<DatedComment> Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(CommentField!=null)
                 return CommentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> CommentField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductVolumeFlow xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductVolumeFlow", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductVolumeFlow xsd type.")]
    public partial class ProductVolumeFlow : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[StringLength(64)]
        [Description("The name of this flow within the context of this report. This might reflect some combination of the kind of flow, port, qualifier and related facility.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Kind property
        /// </summary>
		[Required]
        [Description("Indicates the type of flow that is being reported. The type of flow is an indication of the overall source or target of the flow.  - A production flow has one or more wells as the originating source.  - An injection flow has one or more wells as the ultimate target.  - An import flow has an offsite source.  - An export flow has an offsite target. - A consumption flow generally has a kind of equipment as a target.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingFlow")]
		[XmlElement("Kind")]
        public ReportingFlow? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        
        private bool KindSpecifiedField = false;
        
        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }
        
        private ReportingFlow? KindField; 

        /// <summary>
        /// Port property
        /// </summary>
		[StringLength(64)]
        [Description("Port.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Port")]
        public string Port {
            get {
                return PortField;
            } 
            set {
                PortField = value;
                NotifyPropertyChanged("Port");
            }
        }

        private string PortField; 

        /// <summary>
        /// Direction property
        /// </summary>
		[Description("Direction.")]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowPortType")]
		[XmlElement("Direction")]
        public ProductFlowPortType? Direction {
            get {
                return DirectionField;
            } 
            set {
                DirectionField = value;
                 this.DirectionSpecified = true;
                NotifyPropertyChanged("Direction");
            }
        }

        private ProductFlowPortType? DirectionField; 

        /// <summary>
        /// DirectionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DirectionSpecified {
            get {
                return DirectionSpecifiedField;
            } 
            set {
                DirectionSpecifiedField = value;
                NotifyPropertyChanged("DirectionSpecified");
            }
        }

        private bool DirectionSpecifiedField; 

        /// <summary>
        /// Facility property
        /// </summary>
		[Description("Facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("Facility")]
        public FacilityIdentifierStruct Facility {
            get {
                return FacilityField;
            } 
            set {
                FacilityField = value;
                NotifyPropertyChanged("Facility");
            }
        }

        private FacilityIdentifierStruct FacilityField; 

        /// <summary>
        /// FacilityAlias property
        /// </summary>
		[Description("Facility alias.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NameStruct")]
		[XmlElement("FacilityAlias")]
        public List<NameStruct> FacilityAlias {
            get {
                return FacilityAliasField;
            } 
            set {
                FacilityAliasField = value;
                NotifyPropertyChanged("FacilityAlias");
            }
        }

         /// <summary>
         /// bool to indicate if FacilityAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacilityAliasSpecified
         {
             get {
             if(FacilityAliasField!=null)
                 return FacilityAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> FacilityAliasField; 

        /// <summary>
        /// Qualifier property
        /// </summary>
		[Description("Qualifies the type of flow that is being reported.")]
        [EnergisticsDataTypeAttribute(DataType = "FlowQualifier")]
		[XmlElement("Qualifier")]
        public FlowQualifier? Qualifier {
            get {
                return QualifierField;
            } 
            set {
                QualifierField = value;
                 this.QualifierSpecified = true;
                NotifyPropertyChanged("Qualifier");
            }
        }

        private FlowQualifier? QualifierField; 

        /// <summary>
        /// QualifierSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QualifierSpecified {
            get {
                return QualifierSpecifiedField;
            } 
            set {
                QualifierSpecifiedField = value;
                NotifyPropertyChanged("QualifierSpecified");
            }
        }

        private bool QualifierSpecifiedField; 

        /// <summary>
        /// SubQualifier property
        /// </summary>
		[Description("Defines a specialization of the qualifier value. This should only be given if a qualifier is given.")]
        [EnergisticsDataTypeAttribute(DataType = "FlowSubQualifier")]
		[XmlElement("SubQualifier")]
        public FlowSubQualifier? SubQualifier {
            get {
                return SubQualifierField;
            } 
            set {
                SubQualifierField = value;
                 this.SubQualifierSpecified = true;
                NotifyPropertyChanged("SubQualifier");
            }
        }

        private FlowSubQualifier? SubQualifierField; 

        /// <summary>
        /// SubQualifierSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SubQualifierSpecified {
            get {
                return SubQualifierSpecifiedField;
            } 
            set {
                SubQualifierSpecifiedField = value;
                NotifyPropertyChanged("SubQualifierSpecified");
            }
        }

        private bool SubQualifierSpecifiedField; 

        /// <summary>
        /// Version property
        /// </summary>
		[Description("Version.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("Version")]
        public Timestamp? Version {
            get {
                return VersionField;
            } 
            set {
                VersionField = value;
                 this.VersionSpecified = true;
                NotifyPropertyChanged("Version");
            }
        }

        private Timestamp? VersionField; 

        /// <summary>
        /// VersionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool VersionSpecified {
            get {
                return VersionSpecifiedField;
            } 
            set {
                VersionSpecifiedField = value;
                NotifyPropertyChanged("VersionSpecified");
            }
        }

        private bool VersionSpecifiedField; 

        /// <summary>
        /// VersionSource property
        /// </summary>
		[StringLength(64)]
        [Description("Identifies the source of the version. This will commonly be the name of the software which created the version.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("VersionSource")]
        public string VersionSource {
            get {
                return VersionSourceField;
            } 
            set {
                VersionSourceField = value;
                NotifyPropertyChanged("VersionSource");
            }
        }

        private string VersionSourceField; 

        /// <summary>
        /// SourceFlow property
        /// </summary>
		[StringLength(64)]
        [Description("This is a pointer to the flow from which this flow was derived.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SourceFlow")]
        public string SourceFlow {
            get {
                return SourceFlowField;
            } 
            set {
                SourceFlowField = value;
                NotifyPropertyChanged("SourceFlow");
            }
        }

        private string SourceFlowField; 

        /// <summary>
        /// RelatedFacility property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeRelatedFacility")]
		[XmlElement("RelatedFacility")]
        public ProductVolumeRelatedFacility RelatedFacility {
            get {
                return RelatedFacilityField;
            } 
            set {
                RelatedFacilityField = value;
                NotifyPropertyChanged("RelatedFacility");
            }
        }

        private ProductVolumeRelatedFacility RelatedFacilityField; 

        /// <summary>
        /// Product property
        /// </summary>
		[Description("Reports a product flow stream.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeProduct")]
		[XmlElement("Product")]
        public List<ProductVolumeProduct> Product {
            get {
                return ProductField;
            } 
            set {
                ProductField = value;
                NotifyPropertyChanged("Product");
            }
        }

         /// <summary>
         /// bool to indicate if Product has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProductSpecified
         {
             get {
             if(ProductField!=null)
                 return ProductField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeProduct> ProductField; 

        /// <summary>
        /// Properties property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CommonPropertiesProductVolume")]
		[XmlElement("Properties")]
        public CommonPropertiesProductVolume Properties {
            get {
                return PropertiesField;
            } 
            set {
                PropertiesField = value;
                NotifyPropertyChanged("Properties");
            }
        }

        private CommonPropertiesProductVolume PropertiesField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductVolumeRelatedFacility xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductVolumeRelatedFacility", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductVolumeRelatedFacility xsd type.")]
    public partial class ProductVolumeRelatedFacility : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Kind property
        /// </summary>
		[Description("A kind of facility where the specific name is not relevant.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingFacility")]
		[XmlElement("Kind")]
        public ReportingFacility? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private ReportingFacility? KindField; 

        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool KindSpecifiedField; 

        /// <summary>
        /// RelatedFacilityObject property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractRelatedFacilityObject")]
		[XmlElement("RelatedFacilityObject")]
        public AbstractRelatedFacilityObject RelatedFacilityObject {
            get {
                return RelatedFacilityObjectField;
            } 
            set {
                RelatedFacilityObjectField = value;
                NotifyPropertyChanged("RelatedFacilityObject");
            }
        }

        private AbstractRelatedFacilityObject RelatedFacilityObjectField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractRelatedFacilityObject xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FacilityUnitPort))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FacilityParent))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractRelatedFacilityObject", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractRelatedFacilityObject xsd type.")]
    public abstract partial class AbstractRelatedFacilityObject : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// FacilityParent property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityParent")]
		[XmlElement("FacilityParent")]
        public FacilityParent FacilityParent {
            get {
                return FacilityParentField;
            } 
            set {
                FacilityParentField = value;
                NotifyPropertyChanged("FacilityParent");
            }
        }

        private FacilityParent FacilityParentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FacilityParent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FacilityParent", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FacilityParent xsd type.")]
    public partial class FacilityParent : AbstractRelatedFacilityObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the facility. The name can be qualified by a naming system. This can also define the kind of facility.
        /// </summary>
		[Description("The name of the facility. The name can be qualified by a naming system. This can also define the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("Name")]
        public FacilityIdentifierStruct Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private FacilityIdentifierStruct NameField; 

        /// <summary>
        /// For facilities whose name is unique within the context of another facility, the name of the parent facility. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("For facilities whose name is unique within the context of another facility, the name of the parent facility. The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("FacilityParent1")]
        public FacilityIdentifierStruct FacilityParent1 {
            get {
                return FacilityParent1Field;
            } 
            set {
                FacilityParent1Field = value;
                NotifyPropertyChanged("FacilityParent1");
            }
        }

        private FacilityIdentifierStruct FacilityParent1Field; 

        /// <summary>
        /// For facilities whose name is unique within the context of another facility, the name of the parent facility of parent1. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("For facilities whose name is unique within the context of another facility, the name of the parent facility of parent1. The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("FacilityParent2")]
        public FacilityIdentifierStruct FacilityParent2 {
            get {
                return FacilityParent2Field;
            } 
            set {
                FacilityParent2Field = value;
                NotifyPropertyChanged("FacilityParent2");
            }
        }

        private FacilityIdentifierStruct FacilityParent2Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FacilityUnitPort xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FacilityUnitPort", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the FacilityUnitPort xsd type.")]
    public partial class FacilityUnitPort : AbstractRelatedFacilityObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The product flow port associated with the product flow unit.
        /// </summary>
		[StringLength(64)]
        [Description("The product flow port associated with the product flow unit.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PortReference")]
        public string PortReference {
            get {
                return PortReferenceField;
            } 
            set {
                PortReferenceField = value;
                NotifyPropertyChanged("PortReference");
            }
        }

        private string PortReferenceField; 

        /// <summary>
        /// The product flow unit representing the facility.
        /// </summary>
		[StringLength(64)]
        [Description("The product flow unit representing the facility.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("UnitReference")]
        public string UnitReference {
            get {
                return UnitReferenceField;
            } 
            set {
                UnitReferenceField = value;
                NotifyPropertyChanged("UnitReference");
            }
        }

        private string UnitReferenceField; 

        /// <summary>
        /// The product flow network representing the facility. This is only required if the network is not the same as the primary network that represents the Product Flow Model. This must be unique within the context of the product flow model represented by this report.
        /// </summary>
		[StringLength(64)]
        [Description("The product flow network representing the facility. This is only required if the network is not the same as the primary network that represents the Product Flow Model. This must be unique within the context of the product flow model represented by this report.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NetworkReference")]
        public string NetworkReference {
            get {
                return NetworkReferenceField;
            } 
            set {
                NetworkReferenceField = value;
                NotifyPropertyChanged("NetworkReference");
            }
        }

        private string NetworkReferenceField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductVolumeProduct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductVolumeProduct", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductVolumeProduct xsd type.")]
    public partial class ProductVolumeProduct : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Kind property
        /// </summary>
		[Required]
        [Description("The type of product that is being reported.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingProduct")]
		[XmlElement("Kind")]
        public ReportingProduct? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        
        private bool KindSpecifiedField = false;
        
        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }
        
        private ReportingProduct? KindField; 

        /// <summary>
        /// Name property
        /// </summary>
		[Description("The name of product that is being reported. This is reserved for generic kinds like chemical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "NameStruct")]
		[XmlElement("Name")]
        public NameStruct Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private NameStruct NameField; 

        /// <summary>
        /// SplitFactor property
        /// </summary>
		[Range(0, 1)]
        [Description("This factor describes the fraction of fluid in the source flow that is allocated to this product stream. The volumes reported here are derived from the source flow based on this split factor. This should be an allocation flow.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeFraction")]
		[XmlElement("SplitFactor")]
        public float? SplitFactor {
            get {
                return SplitFactorField;
            } 
            set {
                SplitFactorField = value;
                 this.SplitFactorSpecified = true;
                NotifyPropertyChanged("SplitFactor");
            }
        }

        private float? SplitFactorField; 

        /// <summary>
        /// SplitFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SplitFactorSpecified {
            get {
                return SplitFactorSpecifiedField;
            } 
            set {
                SplitFactorSpecifiedField = value;
                NotifyPropertyChanged("SplitFactorSpecified");
            }
        }

        private bool SplitFactorSpecifiedField; 

        /// <summary>
        /// MassFraction property
        /// </summary>
		[Description("The weight fraction of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("MassFraction")]
        public MassPerMassMeasure MassFraction {
            get {
                return MassFractionField;
            } 
            set {
                MassFractionField = value;
                NotifyPropertyChanged("MassFraction");
            }
        }

        private MassPerMassMeasure MassFractionField; 

        /// <summary>
        /// MoleFraction property
        /// </summary>
		[Description("The mole fraction of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AmountOfSubstancePerAmountOfSubstanceMeasure")]
		[XmlElement("MoleFraction")]
        public AmountOfSubstancePerAmountOfSubstanceMeasure MoleFraction {
            get {
                return MoleFractionField;
            } 
            set {
                MoleFractionField = value;
                NotifyPropertyChanged("MoleFraction");
            }
        }

        private AmountOfSubstancePerAmountOfSubstanceMeasure MoleFractionField; 

        /// <summary>
        /// ComponentContent property
        /// </summary>
		[Description("The relative amount of a component product in the product stream.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeComponentContent")]
		[XmlElement("ComponentContent")]
        public List<ProductVolumeComponentContent> ComponentContent {
            get {
                return ComponentContentField;
            } 
            set {
                ComponentContentField = value;
                NotifyPropertyChanged("ComponentContent");
            }
        }

         /// <summary>
         /// bool to indicate if ComponentContent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ComponentContentSpecified
         {
             get {
             if(ComponentContentField!=null)
                 return ComponentContentField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeComponentContent> ComponentContentField; 

        /// <summary>
        /// SourceFlow property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "AbstractRefProductFlow")]
		[XmlElement("SourceFlow")]
        public AbstractRefProductFlow SourceFlow {
            get {
                return SourceFlowField;
            } 
            set {
                SourceFlowField = value;
                NotifyPropertyChanged("SourceFlow");
            }
        }

        private AbstractRefProductFlow SourceFlowField; 

        /// <summary>
        /// Period property
        /// </summary>
		[Required]
        [Description("Product amounts for a specific period.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumePeriod")]
		[XmlElement("Period")]
        public List<ProductVolumePeriod> Period {
            get {
                return PeriodField;
            } 
            set {
                PeriodField = value;
                NotifyPropertyChanged("Period");
            }
        }

         /// <summary>
         /// bool to indicate if Period has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PeriodSpecified
         {
             get {
             if(PeriodField!=null)
                 return PeriodField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumePeriod> PeriodField; 

        /// <summary>
        /// Properties property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CommonPropertiesProductVolume")]
		[XmlElement("Properties")]
        public CommonPropertiesProductVolume Properties {
            get {
                return PropertiesField;
            } 
            set {
                PropertiesField = value;
                NotifyPropertyChanged("Properties");
            }
        }

        private CommonPropertiesProductVolume PropertiesField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductVolumeComponentContent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductVolumeComponentContent", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductVolumeComponentContent xsd type.")]
    public partial class ProductVolumeComponentContent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Kind property
        /// </summary>
		[Required]
        [Description("The type of product whose relative content is being described. This should be a specific component (e.g., water) rather than a phase (e.g., aqueous).")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingProduct")]
		[XmlElement("Kind")]
        public ReportingProduct? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        
        private bool KindSpecifiedField = false;
        
        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }
        
        private ReportingProduct? KindField; 

        /// <summary>
        /// ReferenceKind property
        /// </summary>
		[Description("The type of product to which the product is being compared. If not given then the product is being compared against the overall flow stream.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingProduct")]
		[XmlElement("ReferenceKind")]
        public ReportingProduct? ReferenceKind {
            get {
                return ReferenceKindField;
            } 
            set {
                ReferenceKindField = value;
                 this.ReferenceKindSpecified = true;
                NotifyPropertyChanged("ReferenceKind");
            }
        }

        private ReportingProduct? ReferenceKindField; 

        /// <summary>
        /// ReferenceKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReferenceKindSpecified {
            get {
                return ReferenceKindSpecifiedField;
            } 
            set {
                ReferenceKindSpecifiedField = value;
                NotifyPropertyChanged("ReferenceKindSpecified");
            }
        }

        private bool ReferenceKindSpecifiedField; 

        /// <summary>
        /// Properties property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CommonPropertiesProductVolume")]
		[XmlElement("Properties")]
        public CommonPropertiesProductVolume Properties {
            get {
                return PropertiesField;
            } 
            set {
                PropertiesField = value;
                NotifyPropertyChanged("Properties");
            }
        }

        private CommonPropertiesProductVolume PropertiesField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CommonPropertiesProductVolume xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CommonPropertiesProductVolume", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the CommonPropertiesProductVolume xsd type.")]
    public partial class CommonPropertiesProductVolume : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Gor property
        /// </summary>
		[Description("Gas oil ratio. The ratio between the total produced gas volume and the total produced oil volume including oil and gas volumes used on the installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Gor")]
        public VolumePerVolumeMeasure Gor {
            get {
                return GorField;
            } 
            set {
                GorField = value;
                NotifyPropertyChanged("Gor");
            }
        }

        private VolumePerVolumeMeasure GorField; 

        /// <summary>
        /// GorMTD property
        /// </summary>
		[Description("Gas oil ratio month to date. The gas oil ratio from the beginning of the month to the end of the reporting period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("GorMTD")]
        public VolumePerVolumeMeasure GorMTD {
            get {
                return GorMTDField;
            } 
            set {
                GorMTDField = value;
                NotifyPropertyChanged("GorMTD");
            }
        }

        private VolumePerVolumeMeasure GorMTDField; 

        /// <summary>
        /// GasLiquidRatio property
        /// </summary>
		[Description("The volumetric ratio of gas to liquid for all products in the whole flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("GasLiquidRatio")]
        public VolumePerVolumeMeasure GasLiquidRatio {
            get {
                return GasLiquidRatioField;
            } 
            set {
                GasLiquidRatioField = value;
                NotifyPropertyChanged("GasLiquidRatio");
            }
        }

        private VolumePerVolumeMeasure GasLiquidRatioField; 

        /// <summary>
        /// WaterConcMass property
        /// </summary>
		[Description("Water concentration mass basis. The ratio of water produced compared to the mass of total liquids produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("WaterConcMass")]
        public MassPerMassMeasure WaterConcMass {
            get {
                return WaterConcMassField;
            } 
            set {
                WaterConcMassField = value;
                NotifyPropertyChanged("WaterConcMass");
            }
        }

        private MassPerMassMeasure WaterConcMassField; 

        /// <summary>
        /// WaterConcVol property
        /// </summary>
		[Description("Water concentration volume basis. The ratio of water produced compared to the mass of total liquids produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("WaterConcVol")]
        public VolumePerVolumeMeasure WaterConcVol {
            get {
                return WaterConcVolField;
            } 
            set {
                WaterConcVolField = value;
                NotifyPropertyChanged("WaterConcVol");
            }
        }

        private VolumePerVolumeMeasure WaterConcVolField; 

        /// <summary>
        /// Atmosphere property
        /// </summary>
		[Description("The average atmospheric pressure during the reporting period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Atmosphere")]
        public PressureMeasure Atmosphere {
            get {
                return AtmosphereField;
            } 
            set {
                AtmosphereField = value;
                NotifyPropertyChanged("Atmosphere");
            }
        }

        private PressureMeasure AtmosphereField; 

        /// <summary>
        /// Temp property
        /// </summary>
		[Description("Temperature of the port. Specifying the temperature here (as opposed to in Period) implies that the temperature is constant for all periods of the flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("Temp")]
        public ThermodynamicTemperatureMeasure Temp {
            get {
                return TempField;
            } 
            set {
                TempField = value;
                NotifyPropertyChanged("Temp");
            }
        }

        private ThermodynamicTemperatureMeasure TempField; 

        /// <summary>
        /// Pres property
        /// </summary>
		[Description("Pressure of the port. Specifying the pressure here (as opposed to in Period) implies that the pressure is constant for all periods of the flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Pres")]
        public PressureMeasure Pres {
            get {
                return PresField;
            } 
            set {
                PresField = value;
                NotifyPropertyChanged("Pres");
            }
        }

        private PressureMeasure PresField; 

        /// <summary>
        /// AbsoluteMinPres property
        /// </summary>
		[Description("Absolute minimum pressure before the system will give an alarm.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("AbsoluteMinPres")]
        public PressureMeasure AbsoluteMinPres {
            get {
                return AbsoluteMinPresField;
            } 
            set {
                AbsoluteMinPresField = value;
                NotifyPropertyChanged("AbsoluteMinPres");
            }
        }

        private PressureMeasure AbsoluteMinPresField; 

        /// <summary>
        /// Mass property
        /// </summary>
		[Description("The mass of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("Mass")]
        public MassMeasure Mass {
            get {
                return MassField;
            } 
            set {
                MassField = value;
                NotifyPropertyChanged("Mass");
            }
        }

        private MassMeasure MassField; 

        /// <summary>
        /// Work property
        /// </summary>
		[Description("The electrical energy represented by the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EnergyMeasure")]
		[XmlElement("Work")]
        public EnergyMeasure Work {
            get {
                return WorkField;
            } 
            set {
                WorkField = value;
                NotifyPropertyChanged("Work");
            }
        }

        private EnergyMeasure WorkField; 

        /// <summary>
        /// Efficiency property
        /// </summary>
		[Description("The actual volume divided by the potential volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Efficiency")]
        public VolumePerVolumeMeasure Efficiency {
            get {
                return EfficiencyField;
            } 
            set {
                EfficiencyField = value;
                NotifyPropertyChanged("Efficiency");
            }
        }

        private VolumePerVolumeMeasure EfficiencyField; 

        /// <summary>
        /// Rvp property
        /// </summary>
		[Description("Reid vapor pressure of the product. The absolute vapor pressure of volatile crude oil and volatile petroleum liquids, except liquefied petroleum gases, as determined in accordance with American Society for Testing and Materials under the designation ASTM D323-56.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Rvp")]
        public PressureMeasure Rvp {
            get {
                return RvpField;
            } 
            set {
                RvpField = value;
                NotifyPropertyChanged("Rvp");
            }
        }

        private PressureMeasure RvpField; 

        /// <summary>
        /// Tvp property
        /// </summary>
		[Description("True vapor pressure of the product. The equilibrium partial pressure exerted by a petroleum liquid as determined in accordance with standard methods.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Tvp")]
        public PressureMeasure Tvp {
            get {
                return TvpField;
            } 
            set {
                TvpField = value;
                NotifyPropertyChanged("Tvp");
            }
        }

        private PressureMeasure TvpField; 

        /// <summary>
        /// Bsw property
        /// </summary>
		[Description("Basic sediment and water is measured from a liquid sample of the production stream. It includes free water, sediment and emulsion and is measured as a volume percentage of the production stream.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Bsw")]
        public VolumePerVolumeMeasure Bsw {
            get {
                return BswField;
            } 
            set {
                BswField = value;
                NotifyPropertyChanged("Bsw");
            }
        }

        private VolumePerVolumeMeasure BswField; 

        /// <summary>
        /// BswPrevious property
        /// </summary>
		[Description("The basic sediment and water as measured on the previous reporting period (e.g., day).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("BswPrevious")]
        public VolumePerVolumeMeasure BswPrevious {
            get {
                return BswPreviousField;
            } 
            set {
                BswPreviousField = value;
                NotifyPropertyChanged("BswPrevious");
            }
        }

        private VolumePerVolumeMeasure BswPreviousField; 

        /// <summary>
        /// DensityFlowRate property
        /// </summary>
		[Description("The mass basis flow rate of the product. This is used for things like a sand component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerTimeMeasure")]
		[XmlElement("DensityFlowRate")]
        public MassPerTimeMeasure DensityFlowRate {
            get {
                return DensityFlowRateField;
            } 
            set {
                DensityFlowRateField = value;
                NotifyPropertyChanged("DensityFlowRate");
            }
        }

        private MassPerTimeMeasure DensityFlowRateField; 

        /// <summary>
        /// Concentration property
        /// </summary>
		[Description("The concentration of the product as a volume percentage of the product stream.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Concentration")]
        public VolumePerVolumeMeasure Concentration {
            get {
                return ConcentrationField;
            } 
            set {
                ConcentrationField = value;
                NotifyPropertyChanged("Concentration");
            }
        }

        private VolumePerVolumeMeasure ConcentrationField; 

        /// <summary>
        /// MolecularWeight property
        /// </summary>
		[Description("The molecular weight of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MolecularWeightMeasure")]
		[XmlElement("MolecularWeight")]
        public MolecularWeightMeasure MolecularWeight {
            get {
                return MolecularWeightField;
            } 
            set {
                MolecularWeightField = value;
                NotifyPropertyChanged("MolecularWeight");
            }
        }

        private MolecularWeightMeasure MolecularWeightField; 

        /// <summary>
        /// WeightPercent property
        /// </summary>
		[Description("The weight fraction of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("WeightPercent")]
        public MassPerMassMeasure WeightPercent {
            get {
                return WeightPercentField;
            } 
            set {
                WeightPercentField = value;
                NotifyPropertyChanged("WeightPercent");
            }
        }

        private MassPerMassMeasure WeightPercentField; 

        /// <summary>
        /// MolePercent property
        /// </summary>
		[Description("The mole fraction of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AmountOfSubstancePerAmountOfSubstanceMeasure")]
		[XmlElement("MolePercent")]
        public AmountOfSubstancePerAmountOfSubstanceMeasure MolePercent {
            get {
                return MolePercentField;
            } 
            set {
                MolePercentField = value;
                NotifyPropertyChanged("MolePercent");
            }
        }

        private AmountOfSubstancePerAmountOfSubstanceMeasure MolePercentField; 

        /// <summary>
        /// MoleAmt property
        /// </summary>
		[Description("The molar amount.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AmountOfSubstanceMeasure")]
		[XmlElement("MoleAmt")]
        public AmountOfSubstanceMeasure MoleAmt {
            get {
                return MoleAmtField;
            } 
            set {
                MoleAmtField = value;
                NotifyPropertyChanged("MoleAmt");
            }
        }

        private AmountOfSubstanceMeasure MoleAmtField; 

        /// <summary>
        /// Sg property
        /// </summary>
		[Description("The specific gravity of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("Sg")]
        public DimensionlessMeasure SG {
            get {
                return SgField;
            } 
            set {
                SgField = value;
                NotifyPropertyChanged("SG");
            }
        }

        private DimensionlessMeasure SgField; 

        /// <summary>
        /// HcDewpoint property
        /// </summary>
		[Description("The temperature at which the heavier hydrocarbons come out of solution.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("HcDewpoint")]
        public ThermodynamicTemperatureMeasure HCDewpoint {
            get {
                return HcDewpointField;
            } 
            set {
                HcDewpointField = value;
                NotifyPropertyChanged("HCDewpoint");
            }
        }

        private ThermodynamicTemperatureMeasure HcDewpointField; 

        /// <summary>
        /// WaterDewpoint property
        /// </summary>
		[Description("The temperature at which the first water comes out of solution.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("WaterDewpoint")]
        public ThermodynamicTemperatureMeasure WaterDewpoint {
            get {
                return WaterDewpointField;
            } 
            set {
                WaterDewpointField = value;
                NotifyPropertyChanged("WaterDewpoint");
            }
        }

        private ThermodynamicTemperatureMeasure WaterDewpointField; 

        /// <summary>
        /// WobbeIndex property
        /// </summary>
		[Description("Indicator value of the interchangeability of fuel gases.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IsothermalCompressibilityMeasure")]
		[XmlElement("WobbeIndex")]
        public IsothermalCompressibilityMeasure WobbeIndex {
            get {
                return WobbeIndexField;
            } 
            set {
                WobbeIndexField = value;
                NotifyPropertyChanged("WobbeIndex");
            }
        }

        private IsothermalCompressibilityMeasure WobbeIndexField; 

        /// <summary>
        /// GrossCalorificValueStd property
        /// </summary>
		[Description("The amount of heat that would be released by the complete combustion in air of a specific quantity of product at standard temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EnergyPerVolumeMeasure")]
		[XmlElement("GrossCalorificValueStd")]
        public EnergyPerVolumeMeasure GrossCalorificValueStd {
            get {
                return GrossCalorificValueStdField;
            } 
            set {
                GrossCalorificValueStdField = value;
                NotifyPropertyChanged("GrossCalorificValueStd");
            }
        }

        private EnergyPerVolumeMeasure GrossCalorificValueStdField; 

        /// <summary>
        /// RvpStabilizedCrude property
        /// </summary>
		[Description("Reid vapor pressure of stabilized crude.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("RvpStabilizedCrude")]
        public PressureMeasure RvpStabilizedCrude {
            get {
                return RvpStabilizedCrudeField;
            } 
            set {
                RvpStabilizedCrudeField = value;
                NotifyPropertyChanged("RvpStabilizedCrude");
            }
        }

        private PressureMeasure RvpStabilizedCrudeField; 

        /// <summary>
        /// BswStabilizedCrude property
        /// </summary>
		[Description("Basic sediment and water content in stabilized crude.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("BswStabilizedCrude")]
        public VolumePerVolumeMeasure BswStabilizedCrude {
            get {
                return BswStabilizedCrudeField;
            } 
            set {
                BswStabilizedCrudeField = value;
                NotifyPropertyChanged("BswStabilizedCrude");
            }
        }

        private VolumePerVolumeMeasure BswStabilizedCrudeField; 

        /// <summary>
        /// DensityStabilizedCrude property
        /// </summary>
		[Description("The density of stabilized crude.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensityStabilizedCrude")]
        public MassPerVolumeMeasure DensityStabilizedCrude {
            get {
                return DensityStabilizedCrudeField;
            } 
            set {
                DensityStabilizedCrudeField = value;
                NotifyPropertyChanged("DensityStabilizedCrude");
            }
        }

        private MassPerVolumeMeasure DensityStabilizedCrudeField; 

        /// <summary>
        /// DensityValue property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DensityValue")]
		[XmlElement("DensityValue")]
        public List<DensityValue> DensityValue {
            get {
                return DensityValueField;
            } 
            set {
                DensityValueField = value;
                NotifyPropertyChanged("DensityValue");
            }
        }

         /// <summary>
         /// bool to indicate if DensityValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DensityValueSpecified
         {
             get {
             if(DensityValueField!=null)
                 return DensityValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<DensityValue> DensityValueField; 

        /// <summary>
        /// PortDiff property
        /// </summary>
		[Description("The internal differences between this port and one other port on this unit.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumePortDifference")]
		[XmlElement("PortDiff")]
        public List<ProductVolumePortDifference> PortDiff {
            get {
                return PortDiffField;
            } 
            set {
                PortDiffField = value;
                NotifyPropertyChanged("PortDiff");
            }
        }

         /// <summary>
         /// bool to indicate if PortDiff has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PortDiffSpecified
         {
             get {
             if(PortDiffField!=null)
                 return PortDiffField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumePortDifference> PortDiffField; 

        /// <summary>
        /// VolumeValue property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeValue")]
		[XmlElement("VolumeValue")]
        public List<VolumeValue> VolumeValue {
            get {
                return VolumeValueField;
            } 
            set {
                VolumeValueField = value;
                NotifyPropertyChanged("VolumeValue");
            }
        }

         /// <summary>
         /// bool to indicate if VolumeValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VolumeValueSpecified
         {
             get {
             if(VolumeValueField!=null)
                 return VolumeValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<VolumeValue> VolumeValueField; 

        /// <summary>
        /// FlowRateValue property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FlowRateValue")]
		[XmlElement("FlowRateValue")]
        public List<FlowRateValue> FlowRateValue {
            get {
                return FlowRateValueField;
            } 
            set {
                FlowRateValueField = value;
                NotifyPropertyChanged("FlowRateValue");
            }
        }

         /// <summary>
         /// bool to indicate if FlowRateValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FlowRateValueSpecified
         {
             get {
             if(FlowRateValueField!=null)
                 return FlowRateValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<FlowRateValue> FlowRateValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IsothermalCompressibilityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IsothermalCompressibilityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the IsothermalCompressibilityMeasure xsd type.")]
    public partial class IsothermalCompressibilityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IsothermalCompressibilityMeasure class.
        /// </summary>
        public IsothermalCompressibilityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the IsothermalCompressibilityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public IsothermalCompressibilityMeasure(double value, IsothermalCompressibilityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "IsothermalCompressibilityUom")]
        [XmlAttribute("uom")]
		
        public IsothermalCompressibilityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private IsothermalCompressibilityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DensityValue xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DensityValue", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DensityValue xsd type.")]
    public partial class DensityValue : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Density property
        /// </summary>
		[Required]
        [Description("The density of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Density")]
        public MassPerVolumeMeasure Density {
            get {
                return DensityField;
            } 
            set {
                DensityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private MassPerVolumeMeasure DensityField; 

        /// <summary>
        /// MeasurementPressureTemperature property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "AbstractTemperaturePressure")]
		[XmlElement("MeasurementPressureTemperature")]
        public AbstractTemperaturePressure MeasurementPressureTemperature {
            get {
                return MeasurementPressureTemperatureField;
            } 
            set {
                MeasurementPressureTemperatureField = value;
                NotifyPropertyChanged("MeasurementPressureTemperature");
            }
        }

        private AbstractTemperaturePressure MeasurementPressureTemperatureField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductVolumePortDifference xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductVolumePortDifference", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductVolumePortDifference xsd type.")]
    public partial class ProductVolumePortDifference : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A port on the other end of an internal connection. This should always be specified if a product flow network is being referenced by this report. If this is not specified then there is an assumption that there is only one other port for the unit. For example, if this end of the connection represents an inlet port then the implied other end is the outlet port for the unit.
        /// </summary>
		[StringLength(64)]
        [Description("A port on the other end of an internal connection. This should always be specified if a product flow network is being referenced by this report. If this is not specified then there is an assumption that there is only one other port for the unit. For example, if this end of the connection represents an inlet port then the implied other end is the outlet port for the unit.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PortReference")]
        public string PortReference {
            get {
                return PortReferenceField;
            } 
            set {
                PortReferenceField = value;
                NotifyPropertyChanged("PortReference");
            }
        }

        private string PortReferenceField; 

        /// <summary>
        /// The differential pressure between the ports.
        /// </summary>
		[Description("The differential pressure between the ports.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresDiff")]
        public PressureMeasure PresDiff {
            get {
                return PresDiffField;
            } 
            set {
                PresDiffField = value;
                NotifyPropertyChanged("PresDiff");
            }
        }

        private PressureMeasure PresDiffField; 

        /// <summary>
        /// The differential temperature between the ports.
        /// </summary>
		[Description("The differential temperature between the ports.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempDiff")]
        public ThermodynamicTemperatureMeasure TempDiff {
            get {
                return TempDiffField;
            } 
            set {
                TempDiffField = value;
                NotifyPropertyChanged("TempDiff");
            }
        }

        private ThermodynamicTemperatureMeasure TempDiffField; 

        /// <summary>
        /// The size of the choke. This characterizes the overall unit with respect to the flow restriction between the ports. The restriction might be implemented using a valve or an actual choke.
        /// </summary>
		[Description("The size of the choke. This characterizes the overall unit with respect to the flow restriction between the ports. The restriction might be implemented using a valve or an actual choke.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("ChokeSize")]
        public LengthMeasure ChokeSize {
            get {
                return ChokeSizeField;
            } 
            set {
                ChokeSizeField = value;
                NotifyPropertyChanged("ChokeSize");
            }
        }

        private LengthMeasure ChokeSizeField; 

        /// <summary>
        /// The relative size of the choke restriction. This characterizes the overall unit with respect to the flow restriction between the ports. The restriction might be implemented using a valve or an actual choke.
        /// </summary>
		[Description("The relative size of the choke restriction. This characterizes the overall unit with respect to the flow restriction between the ports. The restriction might be implemented using a valve or an actual choke.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerLengthMeasure")]
		[XmlElement("ChokeRelative")]
        public LengthPerLengthMeasure ChokeRelative {
            get {
                return ChokeRelativeField;
            } 
            set {
                ChokeRelativeField = value;
                NotifyPropertyChanged("ChokeRelative");
            }
        }

        private LengthPerLengthMeasure ChokeRelativeField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FlowRateValue xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FlowRateValue", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the FlowRateValue xsd type.")]
    public partial class FlowRateValue : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// FlowRate property
        /// </summary>
		[Required]
        [Description("The flow rate of the product. If the 'status' attribute is absent and the value is not \"NaN\", the data value can be assumed to be good with no restrictions. A value of \"NaN\" should be interpreted as null and should be not be given unless a status is also specified to explain why it is null.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowRate")]
        public VolumePerTimeMeasure FlowRate {
            get {
                return FlowRateField;
            } 
            set {
                FlowRateField = value;
                NotifyPropertyChanged("FlowRate");
            }
        }

        private VolumePerTimeMeasure FlowRateField; 

        /// <summary>
        /// MeasurementPressureTemperature property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "AbstractTemperaturePressure")]
		[XmlElement("MeasurementPressureTemperature")]
        public AbstractTemperaturePressure MeasurementPressureTemperature {
            get {
                return MeasurementPressureTemperatureField;
            } 
            set {
                MeasurementPressureTemperatureField = value;
                NotifyPropertyChanged("MeasurementPressureTemperature");
            }
        }

        private AbstractTemperaturePressure MeasurementPressureTemperatureField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractRefProductFlow xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReferenceFlow))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Parentfacility))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractRefProductFlow", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractRefProductFlow xsd type.")]
    public abstract partial class AbstractRefProductFlow : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Item property
        /// </summary>
		
		[XmlElement("Item")]
        public Object Item {
            get {
                return ItemField;
            } 
            set {
                ItemField = value;
                NotifyPropertyChanged("Item");
            }
        }

        private Object ItemField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ReferenceFlow xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ReferenceFlow", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ReferenceFlow xsd type.")]
    public partial class ReferenceFlow : AbstractRefProductFlow, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to the flow within the facility.
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the flow within the facility.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FlowReference")]
        public string FlowReference {
            get {
                return FlowReferenceField;
            } 
            set {
                FlowReferenceField = value;
                NotifyPropertyChanged("FlowReference");
            }
        }

        private string FlowReferenceField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Parentfacility xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Parentfacility", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the Parentfacility xsd type.")]
    public partial class Parentfacility : AbstractRefProductFlow, INotifyPropertyChanged
    {

        /// <summary>
        /// A reference to a flow within the current product volume report. This represents a foreign key from one element to another.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A reference to a flow within the current product volume report. This represents a foreign key from one element to another.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ParentfacilityReference")]
        public string ParentfacilityReference {
            get {
                return ParentfacilityReferenceField;
            } 
            set {
                ParentfacilityReferenceField = value;
                NotifyPropertyChanged("ParentfacilityReference");
            }
        }

        private string ParentfacilityReferenceField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductVolumePeriod xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductVolumePeriod", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductVolumePeriod xsd type.")]
    public partial class ProductVolumePeriod : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Kind property
        /// </summary>
		[Description("The type of period that is being reported. If not specified and a time is not given then the period is defined by the reporting period.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingDurationKind")]
		[XmlElement("Kind")]
        public ReportingDurationKind? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private ReportingDurationKind? KindField; 

        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool KindSpecifiedField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[Description("A time-stamped remark about the amounts.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DatedComment")]
		[XmlElement("Comment")]
        public List<DatedComment> Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(CommentField!=null)
                 return CommentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> CommentField; 

        /// <summary>
        /// BalanceSet property
        /// </summary>
		[Description("Provides the sales context for this period.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeBalanceSet")]
		[XmlElement("BalanceSet")]
        public List<ProductVolumeBalanceSet> BalanceSet {
            get {
                return BalanceSetField;
            } 
            set {
                BalanceSetField = value;
                NotifyPropertyChanged("BalanceSet");
            }
        }

         /// <summary>
         /// bool to indicate if BalanceSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BalanceSetSpecified
         {
             get {
             if(BalanceSetField!=null)
                 return BalanceSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeBalanceSet> BalanceSetField; 

        /// <summary>
        /// ComponentContent property
        /// </summary>
		[Description("The relative amount of a component product in the product stream.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeComponentContent")]
		[XmlElement("ComponentContent")]
        public List<ProductVolumeComponentContent> ComponentContent {
            get {
                return ComponentContentField;
            } 
            set {
                ComponentContentField = value;
                NotifyPropertyChanged("ComponentContent");
            }
        }

         /// <summary>
         /// bool to indicate if ComponentContent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ComponentContentSpecified
         {
             get {
             if(ComponentContentField!=null)
                 return ComponentContentField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeComponentContent> ComponentContentField; 

        /// <summary>
        /// DateTime property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDateTimeClass")]
		[XmlElement("DateTime")]
        public AbstractDateTimeClass DateTime {
            get {
                return DateTimeField;
            } 
            set {
                DateTimeField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private AbstractDateTimeClass DateTimeField; 

        /// <summary>
        /// Properties property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CommonPropertiesProductVolume")]
		[XmlElement("Properties")]
        public CommonPropertiesProductVolume Properties {
            get {
                return PropertiesField;
            } 
            set {
                PropertiesField = value;
                NotifyPropertyChanged("Properties");
            }
        }

        private CommonPropertiesProductVolume PropertiesField; 

        /// <summary>
        /// An indication of some sort of abnormal condition relative the values in this period.
        /// </summary>
		[Description("An indication of some sort of abnormal condition relative the values in this period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeAlert")]
		[XmlElement("Alert")]
        public ProductVolumeAlert Alert {
            get {
                return AlertField;
            } 
            set {
                AlertField = value;
                NotifyPropertyChanged("Alert");
            }
        }

        private ProductVolumeAlert AlertField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductVolumeBalanceSet xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductVolumeBalanceSet", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductVolumeBalanceSet xsd type.")]
    public partial class ProductVolumeBalanceSet : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Kind property
        /// </summary>
		[Description("Defines the aspect being described.")]
        [EnergisticsDataTypeAttribute(DataType = "BalanceFlowPart")]
		[XmlElement("Kind")]
        public BalanceFlowPart? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private BalanceFlowPart? KindField; 

        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool KindSpecifiedField; 

        /// <summary>
        /// CargoNumber property
        /// </summary>
		[StringLength(64)]
        [Description("A cargo identifier for the product.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CargoNumber")]
        public string CargoNumber {
            get {
                return CargoNumberField;
            } 
            set {
                CargoNumberField = value;
                NotifyPropertyChanged("CargoNumber");
            }
        }

        private string CargoNumberField; 

        /// <summary>
        /// CargoBatchNumber property
        /// </summary>
		[Description("A cargo batch number. Used if the vessel needs to temporarily disconnect for some reason (e.g., weather).")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("CargoBatchNumber", DataType="nonNegativeInteger")]
        public string CargoBatchNumber {
            get {
                return CargoBatchNumberField;
            } 
            set {
                CargoBatchNumberField = value;
                NotifyPropertyChanged("CargoBatchNumber");
            }
        }

        private string CargoBatchNumberField; 

        /// <summary>
        /// Shipper property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the shipper")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Shipper")]
        public string Shipper {
            get {
                return ShipperField;
            } 
            set {
                ShipperField = value;
                NotifyPropertyChanged("Shipper");
            }
        }

        private string ShipperField; 

        /// <summary>
        /// BalanceDetail property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeBalanceDetail")]
		[XmlElement("BalanceDetail")]
        public List<ProductVolumeBalanceDetail> BalanceDetail {
            get {
                return BalanceDetailField;
            } 
            set {
                BalanceDetailField = value;
                NotifyPropertyChanged("BalanceDetail");
            }
        }

         /// <summary>
         /// bool to indicate if BalanceDetail has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BalanceDetailSpecified
         {
             get {
             if(BalanceDetailField!=null)
                 return BalanceDetailField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeBalanceDetail> BalanceDetailField; 

        /// <summary>
        /// Destination property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeDestination")]
		[XmlElement("Destination")]
        public ProductVolumeDestination Destination {
            get {
                return DestinationField;
            } 
            set {
                DestinationField = value;
                NotifyPropertyChanged("Destination");
            }
        }

        private ProductVolumeDestination DestinationField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductVolumeBalanceDetail xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductVolumeBalanceDetail", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductVolumeBalanceDetail xsd type.")]
    public partial class ProductVolumeBalanceDetail : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Owner property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A pointer to the business unit which owns the product.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Owner")]
        public string Owner {
            get {
                return OwnerField;
            } 
            set {
                OwnerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string OwnerField; 

        /// <summary>
        /// SourceUnit property
        /// </summary>
		[StringLength(64)]
        [Description("Points to the business unit from which the product originated.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SourceUnit")]
        public string SourceUnit {
            get {
                return SourceUnitField;
            } 
            set {
                SourceUnitField = value;
                NotifyPropertyChanged("SourceUnit");
            }
        }

        private string SourceUnitField; 

        /// <summary>
        /// Share property
        /// </summary>
		[Description("The owner's share of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Share")]
        public VolumePerVolumeMeasure Share {
            get {
                return ShareField;
            } 
            set {
                ShareField = value;
                NotifyPropertyChanged("Share");
            }
        }

        private VolumePerVolumeMeasure ShareField; 

        /// <summary>
        /// AccountNumber property
        /// </summary>
		[StringLength(64)]
        [Description("An account identifier for the balance.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("AccountNumber")]
        public string AccountNumber {
            get {
                return AccountNumberField;
            } 
            set {
                AccountNumberField = value;
                NotifyPropertyChanged("AccountNumber");
            }
        }

        private string AccountNumberField; 

        /// <summary>
        /// SampleAnalysisResult property
        /// </summary>
		[Description("A pointer to a fluid sample analysis result object that is relevant to the balance. This sample may have been acquired previous to or after this period and is used for determining the allocated characteristics.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SampleAnalysisResult")]
        public List<string> SampleAnalysisResult {
            get {
                return SampleAnalysisResultField;
            } 
            set {
                SampleAnalysisResultField = value;
                NotifyPropertyChanged("SampleAnalysisResult");
            }
        }

         /// <summary>
         /// bool to indicate if SampleAnalysisResult has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SampleAnalysisResultSpecified
         {
             get {
             if(SampleAnalysisResultField!=null)
                 return SampleAnalysisResultField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> SampleAnalysisResultField; 

        /// <summary>
        /// ComponentContent property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeComponentContent")]
		[XmlElement("ComponentContent")]
        public List<ProductVolumeComponentContent> ComponentContent {
            get {
                return ComponentContentField;
            } 
            set {
                ComponentContentField = value;
                NotifyPropertyChanged("ComponentContent");
            }
        }

         /// <summary>
         /// bool to indicate if ComponentContent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ComponentContentSpecified
         {
             get {
             if(ComponentContentField!=null)
                 return ComponentContentField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeComponentContent> ComponentContentField; 

        /// <summary>
        /// Event property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeBalanceEvent")]
		[XmlElement("Event")]
        public List<ProductVolumeBalanceEvent> Event {
            get {
                return EventField;
            } 
            set {
                EventField = value;
                NotifyPropertyChanged("Event");
            }
        }

         /// <summary>
         /// bool to indicate if Event has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EventSpecified
         {
             get {
             if(EventField!=null)
                 return EventField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeBalanceEvent> EventField; 

        /// <summary>
        /// VolumeValue property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeValue")]
		[XmlElement("VolumeValue")]
        public List<VolumeValue> VolumeValue {
            get {
                return VolumeValueField;
            } 
            set {
                VolumeValueField = value;
                NotifyPropertyChanged("VolumeValue");
            }
        }

         /// <summary>
         /// bool to indicate if VolumeValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VolumeValueSpecified
         {
             get {
             if(VolumeValueField!=null)
                 return VolumeValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<VolumeValue> VolumeValueField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductVolumeBalanceEvent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductVolumeBalanceEvent", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductVolumeBalanceEvent xsd type.")]
    public partial class ProductVolumeBalanceEvent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The date of the event.
        /// </summary>
		[Required]
        [Description("The date of the event.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("Date", DataType="date")]
        public DateTime? Date {
            get {
                return DateField;
            } 
            set {
                DateField = value;
                NotifyPropertyChanged("Date");
            }
        }

        private DateTime? DateField; 

        /// <summary>
        /// The kind of event.
        /// </summary>
		[Required]
        [Description("The kind of event.")]
        [EnergisticsDataTypeAttribute(DataType = "BalanceEventKind")]
		[XmlElement("Kind")]
        public BalanceEventKind? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        
        private bool KindSpecifiedField = false;
        
        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }
        
        private BalanceEventKind? KindField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductVolumeDestination xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductVolumeDestination", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductVolumeDestination xsd type.")]
    public partial class ProductVolumeDestination : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the destination.
        /// </summary>
		[StringLength(64)]
        [Description("The name of the destination.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// The type of destination.
        /// </summary>
		[Description("The type of destination.")]
        [EnergisticsDataTypeAttribute(DataType = "BalanceDestinationType")]
		[XmlElement("Type")]
        public BalanceDestinationType? Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        private BalanceDestinationType? TypeField; 

        /// <summary>
        /// TypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSpecified {
            get {
                return TypeSpecifiedField;
            } 
            set {
                TypeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }

        private bool TypeSpecifiedField; 

        /// <summary>
        /// The country of the destination.
        /// </summary>
		[StringLength(64)]
        [Description("The country of the destination.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Country")]
        public string Country {
            get {
                return CountryField;
            } 
            set {
                CountryField = value;
                NotifyPropertyChanged("Country");
            }
        }

        private string CountryField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductVolumeAlert xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductVolumeAlert", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductVolumeAlert xsd type.")]
    public partial class ProductVolumeAlert : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// An XPATH to the target value within the message containing this XPATH value.
        /// </summary>
		[StringLength(2000)]
        [Description("An XPATH to the target value within the message containing this XPATH value.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Target")]
        public string Target {
            get {
                return TargetField;
            } 
            set {
                TargetField = value;
                NotifyPropertyChanged("Target");
            }
        }

        private string TargetField; 

        /// <summary>
        /// The level of the alert.
        /// </summary>
		[StringLength(64)]
        [Description("The level of the alert.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Level")]
        public string Level {
            get {
                return LevelField;
            } 
            set {
                LevelField = value;
                NotifyPropertyChanged("Level");
            }
        }

        private string LevelField; 

        /// <summary>
        /// The type of alert. For example "off specification".
        /// </summary>
		[StringLength(64)]
        [Description("The type of alert. For example \"off specification\".")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Type")]
        public string Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string TypeField; 

        /// <summary>
        /// A textual description of the alert.
        /// </summary>
		[StringLength(2000)]
        [Description("A textual description of the alert.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductVolumeParameterSet xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductVolumeParameterSet", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductVolumeParameterSet xsd type.")]
    public partial class ProductVolumeParameterSet : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the facility parameter. This should reflect the business semantics of all values in the set and not the underlying kind. For example, specify "diameter" rather than "length" or "distance".
        /// </summary>
		[Required]
        [Description("The name of the facility parameter. This should reflect the business semantics of all values in the set and not the underlying kind. For example, specify \"diameter\" rather than \"length\" or \"distance\".")]
        [EnergisticsDataTypeAttribute(DataType = "FacilityParameter")]
		[XmlElement("Name")]
        public FacilityParameter? Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                 this.NameSpecified = true;
                NotifyPropertyChanged("Name");
            }
        }

        
        private bool NameSpecifiedField = false;
        
        /// <summary>
        /// NameSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NameSpecified {
            get {
                return NameSpecifiedField;
            } 
            set {
                NameSpecifiedField = value;
                NotifyPropertyChanged("NameSpecified");
            }
        }
        
        private FacilityParameter? NameField; 

        /// <summary>
        /// The PRODML Relative Identifier (or URI) of a child of the parent facility. The identifier path is presumed to begin with the identity of the parent facility. This identifies a sub-facility which is identified within the context of the parent facilityParent2/facilityParent1/name identification hierarchy. The property is only expected to be defined for this child and not for the parent. For more information about URIs, see the Energistics Identifier Specification, which is available in the zip file when download PRODML. 
        /// </summary>
		[Description("The PRODML Relative Identifier (or URI) of a child of the parent facility. The identifier path is presumed to begin with the identity of the parent facility. This identifies a sub-facility which is identified within the context of the parent facilityParent2/facilityParent1/name identification hierarchy. The property is only expected to be defined for this child and not for the parent. For more information about URIs, see the Energistics Identifier Specification, which is available in the zip file when download PRODML.")]
        [EnergisticsDataTypeAttribute(DataType = "ProdmlRelativeIdentifier")]
		[XmlElement("ChildFacilityIdentifier", DataType="anyURI")]
        public string ChildFacilityIdentifier {
            get {
                return ChildFacilityIdentifierField;
            } 
            set {
                ChildFacilityIdentifierField = value;
                NotifyPropertyChanged("ChildFacilityIdentifier");
            }
        }

        private string ChildFacilityIdentifierField; 

        /// <summary>
        /// The port to which this parameter is assigned. This must be a port on the unit representing the parent facility of this parameter. If not specified then the parameter represents the unit.
        /// </summary>
		[StringLength(64)]
        [Description("The port to which this parameter is assigned. This must be a port on the unit representing the parent facility of this parameter. If not specified then the parameter represents the unit.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Port")]
        public string Port {
            get {
                return PortField;
            } 
            set {
                PortField = value;
                NotifyPropertyChanged("Port");
            }
        }

        private string PortField; 

        /// <summary>
        /// If the value is a measure (value with unit of measure), this defines the measurement class of the value. The units of measure for the value must conform to the list allowed by the measurement class in the unit dictionary file. Mutually exclusive with curveDefinition.
        /// </summary>
		[Description("If the value is a measure (value with unit of measure), this defines the measurement class of the value. The units of measure for the value must conform to the list allowed by the measurement class in the unit dictionary file. Mutually exclusive with curveDefinition.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasureClass")]
		[XmlElement("MeasureClass")]
        public MeasureClass? MeasureClass {
            get {
                return MeasureClassField;
            } 
            set {
                MeasureClassField = value;
                 this.MeasureClassSpecified = true;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private MeasureClass? MeasureClassField; 

        /// <summary>
        /// MeasureClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasureClassSpecified {
            get {
                return MeasureClassSpecifiedField;
            } 
            set {
                MeasureClassSpecifiedField = value;
                NotifyPropertyChanged("MeasureClassSpecified");
            }
        }

        private bool MeasureClassSpecifiedField; 

        /// <summary>
        /// The pointer to the coordinate reference system (CRS). This is needed for coordinates such as measured depth to specify the reference datum.
        /// </summary>
		[StringLength(64)]
        [Description("The pointer to the coordinate reference system (CRS). This is needed for coordinates such as measured depth to specify the reference datum.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CoordinateReferenceSystem")]
        public string CoordinateReferenceSystem {
            get {
                return CoordinateReferenceSystemField;
            } 
            set {
                CoordinateReferenceSystemField = value;
                NotifyPropertyChanged("CoordinateReferenceSystem");
            }
        }

        private string CoordinateReferenceSystemField; 

        /// <summary>
        /// Qualifies the type of parameter that is being reported.
        /// </summary>
		[Description("Qualifies the type of parameter that is being reported.")]
        [EnergisticsDataTypeAttribute(DataType = "FlowQualifier")]
		[XmlElement("Qualifier")]
        public FlowQualifier? Qualifier {
            get {
                return QualifierField;
            } 
            set {
                QualifierField = value;
                 this.QualifierSpecified = true;
                NotifyPropertyChanged("Qualifier");
            }
        }

        private FlowQualifier? QualifierField; 

        /// <summary>
        /// QualifierSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QualifierSpecified {
            get {
                return QualifierSpecifiedField;
            } 
            set {
                QualifierSpecifiedField = value;
                NotifyPropertyChanged("QualifierSpecified");
            }
        }

        private bool QualifierSpecifiedField; 

        /// <summary>
        /// Defines a specialization of the qualifier value. This should only be given if a qualifier is given.
        /// </summary>
		[Description("Defines a specialization of the qualifier value. This should only be given if a qualifier is given.")]
        [EnergisticsDataTypeAttribute(DataType = "FlowSubQualifier")]
		[XmlElement("SubQualifier")]
        public FlowSubQualifier? SubQualifier {
            get {
                return SubQualifierField;
            } 
            set {
                SubQualifierField = value;
                 this.SubQualifierSpecified = true;
                NotifyPropertyChanged("SubQualifier");
            }
        }

        private FlowSubQualifier? SubQualifierField; 

        /// <summary>
        /// SubQualifierSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SubQualifierSpecified {
            get {
                return SubQualifierSpecifiedField;
            } 
            set {
                SubQualifierSpecifiedField = value;
                NotifyPropertyChanged("SubQualifierSpecified");
            }
        }

        private bool SubQualifierSpecifiedField; 

        /// <summary>
        /// A timestamp representing the version of this data. A parameter set with a more recent timestamp will represent the "current" version.
        /// </summary>
		[Description("A timestamp representing the version of this data. A parameter set with a more recent timestamp will represent the \"current\" version.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("Version")]
        public DateTime? Version {
            get {
                return VersionField;
            } 
            set {
                VersionField = value;
                 this.VersionSpecified = true;
                NotifyPropertyChanged("Version");
            }
        }

        private DateTime? VersionField; 

        /// <summary>
        /// VersionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool VersionSpecified {
            get {
                return VersionSpecifiedField;
            } 
            set {
                VersionSpecifiedField = value;
                NotifyPropertyChanged("VersionSpecified");
            }
        }

        private bool VersionSpecifiedField; 

        /// <summary>
        /// Identifies the source of the version. This will commonly be the name of the software which created the version.
        /// </summary>
		[StringLength(64)]
        [Description("Identifies the source of the version. This will commonly be the name of the software which created the version.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("VersionSource")]
        public string VersionSource {
            get {
                return VersionSourceField;
            } 
            set {
                VersionSourceField = value;
                NotifyPropertyChanged("VersionSource");
            }
        }

        private string VersionSourceField; 

        /// <summary>
        /// The type of product that is being reported. This would be useful for something like specifying a tank product volume or level.
        /// </summary>
		[Description("The type of product that is being reported. This would be useful for something like specifying a tank product volume or level.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingProduct")]
		[XmlElement("Product")]
        public ReportingProduct? Product {
            get {
                return ProductField;
            } 
            set {
                ProductField = value;
                 this.ProductSpecified = true;
                NotifyPropertyChanged("Product");
            }
        }

        private ReportingProduct? ProductField; 

        /// <summary>
        /// ProductSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ProductSpecified {
            get {
                return ProductSpecifiedField;
            } 
            set {
                ProductSpecifiedField = value;
                NotifyPropertyChanged("ProductSpecified");
            }
        }

        private bool ProductSpecifiedField; 

        /// <summary>
        /// The type of period that is being reported.
        /// </summary>
		[Description("The type of period that is being reported.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingDurationKind")]
		[XmlElement("PeriodKind")]
        public ReportingDurationKind? PeriodKind {
            get {
                return PeriodKindField;
            } 
            set {
                PeriodKindField = value;
                 this.PeriodKindSpecified = true;
                NotifyPropertyChanged("PeriodKind");
            }
        }

        private ReportingDurationKind? PeriodKindField; 

        /// <summary>
        /// PeriodKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PeriodKindSpecified {
            get {
                return PeriodKindSpecifiedField;
            } 
            set {
                PeriodKindSpecifiedField = value;
                NotifyPropertyChanged("PeriodKindSpecified");
            }
        }

        private bool PeriodKindSpecifiedField; 

        /// <summary>
        /// A comment about the parameter.
        /// </summary>
		[StringLength(2000)]
        [Description("A comment about the parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// A parameter value, possibly at a time. If a time is not given then only one parameter should be given. If a time is specified with one value then time should be specified for all values. Each value in a time series should be of the same underling kind of value (for example, a length measure).
        /// </summary>
		[Required]
        [Description("A parameter value, possibly at a time. If a time is not given then only one parameter should be given. If a time is specified with one value then time should be specified for all values. Each value in a time series should be of the same  underling kind of value (for example, a length measure).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeParameterValue")]
		[XmlElement("Parameter")]
        public List<ProductVolumeParameterValue> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(ParameterField!=null)
                 return ParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeParameterValue> ParameterField; 

        /// <summary>
        /// If the value is a curve, this defines the meaning of the one column in the table representing the curve. Mutually exclusive with measureClass.
        /// </summary>
		[Description("If the value is a curve, this defines the meaning of the one column  in the table representing the curve. Mutually exclusive with measureClass.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CurveDefinition")]
		[XmlElement("CurveDefinition")]
        public List<CurveDefinition> CurveDefinition {
            get {
                return CurveDefinitionField;
            } 
            set {
                CurveDefinitionField = value;
                NotifyPropertyChanged("CurveDefinition");
            }
        }

         /// <summary>
         /// bool to indicate if CurveDefinition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CurveDefinitionSpecified
         {
             get {
             if(CurveDefinitionField!=null)
                 return CurveDefinitionField.Count>0?true:false;
             else return false;
             }
         }
        private List<CurveDefinition> CurveDefinitionField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductVolumeParameterValue xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductVolumeParameterValue", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductVolumeParameterValue xsd type.")]
    public partial class ProductVolumeParameterValue : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[Description("The date and time at which the parameter applies. If no time is specified then the value is static.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTim")]
        public DateTime? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? DTimField; 

        /// <summary>
        /// DTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DTimSpecifiedField;
            } 
            set {
                DTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool DTimSpecifiedField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[Description("The date and time at which the parameter no longer applies. The \"active\" time interval is inclusive of this point. If dTimEnd is given then dTim shall also be given.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? DTimEndField; 

        /// <summary>
        /// DTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DTimEndSpecifiedField;
            } 
            set {
                DTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool DTimEndSpecifiedField; 

        /// <summary>
        /// Port property
        /// </summary>
		[StringLength(64)]
        [Description("A port related to the parameter. If a port is given then the corresponding unit usually must be given. For example, an \"offset along network\" parameter must specify a port from which the offset was measured.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Port")]
        public string Port {
            get {
                return PortField;
            } 
            set {
                PortField = value;
                NotifyPropertyChanged("Port");
            }
        }

        private string PortField; 

        /// <summary>
        /// Unit property
        /// </summary>
		[StringLength(64)]
        [Description("A unit related to the parameter. For example, an \"offset along network\" parameter must specify a port (on a unit) from which the offset was measured.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Unit")]
        public string Unit {
            get {
                return UnitField;
            } 
            set {
                UnitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private string UnitField; 

        /// <summary>
        /// Alert property
        /// </summary>
		[Description("An indication of some sort of abnormal condition relative this parameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductVolumeAlert")]
		[XmlElement("Alert")]
        public ProductVolumeAlert Alert {
            get {
                return AlertField;
            } 
            set {
                AlertField = value;
                NotifyPropertyChanged("Alert");
            }
        }

        private ProductVolumeAlert AlertField; 

        /// <summary>
        /// MeasureDataType property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractMeasureDataType")]
		[XmlElement("MeasureDataType")]
        public List<AbstractMeasureDataType> MeasureDataType {
            get {
                return MeasureDataTypeField;
            } 
            set {
                MeasureDataTypeField = value;
                NotifyPropertyChanged("MeasureDataType");
            }
        }

         /// <summary>
         /// bool to indicate if MeasureDataType has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MeasureDataTypeSpecified
         {
             get {
             if(MeasureDataTypeField!=null)
                 return MeasureDataTypeField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractMeasureDataType> MeasureDataTypeField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractMeasureDataType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeneralQualifiedMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(KindQualifiedString))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerQualifiedCount))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CurveData))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractMeasureDataType", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the AbstractMeasureDataType xsd type.")]
    public abstract partial class AbstractMeasureDataType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Item property
        /// </summary>
		
		[XmlElement("Item")]
        public Object Item {
            get {
                return ItemField;
            } 
            set {
                ItemField = value;
                NotifyPropertyChanged("Item");
            }
        }

        private Object ItemField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeneralQualifiedMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeneralQualifiedMeasure", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the GeneralQualifiedMeasure xsd type.")]
    public partial class GeneralQualifiedMeasure : AbstractMeasureDataType, INotifyPropertyChanged
    {

		/// <summary>
        /// An indicator of the quality of the value.
        /// </summary>
		[Description("An indicator of the quality of the value.")]
        [EnergisticsDataTypeAttribute(DataType = "ValueStatus")]
        [XmlAttribute("status")]
		
        public ValueStatus Status {
            get {
                return statusField;
            } 
            set {
                statusField = value;
                 this.StatusSpecified = true;
                NotifyPropertyChanged("Status");
            }
        }

        private ValueStatus statusField; 

        /// <summary>
        /// statusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusSpecified {
            get {
                return statusSpecifiedField;
            } 
            set {
                statusSpecifiedField = value;
                NotifyPropertyChanged("StatusSpecified");
            }
        }

        private bool statusSpecifiedField; 

		/// <summary>
        /// The kind of the value component. For example, "X" in a tuple of X and Y.
        /// </summary>
		[StringLength(64)]
        [Description("The kind of the value component. For example, \"X\" in a tuple of X and Y.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("componentReference")]
		
        public string ComponentReference {
            get {
                return componentReferenceField;
            } 
            set {
                componentReferenceField = value;
                NotifyPropertyChanged("ComponentReference");
            }
        }

        private string componentReferenceField; 

		/// <summary>
        /// The unit of measure for the value. This value must conform to the values allowed by the measure class.
        /// </summary>
		[Required]
        [StringLength(32)]
        [Description("The unit of measure for the value. This value must conform to the values allowed by the measure class.")]
        [EnergisticsDataTypeAttribute(DataType = "UomEnum")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the KindQualifiedString xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="KindQualifiedString", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the KindQualifiedString xsd type.")]
    public partial class KindQualifiedString : AbstractMeasureDataType, INotifyPropertyChanged
    {

		/// <summary>
        /// An indicator of the quality of the value.
        /// </summary>
		[Description("An indicator of the quality of the value.")]
        [EnergisticsDataTypeAttribute(DataType = "ValueStatus")]
        [XmlAttribute("status")]
		
        public ValueStatus Status {
            get {
                return statusField;
            } 
            set {
                statusField = value;
                 this.StatusSpecified = true;
                NotifyPropertyChanged("Status");
            }
        }

        private ValueStatus statusField; 

        /// <summary>
        /// statusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusSpecified {
            get {
                return statusSpecifiedField;
            } 
            set {
                statusSpecifiedField = value;
                NotifyPropertyChanged("StatusSpecified");
            }
        }

        private bool statusSpecifiedField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StringData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StringData", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the StringData xsd type.")]
    public partial class StringData : AbstractMeasureDataType, INotifyPropertyChanged
    {

        /// <summary>
        /// The value of a dependent (data) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is false. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.
        /// </summary>
		[Required]
        [Description("The value of a dependent (data) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is false. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "KindQualifiedString")]
		[XmlElement("StringValue")]
        public KindQualifiedString StringValue {
            get {
                return StringValueField;
            } 
            set {
                StringValueField = value;
                NotifyPropertyChanged("StringValue");
            }
        }

        private KindQualifiedString StringValueField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IntegerQualifiedCount xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IntegerQualifiedCount", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the IntegerQualifiedCount xsd type.")]
    public partial class IntegerQualifiedCount : AbstractMeasureDataType, INotifyPropertyChanged
    {

		/// <summary>
        /// An indicator of the quality of the value.
        /// </summary>
		[Description("An indicator of the quality of the value.")]
        [EnergisticsDataTypeAttribute(DataType = "ValueStatus")]
        [XmlAttribute("status")]
		
        public ValueStatus Status {
            get {
                return statusField;
            } 
            set {
                statusField = value;
                 this.StatusSpecified = true;
                NotifyPropertyChanged("Status");
            }
        }

        private ValueStatus statusField; 

        /// <summary>
        /// statusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusSpecified {
            get {
                return statusSpecifiedField;
            } 
            set {
                statusSpecifiedField = value;
                NotifyPropertyChanged("StatusSpecified");
            }
        }

        private bool statusSpecifiedField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IntegerData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IntegerData", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the IntegerData xsd type.")]
    public partial class IntegerData : AbstractMeasureDataType, INotifyPropertyChanged
    {

        /// <summary>
        /// The value of a dependent (data) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is false. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.
        /// </summary>
		[Required]
        [Description("The value of a dependent (data) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is false. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IntegerQualifiedCount")]
		[XmlElement("IntegerValue")]
        public IntegerQualifiedCount IntegerValue {
            get {
                return IntegerValueField;
            } 
            set {
                IntegerValueField = value;
                NotifyPropertyChanged("IntegerValue");
            }
        }

        private IntegerQualifiedCount IntegerValueField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CurveData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CurveData", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the CurveData xsd type.")]
    public partial class CurveData : AbstractMeasureDataType, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CurveData class.
        /// </summary>
        public CurveData() {}

        /// <summary>
        /// Initializes a new instance of the CurveData class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CurveData(List<double> value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// The value of an independent (index) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is true. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.
        /// </summary>
		[Required]
        [Description("The value of an independent (index) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is true. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("Index")]
        public List<long> Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

         /// <summary>
         /// bool to indicate if Index has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IndexSpecified
         {
             get {
             if(IndexField!=null)
                 return IndexField.Count>0?true:false;
             else return false;
             }
         }
        private List<long> IndexField; 

        /// <summary>
        /// The value of a dependent (data) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is false. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.
        /// </summary>
		[Required]
        [Description("The value of a dependent (data) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is false. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Value")]
        public List<double> Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

         /// <summary>
         /// bool to indicate if Value has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ValueSpecified
         {
             get {
             if(ValueField!=null)
                 return ValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<double> ValueField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CurveDefinition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CurveDefinition", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the CurveDefinition xsd type.")]
    public partial class CurveDefinition : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The order of the value in the index or data tuple. If isIndex is true, this is the order of the (independent) index element. If isIndex is false, this is the order of the (dependent) value element.
        /// </summary>
		[Required]
        [Description("The order of the value in the index or data tuple. If isIndex is true, this is the order of the (independent) index element. If isIndex is false, this is the order of the (dependent) value element.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("Order")]
        public long? Order {
            get {
                return OrderField;
            } 
            set {
                OrderField = value;
                NotifyPropertyChanged("Order");
            }
        }

        private long? OrderField; 

        /// <summary>
        /// The name of the variable in this curve.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the variable in this curve.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Parameter")]
        public string Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

        private string ParameterField; 

        /// <summary>
        /// True (equal "1" or "true") indicates that this is an independent variable in this curve. At least one column column should be flagged as independent.
        /// </summary>
		[Description("True (equal \"1\" or \"true\") indicates that this is an independent variable in this curve. At least one column column should be flagged as independent.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsIndex")]
        public bool? IsIndex {
            get {
                return IsIndexField;
            } 
            set {
                IsIndexField = value;
                 this.IsIndexSpecified = true;
                NotifyPropertyChanged("IsIndex");
            }
        }

        private bool? IsIndexField; 

        /// <summary>
        /// IsIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsIndexSpecified {
            get {
                return IsIndexSpecifiedField;
            } 
            set {
                IsIndexSpecifiedField = value;
                NotifyPropertyChanged("IsIndexSpecified");
            }
        }

        private bool IsIndexSpecifiedField; 

        /// <summary>
        /// The measure class of the variable. This defines which units of measure are valid for the value.
        /// </summary>
		[Required]
        [Description("The measure class of the variable. This defines which units of measure are valid for the value.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasureClass")]
		[XmlElement("MeasureClass")]
        public MeasureClass? MeasureClass {
            get {
                return MeasureClassField;
            } 
            set {
                MeasureClassField = value;
                 this.MeasureClassSpecified = true;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        
        private bool MeasureClassSpecifiedField = false;
        
        /// <summary>
        /// MeasureClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasureClassSpecified {
            get {
                return MeasureClassSpecifiedField;
            } 
            set {
                MeasureClassSpecifiedField = value;
                NotifyPropertyChanged("MeasureClassSpecified");
            }
        }
        
        private MeasureClass? MeasureClassField; 

        /// <summary>
        /// The unit of measure of the variable. The unit of measure must match a unit allowed by the measure class.
        /// </summary>
		[Required]
        [StringLength(32)]
        [Description("The unit of measure of the variable. The unit of measure must match a unit allowed by the measure class.")]
        [EnergisticsDataTypeAttribute(DataType = "UomEnum")]
		[XmlElement("Unit")]
        public string Unit {
            get {
                return UnitField;
            } 
            set {
                UnitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private string UnitField; 

		/// <summary>
        /// A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for this data element. It is not globally unique (not a uuid) and only need be unique within the context of the parent top-level object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the ProductFlowModel xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the ProductFlowModel xsd type.")]
    public partial class ProductFlowModel : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the facility that is represented by this model. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("The name of the facility that is represented by this model. The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("Installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return InstallationField;
            } 
            set {
                InstallationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct InstallationField; 

        /// <summary>
        /// The name and type of a facility whose context is relevant to the represented installation.
        /// </summary>
		[Description("The name and type of a facility whose context is relevant to the represented installation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FacilityIdentifierStruct")]
		[XmlElement("ContextFacility")]
        public List<FacilityIdentifierStruct> ContextFacility {
            get {
                return ContextFacilityField;
            } 
            set {
                ContextFacilityField = value;
                NotifyPropertyChanged("ContextFacility");
            }
        }

         /// <summary>
         /// bool to indicate if ContextFacility has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContextFacilitySpecified
         {
             get {
             if(ContextFacilityField!=null)
                 return ContextFacilityField.Count>0?true:false;
             else return false;
             }
         }
        private List<FacilityIdentifierStruct> ContextFacilityField; 

        /// <summary>
        /// The date and time of the start of validity for this model.
        /// </summary>
		[Description("The date and time of the start of validity for this model.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimStart")]
        public DateTime? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? DTimStartField; 

        /// <summary>
        /// DTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DTimStartSpecifiedField;
            } 
            set {
                DTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool DTimStartSpecifiedField; 

        /// <summary>
        /// The date and time of the termination of validity for this model.
        /// </summary>
		[Description("The date and time of the termination of validity for this model.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DTimEnd")]
        public DateTime? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? DTimEndField; 

        /// <summary>
        /// DTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DTimEndSpecifiedField;
            } 
            set {
                DTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool DTimEndSpecifiedField; 

        /// <summary>
        /// The time for which "currently existing" data is desired from the network. All connections (and related data) existing at this time (i.e., start and end bracket this value) will be returned if requested. The existence time is a server query parameter. 
        /// </summary>
		[Description("The time for which \"currently existing\" data is desired from the network. All connections (and related data) existing at this time (i.e., start and end bracket this value) will  be returned if requested. The existence time is a server query parameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQualifiedDateTime")]
		[XmlElement("ExistenceTime")]
        public EndpointQualifiedDateTime ExistenceTime {
            get {
                return ExistenceTimeField;
            } 
            set {
                ExistenceTimeField = value;
                NotifyPropertyChanged("ExistenceTime");
            }
        }

        private EndpointQualifiedDateTime ExistenceTimeField; 

        /// <summary>
        /// The minimum time index contained within the report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a "get" result. 
        /// </summary>
		[Description("The minimum time index contained within the report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a \"get\" result.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQualifiedDateTime")]
		[XmlElement("DTimMin")]
        public EndpointQualifiedDateTime DateTimeMin {
            get {
                return DTimMinField;
            } 
            set {
                DTimMinField = value;
                NotifyPropertyChanged("DateTimeMin");
            }
        }

        private EndpointQualifiedDateTime DTimMinField; 

        /// <summary>
        /// The maximum time index contained within the report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a "get" result. 
        /// </summary>
		[Description("The maximum time index contained within the report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a \"get\" result.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQualifiedDateTime")]
		[XmlElement("DTimMax")]
        public EndpointQualifiedDateTime DateTimeMax {
            get {
                return DTimMaxField;
            } 
            set {
                DTimMaxField = value;
                NotifyPropertyChanged("DateTimeMax");
            }
        }

        private EndpointQualifiedDateTime DTimMaxField; 

        /// <summary>
        /// A descriptive remark about the model.
        /// </summary>
		[StringLength(2000)]
        [Description("A descriptive remark about the model.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// Defines the external port in another Product Flow Model to which an external port in this model is connected. An external port should be connected to an external port with the opposite direction. The connected external port must be in another Product Flow Model. These connections should always be defined on a one-to-one basis. For example, if a facility may receive input from multiple other facilities then a separate input port should be defined for each of those facilities. This allows any question about mass balancing to be contained within each individual model. The external port name must match the name of an external port on the network that represents this model.
        /// </summary>
		[Description("Defines the external port in another Product Flow Model to which  an external port in this model is connected. An external port should be connected to an external port with the opposite direction. The connected external port must be in another Product Flow Model. These connections should always be defined on a one-to-one basis. For example, if a facility may receive input from multiple other facilities then a separate input port should be defined for each of those facilities. This allows any question about mass balancing to be contained  within each individual model. The external port name must match the name of an external port on the network that represents this model.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowExternalReference")]
		[XmlElement("ExternalConnect")]
        public List<ProductFlowExternalReference> ExternalConnect {
            get {
                return ExternalConnectField;
            } 
            set {
                ExternalConnectField = value;
                NotifyPropertyChanged("ExternalConnect");
            }
        }

         /// <summary>
         /// bool to indicate if ExternalConnect has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExternalConnectSpecified
         {
             get {
             if(ExternalConnectField!=null)
                 return ExternalConnectField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowExternalReference> ExternalConnectField; 

        /// <summary>
        /// The description of one named network within this model. Each model is self contained but may reference other newtorks for defining internal detail. One of the networks must represent this model.
        /// </summary>
		[Required]
        [Description("The description of one named network within this model. Each model is self contained but may reference other newtorks for defining internal detail. One of the networks must represent this model.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowNetwork")]
		[XmlElement("Network")]
        public List<ProductFlowNetwork> Network {
            get {
                return NetworkField;
            } 
            set {
                NetworkField = value;
                NotifyPropertyChanged("Network");
            }
        }

         /// <summary>
         /// bool to indicate if Network has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NetworkSpecified
         {
             get {
             if(NetworkField!=null)
                 return NetworkField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowNetwork> NetworkField; 


    } //here

    /// <summary>
    /// This class represents the GraphicalInformationSet xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the GraphicalInformationSet xsd type.")]
    public partial class GraphicalInformationSet : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// GraphicalInformation property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractGraphicalInformation")]
		[XmlElement("GraphicalInformation")]
        public List<AbstractGraphicalInformation> GraphicalInformation {
            get {
                return GraphicalInformationField;
            } 
            set {
                GraphicalInformationField = value;
                NotifyPropertyChanged("GraphicalInformation");
            }
        }

         /// <summary>
         /// bool to indicate if GraphicalInformation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GraphicalInformationSpecified
         {
             get {
             if(GraphicalInformationField!=null)
                 return GraphicalInformationField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractGraphicalInformation> GraphicalInformationField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractGraphicalInformation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractGraphicalInformation", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractGraphicalInformation xsd type.")]
    public abstract partial class AbstractGraphicalInformation : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// TargetObject property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("TargetObject")]
        public DataObjectReference TargetObject {
            get {
                return TargetObjectField;
            } 
            set {
                TargetObjectField = value;
                NotifyPropertyChanged("TargetObject");
            }
        }

        private DataObjectReference TargetObjectField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the DataAssuranceRecord xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the DataAssuranceRecord xsd type.")]
    public partial class DataAssuranceRecord : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// PolicyId property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Identifier of the policy whose conformance is being described.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PolicyId")]
        public string PolicyId {
            get {
                return PolicyIdField;
            } 
            set {
                PolicyIdField = value;
                NotifyPropertyChanged("PolicyId");
            }
        }

        private string PolicyIdField; 

        /// <summary>
        /// PolicyName property
        /// </summary>
		[StringLength(2000)]
        [Description("Human-readable name of the policy")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("PolicyName")]
        public string PolicyName {
            get {
                return PolicyNameField;
            } 
            set {
                PolicyNameField = value;
                NotifyPropertyChanged("PolicyName");
            }
        }

        private string PolicyNameField; 

        /// <summary>
        /// ReferencedElementName property
        /// </summary>
		[StringLength(64)]
        [Description("If the Policy applies to a single element within the referenced data object this attribute holds its element name.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ReferencedElementName")]
        public string ReferencedElementName {
            get {
                return ReferencedElementNameField;
            } 
            set {
                ReferencedElementNameField = value;
                NotifyPropertyChanged("ReferencedElementName");
            }
        }

        private string ReferencedElementNameField; 

        /// <summary>
        /// ReferencedElementUid property
        /// </summary>
		[StringLength(64)]
        [Description("If the Policy applies to a single occurrence of a recurring element within the referenced data object this attribute holds its uid.  The name of the recurring element would be in the ReferencedElementName.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ReferencedElementUid")]
        public string ReferencedElementUid {
            get {
                return ReferencedElementUidField;
            } 
            set {
                ReferencedElementUidField = value;
                NotifyPropertyChanged("ReferencedElementUid");
            }
        }

        private string ReferencedElementUidField; 

        /// <summary>
        /// Origin property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Agent which checked the data for conformance with the policy. This could be a person or an automated computer process or any number of other things.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Origin")]
        public string Origin {
            get {
                return OriginField;
            } 
            set {
                OriginField = value;
                NotifyPropertyChanged("Origin");
            }
        }

        private string OriginField; 

        /// <summary>
        /// Conformance property
        /// </summary>
		[Required]
        [Description("Yes/no flag indicating whether this particular data ???? conforms with the policy or not.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Conformance")]
        public bool? Conformance {
            get {
                return ConformanceField;
            } 
            set {
                ConformanceField = value;
                NotifyPropertyChanged("Conformance");
            }
        }

        private bool? ConformanceField; 

        /// <summary>
        /// Date property
        /// </summary>
		[Required]
        [Description("Date the policy was last checked. This is the date for which the Conformance value is valid.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("Date")]
        public Timestamp? Date {
            get {
                return DateField;
            } 
            set {
                DateField = value;
                 this.DateSpecified = true;
                NotifyPropertyChanged("Date");
            }
        }

        
        private bool DateSpecifiedField = false;
        
        /// <summary>
        /// DateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateSpecified {
            get {
                return DateSpecifiedField;
            } 
            set {
                DateSpecifiedField = value;
                NotifyPropertyChanged("DateSpecified");
            }
        }
        
        private Timestamp? DateField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// IndexRange property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IndexRange")]
		[XmlElement("IndexRange")]
        public IndexRange IndexRange {
            get {
                return IndexRangeField;
            } 
            set {
                IndexRangeField = value;
                NotifyPropertyChanged("IndexRange");
            }
        }

        private IndexRange IndexRangeField; 

        /// <summary>
        /// FailingRules property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FailingRule")]
		[XmlElement("FailingRules")]
        public List<FailingRule> FailingRules {
            get {
                return FailingRulesField;
            } 
            set {
                FailingRulesField = value;
                NotifyPropertyChanged("FailingRules");
            }
        }

         /// <summary>
         /// bool to indicate if FailingRules has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FailingRulesSpecified
         {
             get {
             if(FailingRulesField!=null)
                 return FailingRulesField.Count>0?true:false;
             else return false;
             }
         }
        private List<FailingRule> FailingRulesField; 

        /// <summary>
        /// ReferencedData property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ReferencedData")]
        public DataObjectReference ReferencedData {
            get {
                return ReferencedDataField;
            } 
            set {
                ReferencedDataField = value;
                NotifyPropertyChanged("ReferencedData");
            }
        }

        private DataObjectReference ReferencedDataField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IndexRange xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IndexRange", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the IndexRange xsd type.")]
    public partial class IndexRange : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// IndexMinimum property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The minimum index for the range over which the referenced data's conformance with the policy is being assessed.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("IndexMinimum")]
        public string IndexMinimum {
            get {
                return IndexMinimumField;
            } 
            set {
                IndexMinimumField = value;
                NotifyPropertyChanged("IndexMinimum");
            }
        }

        private string IndexMinimumField; 

        /// <summary>
        /// IndexMaximum property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The maximum index for the range over which the referenced data's conformance with the policy is being assessed.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("IndexMaximum")]
        public string IndexMaximum {
            get {
                return IndexMaximumField;
            } 
            set {
                IndexMaximumField = value;
                NotifyPropertyChanged("IndexMaximum");
            }
        }

        private string IndexMaximumField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FailingRule xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FailingRule", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the FailingRule xsd type.")]
    public partial class FailingRule : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// RuleId property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Identifier of the atomic rule being checked against the data.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("RuleId")]
        public string RuleId {
            get {
                return RuleIdField;
            } 
            set {
                RuleIdField = value;
                NotifyPropertyChanged("RuleId");
            }
        }

        private string RuleIdField; 

        /// <summary>
        /// RuleName property
        /// </summary>
		[StringLength(2000)]
        [Description("Human-readable name of the atomic rule being checked against the data.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("RuleName")]
        public string RuleName {
            get {
                return RuleNameField;
            } 
            set {
                RuleNameField = value;
                NotifyPropertyChanged("RuleName");
            }
        }

        private string RuleNameField; 

        /// <summary>
        /// Severity property
        /// </summary>
		[StringLength(64)]
        [Description("Severity of the failure. This could be used to indicate that a rule is a high-priority rule whose failure is considered as severe or could be used to indicate just how badly a rule was contravened.  The meaning of this field should be standardized within a company to maximize its utility.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Severity")]
        public string Severity {
            get {
                return SeverityField;
            } 
            set {
                SeverityField = value;
                NotifyPropertyChanged("Severity");
            }
        }

        private string SeverityField; 

        /// <summary>
        /// FailingRuleExtensions property
        /// </summary>
		[Description("This allows extending the FailingRule class with as many arbitrary name-value pairs as is required at run-time.  Uses for this might include why the rule failed or by how much.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("FailingRuleExtensions")]
        public List<ExtensionNameValue> FailingRuleExtensions {
            get {
                return FailingRuleExtensionsField;
            } 
            set {
                FailingRuleExtensionsField = value;
                NotifyPropertyChanged("FailingRuleExtensions");
            }
        }

         /// <summary>
         /// bool to indicate if FailingRuleExtensions has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FailingRuleExtensionsSpecified
         {
             get {
             if(FailingRuleExtensionsField!=null)
                 return FailingRuleExtensionsField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> FailingRuleExtensionsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the ProjectedCrs xsd type.")]
    public partial class ProjectedCrs : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// AxisOrder property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AxisOrder2d")]
		[XmlElement("AxisOrder")]
        public AxisOrder2d? AxisOrder {
            get {
                return AxisOrderField;
            } 
            set {
                AxisOrderField = value;
                 this.AxisOrderSpecified = true;
                NotifyPropertyChanged("AxisOrder");
            }
        }

        
        private bool AxisOrderSpecifiedField = false;
        
        /// <summary>
        /// AxisOrderSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AxisOrderSpecified {
            get {
                return AxisOrderSpecifiedField;
            } 
            set {
                AxisOrderSpecifiedField = value;
                NotifyPropertyChanged("AxisOrderSpecified");
            }
        }
        
        private AxisOrder2d? AxisOrderField; 

        /// <summary>
        /// AbstractProjectedCrs property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractProjectedCrs")]
		[XmlElement("AbstractProjectedCrs")]
        public AbstractProjectedCrs AbstractProjectedCrs {
            get {
                return AbstractProjectedCrsField;
            } 
            set {
                AbstractProjectedCrsField = value;
                NotifyPropertyChanged("AbstractProjectedCrs");
            }
        }

        private AbstractProjectedCrs AbstractProjectedCrsField; 

		/// <summary>
        /// uom property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "LengthUomExt")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractProjectedCrs xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedWktCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedUnknownCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedLocalAuthorityCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedGmlCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedEpsgCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractProjectedCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractProjectedCrs xsd type.")]
    public abstract partial class AbstractProjectedCrs : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedWktCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedWktCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedWktCrs xsd type.")]
    public partial class ProjectedWktCrs : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// WellKnownText property
        /// </summary>
		[Required]
        [Description("ISO 19162 compliant well known text of the CRS")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("WellKnownText")]
        public string WellKnownText {
            get {
                return WellKnownTextField;
            } 
            set {
                WellKnownTextField = value;
                NotifyPropertyChanged("WellKnownText");
            }
        }

        private string WellKnownTextField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedUnknownCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedUnknownCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedUnknownCrs xsd type.")]
    public partial class ProjectedUnknownCrs : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// Unknown property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Unknown")]
        public string Unknown {
            get {
                return UnknownField;
            } 
            set {
                UnknownField = value;
                NotifyPropertyChanged("Unknown");
            }
        }

        private string UnknownField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedLocalAuthorityCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedLocalAuthorityCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedLocalAuthorityCrs xsd type.")]
    public partial class ProjectedLocalAuthorityCrs : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// LocalAuthorityCrsName property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AuthorityQualifiedName")]
		[XmlElement("LocalAuthorityCrsName")]
        public AuthorityQualifiedName LocalAuthorityCrsName {
            get {
                return LocalAuthorityCrsNameField;
            } 
            set {
                LocalAuthorityCrsNameField = value;
                NotifyPropertyChanged("LocalAuthorityCrsName");
            }
        }

        private AuthorityQualifiedName LocalAuthorityCrsNameField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedGmlCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedGmlCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedGmlCrs xsd type.")]
    public partial class ProjectedGmlCrs : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// GmlProjectedCrsDefinition property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ProjectedCRSType")]
		[XmlElement("GmlProjectedCrsDefinition")]
        public ProjectedCRSType GmlProjectedCrsDefinition {
            get {
                return GmlProjectedCrsDefinitionField;
            } 
            set {
                GmlProjectedCrsDefinitionField = value;
                NotifyPropertyChanged("GmlProjectedCrsDefinition");
            }
        }

        private ProjectedCRSType GmlProjectedCrsDefinitionField; 


    } //here
    }

    /// <summary>
    /// This class represents the ProjectedCRSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ProjectedCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the ProjectedCRSType xsd type.")]
    public partial class ProjectedCRSType : AbstractGeneralDerivedCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// Item property
        /// </summary>
		[ComponentElement]
		[XmlElement("baseGeodeticCRS")]
        public GeodeticCRSPropertyType Item {
            get {
                return ItemField;
            } 
            set {
                ItemField = value;
                NotifyPropertyChanged("Item");
            }
        }

        private GeodeticCRSPropertyType ItemField; 

        /// <summary>
        /// cartesianCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("cartesianCS")]
        public CartesianCSPropertyType CartesianCS {
            get {
                return cartesianCSField;
            } 
            set {
                cartesianCSField = value;
                NotifyPropertyChanged("CartesianCS");
            }
        }

        private CartesianCSPropertyType cartesianCSField; 


    } //here

    /// <summary>
    /// This class represents the GeodeticCRSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("baseGeodeticCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticCRSPropertyType xsd type.")]
    public partial class GeodeticCRSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// GeodeticCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("GeodeticCRS")]
        public GeodeticCRSType GeodeticCRS {
            get {
                return GeodeticCRSField;
            } 
            set {
                GeodeticCRSField = value;
                NotifyPropertyChanged("GeodeticCRS");
            }
        }

        private GeodeticCRSType GeodeticCRSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the GeodeticCRSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("GeodeticCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticCRSType xsd type.")]
    public partial class GeodeticCRSType : AbstractCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// cartesianCS property
        /// </summary>
        [ComponentElement]
        [XmlElement("cartesianCS")]
        public CartesianCSPropertyType CartesianCS {
            get {
                return cartesianCSField;
            } 
            set {
                cartesianCSField = value;
                CartesianCSSpecified = (value!=null);
                NotifyPropertyChanged("CartesianCS");
            }
        }

        private CartesianCSPropertyType cartesianCSField; 
        private bool cartesianCSSpecified = false; 

        /// <summary>
        /// bool to indicate if CartesianCS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool CartesianCSSpecified
        {
            get {
                return cartesianCSSpecified;
            }
            set {
                cartesianCSSpecified= value;
            }
        }

        /// <summary>
        /// ellipsoidalCS property
        /// </summary>
        [ComponentElement]
        [XmlElement("ellipsoidalCS")]
        public EllipsoidalCSPropertyType EllipsoidalCS {
            get {
                return ellipsoidalCSField;
            } 
            set {
                ellipsoidalCSField = value;
                EllipsoidalCSSpecified = (value!=null);
                NotifyPropertyChanged("EllipsoidalCS");
            }
        }

        private EllipsoidalCSPropertyType ellipsoidalCSField; 
        private bool ellipsoidalCSSpecified = false; 

        /// <summary>
        /// bool to indicate if EllipsoidalCS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool EllipsoidalCSSpecified
        {
            get {
                return ellipsoidalCSSpecified;
            }
            set {
                ellipsoidalCSSpecified= value;
            }
        }

        /// <summary>
        /// sphericalCS property
        /// </summary>
        [ComponentElement]
        [XmlElement("sphericalCS")]
        public SphericalCSPropertyType SphericalCS {
            get {
                return sphericalCSField;
            } 
            set {
                sphericalCSField = value;
                SphericalCSSpecified = (value!=null);
                NotifyPropertyChanged("SphericalCS");
            }
        }

        private SphericalCSPropertyType sphericalCSField; 
        private bool sphericalCSSpecified = false; 

        /// <summary>
        /// bool to indicate if SphericalCS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SphericalCSSpecified
        {
            get {
                return sphericalCSSpecified;
            }
            set {
                sphericalCSSpecified= value;
            }
        }


        /// <summary>
        /// geodeticDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("geodeticDatum")]
        public GeodeticDatumPropertyType GeodeticDatum {
            get {
                return geodeticDatumField;
            } 
            set {
                geodeticDatumField = value;
                NotifyPropertyChanged("GeodeticDatum");
            }
        }

        private GeodeticDatumPropertyType geodeticDatumField; 


    } //here

    /// <summary>
    /// This class represents the CartesianCSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("cartesianCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CartesianCSPropertyType xsd type.")]
    public partial class CartesianCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CartesianCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("CartesianCS")]
        public CartesianCSType CartesianCS {
            get {
                return CartesianCSField;
            } 
            set {
                CartesianCSField = value;
                NotifyPropertyChanged("CartesianCS");
            }
        }

        private CartesianCSType CartesianCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CartesianCSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("CartesianCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CartesianCSType xsd type.")]
    public partial class CartesianCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the AbstractCoordinateSystemType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractCoordinateSystem", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractCoordinateSystemType xsd type.")]
    public abstract partial class AbstractCoordinateSystemType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// axis property
        /// </summary>
		[RecurringElement]
		[XmlElement("axis")]
        public List<CoordinateSystemAxisPropertyType> Axis {
            get {
                return axisField;
            } 
            set {
                axisField = value;
                NotifyPropertyChanged("Axis");
            }
        }

         /// <summary>
         /// bool to indicate if Axis has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AxisSpecified
         {
             get {
             if(axisField!=null)
                 return axisField.Count>0?true:false;
             else return false;
             }
         }
        private List<CoordinateSystemAxisPropertyType> axisField; 

		/// <summary>
        /// aggregationType property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "AggregationType")]
        [XmlAttribute("aggregationType")]
		
        public AggregationType AggregationType {
            get {
                return aggregationTypeField;
            } 
            set {
                aggregationTypeField = value;
                 this.AggregationTypeSpecified = true;
                NotifyPropertyChanged("AggregationType");
            }
        }

        private AggregationType aggregationTypeField; 

        /// <summary>
        /// aggregationTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AggregationTypeSpecified {
            get {
                return aggregationTypeSpecifiedField;
            } 
            set {
                aggregationTypeSpecifiedField = value;
                NotifyPropertyChanged("AggregationTypeSpecified");
            }
        }

        private bool aggregationTypeSpecifiedField; 


    } //here

    /// <summary>
    /// This class represents the CoordinateSystemAxisPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("axis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CoordinateSystemAxisPropertyType xsd type.")]
    public partial class CoordinateSystemAxisPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CoordinateSystemAxis property
        /// </summary>
		[ComponentElement]
		[XmlElement("CoordinateSystemAxis")]
        public CoordinateSystemAxisType CoordinateSystemAxis {
            get {
                return CoordinateSystemAxisField;
            } 
            set {
                CoordinateSystemAxisField = value;
                NotifyPropertyChanged("CoordinateSystemAxis");
            }
        }

        private CoordinateSystemAxisType CoordinateSystemAxisField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CoordinateSystemAxisType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("CoordinateSystemAxis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CoordinateSystemAxisType xsd type.")]
    public partial class CoordinateSystemAxisType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// axisAbbrev property
        /// </summary>
		[ComponentElement]
		[XmlElement("axisAbbrev")]
        public CodeType AxisAbbrev {
            get {
                return axisAbbrevField;
            } 
            set {
                axisAbbrevField = value;
                NotifyPropertyChanged("AxisAbbrev");
            }
        }

        private CodeType axisAbbrevField; 

        /// <summary>
        /// axisDirection property
        /// </summary>
		[ComponentElement]
		[XmlElement("axisDirection")]
        public CodeWithAuthorityType AxisDirection {
            get {
                return axisDirectionField;
            } 
            set {
                axisDirectionField = value;
                NotifyPropertyChanged("AxisDirection");
            }
        }

        private CodeWithAuthorityType axisDirectionField; 

        /// <summary>
        /// minimumValue property
        /// </summary>
		
		[XmlElement("minimumValue")]
        public double? MinimumValue {
            get {
                return minimumValueField;
            } 
            set {
                minimumValueField = value;
                 this.MinimumValueSpecified = true;
                NotifyPropertyChanged("MinimumValue");
            }
        }

        private double? minimumValueField; 

        /// <summary>
        /// minimumValueSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MinimumValueSpecified {
            get {
                return minimumValueSpecifiedField;
            } 
            set {
                minimumValueSpecifiedField = value;
                NotifyPropertyChanged("MinimumValueSpecified");
            }
        }

        private bool minimumValueSpecifiedField; 

        /// <summary>
        /// maximumValue property
        /// </summary>
		
		[XmlElement("maximumValue")]
        public double? MaximumValue {
            get {
                return maximumValueField;
            } 
            set {
                maximumValueField = value;
                 this.MaximumValueSpecified = true;
                NotifyPropertyChanged("MaximumValue");
            }
        }

        private double? maximumValueField; 

        /// <summary>
        /// maximumValueSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MaximumValueSpecified {
            get {
                return maximumValueSpecifiedField;
            } 
            set {
                maximumValueSpecifiedField = value;
                NotifyPropertyChanged("MaximumValueSpecified");
            }
        }

        private bool maximumValueSpecifiedField; 

        /// <summary>
        /// rangeMeaning property
        /// </summary>
		[ComponentElement]
		[XmlElement("rangeMeaning")]
        public CodeWithAuthorityType RangeMeaning {
            get {
                return rangeMeaningField;
            } 
            set {
                rangeMeaningField = value;
                NotifyPropertyChanged("RangeMeaning");
            }
        }

        private CodeWithAuthorityType rangeMeaningField; 


    } //here

    /// <summary>
    /// This class represents the CodeType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CodeWithAuthorityType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("name", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CodeType xsd type.")]
    public partial class CodeType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CodeType class.
        /// </summary>
        public CodeType() {}

        /// <summary>
        /// Initializes a new instance of the CodeType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CodeType(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// codeSpace property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "anyURI")]
        [XmlAttribute("codeSpace")]
		
        public string CodeSpace {
            get {
                return codeSpaceField;
            } 
            set {
                codeSpaceField = value;
                NotifyPropertyChanged("CodeSpace");
            }
        }

        private string codeSpaceField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CodeWithAuthorityType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("identifier", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CodeWithAuthorityType xsd type.")]
    public partial class CodeWithAuthorityType : CodeType, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CodeWithAuthorityType class.
        /// </summary>
        public CodeWithAuthorityType() {}

        /// <summary>
        /// Initializes a new instance of the CodeWithAuthorityType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CodeWithAuthorityType(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IdentifiedObjectType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IdentifiedObjectType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the IdentifiedObjectType xsd type.")]
    public abstract partial class IdentifiedObjectType : DefinitionType, INotifyPropertyChanged
    {


    } //here
    }

    /// <summary>
    /// This class represents the DefinitionType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("Definition", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the DefinitionType xsd type.")]
    public partial class DefinitionType : DefinitionBaseType, INotifyPropertyChanged
    {

        /// <summary>
        /// remarks property
        /// </summary>
		
		[XmlElement("remarks")]
        public string Remarks {
            get {
                return remarksField;
            } 
            set {
                remarksField = value;
                NotifyPropertyChanged("Remarks");
            }
        }

        private string remarksField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DefinitionBaseType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DefinitionBaseType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the DefinitionBaseType xsd type.")]
    public partial class DefinitionBaseType : AbstractGMLType, INotifyPropertyChanged
    {


    } //here
    }

    /// <summary>
    /// This class represents the AbstractGMLType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimeObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimePrimitiveType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionBaseType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGML", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractGMLType xsd type.")]
    public abstract partial class AbstractGMLType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// description property
        /// </summary>
		[ComponentElement]
		[XmlElement("description")]
        public StringOrRefType Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private StringOrRefType descriptionField; 

        /// <summary>
        /// descriptionReference property
        /// </summary>
		[ComponentElement]
		[XmlElement("descriptionReference")]
        public ReferenceType DescriptionReference {
            get {
                return descriptionReferenceField;
            } 
            set {
                descriptionReferenceField = value;
                NotifyPropertyChanged("DescriptionReference");
            }
        }

        private ReferenceType descriptionReferenceField; 

        /// <summary>
        /// identifier property
        /// </summary>
		[ComponentElement]
		[XmlElement("identifier")]
        public CodeWithAuthorityType Identifier {
            get {
                return identifierField;
            } 
            set {
                identifierField = value;
                NotifyPropertyChanged("Identifier");
            }
        }

        private CodeWithAuthorityType identifierField; 

        /// <summary>
        /// name property
        /// </summary>
		[RecurringElement]
		[XmlElement("name")]
        public List<CodeType> Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

         /// <summary>
         /// bool to indicate if Name has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameSpecified
         {
             get {
             if(nameField!=null)
                 return nameField.Count>0?true:false;
             else return false;
             }
         }
        private List<CodeType> nameField; 

		/// <summary>
        /// id property
        /// </summary>
		
        [XmlAttribute("id", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string Id {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private string idField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the StringOrRefType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("description", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the StringOrRefType xsd type.")]
    public partial class StringOrRefType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StringOrRefType class.
        /// </summary>
        public StringOrRefType() {}

        /// <summary>
        /// Initializes a new instance of the StringOrRefType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public StringOrRefType(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the ReferenceType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("descriptionReference", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the ReferenceType xsd type.")]
    public partial class ReferenceType : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// owns property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "boolean")]
        [XmlAttribute("owns")]
		
        public bool Owns {
            get {
                return ownsField;
            } 
            set {
                ownsField = value;
                NotifyPropertyChanged("Owns");
            }
        }

        private bool ownsField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the AbstractTimeObjectType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimePrimitiveType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractTimeObject", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractTimeObjectType xsd type.")]
    public abstract partial class AbstractTimeObjectType : AbstractGMLType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the AbstractTimePrimitiveType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractTimePrimitive", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractTimePrimitiveType xsd type.")]
    public abstract partial class AbstractTimePrimitiveType : AbstractTimeObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// relatedTime property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "RelatedTimeType")]
		[XmlElement("relatedTime")]
        public List<RelatedTimeType> RelatedTime {
            get {
                return relatedTimeField;
            } 
            set {
                relatedTimeField = value;
                NotifyPropertyChanged("RelatedTime");
            }
        }

         /// <summary>
         /// bool to indicate if RelatedTime has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RelatedTimeSpecified
         {
             get {
             if(relatedTimeField!=null)
                 return relatedTimeField.Count>0?true:false;
             else return false;
             }
         }
        private List<RelatedTimeType> relatedTimeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RelatedTimeType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RelatedTimeType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the RelatedTimeType xsd type.")]
    public partial class RelatedTimeType : TimePrimitivePropertyType, INotifyPropertyChanged
    {

		/// <summary>
        /// relativePosition property
        /// </summary>
		
        [XmlAttribute("relativePosition")]
		
        public RelatedTimeTypeRelativePosition RelativePosition {
            get {
                return relativePositionField;
            } 
            set {
                relativePositionField = value;
                 this.RelativePositionSpecified = true;
                NotifyPropertyChanged("RelativePosition");
            }
        }

        private RelatedTimeTypeRelativePosition relativePositionField; 

        /// <summary>
        /// relativePositionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RelativePositionSpecified {
            get {
                return relativePositionSpecifiedField;
            } 
            set {
                relativePositionSpecifiedField = value;
                NotifyPropertyChanged("RelativePositionSpecified");
            }
        }

        private bool relativePositionSpecifiedField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimePrimitivePropertyType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelatedTimeType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimePrimitivePropertyType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the TimePrimitivePropertyType xsd type.")]
    public partial class TimePrimitivePropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractTimePrimitive property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractTimePrimitive")]
        public AbstractTimePrimitiveType AbstractTimePrimitive {
            get {
                return AbstractTimePrimitiveField;
            } 
            set {
                AbstractTimePrimitiveField = value;
                NotifyPropertyChanged("AbstractTimePrimitive");
            }
        }

        private AbstractTimePrimitiveType AbstractTimePrimitiveField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 

		/// <summary>
        /// owns property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "boolean")]
        [XmlAttribute("owns")]
		
        public bool Owns {
            get {
                return ownsField;
            } 
            set {
                ownsField = value;
                NotifyPropertyChanged("Owns");
            }
        }

        private bool ownsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractCoordinateOperationType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractOperation", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractCoordinateOperationType xsd type.")]
    public abstract partial class AbstractCoordinateOperationType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// domainOfValidity property
        /// </summary>
		[ComponentElement]
		[XmlElement("domainOfValidity")]
        public DomainOfValidity DomainOfValidity {
            get {
                return domainOfValidityField;
            } 
            set {
                domainOfValidityField = value;
                NotifyPropertyChanged("DomainOfValidity");
            }
        }

        private DomainOfValidity domainOfValidityField; 

        /// <summary>
        /// scope property
        /// </summary>
		[RecurringElement]
		[XmlElement("scope")]
        public List<string> Scope {
            get {
                return scopeField;
            } 
            set {
                scopeField = value;
                NotifyPropertyChanged("Scope");
            }
        }

         /// <summary>
         /// bool to indicate if Scope has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ScopeSpecified
         {
             get {
             if(scopeField!=null)
                 return scopeField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> scopeField; 

        /// <summary>
        /// operationVersion property
        /// </summary>
		
		[XmlElement("operationVersion")]
        public string OperationVersion {
            get {
                return operationVersionField;
            } 
            set {
                operationVersionField = value;
                NotifyPropertyChanged("OperationVersion");
            }
        }

        private string operationVersionField; 

        /// <summary>
        /// coordinateOperationAccuracy property
        /// </summary>
		[RecurringElement]
		[XmlElement("coordinateOperationAccuracy")]
        public List<CoordinateOperationAccuracy> CoordinateOperationAccuracy {
            get {
                return coordinateOperationAccuracyField;
            } 
            set {
                coordinateOperationAccuracyField = value;
                NotifyPropertyChanged("CoordinateOperationAccuracy");
            }
        }

         /// <summary>
         /// bool to indicate if CoordinateOperationAccuracy has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CoordinateOperationAccuracySpecified
         {
             get {
             if(coordinateOperationAccuracyField!=null)
                 return coordinateOperationAccuracyField.Count>0?true:false;
             else return false;
             }
         }
        private List<CoordinateOperationAccuracy> coordinateOperationAccuracyField; 

        /// <summary>
        /// sourceCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("sourceCRS")]
        public CRSPropertyType SourceCRS {
            get {
                return sourceCRSField;
            } 
            set {
                sourceCRSField = value;
                NotifyPropertyChanged("SourceCRS");
            }
        }

        private CRSPropertyType sourceCRSField; 

        /// <summary>
        /// targetCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("targetCRS")]
        public CRSPropertyType TargetCRS {
            get {
                return targetCRSField;
            } 
            set {
                targetCRSField = value;
                NotifyPropertyChanged("TargetCRS");
            }
        }

        private CRSPropertyType targetCRSField; 


    } //here

    /// <summary>
    /// This class represents the domainOfValidity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the domainOfValidity xsd type.")]
    public partial class DomainOfValidity : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EX_Extent property
        /// </summary>
		[ComponentElement]
		[XmlElement("EX_Extent", Namespace="http://www.isotc211.org/2005/gmd")]
        public EX_Extent_Type EX_Extent {
            get {
                return EX_ExtentField;
            } 
            set {
                EX_ExtentField = value;
                NotifyPropertyChanged("EX_Extent");
            }
        }

        private EX_Extent_Type EX_ExtentField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the EX_Extent_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_Extent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the EX_Extent_Type xsd type.")]
    public partial class EX_Extent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// description property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("description")]
        public CharacterString_PropertyType Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private CharacterString_PropertyType descriptionField; 

        /// <summary>
        /// geographicElement property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EX_GeographicExtent_PropertyType")]
		[XmlElement("geographicElement")]
        public List<EX_GeographicExtent_PropertyType> GeographicElement {
            get {
                return geographicElementField;
            } 
            set {
                geographicElementField = value;
                NotifyPropertyChanged("GeographicElement");
            }
        }

         /// <summary>
         /// bool to indicate if GeographicElement has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeographicElementSpecified
         {
             get {
             if(geographicElementField!=null)
                 return geographicElementField.Count>0?true:false;
             else return false;
             }
         }
        private List<EX_GeographicExtent_PropertyType> geographicElementField; 

        /// <summary>
        /// temporalElement property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EX_TemporalExtent_PropertyType")]
		[XmlElement("temporalElement")]
        public List<EX_TemporalExtent_PropertyType> TemporalElement {
            get {
                return temporalElementField;
            } 
            set {
                temporalElementField = value;
                NotifyPropertyChanged("TemporalElement");
            }
        }

         /// <summary>
         /// bool to indicate if TemporalElement has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TemporalElementSpecified
         {
             get {
             if(temporalElementField!=null)
                 return temporalElementField.Count>0?true:false;
             else return false;
             }
         }
        private List<EX_TemporalExtent_PropertyType> temporalElementField; 

        /// <summary>
        /// verticalElement property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EX_VerticalExtent_PropertyType")]
		[XmlElement("verticalElement")]
        public List<EX_VerticalExtent_PropertyType> VerticalElement {
            get {
                return verticalElementField;
            } 
            set {
                verticalElementField = value;
                NotifyPropertyChanged("VerticalElement");
            }
        }

         /// <summary>
         /// bool to indicate if VerticalElement has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VerticalElementSpecified
         {
             get {
             if(verticalElementField!=null)
                 return verticalElementField.Count>0?true:false;
             else return false;
             }
         }
        private List<EX_VerticalExtent_PropertyType> verticalElementField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CharacterString_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CharacterString_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the CharacterString_PropertyType xsd type.")]
    public partial class CharacterString_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CharacterString property
        /// </summary>
		
		[XmlElement("CharacterString")]
        public string CharacterString {
            get {
                return CharacterStringField;
            } 
            set {
                CharacterStringField = value;
                NotifyPropertyChanged("CharacterString");
            }
        }

        private string CharacterStringField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EX_GeographicExtent_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EX_GeographicExtent_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the EX_GeographicExtent_PropertyType xsd type.")]
    public partial class EX_GeographicExtent_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractEX_GeographicExtent property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractEX_GeographicExtent")]
        public AbstractEX_GeographicExtent_Type AbstractEX_GeographicExtent {
            get {
                return AbstractEX_GeographicExtentField;
            } 
            set {
                AbstractEX_GeographicExtentField = value;
                NotifyPropertyChanged("AbstractEX_GeographicExtent");
            }
        }

        private AbstractEX_GeographicExtent_Type AbstractEX_GeographicExtentField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractEX_GeographicExtent_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractEX_GeographicExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractEX_GeographicExtent_Type xsd type.")]
    public abstract partial class AbstractEX_GeographicExtent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// extentTypeCode property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Boolean_PropertyType")]
		[XmlElement("extentTypeCode")]
        public Boolean_PropertyType ExtentTypeCode {
            get {
                return extentTypeCodeField;
            } 
            set {
                extentTypeCodeField = value;
                NotifyPropertyChanged("ExtentTypeCode");
            }
        }

        private Boolean_PropertyType extentTypeCodeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Boolean_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Boolean_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the Boolean_PropertyType xsd type.")]
    public partial class Boolean_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Boolean property
        /// </summary>
		
		[XmlElement("Boolean")]
        public bool? Boolean {
            get {
                return BooleanField;
            } 
            set {
                BooleanField = value;
                NotifyPropertyChanged("Boolean");
            }
        }

        private bool? BooleanField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractObject_Type xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_Result_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Series_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_OnlineResource_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Address_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Telephone_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Contact_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_ResponsibleParty_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Date_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Citation_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MD_Identifier_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_Element_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_PositionalAccuracy_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_VerticalExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_TemporalExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractEX_GeographicExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_Extent_Type))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractObject_Type", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the AbstractObject_Type xsd type.")]
    public abstract partial class AbstractObject_Type : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// id property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "ID")]
        [XmlAttribute("id")]
		
        public string Id {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private string idField; 

		/// <summary>
        /// uuid property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuid")]
		
        public string Uuid {
            get {
                return uuidField;
            } 
            set {
                uuidField = value;
                NotifyPropertyChanged("Uuid");
            }
        }

        private string uuidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractDQ_Result_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_Result", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractDQ_Result_Type xsd type.")]
    public abstract partial class AbstractDQ_Result_Type : AbstractObject_Type, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the CI_Series_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Series", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Series_Type xsd type.")]
    public partial class CI_Series_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// name property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("name")]
        public CharacterString_PropertyType Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private CharacterString_PropertyType nameField; 

        /// <summary>
        /// issueIdentification property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("issueIdentification")]
        public CharacterString_PropertyType IssueIdentification {
            get {
                return issueIdentificationField;
            } 
            set {
                issueIdentificationField = value;
                NotifyPropertyChanged("IssueIdentification");
            }
        }

        private CharacterString_PropertyType issueIdentificationField; 

        /// <summary>
        /// page property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("page")]
        public CharacterString_PropertyType Page {
            get {
                return pageField;
            } 
            set {
                pageField = value;
                NotifyPropertyChanged("Page");
            }
        }

        private CharacterString_PropertyType pageField; 


    } //here

    /// <summary>
    /// This class represents the CI_OnlineResource_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_OnlineResource", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_OnlineResource_Type xsd type.")]
    public partial class CI_OnlineResource_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// linkage property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "URL_PropertyType")]
		[XmlElement("linkage")]
        public URL_PropertyType Linkage {
            get {
                return linkageField;
            } 
            set {
                linkageField = value;
                NotifyPropertyChanged("Linkage");
            }
        }

        private URL_PropertyType linkageField; 

        /// <summary>
        /// protocol property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("protocol")]
        public CharacterString_PropertyType Protocol {
            get {
                return protocolField;
            } 
            set {
                protocolField = value;
                NotifyPropertyChanged("Protocol");
            }
        }

        private CharacterString_PropertyType protocolField; 

        /// <summary>
        /// applicationProfile property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("applicationProfile")]
        public CharacterString_PropertyType ApplicationProfile {
            get {
                return applicationProfileField;
            } 
            set {
                applicationProfileField = value;
                NotifyPropertyChanged("ApplicationProfile");
            }
        }

        private CharacterString_PropertyType applicationProfileField; 

        /// <summary>
        /// name property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("name")]
        public CharacterString_PropertyType Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private CharacterString_PropertyType nameField; 

        /// <summary>
        /// description property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("description")]
        public CharacterString_PropertyType Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private CharacterString_PropertyType descriptionField; 

        /// <summary>
        /// function property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_OnLineFunctionCode_PropertyType")]
		[XmlElement("function")]
        public CI_OnLineFunctionCode_PropertyType Function {
            get {
                return functionField;
            } 
            set {
                functionField = value;
                NotifyPropertyChanged("Function");
            }
        }

        private CI_OnLineFunctionCode_PropertyType functionField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the URL_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="URL_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the URL_PropertyType xsd type.")]
    public partial class URL_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// URL property
        /// </summary>
		
		[XmlElement("URL", DataType="anyURI")]
        public string URL {
            get {
                return URLField;
            } 
            set {
                URLField = value;
                NotifyPropertyChanged("URL");
            }
        }

        private string URLField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_OnLineFunctionCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_OnLineFunctionCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_OnLineFunctionCode_PropertyType xsd type.")]
    public partial class CI_OnLineFunctionCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_OnLineFunctionCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_OnLineFunctionCode")]
        public CodeListValue_Type CI_OnLineFunctionCode {
            get {
                return CI_OnLineFunctionCodeField;
            } 
            set {
                CI_OnLineFunctionCodeField = value;
                NotifyPropertyChanged("CI_OnLineFunctionCode");
            }
        }

        private CodeListValue_Type CI_OnLineFunctionCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CodeListValue_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    [System.Xml.Serialization.XmlRootAttribute("CI_DateTypeCode", Namespace="http://www.isotc211.org/2005/gco", IsNullable=false)]
	[Description("This class represents the CodeListValue_Type xsd type.")]
    public partial class CodeListValue_Type : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CodeListValue_Type class.
        /// </summary>
        public CodeListValue_Type() {}

        /// <summary>
        /// Initializes a new instance of the CodeListValue_Type class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CodeListValue_Type(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// codeList property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "anyURI")]
        [XmlAttribute("codeList")]
		
        public string CodeList {
            get {
                return codeListField;
            } 
            set {
                codeListField = value;
                NotifyPropertyChanged("CodeList");
            }
        }

        private string codeListField; 

		/// <summary>
        /// codeListValue property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "anyURI")]
        [XmlAttribute("codeListValue")]
		
        public string CodeListValue {
            get {
                return codeListValueField;
            } 
            set {
                codeListValueField = value;
                NotifyPropertyChanged("CodeListValue");
            }
        }

        private string codeListValueField; 

		/// <summary>
        /// codeSpace property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "anyURI")]
        [XmlAttribute("codeSpace")]
		
        public string CodeSpace {
            get {
                return codeSpaceField;
            } 
            set {
                codeSpaceField = value;
                NotifyPropertyChanged("CodeSpace");
            }
        }

        private string codeSpaceField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CI_Address_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Address", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Address_Type xsd type.")]
    public partial class CI_Address_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// deliveryPoint property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("deliveryPoint")]
        public List<CharacterString_PropertyType> DeliveryPoint {
            get {
                return deliveryPointField;
            } 
            set {
                deliveryPointField = value;
                NotifyPropertyChanged("DeliveryPoint");
            }
        }

         /// <summary>
         /// bool to indicate if DeliveryPoint has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DeliveryPointSpecified
         {
             get {
             if(deliveryPointField!=null)
                 return deliveryPointField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> deliveryPointField; 

        /// <summary>
        /// city property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("city")]
        public CharacterString_PropertyType City {
            get {
                return cityField;
            } 
            set {
                cityField = value;
                NotifyPropertyChanged("City");
            }
        }

        private CharacterString_PropertyType cityField; 

        /// <summary>
        /// administrativeArea property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("administrativeArea")]
        public CharacterString_PropertyType AdministrativeArea {
            get {
                return administrativeAreaField;
            } 
            set {
                administrativeAreaField = value;
                NotifyPropertyChanged("AdministrativeArea");
            }
        }

        private CharacterString_PropertyType administrativeAreaField; 

        /// <summary>
        /// postalCode property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("postalCode")]
        public CharacterString_PropertyType PostalCode {
            get {
                return postalCodeField;
            } 
            set {
                postalCodeField = value;
                NotifyPropertyChanged("PostalCode");
            }
        }

        private CharacterString_PropertyType postalCodeField; 

        /// <summary>
        /// country property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("country")]
        public CharacterString_PropertyType Country {
            get {
                return countryField;
            } 
            set {
                countryField = value;
                NotifyPropertyChanged("Country");
            }
        }

        private CharacterString_PropertyType countryField; 

        /// <summary>
        /// electronicMailAddress property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("electronicMailAddress")]
        public List<CharacterString_PropertyType> ElectronicMailAddress {
            get {
                return electronicMailAddressField;
            } 
            set {
                electronicMailAddressField = value;
                NotifyPropertyChanged("ElectronicMailAddress");
            }
        }

         /// <summary>
         /// bool to indicate if ElectronicMailAddress has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ElectronicMailAddressSpecified
         {
             get {
             if(electronicMailAddressField!=null)
                 return electronicMailAddressField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> electronicMailAddressField; 


    } //here

    /// <summary>
    /// This class represents the CI_Telephone_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Telephone", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Telephone_Type xsd type.")]
    public partial class CI_Telephone_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// voice property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("voice")]
        public List<CharacterString_PropertyType> Voice {
            get {
                return voiceField;
            } 
            set {
                voiceField = value;
                NotifyPropertyChanged("Voice");
            }
        }

         /// <summary>
         /// bool to indicate if Voice has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VoiceSpecified
         {
             get {
             if(voiceField!=null)
                 return voiceField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> voiceField; 

        /// <summary>
        /// facsimile property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("facsimile")]
        public List<CharacterString_PropertyType> Facsimile {
            get {
                return facsimileField;
            } 
            set {
                facsimileField = value;
                NotifyPropertyChanged("Facsimile");
            }
        }

         /// <summary>
         /// bool to indicate if Facsimile has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacsimileSpecified
         {
             get {
             if(facsimileField!=null)
                 return facsimileField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> facsimileField; 


    } //here

    /// <summary>
    /// This class represents the CI_Contact_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Contact", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Contact_Type xsd type.")]
    public partial class CI_Contact_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// phone property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Telephone_PropertyType")]
		[XmlElement("phone")]
        public CI_Telephone_PropertyType Phone {
            get {
                return phoneField;
            } 
            set {
                phoneField = value;
                NotifyPropertyChanged("Phone");
            }
        }

        private CI_Telephone_PropertyType phoneField; 

        /// <summary>
        /// address property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Address_PropertyType")]
		[XmlElement("address")]
        public CI_Address_PropertyType Address {
            get {
                return addressField;
            } 
            set {
                addressField = value;
                NotifyPropertyChanged("Address");
            }
        }

        private CI_Address_PropertyType addressField; 

        /// <summary>
        /// onlineResource property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_OnlineResource_PropertyType")]
		[XmlElement("onlineResource")]
        public CI_OnlineResource_PropertyType OnlineResource {
            get {
                return onlineResourceField;
            } 
            set {
                onlineResourceField = value;
                NotifyPropertyChanged("OnlineResource");
            }
        }

        private CI_OnlineResource_PropertyType onlineResourceField; 

        /// <summary>
        /// hoursOfService property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("hoursOfService")]
        public CharacterString_PropertyType HoursOfService {
            get {
                return hoursOfServiceField;
            } 
            set {
                hoursOfServiceField = value;
                NotifyPropertyChanged("HoursOfService");
            }
        }

        private CharacterString_PropertyType hoursOfServiceField; 

        /// <summary>
        /// contactInstructions property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("contactInstructions")]
        public CharacterString_PropertyType ContactInstructions {
            get {
                return contactInstructionsField;
            } 
            set {
                contactInstructionsField = value;
                NotifyPropertyChanged("ContactInstructions");
            }
        }

        private CharacterString_PropertyType contactInstructionsField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Telephone_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Telephone_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Telephone_PropertyType xsd type.")]
    public partial class CI_Telephone_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Telephone property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Telephone")]
        public CI_Telephone_Type CI_Telephone {
            get {
                return CI_TelephoneField;
            } 
            set {
                CI_TelephoneField = value;
                NotifyPropertyChanged("CI_Telephone");
            }
        }

        private CI_Telephone_Type CI_TelephoneField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Address_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Address_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Address_PropertyType xsd type.")]
    public partial class CI_Address_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Address property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Address")]
        public CI_Address_Type CI_Address {
            get {
                return CI_AddressField;
            } 
            set {
                CI_AddressField = value;
                NotifyPropertyChanged("CI_Address");
            }
        }

        private CI_Address_Type CI_AddressField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_OnlineResource_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_OnlineResource_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_OnlineResource_PropertyType xsd type.")]
    public partial class CI_OnlineResource_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_OnlineResource property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_OnlineResource")]
        public CI_OnlineResource_Type CI_OnlineResource {
            get {
                return CI_OnlineResourceField;
            } 
            set {
                CI_OnlineResourceField = value;
                NotifyPropertyChanged("CI_OnlineResource");
            }
        }

        private CI_OnlineResource_Type CI_OnlineResourceField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CI_ResponsibleParty_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_ResponsibleParty", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_ResponsibleParty_Type xsd type.")]
    public partial class CI_ResponsibleParty_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// individualName property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("individualName")]
        public CharacterString_PropertyType IndividualName {
            get {
                return individualNameField;
            } 
            set {
                individualNameField = value;
                NotifyPropertyChanged("IndividualName");
            }
        }

        private CharacterString_PropertyType individualNameField; 

        /// <summary>
        /// organisationName property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("organisationName")]
        public CharacterString_PropertyType OrganisationName {
            get {
                return organisationNameField;
            } 
            set {
                organisationNameField = value;
                NotifyPropertyChanged("OrganisationName");
            }
        }

        private CharacterString_PropertyType organisationNameField; 

        /// <summary>
        /// positionName property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("positionName")]
        public CharacterString_PropertyType PositionName {
            get {
                return positionNameField;
            } 
            set {
                positionNameField = value;
                NotifyPropertyChanged("PositionName");
            }
        }

        private CharacterString_PropertyType positionNameField; 

        /// <summary>
        /// contactInfo property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Contact_PropertyType")]
		[XmlElement("contactInfo")]
        public CI_Contact_PropertyType ContactInfo {
            get {
                return contactInfoField;
            } 
            set {
                contactInfoField = value;
                NotifyPropertyChanged("ContactInfo");
            }
        }

        private CI_Contact_PropertyType contactInfoField; 

        /// <summary>
        /// role property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_RoleCode_PropertyType")]
		[XmlElement("role")]
        public CI_RoleCode_PropertyType Role {
            get {
                return roleField;
            } 
            set {
                roleField = value;
                NotifyPropertyChanged("Role");
            }
        }

        private CI_RoleCode_PropertyType roleField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Contact_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Contact_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Contact_PropertyType xsd type.")]
    public partial class CI_Contact_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Contact property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Contact")]
        public CI_Contact_Type CI_Contact {
            get {
                return CI_ContactField;
            } 
            set {
                CI_ContactField = value;
                NotifyPropertyChanged("CI_Contact");
            }
        }

        private CI_Contact_Type CI_ContactField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_RoleCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_RoleCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_RoleCode_PropertyType xsd type.")]
    public partial class CI_RoleCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_RoleCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_RoleCode")]
        public CodeListValue_Type CI_RoleCode {
            get {
                return CI_RoleCodeField;
            } 
            set {
                CI_RoleCodeField = value;
                NotifyPropertyChanged("CI_RoleCode");
            }
        }

        private CodeListValue_Type CI_RoleCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CI_Date_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Date", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Date_Type xsd type.")]
    public partial class CI_Date_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// date property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Date_PropertyType")]
		[XmlElement("date")]
        public Date_PropertyType Date {
            get {
                return dateField;
            } 
            set {
                dateField = value;
                NotifyPropertyChanged("Date");
            }
        }

        private Date_PropertyType dateField; 

        /// <summary>
        /// dateType property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_DateTypeCode_PropertyType")]
		[XmlElement("dateType")]
        public CI_DateTypeCode_PropertyType DateType {
            get {
                return dateTypeField;
            } 
            set {
                dateTypeField = value;
                NotifyPropertyChanged("DateType");
            }
        }

        private CI_DateTypeCode_PropertyType dateTypeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Date_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Date_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the Date_PropertyType xsd type.")]
    public partial class Date_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Date property
        /// </summary>
        [XmlElement("Date")]
        public string Date {
            get {
                return DateField;
            } 
            set {
                DateField = value;
                DateSpecified = (value!=null);
                NotifyPropertyChanged("Date");
            }
        }

        private string DateField; 
        private bool dateSpecified = false; 

        /// <summary>
        /// bool to indicate if Date has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateSpecified
        {
            get {
                return dateSpecified;
            }
            set {
                dateSpecified= value;
            }
        }

        /// <summary>
        /// DateTime property
        /// </summary>
        [XmlElement("DateTime")]
        public DateTime? DateTime {
            get {
                return DateTimeField;
            } 
            set {
                DateTimeField = value;
                DateTimeSpecified = (value!=null);
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? DateTimeField; 
        private bool dateTimeSpecified = false; 

        /// <summary>
        /// bool to indicate if DateTime has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateTimeSpecified
        {
            get {
                return dateTimeSpecified;
            }
            set {
                dateTimeSpecified= value;
            }
        }


		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_DateTypeCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_DateTypeCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_DateTypeCode_PropertyType xsd type.")]
    public partial class CI_DateTypeCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_DateTypeCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_DateTypeCode")]
        public CodeListValue_Type CI_DateTypeCode {
            get {
                return CI_DateTypeCodeField;
            } 
            set {
                CI_DateTypeCodeField = value;
                NotifyPropertyChanged("CI_DateTypeCode");
            }
        }

        private CodeListValue_Type CI_DateTypeCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CI_Citation_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Citation", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Citation_Type xsd type.")]
    public partial class CI_Citation_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// title property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("title")]
        public CharacterString_PropertyType Title {
            get {
                return titleField;
            } 
            set {
                titleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private CharacterString_PropertyType titleField; 

        /// <summary>
        /// alternateTitle property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("alternateTitle")]
        public List<CharacterString_PropertyType> AlternateTitle {
            get {
                return alternateTitleField;
            } 
            set {
                alternateTitleField = value;
                NotifyPropertyChanged("AlternateTitle");
            }
        }

         /// <summary>
         /// bool to indicate if AlternateTitle has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AlternateTitleSpecified
         {
             get {
             if(alternateTitleField!=null)
                 return alternateTitleField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> alternateTitleField; 

        /// <summary>
        /// date property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Date_PropertyType")]
		[XmlElement("date")]
        public List<CI_Date_PropertyType> Date {
            get {
                return dateField;
            } 
            set {
                dateField = value;
                NotifyPropertyChanged("Date");
            }
        }

         /// <summary>
         /// bool to indicate if Date has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DateSpecified
         {
             get {
             if(dateField!=null)
                 return dateField.Count>0?true:false;
             else return false;
             }
         }
        private List<CI_Date_PropertyType> dateField; 

        /// <summary>
        /// edition property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("edition")]
        public CharacterString_PropertyType Edition {
            get {
                return editionField;
            } 
            set {
                editionField = value;
                NotifyPropertyChanged("Edition");
            }
        }

        private CharacterString_PropertyType editionField; 

        /// <summary>
        /// editionDate property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Date_PropertyType")]
		[XmlElement("editionDate")]
        public Date_PropertyType EditionDate {
            get {
                return editionDateField;
            } 
            set {
                editionDateField = value;
                NotifyPropertyChanged("EditionDate");
            }
        }

        private Date_PropertyType editionDateField; 

        /// <summary>
        /// identifier property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "MD_Identifier_PropertyType")]
		[XmlElement("identifier")]
        public List<MD_Identifier_PropertyType> Identifier {
            get {
                return identifierField;
            } 
            set {
                identifierField = value;
                NotifyPropertyChanged("Identifier");
            }
        }

         /// <summary>
         /// bool to indicate if Identifier has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IdentifierSpecified
         {
             get {
             if(identifierField!=null)
                 return identifierField.Count>0?true:false;
             else return false;
             }
         }
        private List<MD_Identifier_PropertyType> identifierField; 

        /// <summary>
        /// citedResponsibleParty property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_ResponsibleParty_PropertyType")]
		[XmlElement("citedResponsibleParty")]
        public List<CI_ResponsibleParty_PropertyType> CitedResponsibleParty {
            get {
                return citedResponsiblePartyField;
            } 
            set {
                citedResponsiblePartyField = value;
                NotifyPropertyChanged("CitedResponsibleParty");
            }
        }

         /// <summary>
         /// bool to indicate if CitedResponsibleParty has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CitedResponsiblePartySpecified
         {
             get {
             if(citedResponsiblePartyField!=null)
                 return citedResponsiblePartyField.Count>0?true:false;
             else return false;
             }
         }
        private List<CI_ResponsibleParty_PropertyType> citedResponsiblePartyField; 

        /// <summary>
        /// presentationForm property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_PresentationFormCode_PropertyType")]
		[XmlElement("presentationForm")]
        public List<CI_PresentationFormCode_PropertyType> PresentationForm {
            get {
                return presentationFormField;
            } 
            set {
                presentationFormField = value;
                NotifyPropertyChanged("PresentationForm");
            }
        }

         /// <summary>
         /// bool to indicate if PresentationForm has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PresentationFormSpecified
         {
             get {
             if(presentationFormField!=null)
                 return presentationFormField.Count>0?true:false;
             else return false;
             }
         }
        private List<CI_PresentationFormCode_PropertyType> presentationFormField; 

        /// <summary>
        /// series property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Series_PropertyType")]
		[XmlElement("series")]
        public CI_Series_PropertyType Series {
            get {
                return seriesField;
            } 
            set {
                seriesField = value;
                NotifyPropertyChanged("Series");
            }
        }

        private CI_Series_PropertyType seriesField; 

        /// <summary>
        /// otherCitationDetails property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("otherCitationDetails")]
        public CharacterString_PropertyType OtherCitationDetails {
            get {
                return otherCitationDetailsField;
            } 
            set {
                otherCitationDetailsField = value;
                NotifyPropertyChanged("OtherCitationDetails");
            }
        }

        private CharacterString_PropertyType otherCitationDetailsField; 

        /// <summary>
        /// collectiveTitle property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("collectiveTitle")]
        public CharacterString_PropertyType CollectiveTitle {
            get {
                return collectiveTitleField;
            } 
            set {
                collectiveTitleField = value;
                NotifyPropertyChanged("CollectiveTitle");
            }
        }

        private CharacterString_PropertyType collectiveTitleField; 

        /// <summary>
        /// ISBN property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("ISBN")]
        public CharacterString_PropertyType ISBN {
            get {
                return ISBNField;
            } 
            set {
                ISBNField = value;
                NotifyPropertyChanged("ISBN");
            }
        }

        private CharacterString_PropertyType ISBNField; 

        /// <summary>
        /// ISSN property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("ISSN")]
        public CharacterString_PropertyType ISSN {
            get {
                return ISSNField;
            } 
            set {
                ISSNField = value;
                NotifyPropertyChanged("ISSN");
            }
        }

        private CharacterString_PropertyType ISSNField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Date_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Date_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Date_PropertyType xsd type.")]
    public partial class CI_Date_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Date property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Date")]
        public CI_Date_Type CI_Date {
            get {
                return CI_DateField;
            } 
            set {
                CI_DateField = value;
                NotifyPropertyChanged("CI_Date");
            }
        }

        private CI_Date_Type CI_DateField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MD_Identifier_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MD_Identifier_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the MD_Identifier_PropertyType xsd type.")]
    public partial class MD_Identifier_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// MD_Identifier property
        /// </summary>
		[ComponentElement]
		[XmlElement("MD_Identifier")]
        public MD_Identifier_Type MD_Identifier {
            get {
                return MD_IdentifierField;
            } 
            set {
                MD_IdentifierField = value;
                NotifyPropertyChanged("MD_Identifier");
            }
        }

        private MD_Identifier_Type MD_IdentifierField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the MD_Identifier_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("MD_Identifier", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the MD_Identifier_Type xsd type.")]
    public partial class MD_Identifier_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// authority property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Citation_PropertyType")]
		[XmlElement("authority")]
        public CI_Citation_PropertyType Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private CI_Citation_PropertyType authorityField; 

        /// <summary>
        /// code property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("code")]
        public CharacterString_PropertyType Code {
            get {
                return codeField;
            } 
            set {
                codeField = value;
                NotifyPropertyChanged("Code");
            }
        }

        private CharacterString_PropertyType codeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Citation_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Citation_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Citation_PropertyType xsd type.")]
    public partial class CI_Citation_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Citation property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Citation")]
        public CI_Citation_Type CI_Citation {
            get {
                return CI_CitationField;
            } 
            set {
                CI_CitationField = value;
                NotifyPropertyChanged("CI_Citation");
            }
        }

        private CI_Citation_Type CI_CitationField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_ResponsibleParty_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_ResponsibleParty_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_ResponsibleParty_PropertyType xsd type.")]
    public partial class CI_ResponsibleParty_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_ResponsibleParty property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_ResponsibleParty")]
        public CI_ResponsibleParty_Type CI_ResponsibleParty {
            get {
                return CI_ResponsiblePartyField;
            } 
            set {
                CI_ResponsiblePartyField = value;
                NotifyPropertyChanged("CI_ResponsibleParty");
            }
        }

        private CI_ResponsibleParty_Type CI_ResponsiblePartyField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_PresentationFormCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_PresentationFormCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_PresentationFormCode_PropertyType xsd type.")]
    public partial class CI_PresentationFormCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_PresentationFormCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_PresentationFormCode")]
        public CodeListValue_Type CI_PresentationFormCode {
            get {
                return CI_PresentationFormCodeField;
            } 
            set {
                CI_PresentationFormCodeField = value;
                NotifyPropertyChanged("CI_PresentationFormCode");
            }
        }

        private CodeListValue_Type CI_PresentationFormCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Series_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Series_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Series_PropertyType xsd type.")]
    public partial class CI_Series_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Series property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Series")]
        public CI_Series_Type CI_Series {
            get {
                return CI_SeriesField;
            } 
            set {
                CI_SeriesField = value;
                NotifyPropertyChanged("CI_Series");
            }
        }

        private CI_Series_Type CI_SeriesField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractDQ_Element_Type xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_PositionalAccuracy_Type))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_Element", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractDQ_Element_Type xsd type.")]
    public abstract partial class AbstractDQ_Element_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// nameOfMeasure property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("nameOfMeasure")]
        public List<CharacterString_PropertyType> NameOfMeasure {
            get {
                return nameOfMeasureField;
            } 
            set {
                nameOfMeasureField = value;
                NotifyPropertyChanged("NameOfMeasure");
            }
        }

         /// <summary>
         /// bool to indicate if NameOfMeasure has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameOfMeasureSpecified
         {
             get {
             if(nameOfMeasureField!=null)
                 return nameOfMeasureField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> nameOfMeasureField; 

        /// <summary>
        /// measureIdentification property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MD_Identifier_PropertyType")]
		[XmlElement("measureIdentification")]
        public MD_Identifier_PropertyType MeasureIdentification {
            get {
                return measureIdentificationField;
            } 
            set {
                measureIdentificationField = value;
                NotifyPropertyChanged("MeasureIdentification");
            }
        }

        private MD_Identifier_PropertyType measureIdentificationField; 

        /// <summary>
        /// measureDescription property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("measureDescription")]
        public CharacterString_PropertyType MeasureDescription {
            get {
                return measureDescriptionField;
            } 
            set {
                measureDescriptionField = value;
                NotifyPropertyChanged("MeasureDescription");
            }
        }

        private CharacterString_PropertyType measureDescriptionField; 

        /// <summary>
        /// evaluationMethodType property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DQ_EvaluationMethodTypeCode_PropertyType")]
		[XmlElement("evaluationMethodType")]
        public DQ_EvaluationMethodTypeCode_PropertyType EvaluationMethodType {
            get {
                return evaluationMethodTypeField;
            } 
            set {
                evaluationMethodTypeField = value;
                NotifyPropertyChanged("EvaluationMethodType");
            }
        }

        private DQ_EvaluationMethodTypeCode_PropertyType evaluationMethodTypeField; 

        /// <summary>
        /// evaluationMethodDescription property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("evaluationMethodDescription")]
        public CharacterString_PropertyType EvaluationMethodDescription {
            get {
                return evaluationMethodDescriptionField;
            } 
            set {
                evaluationMethodDescriptionField = value;
                NotifyPropertyChanged("EvaluationMethodDescription");
            }
        }

        private CharacterString_PropertyType evaluationMethodDescriptionField; 

        /// <summary>
        /// evaluationProcedure property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Citation_PropertyType")]
		[XmlElement("evaluationProcedure")]
        public CI_Citation_PropertyType EvaluationProcedure {
            get {
                return evaluationProcedureField;
            } 
            set {
                evaluationProcedureField = value;
                NotifyPropertyChanged("EvaluationProcedure");
            }
        }

        private CI_Citation_PropertyType evaluationProcedureField; 

        /// <summary>
        /// dateTime property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DateTime_PropertyType")]
		[XmlElement("dateTime")]
        public List<DateTime_PropertyType> DateTime {
            get {
                return dateTimeField;
            } 
            set {
                dateTimeField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

         /// <summary>
         /// bool to indicate if DateTime has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DateTimeSpecified
         {
             get {
             if(dateTimeField!=null)
                 return dateTimeField.Count>0?true:false;
             else return false;
             }
         }
        private List<DateTime_PropertyType> dateTimeField; 

        /// <summary>
        /// result property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DQ_Result_PropertyType")]
		[XmlElement("result")]
        public List<DQ_Result_PropertyType> Result {
            get {
                return resultField;
            } 
            set {
                resultField = value;
                NotifyPropertyChanged("Result");
            }
        }

         /// <summary>
         /// bool to indicate if Result has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ResultSpecified
         {
             get {
             if(resultField!=null)
                 return resultField.Count>0?true:false;
             else return false;
             }
         }
        private List<DQ_Result_PropertyType> resultField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DQ_EvaluationMethodTypeCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DQ_EvaluationMethodTypeCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the DQ_EvaluationMethodTypeCode_PropertyType xsd type.")]
    public partial class DQ_EvaluationMethodTypeCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DQ_EvaluationMethodTypeCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("DQ_EvaluationMethodTypeCode")]
        public CodeListValue_Type DQ_EvaluationMethodTypeCode {
            get {
                return DQ_EvaluationMethodTypeCodeField;
            } 
            set {
                DQ_EvaluationMethodTypeCodeField = value;
                NotifyPropertyChanged("DQ_EvaluationMethodTypeCode");
            }
        }

        private CodeListValue_Type DQ_EvaluationMethodTypeCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DateTime_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DateTime_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the DateTime_PropertyType xsd type.")]
    public partial class DateTime_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DateTime property
        /// </summary>
		
		[XmlElement("DateTime")]
        public DateTime? DateTime {
            get {
                return DateTimeField;
            } 
            set {
                DateTimeField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? DateTimeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DQ_Result_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DQ_Result_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the DQ_Result_PropertyType xsd type.")]
    public partial class DQ_Result_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractDQ_Result property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractDQ_Result")]
        public AbstractDQ_Result_Type AbstractDQ_Result {
            get {
                return AbstractDQ_ResultField;
            } 
            set {
                AbstractDQ_ResultField = value;
                NotifyPropertyChanged("AbstractDQ_Result");
            }
        }

        private AbstractDQ_Result_Type AbstractDQ_ResultField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractDQ_PositionalAccuracy_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_PositionalAccuracy", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractDQ_PositionalAccuracy_Type xsd type.")]
    public abstract partial class AbstractDQ_PositionalAccuracy_Type : AbstractDQ_Element_Type, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EX_VerticalExtent_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_VerticalExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the EX_VerticalExtent_Type xsd type.")]
    public partial class EX_VerticalExtent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// minimumValue property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Real_PropertyType")]
		[XmlElement("minimumValue")]
        public Real_PropertyType MinimumValue {
            get {
                return minimumValueField;
            } 
            set {
                minimumValueField = value;
                NotifyPropertyChanged("MinimumValue");
            }
        }

        private Real_PropertyType minimumValueField; 

        /// <summary>
        /// maximumValue property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Real_PropertyType")]
		[XmlElement("maximumValue")]
        public Real_PropertyType MaximumValue {
            get {
                return maximumValueField;
            } 
            set {
                maximumValueField = value;
                NotifyPropertyChanged("MaximumValue");
            }
        }

        private Real_PropertyType maximumValueField; 

        /// <summary>
        /// verticalCRS property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SC_CRS_PropertyType")]
		[XmlElement("verticalCRS")]
        public SC_CRS_PropertyType VerticalCRS {
            get {
                return verticalCRSField;
            } 
            set {
                verticalCRSField = value;
                NotifyPropertyChanged("VerticalCRS");
            }
        }

        private SC_CRS_PropertyType verticalCRSField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Real_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Real_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the Real_PropertyType xsd type.")]
    public partial class Real_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Real property
        /// </summary>
		
		[XmlElement("Real")]
        public double? Real {
            get {
                return RealField;
            } 
            set {
                RealField = value;
                NotifyPropertyChanged("Real");
            }
        }

        private double? RealField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SC_CRS_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SC_CRS_PropertyType", Namespace="http://www.isotc211.org/2005/gsr")]
	[Description("This class represents the SC_CRS_PropertyType xsd type.")]
    public partial class SC_CRS_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractCRS", Namespace="http://www.opengis.net/gml/3.2")]
        public AbstractCRSType AbstractCRS {
            get {
                return AbstractCRSField;
            } 
            set {
                AbstractCRSField = value;
                NotifyPropertyChanged("AbstractCRS");
            }
        }

        private AbstractCRSType AbstractCRSField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractCRSType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractCRSType xsd type.")]
    public abstract partial class AbstractCRSType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// domainOfValidity property
        /// </summary>
		[RecurringElement]
		[XmlElement("domainOfValidity")]
        public List<DomainOfValidity> DomainOfValidity {
            get {
                return domainOfValidityField;
            } 
            set {
                domainOfValidityField = value;
                NotifyPropertyChanged("DomainOfValidity");
            }
        }

         /// <summary>
         /// bool to indicate if DomainOfValidity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DomainOfValiditySpecified
         {
             get {
             if(domainOfValidityField!=null)
                 return domainOfValidityField.Count>0?true:false;
             else return false;
             }
         }
        private List<DomainOfValidity> domainOfValidityField; 

        /// <summary>
        /// scope property
        /// </summary>
		[RecurringElement]
		[XmlElement("scope")]
        public List<string> Scope {
            get {
                return scopeField;
            } 
            set {
                scopeField = value;
                NotifyPropertyChanged("Scope");
            }
        }

         /// <summary>
         /// bool to indicate if Scope has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ScopeSpecified
         {
             get {
             if(scopeField!=null)
                 return scopeField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> scopeField; 


    } //here

    /// <summary>
    /// This class represents the VerticalCRSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalCRSType xsd type.")]
    public partial class VerticalCRSType : AbstractCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// verticalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("verticalCS")]
        public VerticalCSPropertyType VerticalCS {
            get {
                return verticalCSField;
            } 
            set {
                verticalCSField = value;
                NotifyPropertyChanged("VerticalCS");
            }
        }

        private VerticalCSPropertyType verticalCSField; 

        /// <summary>
        /// verticalDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("verticalDatum")]
        public VerticalDatumPropertyType VerticalDatum {
            get {
                return verticalDatumField;
            } 
            set {
                verticalDatumField = value;
                NotifyPropertyChanged("VerticalDatum");
            }
        }

        private VerticalDatumPropertyType verticalDatumField; 


    } //here

    /// <summary>
    /// This class represents the VerticalCSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("verticalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalCSPropertyType xsd type.")]
    public partial class VerticalCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// VerticalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("VerticalCS")]
        public VerticalCSType VerticalCS {
            get {
                return VerticalCSField;
            } 
            set {
                VerticalCSField = value;
                NotifyPropertyChanged("VerticalCS");
            }
        }

        private VerticalCSType VerticalCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the VerticalCSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalCSType xsd type.")]
    public partial class VerticalCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the VerticalDatumPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("verticalDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalDatumPropertyType xsd type.")]
    public partial class VerticalDatumPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// VerticalDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("VerticalDatum")]
        public VerticalDatumType VerticalDatum {
            get {
                return VerticalDatumField;
            } 
            set {
                VerticalDatumField = value;
                NotifyPropertyChanged("VerticalDatum");
            }
        }

        private VerticalDatumType VerticalDatumField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the VerticalDatumType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalDatumType xsd type.")]
    public partial class VerticalDatumType : AbstractDatumType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the AbstractDatumType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractDatumType xsd type.")]
    public abstract partial class AbstractDatumType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// domainOfValidity property
        /// </summary>
		[ComponentElement]
		[XmlElement("domainOfValidity")]
        public DomainOfValidity DomainOfValidity {
            get {
                return domainOfValidityField;
            } 
            set {
                domainOfValidityField = value;
                NotifyPropertyChanged("DomainOfValidity");
            }
        }

        private DomainOfValidity domainOfValidityField; 

        /// <summary>
        /// scope property
        /// </summary>
		[RecurringElement]
		[XmlElement("scope")]
        public List<string> Scope {
            get {
                return scopeField;
            } 
            set {
                scopeField = value;
                NotifyPropertyChanged("Scope");
            }
        }

         /// <summary>
         /// bool to indicate if Scope has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ScopeSpecified
         {
             get {
             if(scopeField!=null)
                 return scopeField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> scopeField; 

        /// <summary>
        /// anchorDefinition property
        /// </summary>
		[ComponentElement]
		[XmlElement("anchorDefinition")]
        public CodeType AnchorDefinition {
            get {
                return anchorDefinitionField;
            } 
            set {
                anchorDefinitionField = value;
                NotifyPropertyChanged("AnchorDefinition");
            }
        }

        private CodeType anchorDefinitionField; 

        /// <summary>
        /// realizationEpoch property
        /// </summary>
		
		[XmlElement("realizationEpoch", DataType="date")]
        public DateTime? RealizationEpoch {
            get {
                return realizationEpochField;
            } 
            set {
                realizationEpochField = value;
                 this.RealizationEpochSpecified = true;
                NotifyPropertyChanged("RealizationEpoch");
            }
        }

        private DateTime? realizationEpochField; 

        /// <summary>
        /// realizationEpochSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RealizationEpochSpecified {
            get {
                return realizationEpochSpecifiedField;
            } 
            set {
                realizationEpochSpecifiedField = value;
                NotifyPropertyChanged("RealizationEpochSpecified");
            }
        }

        private bool realizationEpochSpecifiedField; 


    } //here

    /// <summary>
    /// This class represents the GeodeticDatumType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("GeodeticDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticDatumType xsd type.")]
    public partial class GeodeticDatumType : AbstractDatumType, INotifyPropertyChanged
    {

        /// <summary>
        /// primeMeridian property
        /// </summary>
		[ComponentElement]
		[XmlElement("primeMeridian")]
        public PrimeMeridianPropertyType PrimeMeridian {
            get {
                return primeMeridianField;
            } 
            set {
                primeMeridianField = value;
                NotifyPropertyChanged("PrimeMeridian");
            }
        }

        private PrimeMeridianPropertyType primeMeridianField; 

        /// <summary>
        /// ellipsoid property
        /// </summary>
		[ComponentElement]
		[XmlElement("ellipsoid")]
        public EllipsoidPropertyType Ellipsoid {
            get {
                return ellipsoidField;
            } 
            set {
                ellipsoidField = value;
                NotifyPropertyChanged("Ellipsoid");
            }
        }

        private EllipsoidPropertyType ellipsoidField; 


    } //here

    /// <summary>
    /// This class represents the PrimeMeridianPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("primeMeridian", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the PrimeMeridianPropertyType xsd type.")]
    public partial class PrimeMeridianPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// PrimeMeridian property
        /// </summary>
		[ComponentElement]
		[XmlElement("PrimeMeridian")]
        public PrimeMeridianType PrimeMeridian {
            get {
                return PrimeMeridianField;
            } 
            set {
                PrimeMeridianField = value;
                NotifyPropertyChanged("PrimeMeridian");
            }
        }

        private PrimeMeridianType PrimeMeridianField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the PrimeMeridianType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("PrimeMeridian", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the PrimeMeridianType xsd type.")]
    public partial class PrimeMeridianType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// greenwichLongitude property
        /// </summary>
		
		[XmlElement("greenwichLongitude")]
        public AngleType GreenwichLongitude {
            get {
                return greenwichLongitudeField;
            } 
            set {
                greenwichLongitudeField = value;
                NotifyPropertyChanged("GreenwichLongitude");
            }
        }

        private AngleType greenwichLongitudeField; 


    } //here

    /// <summary>
    /// This class represents the AngleType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("greenwichLongitude", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AngleType xsd type.")]
    public partial class AngleType : MeasureType, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AngleType class.
        /// </summary>
        public AngleType() {}

        /// <summary>
        /// Initializes a new instance of the AngleType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public AngleType(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


    } //here

    /// <summary>
    /// This class represents the MeasureType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AngleType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("semiMajorAxis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the MeasureType xsd type.")]
    public partial class MeasureType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasureType class.
        /// </summary>
        public MeasureType() {}

        /// <summary>
        /// Initializes a new instance of the MeasureType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public MeasureType(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the LengthType xsd type.")]
    public partial class LengthType : MeasureType, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthType class.
        /// </summary>
        public LengthType() {}

        /// <summary>
        /// Initializes a new instance of the LengthType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public LengthType(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


    } //here
    }

    /// <summary>
    /// This class represents the EllipsoidPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ellipsoid", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidPropertyType xsd type.")]
    public partial class EllipsoidPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Ellipsoid property
        /// </summary>
		[ComponentElement]
		[XmlElement("Ellipsoid")]
        public EllipsoidType Ellipsoid {
            get {
                return EllipsoidField;
            } 
            set {
                EllipsoidField = value;
                NotifyPropertyChanged("Ellipsoid");
            }
        }

        private EllipsoidType EllipsoidField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the EllipsoidType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("Ellipsoid", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidType xsd type.")]
    public partial class EllipsoidType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// semiMajorAxis property
        /// </summary>
		
		[XmlElement("semiMajorAxis")]
        public MeasureType SemiMajorAxis {
            get {
                return semiMajorAxisField;
            } 
            set {
                semiMajorAxisField = value;
                NotifyPropertyChanged("SemiMajorAxis");
            }
        }

        private MeasureType semiMajorAxisField; 

        /// <summary>
        /// secondDefiningParameter property
        /// </summary>
		[ComponentElement]
		[XmlElement("secondDefiningParameter")]
        public SecondDefParameter SecondDefPara {
            get {
                return secondDefiningParameterField;
            } 
            set {
                secondDefiningParameterField = value;
                NotifyPropertyChanged("SecondDefPara");
            }
        }

        private SecondDefParameter secondDefiningParameterField; 


    } //here

    /// <summary>
    /// This class represents the secondDefiningParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the secondDefiningParameter xsd type.")]
    public partial class SecondDefParameter : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// SecondDefiningParameter property
        /// </summary>
		[ComponentElement]
		[XmlElement("SecondDefiningParameter")]
        public SecondDefiningParameter SecondDefPara {
            get {
                return SecondDefiningParameterField;
            } 
            set {
                SecondDefiningParameterField = value;
                NotifyPropertyChanged("SecondDefPara");
            }
        }

        private SecondDefiningParameter SecondDefiningParameterField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the SecondDefiningParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the SecondDefiningParameter xsd type.")]
    public partial class SecondDefiningParameter : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// inverseFlattening property
        /// </summary>
        [XmlElement("inverseFlattening")]
        public MeasureType InverseFlattening {
            get {
                return inverseFlatteningField;
            } 
            set {
                inverseFlatteningField = value;
                InverseFlatteningSpecified = (value!=null);
                NotifyPropertyChanged("InverseFlattening");
            }
        }

        private MeasureType inverseFlatteningField; 
        private bool inverseFlatteningSpecified = false; 

        /// <summary>
        /// bool to indicate if InverseFlattening has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool InverseFlatteningSpecified
        {
            get {
                return inverseFlatteningSpecified;
            }
            set {
                inverseFlatteningSpecified= value;
            }
        }

        /// <summary>
        /// isSphere property
        /// </summary>
        [XmlElement("isSphere")]
        public bool? IsSphere {
            get {
                return isSphereField;
            } 
            set {
                isSphereField = value;
                IsSphereSpecified = (value!=null);
                NotifyPropertyChanged("IsSphere");
            }
        }

        private bool? isSphereField; 
        private bool isSphereSpecified = false; 

        /// <summary>
        /// bool to indicate if IsSphere has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool IsSphereSpecified
        {
            get {
                return isSphereSpecified;
            }
            set {
                isSphereSpecified= value;
            }
        }

        /// <summary>
        /// semiMinorAxis property
        /// </summary>
        [XmlElement("semiMinorAxis")]
        public LengthType SemiMinorAxis {
            get {
                return semiMinorAxisField;
            } 
            set {
                semiMinorAxisField = value;
                SemiMinorAxisSpecified = (value!=null);
                NotifyPropertyChanged("SemiMinorAxis");
            }
        }

        private LengthType semiMinorAxisField; 
        private bool semiMinorAxisSpecified = false; 

        /// <summary>
        /// bool to indicate if SemiMinorAxis has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SemiMinorAxisSpecified
        {
            get {
                return semiMinorAxisSpecified;
            }
            set {
                semiMinorAxisSpecified= value;
            }
        }



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the AbstractGeneralDerivedCRSType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGeneralDerivedCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractGeneralDerivedCRSType xsd type.")]
    public abstract partial class AbstractGeneralDerivedCRSType : AbstractCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// conversion property
        /// </summary>
		[ComponentElement]
		[XmlElement("conversion")]
        public GeneralConversionPropertyType Conversion {
            get {
                return conversionField;
            } 
            set {
                conversionField = value;
                NotifyPropertyChanged("Conversion");
            }
        }

        private GeneralConversionPropertyType conversionField; 


    } //here

    /// <summary>
    /// This class represents the GeneralConversionPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("conversion", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeneralConversionPropertyType xsd type.")]
    public partial class GeneralConversionPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractGeneralConversion property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractGeneralConversion")]
        public AbstractGeneralConversionType AbstractGeneralConversion {
            get {
                return AbstractGeneralConversionField;
            } 
            set {
                AbstractGeneralConversionField = value;
                NotifyPropertyChanged("AbstractGeneralConversion");
            }
        }

        private AbstractGeneralConversionType AbstractGeneralConversionField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the AbstractGeneralConversionType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGeneralConversion", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractGeneralConversionType xsd type.")]
    public abstract partial class AbstractGeneralConversionType : AbstractCoordinateOperationType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EX_TemporalExtent_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_TemporalExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the EX_TemporalExtent_Type xsd type.")]
    public partial class EX_TemporalExtent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// extent property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TM_Primitive_PropertyType")]
		[XmlElement("extent")]
        public TM_Primitive_PropertyType Extent {
            get {
                return extentField;
            } 
            set {
                extentField = value;
                NotifyPropertyChanged("Extent");
            }
        }

        private TM_Primitive_PropertyType extentField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TM_Primitive_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TM_Primitive_PropertyType", Namespace="http://www.isotc211.org/2005/gts")]
	[Description("This class represents the TM_Primitive_PropertyType xsd type.")]
    public partial class TM_Primitive_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractTimePrimitive property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractTimePrimitive", Namespace="http://www.opengis.net/gml/3.2")]
        public AbstractTimePrimitiveType AbstractTimePrimitive {
            get {
                return AbstractTimePrimitiveField;
            } 
            set {
                AbstractTimePrimitiveField = value;
                NotifyPropertyChanged("AbstractTimePrimitive");
            }
        }

        private AbstractTimePrimitiveType AbstractTimePrimitiveField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EX_TemporalExtent_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EX_TemporalExtent_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the EX_TemporalExtent_PropertyType xsd type.")]
    public partial class EX_TemporalExtent_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EX_TemporalExtent property
        /// </summary>
		[ComponentElement]
		[XmlElement("EX_TemporalExtent")]
        public EX_TemporalExtent_Type EX_TemporalExtent {
            get {
                return EX_TemporalExtentField;
            } 
            set {
                EX_TemporalExtentField = value;
                NotifyPropertyChanged("EX_TemporalExtent");
            }
        }

        private EX_TemporalExtent_Type EX_TemporalExtentField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EX_VerticalExtent_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EX_VerticalExtent_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the EX_VerticalExtent_PropertyType xsd type.")]
    public partial class EX_VerticalExtent_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EX_VerticalExtent property
        /// </summary>
		[ComponentElement]
		[XmlElement("EX_VerticalExtent")]
        public EX_VerticalExtent_Type EX_VerticalExtent {
            get {
                return EX_VerticalExtentField;
            } 
            set {
                EX_VerticalExtentField = value;
                NotifyPropertyChanged("EX_VerticalExtent");
            }
        }

        private EX_VerticalExtent_Type EX_VerticalExtentField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the coordinateOperationAccuracy xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the coordinateOperationAccuracy xsd type.")]
    public partial class CoordinateOperationAccuracy : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractDQ_PositionalAccuracy property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractDQ_PositionalAccuracy", Namespace="http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_PositionalAccuracy_Type AbstractDQ_PositionalAccuracy {
            get {
                return AbstractDQ_PositionalAccuracyField;
            } 
            set {
                AbstractDQ_PositionalAccuracyField = value;
                NotifyPropertyChanged("AbstractDQ_PositionalAccuracy");
            }
        }

        private AbstractDQ_PositionalAccuracy_Type AbstractDQ_PositionalAccuracyField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CRSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("sourceCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CRSPropertyType xsd type.")]
    public partial class CRSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractCRS")]
        public AbstractCRSType AbstractCRS {
            get {
                return AbstractCRSField;
            } 
            set {
                AbstractCRSField = value;
                NotifyPropertyChanged("AbstractCRS");
            }
        }

        private AbstractCRSType AbstractCRSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the SphericalCSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("SphericalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the SphericalCSType xsd type.")]
    public partial class SphericalCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EllipsoidalCSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("EllipsoidalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidalCSType xsd type.")]
    public partial class EllipsoidalCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EllipsoidalCSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ellipsoidalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidalCSPropertyType xsd type.")]
    public partial class EllipsoidalCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EllipsoidalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("EllipsoidalCS")]
        public EllipsoidalCSType EllipsoidalCS {
            get {
                return EllipsoidalCSField;
            } 
            set {
                EllipsoidalCSField = value;
                NotifyPropertyChanged("EllipsoidalCS");
            }
        }

        private EllipsoidalCSType EllipsoidalCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the SphericalCSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("sphericalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the SphericalCSPropertyType xsd type.")]
    public partial class SphericalCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// SphericalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("SphericalCS")]
        public SphericalCSType SphericalCS {
            get {
                return SphericalCSField;
            } 
            set {
                SphericalCSField = value;
                NotifyPropertyChanged("SphericalCS");
            }
        }

        private SphericalCSType SphericalCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the GeodeticDatumPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("geodeticDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticDatumPropertyType xsd type.")]
    public partial class GeodeticDatumPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// GeodeticDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("GeodeticDatum")]
        public GeodeticDatumType GeodeticDatum {
            get {
                return GeodeticDatumField;
            } 
            set {
                GeodeticDatumField = value;
                NotifyPropertyChanged("GeodeticDatum");
            }
        }

        private GeodeticDatumType GeodeticDatumField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedEpsgCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedEpsgCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedEpsgCrs xsd type.")]
    public partial class ProjectedEpsgCrs : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// EpsgCode property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("EpsgCode")]
        public long? EpsgCode {
            get {
                return EpsgCodeField;
            } 
            set {
                EpsgCodeField = value;
                NotifyPropertyChanged("EpsgCode");
            }
        }

        private long? EpsgCodeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the VerticalCrs xsd type.")]
    public partial class VerticalCrs : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Direction property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VerticalDirection")]
		[XmlElement("Direction")]
        public VerticalDirection? Direction {
            get {
                return DirectionField;
            } 
            set {
                DirectionField = value;
                 this.DirectionSpecified = true;
                NotifyPropertyChanged("Direction");
            }
        }

        
        private bool DirectionSpecifiedField = false;
        
        /// <summary>
        /// DirectionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DirectionSpecified {
            get {
                return DirectionSpecifiedField;
            } 
            set {
                DirectionSpecifiedField = value;
                NotifyPropertyChanged("DirectionSpecified");
            }
        }
        
        private VerticalDirection? DirectionField; 

        /// <summary>
        /// AbstractVerticalCrs property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractVerticalCrs")]
		[XmlElement("AbstractVerticalCrs")]
        public AbstractVerticalCrs AbstractVerticalCrs {
            get {
                return AbstractVerticalCrsField;
            } 
            set {
                AbstractVerticalCrsField = value;
                NotifyPropertyChanged("AbstractVerticalCrs");
            }
        }

        private AbstractVerticalCrs AbstractVerticalCrsField; 

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LengthUomExt")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractVerticalCrs xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalWktCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalUnknownCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalLocalAuthorityCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalGmlCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalEpsgCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractVerticalCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractVerticalCrs xsd type.")]
    public abstract partial class AbstractVerticalCrs : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalWktCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalWktCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalWktCrs xsd type.")]
    public partial class VerticalWktCrs : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// WellKnownText property
        /// </summary>
		[Required]
        [Description("ISO 19162 compliant well known text of the CRS")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("WellKnownText")]
        public string WellKnownText {
            get {
                return WellKnownTextField;
            } 
            set {
                WellKnownTextField = value;
                NotifyPropertyChanged("WellKnownText");
            }
        }

        private string WellKnownTextField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalUnknownCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalUnknownCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalUnknownCrs xsd type.")]
    public partial class VerticalUnknownCrs : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// Unknown property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Unknown")]
        public string Unknown {
            get {
                return UnknownField;
            } 
            set {
                UnknownField = value;
                NotifyPropertyChanged("Unknown");
            }
        }

        private string UnknownField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalLocalAuthorityCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalLocalAuthorityCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalLocalAuthorityCrs xsd type.")]
    public partial class VerticalLocalAuthorityCrs : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// LocalAuthorityCrsName property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AuthorityQualifiedName")]
		[XmlElement("LocalAuthorityCrsName")]
        public AuthorityQualifiedName LocalAuthorityCrsName {
            get {
                return LocalAuthorityCrsNameField;
            } 
            set {
                LocalAuthorityCrsNameField = value;
                NotifyPropertyChanged("LocalAuthorityCrsName");
            }
        }

        private AuthorityQualifiedName LocalAuthorityCrsNameField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalGmlCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalGmlCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalGmlCrs xsd type.")]
    public partial class VerticalGmlCrs : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// GmlVerticalCrsDefinition property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VerticalCRSType")]
		[XmlElement("GmlVerticalCrsDefinition")]
        public VerticalCRSType GmlVerticalCrsDefinition {
            get {
                return GmlVerticalCrsDefinitionField;
            } 
            set {
                GmlVerticalCrsDefinitionField = value;
                NotifyPropertyChanged("GmlVerticalCrsDefinition");
            }
        }

        private VerticalCRSType GmlVerticalCrsDefinitionField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalEpsgCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalEpsgCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalEpsgCrs xsd type.")]
    public partial class VerticalEpsgCrs : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// EpsgCode property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("EpsgCode")]
        public long? EpsgCode {
            get {
                return EpsgCodeField;
            } 
            set {
                EpsgCodeField = value;
                NotifyPropertyChanged("EpsgCode");
            }
        }

        private long? EpsgCodeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LocalEngineeringCompoundCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LocalEngineeringCompoundCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the LocalEngineeringCompoundCrs xsd type.")]
    public partial class LocalEngineeringCompoundCrs : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Azimuth property
        /// </summary>
		[Required]
        [Description("Azimuth of the first axis of this Crs regarding the north kind provided in this same class.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasureExt")]
		[XmlElement("Azimuth")]
        public PlaneAngleMeasureExt Azimuth {
            get {
                return AzimuthField;
            } 
            set {
                AzimuthField = value;
                NotifyPropertyChanged("Azimuth");
            }
        }

        private PlaneAngleMeasureExt AzimuthField; 

        /// <summary>
        /// AzimuthReference property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "NorthReferenceKind")]
		[XmlElement("AzimuthReference")]
        public NorthReferenceKind? AzimuthReference {
            get {
                return AzimuthReferenceField;
            } 
            set {
                AzimuthReferenceField = value;
                 this.AzimuthReferenceSpecified = true;
                NotifyPropertyChanged("AzimuthReference");
            }
        }

        
        private bool AzimuthReferenceSpecifiedField = false;
        
        /// <summary>
        /// AzimuthReferenceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AzimuthReferenceSpecified {
            get {
                return AzimuthReferenceSpecifiedField;
            } 
            set {
                AzimuthReferenceSpecifiedField = value;
                NotifyPropertyChanged("AzimuthReferenceSpecified");
            }
        }
        
        private NorthReferenceKind? AzimuthReferenceField; 

        /// <summary>
        /// OriginProjectedCoordinate1 property
        /// </summary>
		[Required]
        [Description("First coordinate of the origin of the local engineering CRS in the base projected CRS (consequently in the uom of the base projected CRS)")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("OriginProjectedCoordinate1")]
        public double? OriginProjectedCoordinate1 {
            get {
                return OriginProjectedCoordinate1Field;
            } 
            set {
                OriginProjectedCoordinate1Field = value;
                NotifyPropertyChanged("OriginProjectedCoordinate1");
            }
        }

        private double? OriginProjectedCoordinate1Field; 

        /// <summary>
        /// OriginProjectedCoordinate2 property
        /// </summary>
		[Required]
        [Description("Second coordinate of the origin of the local engineering CRS in the base projected CRS (consequently in the uom of the base projected CRS).")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("OriginProjectedCoordinate2")]
        public double? OriginProjectedCoordinate2 {
            get {
                return OriginProjectedCoordinate2Field;
            } 
            set {
                OriginProjectedCoordinate2Field = value;
                NotifyPropertyChanged("OriginProjectedCoordinate2");
            }
        }

        private double? OriginProjectedCoordinate2Field; 

        /// <summary>
        /// OriginVerticalCoordinate property
        /// </summary>
		[Required]
        [Description("Vertical coordinate of the origin of the local engineering CRS in the base vertical CRS (consequently in the uom of the base vertical CRS)")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("OriginVerticalCoordinate")]
        public double? OriginVerticalCoordinate {
            get {
                return OriginVerticalCoordinateField;
            } 
            set {
                OriginVerticalCoordinateField = value;
                NotifyPropertyChanged("OriginVerticalCoordinate");
            }
        }

        private double? OriginVerticalCoordinateField; 

        /// <summary>
        /// VerticalAxis property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VerticalAxis")]
		[XmlElement("VerticalAxis")]
        public VerticalAxis VerticalAxis {
            get {
                return VerticalAxisField;
            } 
            set {
                VerticalAxisField = value;
                NotifyPropertyChanged("VerticalAxis");
            }
        }

        private VerticalAxis VerticalAxisField; 

        /// <summary>
        /// HorizontalAxes property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "HorizontalAxes")]
		[XmlElement("HorizontalAxes")]
        public HorizontalAxes HorizontalAxes {
            get {
                return HorizontalAxesField;
            } 
            set {
                HorizontalAxesField = value;
                NotifyPropertyChanged("HorizontalAxes");
            }
        }

        private HorizontalAxes HorizontalAxesField; 

        /// <summary>
        /// VerticalCrs property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VerticalCrs")]
		[XmlElement("VerticalCrs")]
        public VerticalCrs VerticalCrs {
            get {
                return VerticalCrsField;
            } 
            set {
                VerticalCrsField = value;
                NotifyPropertyChanged("VerticalCrs");
            }
        }

        private VerticalCrs VerticalCrsField; 

        /// <summary>
        /// OriginUncertaintyVectorAtSigmaX property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Vector")]
		[XmlElement("OriginUncertaintyVectorAtSigmaX")]
        public Vector OriginUncertaintyVectorAtSigmaX {
            get {
                return OriginUncertaintyVectorAtSigmaXField;
            } 
            set {
                OriginUncertaintyVectorAtSigmaXField = value;
                NotifyPropertyChanged("OriginUncertaintyVectorAtSigmaX");
            }
        }

        private Vector OriginUncertaintyVectorAtSigmaXField; 

        /// <summary>
        /// ProjectedCrs property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ProjectedCrs")]
		[XmlElement("ProjectedCrs")]
        public ProjectedCrs ProjectedCrs {
            get {
                return ProjectedCrsField;
            } 
            set {
                ProjectedCrsField = value;
                NotifyPropertyChanged("ProjectedCrs");
            }
        }

        private ProjectedCrs ProjectedCrsField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PlaneAngleMeasureExt xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PlaneAngleMeasureExt", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PlaneAngleMeasureExt xsd type.")]
    public partial class PlaneAngleMeasureExt : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasureExt class.
        /// </summary>
        public PlaneAngleMeasureExt() {}

        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasureExt class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PlaneAngleMeasureExt(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleUomExt")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalAxis xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalAxis", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalAxis xsd type.")]
    public partial class VerticalAxis : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Direction property
        /// </summary>
		[Required]
        [Description("Direction of the axis. Commonly used for values such as \"easting, northing, depth, etc..\"")]
        [EnergisticsDataTypeAttribute(DataType = "VerticalDirection")]
		[XmlElement("Direction")]
        public VerticalDirection? Direction {
            get {
                return DirectionField;
            } 
            set {
                DirectionField = value;
                 this.DirectionSpecified = true;
                NotifyPropertyChanged("Direction");
            }
        }

        
        private bool DirectionSpecifiedField = false;
        
        /// <summary>
        /// DirectionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DirectionSpecified {
            get {
                return DirectionSpecifiedField;
            } 
            set {
                DirectionSpecifiedField = value;
                NotifyPropertyChanged("DirectionSpecified");
            }
        }
        
        private VerticalDirection? DirectionField; 

        /// <summary>
        /// Uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LengthAndTimeUomExt")]
		[XmlElement("Uom")]
        public ExtensibleEnum<LengthUom>? Uom {
            get {
                return UomField;
            } 
            set {
                UomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ExtensibleEnum<LengthUom>? UomField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the HorizontalAxes xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="HorizontalAxes", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the HorizontalAxes xsd type.")]
    public partial class HorizontalAxes : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Direction1 property
        /// </summary>
		[Required]
        [Description("Direction of the axis. Commonly used for values such as \"easting, northing, depth, etc..\"")]
        [EnergisticsDataTypeAttribute(DataType = "AxisDirectionKind")]
		[XmlElement("Direction1")]
        public AxisDirectionKind? Direction1 {
            get {
                return Direction1Field;
            } 
            set {
                Direction1Field = value;
                 this.Direction1Specified = true;
                NotifyPropertyChanged("Direction1");
            }
        }

        
        private bool Direction1SpecifiedField = false;
        
        /// <summary>
        /// Direction1Specified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool Direction1Specified {
            get {
                return Direction1SpecifiedField;
            } 
            set {
                Direction1SpecifiedField = value;
                NotifyPropertyChanged("Direction1Specified");
            }
        }
        
        private AxisDirectionKind? Direction1Field; 

        /// <summary>
        /// Direction2 property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AxisDirectionKind")]
		[XmlElement("Direction2")]
        public AxisDirectionKind? Direction2 {
            get {
                return Direction2Field;
            } 
            set {
                Direction2Field = value;
                 this.Direction2Specified = true;
                NotifyPropertyChanged("Direction2");
            }
        }

        
        private bool Direction2SpecifiedField = false;
        
        /// <summary>
        /// Direction2Specified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool Direction2Specified {
            get {
                return Direction2SpecifiedField;
            } 
            set {
                Direction2SpecifiedField = value;
                NotifyPropertyChanged("Direction2Specified");
            }
        }
        
        private AxisDirectionKind? Direction2Field; 

        /// <summary>
        /// Uom property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasureExt")]
		[XmlElement("Uom")]
        public LengthMeasureExt Uom {
            get {
                return UomField;
            } 
            set {
                UomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthMeasureExt UomField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthMeasureExt xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthMeasureExt", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the LengthMeasureExt xsd type.")]
    public partial class LengthMeasureExt : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthMeasureExt class.
        /// </summary>
        public LengthMeasureExt() {}

        /// <summary>
        /// Initializes a new instance of the LengthMeasureExt class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthMeasureExt(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LengthUomExt")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Vector xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Vector", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the Vector xsd type.")]
    public partial class Vector : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Component1 property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Component1")]
        public double? Component1 {
            get {
                return Component1Field;
            } 
            set {
                Component1Field = value;
                NotifyPropertyChanged("Component1");
            }
        }

        private double? Component1Field; 

        /// <summary>
        /// Component2 property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Component2")]
        public double? Component2 {
            get {
                return Component2Field;
            } 
            set {
                Component2Field = value;
                NotifyPropertyChanged("Component2");
            }
        }

        private double? Component2Field; 

        /// <summary>
        /// Component3 property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Component3")]
        public double? Component3 {
            get {
                return Component3Field;
            } 
            set {
                Component3Field = value;
                NotifyPropertyChanged("Component3");
            }
        }

        private double? Component3Field; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the GeodeticCrs xsd type.")]
    public partial class GeodeticCrs : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractGeodeticCrs property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractGeodeticCrs")]
		[XmlElement("AbstractGeodeticCrs")]
        public AbstractGeodeticCrs AbstractGeodeticCrs {
            get {
                return AbstractGeodeticCrsField;
            } 
            set {
                AbstractGeodeticCrsField = value;
                NotifyPropertyChanged("AbstractGeodeticCrs");
            }
        }

        private AbstractGeodeticCrs AbstractGeodeticCrsField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractGeodeticCrs xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticWktCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticUnknownCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticLocalAuthorityCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticGmlCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticEpsgCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractGeodeticCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractGeodeticCrs xsd type.")]
    public abstract partial class AbstractGeodeticCrs : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticWktCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticWktCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeodeticWktCrs xsd type.")]
    public partial class GeodeticWktCrs : AbstractGeodeticCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// WellKnownText property
        /// </summary>
		[Required]
        [Description("ISO 19162 compliant well known text of the CRS")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("WellKnownText")]
        public string WellKnownText {
            get {
                return WellKnownTextField;
            } 
            set {
                WellKnownTextField = value;
                NotifyPropertyChanged("WellKnownText");
            }
        }

        private string WellKnownTextField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticUnknownCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticUnknownCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeodeticUnknownCrs xsd type.")]
    public partial class GeodeticUnknownCrs : AbstractGeodeticCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// Unknown property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Unknown")]
        public string Unknown {
            get {
                return UnknownField;
            } 
            set {
                UnknownField = value;
                NotifyPropertyChanged("Unknown");
            }
        }

        private string UnknownField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticLocalAuthorityCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticLocalAuthorityCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeodeticLocalAuthorityCrs xsd type.")]
    public partial class GeodeticLocalAuthorityCrs : AbstractGeodeticCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// LocalAuthorityCrsName property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AuthorityQualifiedName")]
		[XmlElement("LocalAuthorityCrsName")]
        public AuthorityQualifiedName LocalAuthorityCrsName {
            get {
                return LocalAuthorityCrsNameField;
            } 
            set {
                LocalAuthorityCrsNameField = value;
                NotifyPropertyChanged("LocalAuthorityCrsName");
            }
        }

        private AuthorityQualifiedName LocalAuthorityCrsNameField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticGmlCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticGmlCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeodeticGmlCrs xsd type.")]
    public partial class GeodeticGmlCrs : AbstractGeodeticCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// GmlGeodeticCrsDefinition property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GeodeticCRSType")]
		[XmlElement("GmlGeodeticCrsDefinition")]
        public GeodeticCRSType GmlGeodeticCrsDefinition {
            get {
                return GmlGeodeticCrsDefinitionField;
            } 
            set {
                GmlGeodeticCrsDefinitionField = value;
                NotifyPropertyChanged("GmlGeodeticCrsDefinition");
            }
        }

        private GeodeticCRSType GmlGeodeticCrsDefinitionField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticEpsgCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticEpsgCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeodeticEpsgCrs xsd type.")]
    public partial class GeodeticEpsgCrs : AbstractGeodeticCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// EpsgCode property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("EpsgCode")]
        public long? EpsgCode {
            get {
                return EpsgCodeField;
            } 
            set {
                EpsgCodeField = value;
                NotifyPropertyChanged("EpsgCode");
            }
        }

        private long? EpsgCodeField; 


    } //here
    }

    /// <summary>
    /// This class represents the ActivityTemplate xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the ActivityTemplate xsd type.")]
    public partial class ActivityTemplate : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Parameter property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ParameterTemplate")]
		[XmlElement("Parameter")]
        public List<ParameterTemplate> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(ParameterField!=null)
                 return ParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<ParameterTemplate> ParameterField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ParameterTemplate xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ParameterTemplate", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ParameterTemplate xsd type.")]
    public partial class ParameterTemplate : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AllowedKind property
        /// </summary>
		[Description("If no allowed type is given, then all kind of datatypes is allowed.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ActivityParameterKind")]
		[XmlElement("AllowedKind")]
        public List<ActivityParameterKind> AllowedKind {
            get {
                return AllowedKindField;
            } 
            set {
                AllowedKindField = value;
                NotifyPropertyChanged("AllowedKind");
            }
        }

         /// <summary>
         /// bool to indicate if AllowedKind has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AllowedKindSpecified
         {
             get {
             if(AllowedKindField!=null)
                 return AllowedKindField.Count>0?true:false;
             else return false;
             }
         }
        private List<ActivityParameterKind> AllowedKindField; 

        /// <summary>
        /// IsInput property
        /// </summary>
		[Required]
        [Description("Indicates if the parameter is an input of the activity. If the parameter is a data object and is also an output of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsInput")]
        public bool? IsInput {
            get {
                return IsInputField;
            } 
            set {
                IsInputField = value;
                NotifyPropertyChanged("IsInput");
            }
        }

        private bool? IsInputField; 

        /// <summary>
        /// KeyConstraint property
        /// </summary>
		[Description("Allows to indicate that, in the same activity, this parameter template must be associated to another parameter template identified by its title.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("KeyConstraint")]
        public List<string> KeyConstraint {
            get {
                return KeyConstraintField;
            } 
            set {
                KeyConstraintField = value;
                NotifyPropertyChanged("KeyConstraint");
            }
        }

         /// <summary>
         /// bool to indicate if KeyConstraint has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool KeyConstraintSpecified
         {
             get {
             if(KeyConstraintField!=null)
                 return KeyConstraintField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> KeyConstraintField; 

        /// <summary>
        /// IsOutput property
        /// </summary>
		[Required]
        [Description("Indicates if the parameter is an output of the activity. If the parameter is a data object and is also an input of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsOutput")]
        public bool? IsOutput {
            get {
                return IsOutputField;
            } 
            set {
                IsOutputField = value;
                NotifyPropertyChanged("IsOutput");
            }
        }

        private bool? IsOutputField; 

        /// <summary>
        /// Title property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Name of the parameter in the activity. Key to identify parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Title")]
        public string Title {
            get {
                return TitleField;
            } 
            set {
                TitleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private string TitleField; 

        /// <summary>
        /// DataObjectContentType property
        /// </summary>
		[StringLength(2000)]
        [Description("When parameter is limited to data object of given types, describe the allowed types. Used only when ParameterType is dataObject")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("DataObjectContentType")]
        public string DataObjectContentType {
            get {
                return DataObjectContentTypeField;
            } 
            set {
                DataObjectContentTypeField = value;
                NotifyPropertyChanged("DataObjectContentType");
            }
        }

        private string DataObjectContentTypeField; 

        /// <summary>
        /// MaxOccurs property
        /// </summary>
		[Required]
        [Description("Maximum number of parameters of this type allowed in the activity. If the maximum number of parameters is infinite, use -1 value.")]
        [EnergisticsDataTypeAttribute(DataType = "long")]
		[XmlElement("MaxOccurs")]
        public long? MaxOccurs {
            get {
                return MaxOccursField;
            } 
            set {
                MaxOccursField = value;
                NotifyPropertyChanged("MaxOccurs");
            }
        }

        private long? MaxOccursField; 

        /// <summary>
        /// MinOccurs property
        /// </summary>
		[Required]
        [Description("Minimum number of parameter of this type required by the activity. If the minimum number of parameters is infinite, use -1 value.")]
        [EnergisticsDataTypeAttribute(DataType = "long")]
		[XmlElement("MinOccurs")]
        public long? MinOccurs {
            get {
                return MinOccursField;
            } 
            set {
                MinOccursField = value;
                NotifyPropertyChanged("MinOccurs");
            }
        }

        private long? MinOccursField; 

        /// <summary>
        /// Constraint property
        /// </summary>
		[StringLength(2000)]
        [Description("Textual description of additional constraint associated with the parameter. (note that it will be better to have a formal description of the constraint)")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Constraint")]
        public string Constraint {
            get {
                return ConstraintField;
            } 
            set {
                ConstraintField = value;
                NotifyPropertyChanged("Constraint");
            }
        }

        private string ConstraintField; 

        /// <summary>
        /// DefaultValue property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractActivityParameter")]
		[XmlElement("DefaultValue")]
        public List<AbstractActivityParameter> DefaultValue {
            get {
                return DefaultValueField;
            } 
            set {
                DefaultValueField = value;
                NotifyPropertyChanged("DefaultValue");
            }
        }

         /// <summary>
         /// bool to indicate if DefaultValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DefaultValueSpecified
         {
             get {
             if(DefaultValueField!=null)
                 return DefaultValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractActivityParameter> DefaultValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractActivityParameter xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeIndexParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerQuantityParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleQuantityParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataObjectParameter))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractActivityParameter", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractActivityParameter xsd type.")]
    public abstract partial class AbstractActivityParameter : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Title property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Name of the parameter, used to identify it in the activity. Must have an equivalent in the activity descriptor parameters.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Title")]
        public string Title {
            get {
                return TitleField;
            } 
            set {
                TitleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private string TitleField; 

        /// <summary>
        /// Index property
        /// </summary>
		[Description("When parameter is an array, used to indicate the index in the array")]
        [EnergisticsDataTypeAttribute(DataType = "long")]
		[XmlElement("Index")]
        public long? Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                 this.IndexSpecified = true;
                NotifyPropertyChanged("Index");
            }
        }

        private long? IndexField; 

        /// <summary>
        /// IndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexSpecified {
            get {
                return IndexSpecifiedField;
            } 
            set {
                IndexSpecifiedField = value;
                NotifyPropertyChanged("IndexSpecified");
            }
        }

        private bool IndexSpecifiedField; 

        /// <summary>
        /// Selection property
        /// </summary>
		[StringLength(2000)]
        [Description("Textual description about how this parameter was selected.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Selection")]
        public string Selection {
            get {
                return SelectionField;
            } 
            set {
                SelectionField = value;
                NotifyPropertyChanged("Selection");
            }
        }

        private string SelectionField; 

        /// <summary>
        /// Key property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractParameterKey")]
		[XmlElement("Key")]
        public List<AbstractParameterKey> Key {
            get {
                return KeyField;
            } 
            set {
                KeyField = value;
                NotifyPropertyChanged("Key");
            }
        }

         /// <summary>
         /// bool to indicate if Key has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool KeySpecified
         {
             get {
             if(KeyField!=null)
                 return KeyField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractParameterKey> KeyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractParameterKey xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeIndexParameterKey))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ObjectParameterKey))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractParameterKey", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractParameterKey xsd type.")]
    public abstract partial class AbstractParameterKey : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeIndexParameterKey xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeIndexParameterKey", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the TimeIndexParameterKey xsd type.")]
    public partial class TimeIndexParameterKey : AbstractParameterKey, INotifyPropertyChanged
    {

        /// <summary>
        /// TimeIndex property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeIndex")]
		[XmlElement("TimeIndex")]
        public TimeIndex TimeIndex {
            get {
                return TimeIndexField;
            } 
            set {
                TimeIndexField = value;
                NotifyPropertyChanged("TimeIndex");
            }
        }

        private TimeIndex TimeIndexField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeIndex xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeIndex", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the TimeIndex xsd type.")]
    public partial class TimeIndex : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Index property
        /// </summary>
		[Required]
        [Description("The index of the time in the time series.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("Index")]
        public long? Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private long? IndexField; 

        /// <summary>
        /// TimeSeries property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("TimeSeries")]
        public DataObjectReference TimeSeries {
            get {
                return TimeSeriesField;
            } 
            set {
                TimeSeriesField = value;
                NotifyPropertyChanged("TimeSeries");
            }
        }

        private DataObjectReference TimeSeriesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ObjectParameterKey xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ObjectParameterKey", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ObjectParameterKey xsd type.")]
    public partial class ObjectParameterKey : AbstractParameterKey, INotifyPropertyChanged
    {

        /// <summary>
        /// DataObject property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("DataObject")]
        public DataObjectReference DataObject {
            get {
                return DataObjectField;
            } 
            set {
                DataObjectField = value;
                NotifyPropertyChanged("DataObject");
            }
        }

        private DataObjectReference DataObjectField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeIndexParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeIndexParameter", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the TimeIndexParameter xsd type.")]
    public partial class TimeIndexParameter : AbstractActivityParameter, INotifyPropertyChanged
    {

        /// <summary>
        /// TimeIndex property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeIndex")]
		[XmlElement("TimeIndex")]
        public TimeIndex TimeIndex {
            get {
                return TimeIndexField;
            } 
            set {
                TimeIndexField = value;
                NotifyPropertyChanged("TimeIndex");
            }
        }

        private TimeIndex TimeIndexField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StringParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StringParameter", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the StringParameter xsd type.")]
    public partial class StringParameter : AbstractActivityParameter, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StringParameter class.
        /// </summary>
        public StringParameter() {}

        /// <summary>
        /// Initializes a new instance of the StringParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public StringParameter(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("String value")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Value")]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IntegerQuantityParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IntegerQuantityParameter", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the IntegerQuantityParameter xsd type.")]
    public partial class IntegerQuantityParameter : AbstractActivityParameter, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IntegerQuantityParameter class.
        /// </summary>
        public IntegerQuantityParameter() {}

        /// <summary>
        /// Initializes a new instance of the IntegerQuantityParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public IntegerQuantityParameter(long value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("Integer value")]
        [EnergisticsDataTypeAttribute(DataType = "long")]
		[XmlElement("Value")]
        public long? Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private long? ValueField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DoubleQuantityParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DoubleQuantityParameter", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DoubleQuantityParameter xsd type.")]
    public partial class DoubleQuantityParameter : AbstractActivityParameter, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DoubleQuantityParameter class.
        /// </summary>
        public DoubleQuantityParameter() {}

        /// <summary>
        /// Initializes a new instance of the DoubleQuantityParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public DoubleQuantityParameter(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("Double value")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Value")]
        public double? Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double? ValueField; 

        /// <summary>
        /// Uom property
        /// </summary>
		[Required]
        [Description("Unit of measure associated with the value")]
        [EnergisticsDataTypeAttribute(DataType = "UnitOfMeasureExt")]
		[XmlElement("Uom")]
        public ExtensibleEnum<LegacyUnitOfMeasure>? Uom {
            get {
                return UomField;
            } 
            set {
                UomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ExtensibleEnum<LegacyUnitOfMeasure>? UomField; 

        /// <summary>
        /// CustomUnitDictionary property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("CustomUnitDictionary")]
        public DataObjectReference CustomUnitDictionary {
            get {
                return CustomUnitDictionaryField;
            } 
            set {
                CustomUnitDictionaryField = value;
                NotifyPropertyChanged("CustomUnitDictionary");
            }
        }

        private DataObjectReference CustomUnitDictionaryField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DataObjectParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DataObjectParameter", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DataObjectParameter xsd type.")]
    public partial class DataObjectParameter : AbstractActivityParameter, INotifyPropertyChanged
    {

        /// <summary>
        /// DataObject property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("DataObject")]
        public DataObjectReference DataObject {
            get {
                return DataObjectField;
            } 
            set {
                DataObjectField = value;
                NotifyPropertyChanged("DataObject");
            }
        }

        private DataObjectReference DataObjectField; 


    } //here
    }

    /// <summary>
    /// This class represents the Activity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the Activity xsd type.")]
    public partial class Activity : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Parent property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Parent")]
        public DataObjectReference Parent {
            get {
                return ParentField;
            } 
            set {
                ParentField = value;
                NotifyPropertyChanged("Parent");
            }
        }

        private DataObjectReference ParentField; 

        /// <summary>
        /// ActivityDescriptor property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ActivityDescriptor")]
        public DataObjectReference ActivityDescriptor {
            get {
                return ActivityDescriptorField;
            } 
            set {
                ActivityDescriptorField = value;
                NotifyPropertyChanged("ActivityDescriptor");
            }
        }

        private DataObjectReference ActivityDescriptorField; 

        /// <summary>
        /// Parameter property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractActivityParameter")]
		[XmlElement("Parameter")]
        public List<AbstractActivityParameter> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(ParameterField!=null)
                 return ParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractActivityParameter> ParameterField; 


    } //here

    /// <summary>
    /// This class represents the EpcExternalPartReference xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the EpcExternalPartReference xsd type.")]
    public partial class EpcExternalPartReference : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Filename property
        /// </summary>
		[StringLength(2000)]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Filename")]
        public string Filename {
            get {
                return FilenameField;
            } 
            set {
                FilenameField = value;
                NotifyPropertyChanged("Filename");
            }
        }

        private string FilenameField; 

        /// <summary>
        /// MimeType property
        /// </summary>
		[StringLength(2000)]
        [Description("IAMF registered, if one exists, or a free text field. Needs documentation on seismic especially.  MIME type for HDF proxy is : application/x-hdf5 (by convention).")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("MimeType")]
        public string MimeType {
            get {
                return MimeTypeField;
            } 
            set {
                MimeTypeField = value;
                NotifyPropertyChanged("MimeType");
            }
        }

        private string MimeTypeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractGrowingObject xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractGrowingObject", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the AbstractGrowingObject xsd type.")]
    public abstract partial class AbstractGrowingObject : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// GrowingStatus property
        /// </summary>
		[Required]
        [Description("Describes the growing status of the object, whether active, inactive or closed")]
        [EnergisticsDataTypeAttribute(DataType = "GrowingStatusKind")]
		[XmlElement("GrowingStatus")]
        public GrowingStatusKind? GrowingStatus {
            get {
                return GrowingStatusField;
            } 
            set {
                GrowingStatusField = value;
                 this.GrowingStatusSpecified = true;
                NotifyPropertyChanged("GrowingStatus");
            }
        }

        
        private bool GrowingStatusSpecifiedField = false;
        
        /// <summary>
        /// GrowingStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GrowingStatusSpecified {
            get {
                return GrowingStatusSpecifiedField;
            } 
            set {
                GrowingStatusSpecifiedField = value;
                NotifyPropertyChanged("GrowingStatusSpecified");
            }
        }
        
        private GrowingStatusKind? GrowingStatusField; 


    } //here
    }

    /// <summary>
    /// This class represents the TimeSeries xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the TimeSeries xsd type.")]
    public partial class TimeSeries : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Time property
        /// </summary>
		[Required]
        [Description("Individual times composing the series. The list ordering is used by the time index.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "GeologicTime")]
		[XmlElement("Time")]
        public List<GeologicTime> Time {
            get {
                return TimeField;
            } 
            set {
                TimeField = value;
                NotifyPropertyChanged("Time");
            }
        }

         /// <summary>
         /// bool to indicate if Time has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TimeSpecified
         {
             get {
             if(TimeField!=null)
                 return TimeField.Count>0?true:false;
             else return false;
             }
         }
        private List<GeologicTime> TimeField; 

        /// <summary>
        /// TimeSeriesParentage property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeSeriesParentage")]
		[XmlElement("TimeSeriesParentage")]
        public TimeSeriesParentage TimeSeriesParentage {
            get {
                return TimeSeriesParentageField;
            } 
            set {
                TimeSeriesParentageField = value;
                NotifyPropertyChanged("TimeSeriesParentage");
            }
        }

        private TimeSeriesParentage TimeSeriesParentageField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeologicTime xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeologicTime", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeologicTime xsd type.")]
    public partial class GeologicTime : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AgeOffsetAttribute property
        /// </summary>
		[Description("A value in years of the offset between the DateTime value and the DateTime of a geologic event occurrence. This value must be POSITIVE when it represents a geological event in the past.")]
        [EnergisticsDataTypeAttribute(DataType = "long")]
		[XmlElement("AgeOffsetAttribute")]
        public long? AgeOffsetAttribute {
            get {
                return AgeOffsetAttributeField;
            } 
            set {
                AgeOffsetAttributeField = value;
                 this.AgeOffsetAttributeSpecified = true;
                NotifyPropertyChanged("AgeOffsetAttribute");
            }
        }

        private long? AgeOffsetAttributeField; 

        /// <summary>
        /// AgeOffsetAttributeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AgeOffsetAttributeSpecified {
            get {
                return AgeOffsetAttributeSpecifiedField;
            } 
            set {
                AgeOffsetAttributeSpecifiedField = value;
                NotifyPropertyChanged("AgeOffsetAttributeSpecified");
            }
        }

        private bool AgeOffsetAttributeSpecifiedField; 

        /// <summary>
        /// DateTime property
        /// </summary>
		[Required]
        [Description("A date, which can be represented according to the W3CDTF format.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DateTime")]
        public Timestamp? DateTime {
            get {
                return DateTimeField;
            } 
            set {
                DateTimeField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DateTimeField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeSeriesParentage xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeSeriesParentage", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the TimeSeriesParentage xsd type.")]
    public partial class TimeSeriesParentage : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// HasOverlap property
        /// </summary>
		[Required]
        [Description("Used to indicate that a time series overlaps with its parent time series, e.g., as may be done for simulation studies, where the end state of one calculation is the initial state of the next.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("HasOverlap")]
        public bool? HasOverlap {
            get {
                return HasOverlapField;
            } 
            set {
                HasOverlapField = value;
                NotifyPropertyChanged("HasOverlap");
            }
        }

        private bool? HasOverlapField; 

        /// <summary>
        /// ParentTimeIndex property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeIndex")]
		[XmlElement("ParentTimeIndex")]
        public TimeIndex ParentTimeIndex {
            get {
                return ParentTimeIndexField;
            } 
            set {
                ParentTimeIndexField = value;
                NotifyPropertyChanged("ParentTimeIndex");
            }
        }

        private TimeIndex ParentTimeIndexField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the PropertyKindDictionary xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "2.1")]
    [Description("This class represents the PropertyKindDictionary xsd type.")]
    public partial class PropertyKindDictionary : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// PropertyKind property
        /// </summary>
		[Required]
        [Description("Defines which property kind are contained into a property kind dictionary.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PropertyKind")]
		[XmlElement("PropertyKind")]
        public List<PropertyKind> PropertyKind {
            get {
                return PropertyKindField;
            } 
            set {
                PropertyKindField = value;
                NotifyPropertyChanged("PropertyKind");
            }
        }

         /// <summary>
         /// bool to indicate if PropertyKind has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PropertyKindSpecified
         {
             get {
             if(PropertyKindField!=null)
                 return PropertyKindField.Count>0?true:false;
             else return false;
             }
         }
        private List<PropertyKind> PropertyKindField; 


    } //here

    /// <summary>
    /// This class represents the WellProductionParameters xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[Description("This class represents the WellProductionParameters xsd type.")]
    public partial class WellProductionParameters : AbstractSimpleProductVolume, INotifyPropertyChanged
    {

        /// <summary>
        /// StartDate property
        /// </summary>
		[Description("The starting date of the reporting period.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("StartDate", DataType="date")]
        public DateTime? StartDate {
            get {
                return StartDateField;
            } 
            set {
                StartDateField = value;
                 this.StartDateSpecified = true;
                NotifyPropertyChanged("StartDate");
            }
        }

        private DateTime? StartDateField; 

        /// <summary>
        /// StartDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartDateSpecified {
            get {
                return StartDateSpecifiedField;
            } 
            set {
                StartDateSpecifiedField = value;
                NotifyPropertyChanged("StartDateSpecified");
            }
        }

        private bool StartDateSpecifiedField; 

        /// <summary>
        /// EndDate property
        /// </summary>
		[Description("The ending date of the reporting period.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("EndDate", DataType="date")]
        public DateTime? EndDate {
            get {
                return EndDateField;
            } 
            set {
                EndDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        private DateTime? EndDateField; 

        /// <summary>
        /// EndDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndDateSpecified {
            get {
                return EndDateSpecifiedField;
            } 
            set {
                EndDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }

        private bool EndDateSpecifiedField; 

        /// <summary>
        /// NominalPeriod property
        /// </summary>
		[Description("Name or identifier for the reporting period to which the well production parameters apply.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingDurationKindExt")]
		[XmlElement("NominalPeriod")]
        public ExtensibleEnum<ReportingDurationKind>? NominalPeriod {
            get {
                return NominalPeriodField;
            } 
            set {
                NominalPeriodField = value;
                NotifyPropertyChanged("NominalPeriod");
            }
        }

        private ExtensibleEnum<ReportingDurationKind>? NominalPeriodField; 

        /// <summary>
        /// ProductionPeriod property
        /// </summary>
		[Description("Details of production at a specific choke setting.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductionWellPeriod")]
		[XmlElement("ProductionPeriod")]
        public List<ProductionWellPeriod> ProductionPeriod {
            get {
                return ProductionPeriodField;
            } 
            set {
                ProductionPeriodField = value;
                NotifyPropertyChanged("ProductionPeriod");
            }
        }

         /// <summary>
         /// bool to indicate if ProductionPeriod has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProductionPeriodSpecified
         {
             get {
             if(ProductionPeriodField!=null)
                 return ProductionPeriodField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionWellPeriod> ProductionPeriodField; 

        /// <summary>
        /// ReportingEntityReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ReportingEntityReference")]
        public DataObjectReference ReportingEntityReference {
            get {
                return ReportingEntityReferenceField;
            } 
            set {
                ReportingEntityReferenceField = value;
                NotifyPropertyChanged("ReportingEntityReference");
            }
        }

        private DataObjectReference ReportingEntityReferenceField; 


    } //here

    /// <summary>
    /// This class represents the ProductionWellTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[Description("This class represents the ProductionWellTest xsd type.")]
    public partial class ProductionWellTest : AbstractSimpleProductVolume, INotifyPropertyChanged
    {

        /// <summary>
        /// WellTestMethod property
        /// </summary>
		[StringLength(64)]
        [Description("Description or name of the method used to conduct the well test.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("WellTestMethod")]
        public string WellTestMethod {
            get {
                return WellTestMethodField;
            } 
            set {
                WellTestMethodField = value;
                NotifyPropertyChanged("WellTestMethod");
            }
        }

        private string WellTestMethodField; 

        /// <summary>
        /// Validate property
        /// </summary>
		[Description("Validate.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Validate")]
        public bool? Validate {
            get {
                return ValidateField;
            } 
            set {
                ValidateField = value;
                 this.ValidateSpecified = true;
                NotifyPropertyChanged("Validate");
            }
        }

        private bool? ValidateField; 

        /// <summary>
        /// ValidateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ValidateSpecified {
            get {
                return ValidateSpecifiedField;
            } 
            set {
                ValidateSpecifiedField = value;
                NotifyPropertyChanged("ValidateSpecified");
            }
        }

        private bool ValidateSpecifiedField; 

        /// <summary>
        /// TestCondition property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TestCondition")]
		[XmlElement("TestCondition")]
        public TestCondition TestCondition {
            get {
                return TestConditionField;
            } 
            set {
                TestConditionField = value;
                NotifyPropertyChanged("TestCondition");
            }
        }

        private TestCondition TestConditionField; 

        /// <summary>
        /// ReportingEntity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ReportingEntity")]
        public DataObjectReference ReportingEntity {
            get {
                return ReportingEntityField;
            } 
            set {
                ReportingEntityField = value;
                NotifyPropertyChanged("ReportingEntity");
            }
        }

        private DataObjectReference ReportingEntityField; 


    } //here

    /// <summary>
    /// This class represents the TerminalLifting xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[Description("This class represents the TerminalLifting xsd type.")]
    public partial class TerminalLifting : AbstractSimpleProductVolume, INotifyPropertyChanged
    {

        /// <summary>
        /// CertificateNumber property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The certificate number for the document that defines the lifting onto the tanker.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CertificateNumber")]
        public string CertificateNumber {
            get {
                return CertificateNumberField;
            } 
            set {
                CertificateNumberField = value;
                NotifyPropertyChanged("CertificateNumber");
            }
        }

        private string CertificateNumberField; 

        /// <summary>
        /// StartTime property
        /// </summary>
		[Description("The date and time when the lifting began.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("StartTime")]
        public DateTime? StartTime {
            get {
                return StartTimeField;
            } 
            set {
                StartTimeField = value;
                 this.StartTimeSpecified = true;
                NotifyPropertyChanged("StartTime");
            }
        }

        private DateTime? StartTimeField; 

        /// <summary>
        /// StartTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartTimeSpecified {
            get {
                return StartTimeSpecifiedField;
            } 
            set {
                StartTimeSpecifiedField = value;
                NotifyPropertyChanged("StartTimeSpecified");
            }
        }

        private bool StartTimeSpecifiedField; 

        /// <summary>
        /// EndTime property
        /// </summary>
		[Description("The date and time when the lifting ended.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("EndTime")]
        public DateTime? EndTime {
            get {
                return EndTimeField;
            } 
            set {
                EndTimeField = value;
                 this.EndTimeSpecified = true;
                NotifyPropertyChanged("EndTime");
            }
        }

        private DateTime? EndTimeField; 

        /// <summary>
        /// EndTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndTimeSpecified {
            get {
                return EndTimeSpecifiedField;
            } 
            set {
                EndTimeSpecifiedField = value;
                NotifyPropertyChanged("EndTimeSpecified");
            }
        }

        private bool EndTimeSpecifiedField; 

        /// <summary>
        /// ProductQuantity property
        /// </summary>
		[Description("The amount of product lifted.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ProductFluid")]
		[XmlElement("ProductQuantity")]
        public List<ProductFluid> ProductQuantity {
            get {
                return ProductQuantityField;
            } 
            set {
                ProductQuantityField = value;
                NotifyPropertyChanged("ProductQuantity");
            }
        }

         /// <summary>
         /// bool to indicate if ProductQuantity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProductQuantitySpecified
         {
             get {
             if(ProductQuantityField!=null)
                 return ProductQuantityField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFluid> ProductQuantityField; 

        /// <summary>
        /// LoadingTerminalReference property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("LoadingTerminalReference")]
        public DataObjectReference LoadingTerminalReference {
            get {
                return LoadingTerminalReferenceField;
            } 
            set {
                LoadingTerminalReferenceField = value;
                NotifyPropertyChanged("LoadingTerminalReference");
            }
        }

        private DataObjectReference LoadingTerminalReferenceField; 

        /// <summary>
        /// TankerReference property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("TankerReference")]
        public DataObjectReference TankerReference {
            get {
                return TankerReferenceField;
            } 
            set {
                TankerReferenceField = value;
                NotifyPropertyChanged("TankerReference");
            }
        }

        private DataObjectReference TankerReferenceField; 

        /// <summary>
        /// DestinationTerminalReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("DestinationTerminalReference")]
        public DataObjectReference DestinationTerminalReference {
            get {
                return DestinationTerminalReferenceField;
            } 
            set {
                DestinationTerminalReferenceField = value;
                NotifyPropertyChanged("DestinationTerminalReference");
            }
        }

        private DataObjectReference DestinationTerminalReferenceField; 


    } //here

    /// <summary>
    /// This class represents the AssetProductionVolumes xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/prodmlv2", IsNullable=false)]
	[Description("This class represents the AssetProductionVolumes xsd type.")]
    public partial class AssetProductionVolumes : AbstractSimpleProductVolume, INotifyPropertyChanged
    {

        /// <summary>
        /// StartDate property
        /// </summary>
		[Required]
        [Description("The start date of the reporting period.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("StartDate")]
        public DateTime? StartDate {
            get {
                return StartDateField;
            } 
            set {
                StartDateField = value;
                NotifyPropertyChanged("StartDate");
            }
        }

        private DateTime? StartDateField; 

        /// <summary>
        /// EndDate property
        /// </summary>
		[Required]
        [Description("The end date of report period.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("EndDate")]
        public DateTime? EndDate {
            get {
                return EndDateField;
            } 
            set {
                EndDateField = value;
                NotifyPropertyChanged("EndDate");
            }
        }

        private DateTime? EndDateField; 

        /// <summary>
        /// NominalPeriod property
        /// </summary>
		[Required]
        [Description("Nominal period.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingDurationKindExt")]
		[XmlElement("NominalPeriod")]
        public ExtensibleEnum<ReportingDurationKind>? NominalPeriod {
            get {
                return NominalPeriodField;
            } 
            set {
                NominalPeriodField = value;
                NotifyPropertyChanged("NominalPeriod");
            }
        }

        private ExtensibleEnum<ReportingDurationKind>? NominalPeriodField; 

        /// <summary>
        /// ReportingEntityVolumes property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ReportingEntityVolumes")]
		[XmlElement("ReportingEntityVolumes")]
        public List<ReportingEntityVolumes> ReportingEntityVolumes {
            get {
                return ReportingEntityVolumesField;
            } 
            set {
                ReportingEntityVolumesField = value;
                NotifyPropertyChanged("ReportingEntityVolumes");
            }
        }

         /// <summary>
         /// bool to indicate if ReportingEntityVolumes has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ReportingEntityVolumesSpecified
         {
             get {
             if(ReportingEntityVolumesField!=null)
                 return ReportingEntityVolumesField.Count>0?true:false;
             else return false;
             }
         }
        private List<ReportingEntityVolumes> ReportingEntityVolumesField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ReportingEntityVolumes xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ReportingEntityVolumes", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ReportingEntityVolumes xsd type.")]
    public partial class ReportingEntityVolumes : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// StartDate property
        /// </summary>
		[Description("The starting date of the month.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("StartDate")]
        public DateTime? StartDate {
            get {
                return StartDateField;
            } 
            set {
                StartDateField = value;
                 this.StartDateSpecified = true;
                NotifyPropertyChanged("StartDate");
            }
        }

        private DateTime? StartDateField; 

        /// <summary>
        /// StartDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartDateSpecified {
            get {
                return StartDateSpecifiedField;
            } 
            set {
                StartDateSpecifiedField = value;
                NotifyPropertyChanged("StartDateSpecified");
            }
        }

        private bool StartDateSpecifiedField; 

        /// <summary>
        /// Duration property
        /// </summary>
		[Description("the duration of volume produced at facility")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("Duration")]
        public TimeMeasure Duration {
            get {
                return DurationField;
            } 
            set {
                DurationField = value;
                NotifyPropertyChanged("Duration");
            }
        }

        private TimeMeasure DurationField; 

        /// <summary>
        /// Injection property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Injection")]
		[XmlElement("Injection")]
        public List<Injection> Injection {
            get {
                return InjectionField;
            } 
            set {
                InjectionField = value;
                NotifyPropertyChanged("Injection");
            }
        }

         /// <summary>
         /// bool to indicate if Injection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InjectionSpecified
         {
             get {
             if(InjectionField!=null)
                 return InjectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<Injection> InjectionField; 

        /// <summary>
        /// Disposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDisposition")]
		[XmlElement("Disposition")]
        public List<AbstractDisposition> Disposition {
            get {
                return DispositionField;
            } 
            set {
                DispositionField = value;
                NotifyPropertyChanged("Disposition");
            }
        }

         /// <summary>
         /// bool to indicate if Disposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DispositionSpecified
         {
             get {
             if(DispositionField!=null)
                 return DispositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractDisposition> DispositionField; 

        /// <summary>
        /// ClosingInventory property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractProductQuantity")]
		[XmlElement("ClosingInventory")]
        public List<AbstractProductQuantity> ClosingInventory {
            get {
                return ClosingInventoryField;
            } 
            set {
                ClosingInventoryField = value;
                NotifyPropertyChanged("ClosingInventory");
            }
        }

         /// <summary>
         /// bool to indicate if ClosingInventory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ClosingInventorySpecified
         {
             get {
             if(ClosingInventoryField!=null)
                 return ClosingInventoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractProductQuantity> ClosingInventoryField; 

        /// <summary>
        /// Production property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Production")]
		[XmlElement("Production")]
        public List<Production> Production {
            get {
                return ProductionField;
            } 
            set {
                ProductionField = value;
                NotifyPropertyChanged("Production");
            }
        }

         /// <summary>
         /// bool to indicate if Production has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProductionSpecified
         {
             get {
             if(ProductionField!=null)
                 return ProductionField.Count>0?true:false;
             else return false;
             }
         }
        private List<Production> ProductionField; 

        /// <summary>
        /// DeferredProductionEvent property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DeferredProductionEvent")]
		[XmlElement("DeferredProductionEvent")]
        public List<DeferredProductionEvent> DeferredProductionEvent {
            get {
                return DeferredProductionEventField;
            } 
            set {
                DeferredProductionEventField = value;
                NotifyPropertyChanged("DeferredProductionEvent");
            }
        }

         /// <summary>
         /// bool to indicate if DeferredProductionEvent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DeferredProductionEventSpecified
         {
             get {
             if(DeferredProductionEventField!=null)
                 return DeferredProductionEventField.Count>0?true:false;
             else return false;
             }
         }
        private List<DeferredProductionEvent> DeferredProductionEventField; 

        /// <summary>
        /// ReportingEntityReference property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ReportingEntityReference")]
        public DataObjectReference ReportingEntityReference {
            get {
                return ReportingEntityReferenceField;
            } 
            set {
                ReportingEntityReferenceField = value;
                NotifyPropertyChanged("ReportingEntityReference");
            }
        }

        private DataObjectReference ReportingEntityReferenceField; 

        /// <summary>
        /// OpeningInventory property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractProductQuantity")]
		[XmlElement("OpeningInventory")]
        public List<AbstractProductQuantity> OpeningInventory {
            get {
                return OpeningInventoryField;
            } 
            set {
                OpeningInventoryField = value;
                NotifyPropertyChanged("OpeningInventory");
            }
        }

         /// <summary>
         /// bool to indicate if OpeningInventory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OpeningInventorySpecified
         {
             get {
             if(OpeningInventoryField!=null)
                 return OpeningInventoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractProductQuantity> OpeningInventoryField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Injection xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Injection", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the Injection xsd type.")]
    public partial class Injection : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// QuantityMethod property
        /// </summary>
		[Required]
        [Description("The method in which the quantity/volume was determined. See enum QuantityMethod.")]
        [EnergisticsDataTypeAttribute(DataType = "QuantityMethodExt")]
		[XmlElement("QuantityMethod")]
        public ExtensibleEnum<QuantityMethod>? QuantityMethod {
            get {
                return QuantityMethodField;
            } 
            set {
                QuantityMethodField = value;
                NotifyPropertyChanged("QuantityMethod");
            }
        }

        private ExtensibleEnum<QuantityMethod>? QuantityMethodField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("A descriptive remark relating to any significant events.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// InjectionQuantity property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractProductQuantity")]
		[XmlElement("InjectionQuantity")]
        public List<AbstractProductQuantity> InjectionQuantity {
            get {
                return InjectionQuantityField;
            } 
            set {
                InjectionQuantityField = value;
                NotifyPropertyChanged("InjectionQuantity");
            }
        }

         /// <summary>
         /// bool to indicate if InjectionQuantity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InjectionQuantitySpecified
         {
             get {
             if(InjectionQuantityField!=null)
                 return InjectionQuantityField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractProductQuantity> InjectionQuantityField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TerminalLiftingDisposition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TerminalLiftingDisposition", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the TerminalLiftingDisposition xsd type.")]
    public partial class TerminalLiftingDisposition : AbstractDisposition, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TerminalLifting property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TerminalLifting")]
		[XmlElement("TerminalLifting")]
        public TerminalLifting TerminalLifting {
            get {
                return TerminalLiftingField;
            } 
            set {
                TerminalLiftingField = value;
                NotifyPropertyChanged("TerminalLifting");
            }
        }

        private TerminalLifting TerminalLiftingField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProductDisposition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProductDisposition", Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
	[Description("This class represents the ProductDisposition xsd type.")]
    public partial class ProductDisposition : AbstractDisposition, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The method of disposition. See enum DispositionKind. 
        /// </summary>
		[Required]
        [Description("The method of disposition. See enum DispositionKind.")]
        [EnergisticsDataTypeAttribute(DataType = "DispositionKindExt")]
		[XmlElement("Kind")]
        public ExtensibleEnum<DispositionKind>? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private ExtensibleEnum<DispositionKind>? KindField; 


    } //here
    }

    #endregion

    #region Enumerations
    namespace ReferenceData {
        /// <summary>
        /// This class represents the ValidationOperation xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ValidationOperation xsd enumeration.")]
        public enum ValidationOperation 
        {
        /// <summary>
        /// acquisitionvalidation property
        /// </summary>
          [XmlEnum("acquisition validation")]
          acquisitionvalidation,
        /// <summary>
        /// allocationvalidation property
        /// </summary>
          [XmlEnum("allocation validation")]
          allocationvalidation,
        /// <summary>
        /// externalqualityassurance property
        /// </summary>
          [XmlEnum("external quality assurance")]
          externalqualityassurance,
        /// <summary>
        /// sitevalidation property
        /// </summary>
          [XmlEnum("site validation")]
          sitevalidation,
        /// <summary>
        /// unknown
        /// </summary>
          unknown,
        /// <summary>
        /// validationresult property
        /// </summary>
          [XmlEnum("validation result")]
          validationresult,
        /// <summary>
        /// wellmodelvalidation property
        /// </summary>
          [XmlEnum("well model validation")]
          wellmodelvalidation
        }
        /// <summary>
        /// This class represents the ValidationResult xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ValidationResult xsd enumeration.")]
        public enum ValidationResult 
        {
        /// <summary>
        /// failed
        /// </summary>
          failed,
        /// <summary>
        /// passed
        /// </summary>
          passed,
        /// <summary>
        /// passedwithchanges property
        /// </summary>
          [XmlEnum("passed with changes")]
          passedwithchanges,
        /// <summary>
        /// unknown
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressureUom xsd enumeration.")]
        public enum PressureUom 
        {
        /// <summary>
        /// Item001lbfft2 property
        /// </summary>
          [XmlEnum("0.01 lbf/ft2")]
          Item001lbfft2,
        /// <summary>
        /// at property
        /// </summary>
          at,
        /// <summary>
        /// atm property
        /// </summary>
          atm,
        /// <summary>
        /// bar property
        /// </summary>
          bar,
        /// <summary>
        /// cmH2O4degC property
        /// </summary>
          [XmlEnum("cmH2O[4degC]")]
          cmH2O4degC,
        /// <summary>
        /// cPa property
        /// </summary>
          cPa,
        /// <summary>
        /// dPa property
        /// </summary>
          dPa,
        /// <summary>
        /// dynecm2 property
        /// </summary>
          [XmlEnum("dyne/cm2")]
          dynecm2,
        /// <summary>
        /// EPa property
        /// </summary>
          EPa,
        /// <summary>
        /// fPa property
        /// </summary>
          fPa,
        /// <summary>
        /// GPa property
        /// </summary>
          GPa,
        /// <summary>
        /// hbar property
        /// </summary>
          hbar,
        /// <summary>
        /// inH2O39degF property
        /// </summary>
          [XmlEnum("inH2O[39degF]")]
          inH2O39degF,
        /// <summary>
        /// inH2O60degF property
        /// </summary>
          [XmlEnum("inH2O[60degF]")]
          inH2O60degF,
        /// <summary>
        /// inHg32degF property
        /// </summary>
          [XmlEnum("inHg[32degF]")]
          inHg32degF,
        /// <summary>
        /// inHg60degF property
        /// </summary>
          [XmlEnum("inHg[60degF]")]
          inHg60degF,
        /// <summary>
        /// kgfcm2 property
        /// </summary>
          [XmlEnum("kgf/cm2")]
          kgfcm2,
        /// <summary>
        /// kgfm2 property
        /// </summary>
          [XmlEnum("kgf/m2")]
          kgfm2,
        /// <summary>
        /// kgfmm2 property
        /// </summary>
          [XmlEnum("kgf/mm2")]
          kgfmm2,
        /// <summary>
        /// kNm2 property
        /// </summary>
          [XmlEnum("kN/m2")]
          kNm2,
        /// <summary>
        /// kPa property
        /// </summary>
          kPa,
        /// <summary>
        /// kpsi property
        /// </summary>
          kpsi,
        /// <summary>
        /// lbfft2 property
        /// </summary>
          [XmlEnum("lbf/ft2")]
          lbfft2,
        /// <summary>
        /// mbar property
        /// </summary>
          mbar,
        /// <summary>
        /// mmHg0degC property
        /// </summary>
          [XmlEnum("mmHg[0degC]")]
          mmHg0degC,
        /// <summary>
        /// mPa property
        /// </summary>
          mPa,
        /// <summary>
        /// MPa property
        /// </summary>
          MPa,
        /// <summary>
        /// Mpsi property
        /// </summary>
          Mpsi,
        /// <summary>
        /// Nm2 property
        /// </summary>
          [XmlEnum("N/m2")]
          Nm2,
        /// <summary>
        /// Nmm2 property
        /// </summary>
          [XmlEnum("N/mm2")]
          Nmm2,
        /// <summary>
        /// nPa property
        /// </summary>
          nPa,
        /// <summary>
        /// Pa property
        /// </summary>
          Pa,
        /// <summary>
        /// pPa property
        /// </summary>
          pPa,
        /// <summary>
        /// psi property
        /// </summary>
          psi,
        /// <summary>
        /// tonfUKft2 property
        /// </summary>
          [XmlEnum("tonf[UK]/ft2")]
          tonfUKft2,
        /// <summary>
        /// tonfUSft2 property
        /// </summary>
          [XmlEnum("tonf[US]/ft2")]
          tonfUSft2,
        /// <summary>
        /// tonfUSin2 property
        /// </summary>
          [XmlEnum("tonf[US]/in2")]
          tonfUSin2,
        /// <summary>
        /// torr property
        /// </summary>
          torr,
        /// <summary>
        /// TPa property
        /// </summary>
          TPa,
        /// <summary>
        /// ubar property
        /// </summary>
          ubar,
        /// <summary>
        /// umHg0degC property
        /// </summary>
          [XmlEnum("umHg[0degC]")]
          umHg0degC,
        /// <summary>
        /// uPa property
        /// </summary>
          uPa,
        /// <summary>
        /// upsi property
        /// </summary>
          upsi
        }
        /// <summary>
        /// This class represents the ReferencePressureKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReferencePressureKind xsd enumeration.")]
        public enum ReferencePressureKind 
        {
        /// <summary>
        /// absolute property
        /// </summary>
          absolute,
        /// <summary>
        /// ambient property
        /// </summary>
          ambient,
        /// <summary>
        /// legal property
        /// </summary>
          legal
        }
        /// <summary>
        /// This class represents the SaturationPointKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the SaturationPointKind xsd enumeration.")]
        public enum SaturationPointKind 
        {
        /// <summary>
        /// bubblepoint property
        /// </summary>
          [XmlEnum("bubble point")]
          bubblepoint,
        /// <summary>
        /// dewpoint property
        /// </summary>
          [XmlEnum("dew point")]
          dewpoint,
        /// <summary>
        /// retrogradedewpoint property
        /// </summary>
          [XmlEnum("retrograde dew point")]
          retrogradedewpoint,
        /// <summary>
        /// criticalpoint property
        /// </summary>
          [XmlEnum("critical point")]
          criticalpoint
        }
        /// <summary>
        /// This class represents the ThermodynamicTemperatureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermodynamicTemperatureUom xsd enumeration.")]
        public enum ThermodynamicTemperatureUom 
        {
        /// <summary>
        /// degC property
        /// </summary>
          degC,
        /// <summary>
        /// degF property
        /// </summary>
          degF,
        /// <summary>
        /// degR property
        /// </summary>
          degR,
        /// <summary>
        /// K property
        /// </summary>
          K
        }
        /// <summary>
        /// This class represents the LengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthUom xsd enumeration.")]
        public enum LengthUom 
        {
        /// <summary>
        /// Item01ft property
        /// </summary>
          [XmlEnum("0.1 ft")]
          Item01ft,
        /// <summary>
        /// Item01ftUS property
        /// </summary>
          [XmlEnum("0.1 ft[US]")]
          Item01ftUS,
        /// <summary>
        /// Item01in property
        /// </summary>
          [XmlEnum("0.1 in")]
          Item01in,
        /// <summary>
        /// Item01yd property
        /// </summary>
          [XmlEnum("0.1 yd")]
          Item01yd,
        /// <summary>
        /// Item116in property
        /// </summary>
          [XmlEnum("1/16 in")]
          Item116in,
        /// <summary>
        /// Item12ft property
        /// </summary>
          [XmlEnum("1/2 ft")]
          Item12ft,
        /// <summary>
        /// Item132in property
        /// </summary>
          [XmlEnum("1/32 in")]
          Item132in,
        /// <summary>
        /// Item164in property
        /// </summary>
          [XmlEnum("1/64 in")]
          Item164in,
        /// <summary>
        /// Item10ft property
        /// </summary>
          [XmlEnum("10 ft")]
          Item10ft,
        /// <summary>
        /// Item10in property
        /// </summary>
          [XmlEnum("10 in")]
          Item10in,
        /// <summary>
        /// Item10km property
        /// </summary>
          [XmlEnum("10 km")]
          Item10km,
        /// <summary>
        /// Item100ft property
        /// </summary>
          [XmlEnum("100 ft")]
          Item100ft,
        /// <summary>
        /// Item100km property
        /// </summary>
          [XmlEnum("100 km")]
          Item100km,
        /// <summary>
        /// Item1000ft property
        /// </summary>
          [XmlEnum("1000 ft")]
          Item1000ft,
        /// <summary>
        /// Item30ft property
        /// </summary>
          [XmlEnum("30 ft")]
          Item30ft,
        /// <summary>
        /// Item30m property
        /// </summary>
          [XmlEnum("30 m")]
          Item30m,
        /// <summary>
        /// angstrom property
        /// </summary>
          angstrom,
        /// <summary>
        /// chain property
        /// </summary>
          chain,
        /// <summary>
        /// chainBnA property
        /// </summary>
          [XmlEnum("chain[BnA]")]
          chainBnA,
        /// <summary>
        /// chainBnB property
        /// </summary>
          [XmlEnum("chain[BnB]")]
          chainBnB,
        /// <summary>
        /// chainCla property
        /// </summary>
          [XmlEnum("chain[Cla]")]
          chainCla,
        /// <summary>
        /// chainInd37 property
        /// </summary>
          [XmlEnum("chain[Ind37]")]
          chainInd37,
        /// <summary>
        /// chainSe property
        /// </summary>
          [XmlEnum("chain[Se]")]
          chainSe,
        /// <summary>
        /// chainSeT property
        /// </summary>
          [XmlEnum("chain[SeT]")]
          chainSeT,
        /// <summary>
        /// chainUS property
        /// </summary>
          [XmlEnum("chain[US]")]
          chainUS,
        /// <summary>
        /// cm property
        /// </summary>
          cm,
        /// <summary>
        /// dam property
        /// </summary>
          dam,
        /// <summary>
        /// dm property
        /// </summary>
          dm,
        /// <summary>
        /// Em property
        /// </summary>
          Em,
        /// <summary>
        /// fathom property
        /// </summary>
          fathom,
        /// <summary>
        /// fm property
        /// </summary>
          fm,
        /// <summary>
        /// ft property
        /// </summary>
          ft,
        /// <summary>
        /// ftBnA property
        /// </summary>
          [XmlEnum("ft[BnA]")]
          ftBnA,
        /// <summary>
        /// ftBnB property
        /// </summary>
          [XmlEnum("ft[BnB]")]
          ftBnB,
        /// <summary>
        /// ftBr36 property
        /// </summary>
          [XmlEnum("ft[Br36]")]
          ftBr36,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ft[Br65]")]
          ftBr65,
        /// <summary>
        /// ftCla property
        /// </summary>
          [XmlEnum("ft[Cla]")]
          ftCla,
        /// <summary>
        /// ftGC property
        /// </summary>
          [XmlEnum("ft[GC]")]
          ftGC,
        /// <summary>
        /// ftInd property
        /// </summary>
          [XmlEnum("ft[Ind]")]
          ftInd,
        /// <summary>
        /// ftInd37 property
        /// </summary>
          [XmlEnum("ft[Ind37]")]
          ftInd37,
        /// <summary>
        /// ftInd62 property
        /// </summary>
          [XmlEnum("ft[Ind62]")]
          ftInd62,
        /// <summary>
        /// ftInd75 property
        /// </summary>
          [XmlEnum("ft[Ind75]")]
          ftInd75,
        /// <summary>
        /// ftSe property
        /// </summary>
          [XmlEnum("ft[Se]")]
          ftSe,
        /// <summary>
        /// ftSeT property
        /// </summary>
          [XmlEnum("ft[SeT]")]
          ftSeT,
        /// <summary>
        /// ftUS property
        /// </summary>
          [XmlEnum("ft[US]")]
          ftUS,
        /// <summary>
        /// furUS property
        /// </summary>
          [XmlEnum("fur[US]")]
          furUS,
        /// <summary>
        /// Gm property
        /// </summary>
          Gm,
        /// <summary>
        /// hm property
        /// </summary>
          hm,
        /// <summary>
        /// in property
        /// </summary>
          @in,
        /// <summary>
        /// inUS property
        /// </summary>
          [XmlEnum("in[US]")]
          inUS,
        /// <summary>
        /// km property
        /// </summary>
          km,
        /// <summary>
        /// link property
        /// </summary>
          link,
        /// <summary>
        /// linkBnA property
        /// </summary>
          [XmlEnum("link[BnA]")]
          linkBnA,
        /// <summary>
        /// linkBnB property
        /// </summary>
          [XmlEnum("link[BnB]")]
          linkBnB,
        /// <summary>
        /// linkCla property
        /// </summary>
          [XmlEnum("link[Cla]")]
          linkCla,
        /// <summary>
        /// linkSe property
        /// </summary>
          [XmlEnum("link[Se]")]
          linkSe,
        /// <summary>
        /// linkSeT property
        /// </summary>
          [XmlEnum("link[SeT]")]
          linkSeT,
        /// <summary>
        /// linkUS property
        /// </summary>
          [XmlEnum("link[US]")]
          linkUS,
        /// <summary>
        /// m property
        /// </summary>
          m,
        /// <summary>
        /// mGer property
        /// </summary>
          [XmlEnum("m[Ger]")]
          mGer,
        /// <summary>
        /// mi property
        /// </summary>
          mi,
        /// <summary>
        /// minaut property
        /// </summary>
          [XmlEnum("mi[naut]")]
          minaut,
        /// <summary>
        /// minautUK property
        /// </summary>
          [XmlEnum("mi[nautUK]")]
          minautUK,
        /// <summary>
        /// miUS property
        /// </summary>
          [XmlEnum("mi[US]")]
          miUS,
        /// <summary>
        /// mil property
        /// </summary>
          mil,
        /// <summary>
        /// mm property
        /// </summary>
          mm,
        /// <summary>
        /// Mm property
        /// </summary>
          Mm,
        /// <summary>
        /// nm property
        /// </summary>
          nm,
        /// <summary>
        /// pm property
        /// </summary>
          pm,
        /// <summary>
        /// rodUS property
        /// </summary>
          [XmlEnum("rod[US]")]
          rodUS,
        /// <summary>
        /// Tm property
        /// </summary>
          Tm,
        /// <summary>
        /// um property
        /// </summary>
          um,
        /// <summary>
        /// yd property
        /// </summary>
          yd,
        /// <summary>
        /// ydBnA property
        /// </summary>
          [XmlEnum("yd[BnA]")]
          ydBnA,
        /// <summary>
        /// ydBnB property
        /// </summary>
          [XmlEnum("yd[BnB]")]
          ydBnB,
        /// <summary>
        /// ydCla property
        /// </summary>
          [XmlEnum("yd[Cla]")]
          ydCla,
        /// <summary>
        /// ydInd property
        /// </summary>
          [XmlEnum("yd[Ind]")]
          ydInd,
        /// <summary>
        /// ydInd37 property
        /// </summary>
          [XmlEnum("yd[Ind37]")]
          ydInd37,
        /// <summary>
        /// ydInd62 property
        /// </summary>
          [XmlEnum("yd[Ind62]")]
          ydInd62,
        /// <summary>
        /// ydInd75 property
        /// </summary>
          [XmlEnum("yd[Ind75]")]
          ydInd75,
        /// <summary>
        /// ydSe property
        /// </summary>
          [XmlEnum("yd[Se]")]
          ydSe,
        /// <summary>
        /// ydSeT property
        /// </summary>
          [XmlEnum("yd[SeT]")]
          ydSeT,
        /// <summary>
        /// ydUS property
        /// </summary>
          [XmlEnum("yd[US]")]
          ydUS
        }
        /// <summary>
        /// This class represents the ReasonLost xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ReasonLost xsd enumeration.")]
        public enum ReasonLost 
        {
        /// <summary>
        /// Item3rdpartyprocessing property
        /// </summary>
          [XmlEnum("3rd party processing")]
          Item3rdpartyprocessing,
        /// <summary>
        /// dailytotallossofprod property
        /// </summary>
          [XmlEnum("daily total loss of prod")]
          dailytotallossofprod,
        /// <summary>
        /// extendedmaintturnaround property
        /// </summary>
          [XmlEnum("extended maint turnaround")]
          extendedmaintturnaround,
        /// <summary>
        /// extendedmaintturnaroundexport property
        /// </summary>
          [XmlEnum("extended maint turnaround export")]
          extendedmaintturnaroundexport,
        /// <summary>
        /// hse
        /// </summary>
          hse,
        /// <summary>
        /// markedgas property
        /// </summary>
          [XmlEnum("marked gas")]
          markedgas,
        /// <summary>
        /// markedoil property
        /// </summary>
          [XmlEnum("marked oil")]
          markedoil,
        /// <summary>
        /// modificationproject property
        /// </summary>
          [XmlEnum("modification project")]
          modificationproject,
        /// <summary>
        /// operationmistakes property
        /// </summary>
          [XmlEnum("operation mistakes")]
          operationmistakes,
        /// <summary>
        /// other
        /// </summary>
          other,
        /// <summary>
        /// plannedmaintturnaround property
        /// </summary>
          [XmlEnum("planned maint turnaround")]
          plannedmaintturnaround,
        /// <summary>
        /// preventivemainttopside property
        /// </summary>
          [XmlEnum("preventive maint topside")]
          preventivemainttopside,
        /// <summary>
        /// processandoperationproblem property
        /// </summary>
          [XmlEnum("process and operation problem")]
          processandoperationproblem,
        /// <summary>
        /// production
        /// </summary>
          production,
        /// <summary>
        /// regulatoryreference property
        /// </summary>
          [XmlEnum("regulatory reference")]
          regulatoryreference,
        /// <summary>
        /// reservoir
        /// </summary>
          reservoir,
        /// <summary>
        /// strikelockout property
        /// </summary>
          [XmlEnum("strike/lock-out")]
          strikelockout,
        /// <summary>
        /// testingandlogging property
        /// </summary>
          [XmlEnum("testing and logging")]
          testingandlogging,
        /// <summary>
        /// topsideequipmentfailuremaint property
        /// </summary>
          [XmlEnum("topside equipment failure-maint")]
          topsideequipmentfailuremaint,
        /// <summary>
        /// unavailabletankerstorage property
        /// </summary>
          [XmlEnum("unavailable tanker storage")]
          unavailabletankerstorage,
        /// <summary>
        /// unknown
        /// </summary>
          unknown,
        /// <summary>
        /// weatherproblem property
        /// </summary>
          [XmlEnum("weather problem")]
          weatherproblem,
        /// <summary>
        /// wellequipmentfailuremaint property
        /// </summary>
          [XmlEnum("well equipment failure-maint")]
          wellequipmentfailuremaint,
        /// <summary>
        /// wellplannedoperations property
        /// </summary>
          [XmlEnum("well planned operations")]
          wellplannedoperations,
        /// <summary>
        /// wellpreventivemaint property
        /// </summary>
          [XmlEnum("well preventive maint")]
          wellpreventivemaint,
        /// <summary>
        /// wellproblems property
        /// </summary>
          [XmlEnum("well problems")]
          wellproblems
        }
        /// <summary>
        /// This class represents the VolumePerTimePerPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerPressureUom xsd enumeration.")]
        public enum VolumePerTimePerPressureUom 
        {
        /// <summary>
        /// Item1000ft3psid property
        /// </summary>
          [XmlEnum("1000 ft3/(psi.d)")]
          Item1000ft3psid,
        /// <summary>
        /// bblkPad property
        /// </summary>
          [XmlEnum("bbl/(kPa.d)")]
          bblkPad,
        /// <summary>
        /// bblpsid property
        /// </summary>
          [XmlEnum("bbl/(psi.d)")]
          bblpsid,
        /// <summary>
        /// Lbarmin property
        /// </summary>
          [XmlEnum("L/(bar.min)")]
          Lbarmin,
        /// <summary>
        /// m3bard property
        /// </summary>
          [XmlEnum("m3/(bar.d)")]
          m3bard,
        /// <summary>
        /// m3barh property
        /// </summary>
          [XmlEnum("m3/(bar.h)")]
          m3barh,
        /// <summary>
        /// m3barmin property
        /// </summary>
          [XmlEnum("m3/(bar.min)")]
          m3barmin,
        /// <summary>
        /// m3kPad property
        /// </summary>
          [XmlEnum("m3/(kPa.d)")]
          m3kPad,
        /// <summary>
        /// m3kPah property
        /// </summary>
          [XmlEnum("m3/(kPa.h)")]
          m3kPah,
        /// <summary>
        /// m3Pas property
        /// </summary>
          [XmlEnum("m3/(Pa.s)")]
          m3Pas,
        /// <summary>
        /// m3psid property
        /// </summary>
          [XmlEnum("m3/(psi.d)")]
          m3psid
        }
        /// <summary>
        /// This class represents the AngularVelocityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AngularVelocityUom xsd enumeration.")]
        public enum AngularVelocityUom 
        {
        /// <summary>
        /// degah property
        /// </summary>
          [XmlEnum("dega/h")]
          degah,
        /// <summary>
        /// degamin property
        /// </summary>
          [XmlEnum("dega/min")]
          degamin,
        /// <summary>
        /// degas property
        /// </summary>
          [XmlEnum("dega/s")]
          degas,
        /// <summary>
        /// rads property
        /// </summary>
          [XmlEnum("rad/s")]
          rads,
        /// <summary>
        /// revs property
        /// </summary>
          [XmlEnum("rev/s")]
          revs,
        /// <summary>
        /// rpm property
        /// </summary>
          rpm
        }
        /// <summary>
        /// This class represents the ElectricCurrentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricCurrentUom xsd enumeration.")]
        public enum ElectricCurrentUom 
        {
        /// <summary>
        /// A property
        /// </summary>
          A,
        /// <summary>
        /// cA property
        /// </summary>
          cA,
        /// <summary>
        /// dA property
        /// </summary>
          dA,
        /// <summary>
        /// EA property
        /// </summary>
          EA,
        /// <summary>
        /// fA property
        /// </summary>
          fA,
        /// <summary>
        /// GA property
        /// </summary>
          GA,
        /// <summary>
        /// kA property
        /// </summary>
          kA,
        /// <summary>
        /// MA property
        /// </summary>
          MA,
        /// <summary>
        /// mA property
        /// </summary>
          mA,
        /// <summary>
        /// nA property
        /// </summary>
          nA,
        /// <summary>
        /// pA property
        /// </summary>
          pA,
        /// <summary>
        /// TA property
        /// </summary>
          TA,
        /// <summary>
        /// uA property
        /// </summary>
          uA
        }
        /// <summary>
        /// This class represents the FrequencyUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the FrequencyUom xsd enumeration.")]
        public enum FrequencyUom 
        {
        /// <summary>
        /// cHz property
        /// </summary>
          cHz,
        /// <summary>
        /// dHz property
        /// </summary>
          dHz,
        /// <summary>
        /// EHz property
        /// </summary>
          EHz,
        /// <summary>
        /// fHz property
        /// </summary>
          fHz,
        /// <summary>
        /// GHz property
        /// </summary>
          GHz,
        /// <summary>
        /// Hz property
        /// </summary>
          Hz,
        /// <summary>
        /// kHz property
        /// </summary>
          kHz,
        /// <summary>
        /// mHz property
        /// </summary>
          mHz,
        /// <summary>
        /// MHz property
        /// </summary>
          MHz,
        /// <summary>
        /// nHz property
        /// </summary>
          nHz,
        /// <summary>
        /// pHz property
        /// </summary>
          pHz,
        /// <summary>
        /// THz property
        /// </summary>
          THz,
        /// <summary>
        /// uHz property
        /// </summary>
          uHz
        }
        /// <summary>
        /// This class represents the VerticalCoordinateUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VerticalCoordinateUom xsd enumeration.")]
        public enum VerticalCoordinateUom 
        {
        /// <summary>
        /// m property
        /// </summary>
          m,
        /// <summary>
        /// ft property
        /// </summary>
          ft,
        /// <summary>
        /// ftUS property
        /// </summary>
          ftUS,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ftBr(65)")]
          ftBr65
        }
        /// <summary>
        /// This class represents the LengthPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerLengthUom xsd enumeration.")]
        public enum LengthPerLengthUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// Item001ftft property
        /// </summary>
          [XmlEnum("0.01 ft/ft")]
          Item001ftft,
        /// <summary>
        /// Item130mm property
        /// </summary>
          [XmlEnum("1/30 m/m")]
          Item130mm,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// ftft property
        /// </summary>
          [XmlEnum("ft/ft")]
          ftft,
        /// <summary>
        /// ftin property
        /// </summary>
          [XmlEnum("ft/in")]
          ftin,
        /// <summary>
        /// ftm property
        /// </summary>
          [XmlEnum("ft/m")]
          ftm,
        /// <summary>
        /// ftmi property
        /// </summary>
          [XmlEnum("ft/mi")]
          ftmi,
        /// <summary>
        /// kmcm property
        /// </summary>
          [XmlEnum("km/cm")]
          kmcm,
        /// <summary>
        /// mcm property
        /// </summary>
          [XmlEnum("m/cm")]
          mcm,
        /// <summary>
        /// mkm property
        /// </summary>
          [XmlEnum("m/km")]
          mkm,
        /// <summary>
        /// mm property
        /// </summary>
          [XmlEnum("m/m")]
          mm,
        /// <summary>
        /// miin property
        /// </summary>
          [XmlEnum("mi/in")]
          miin
        }
        /// <summary>
        /// This class represents the TimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TimeUom xsd enumeration.")]
        public enum TimeUom 
        {
        /// <summary>
        /// Item12ms property
        /// </summary>
          [XmlEnum("1/2 ms")]
          Item12ms,
        /// <summary>
        /// Item100kat property
        /// </summary>
          [XmlEnum("100 ka[t]")]
          Item100kat,
        /// <summary>
        /// a property
        /// </summary>
          a,
        /// <summary>
        /// at property
        /// </summary>
          [XmlEnum("a[t]")]
          at,
        /// <summary>
        /// ca property
        /// </summary>
          ca,
        /// <summary>
        /// cs property
        /// </summary>
          cs,
        /// <summary>
        /// d property
        /// </summary>
          d,
        /// <summary>
        /// ds property
        /// </summary>
          ds,
        /// <summary>
        /// Eat property
        /// </summary>
          [XmlEnum("Ea[t]")]
          Eat,
        /// <summary>
        /// fa property
        /// </summary>
          fa,
        /// <summary>
        /// Gat property
        /// </summary>
          [XmlEnum("Ga[t]")]
          Gat,
        /// <summary>
        /// h property
        /// </summary>
          h,
        /// <summary>
        /// hs property
        /// </summary>
          hs,
        /// <summary>
        /// kat property
        /// </summary>
          [XmlEnum("ka[t]")]
          kat,
        /// <summary>
        /// Mat property
        /// </summary>
          [XmlEnum("Ma[t]")]
          Mat,
        /// <summary>
        /// min property
        /// </summary>
          min,
        /// <summary>
        /// ms property
        /// </summary>
          ms,
        /// <summary>
        /// na property
        /// </summary>
          na,
        /// <summary>
        /// ns property
        /// </summary>
          ns,
        /// <summary>
        /// ps property
        /// </summary>
          ps,
        /// <summary>
        /// s property
        /// </summary>
          s,
        /// <summary>
        /// Tat property
        /// </summary>
          [XmlEnum("Ta[t]")]
          Tat,
        /// <summary>
        /// us property
        /// </summary>
          us,
        /// <summary>
        /// wk property
        /// </summary>
          wk
        }
        /// <summary>
        /// This class represents the InjectionFluid xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the InjectionFluid xsd enumeration.")]
        public enum InjectionFluid 
        {
        /// <summary>
        /// air
        /// </summary>
          air,
        /// <summary>
        /// brine
        /// </summary>
          brine,
        /// <summary>
        /// co2
        /// </summary>
          co2,
        /// <summary>
        /// condensate
        /// </summary>
          condensate,
        /// <summary>
        /// dry
        /// </summary>
          dry,
        /// <summary>
        /// freshwater property
        /// </summary>
          [XmlEnum("fresh water")]
          freshwater,
        /// <summary>
        /// gas
        /// </summary>
          gas,
        /// <summary>
        /// gaswater property
        /// </summary>
          [XmlEnum("gas-water")]
          gaswater,
        /// <summary>
        /// nonHCgas property
        /// </summary>
          [XmlEnum("non HC gas")]
          nonHCgas,
        /// <summary>
        /// oil
        /// </summary>
          oil,
        /// <summary>
        /// oilgas property
        /// </summary>
          [XmlEnum("oil-gas")]
          oilgas,
        /// <summary>
        /// oilwater property
        /// </summary>
          [XmlEnum("oil-water")]
          oilwater,
        /// <summary>
        /// other
        /// </summary>
          other,
        /// <summary>
        /// steam
        /// </summary>
          steam,
        /// <summary>
        /// water
        /// </summary>
          water
        }
        /// <summary>
        /// This class represents the EndpointQualifierInterval xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the EndpointQualifierInterval xsd enumeration.")]
        public enum EndpointQualifierInterval 
        {
        /// <summary>
        /// The value is excluded.
        /// </summary>
          exclusive,
        /// <summary>
        /// The value is included.
        /// </summary>
          inclusive,
        /// <summary>
        /// The value is unknown. 
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ValueStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ValueStatus xsd enumeration.")]
        public enum ValueStatus 
        {
        /// <summary>
        /// accessdenied property
        /// </summary>
          [XmlEnum("access denied")]
          accessdenied,
        /// <summary>
        /// bad
        /// </summary>
          bad,
        /// <summary>
        /// badcalibration property
        /// </summary>
          [XmlEnum("bad calibration")]
          badcalibration,
        /// <summary>
        /// calculationfailure property
        /// </summary>
          [XmlEnum("calculation failure")]
          calculationfailure,
        /// <summary>
        /// commfailure property
        /// </summary>
          [XmlEnum("comm failure")]
          commfailure,
        /// <summary>
        /// devicefailure property
        /// </summary>
          [XmlEnum("device failure")]
          devicefailure,
        /// <summary>
        /// frozen
        /// </summary>
          frozen,
        /// <summary>
        /// notavailable property
        /// </summary>
          [XmlEnum("not available")]
          notavailable,
        /// <summary>
        /// overflow
        /// </summary>
          overflow,
        /// <summary>
        /// questionable
        /// </summary>
          questionable,
        /// <summary>
        /// rangelimit property
        /// </summary>
          [XmlEnum("range limit")]
          rangelimit,
        /// <summary>
        /// sensorfailure property
        /// </summary>
          [XmlEnum("sensor failure")]
          sensorfailure,
        /// <summary>
        /// substituted
        /// </summary>
          substituted,
        /// <summary>
        /// timeout
        /// </summary>
          timeout
        }
        /// <summary>
        /// This class represents the TimeSeriesKeyword xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the TimeSeriesKeyword xsd enumeration.")]
        public enum TimeSeriesKeyword 
        {
        /// <summary>
        /// assetidentifier property
        /// </summary>
          [XmlEnum("asset identifier")]
          assetidentifier,
        /// <summary>
        /// flow
        /// </summary>
          flow,
        /// <summary>
        /// product
        /// </summary>
          product,
        /// <summary>
        /// qualifier
        /// </summary>
          qualifier,
        /// <summary>
        /// subqualifier
        /// </summary>
          subqualifier,
        /// <summary>
        /// unknown
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the SafetyType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the SafetyType xsd enumeration.")]
        public enum SafetyType 
        {
        /// <summary>
        /// drillorexercise property
        /// </summary>
          [XmlEnum("drill or exercise")]
          drillorexercise,
        /// <summary>
        /// fire
        /// </summary>
          fire,
        /// <summary>
        /// firstaid property
        /// </summary>
          [XmlEnum("first aid")]
          firstaid,
        /// <summary>
        /// hazardreportcard property
        /// </summary>
          [XmlEnum("hazard report card")]
          hazardreportcard,
        /// <summary>
        /// jobobservation property
        /// </summary>
          [XmlEnum("job observation")]
          jobobservation,
        /// <summary>
        /// losttimeaccident property
        /// </summary>
          [XmlEnum("lost time accident")]
          losttimeaccident,
        /// <summary>
        /// losttimeincident property
        /// </summary>
          [XmlEnum("lost time incident")]
          losttimeincident,
        /// <summary>
        /// miscellaneous
        /// </summary>
          miscellaneous,
        /// <summary>
        /// nearmiss property
        /// </summary>
          [XmlEnum("near miss")]
          nearmiss,
        /// <summary>
        /// permitwithSJA property
        /// </summary>
          [XmlEnum("permit with SJA")]
          permitwithSJA,
        /// <summary>
        /// releasedtoair property
        /// </summary>
          [XmlEnum("released to air")]
          releasedtoair,
        /// <summary>
        /// releasedtowater property
        /// </summary>
          [XmlEnum("released to water")]
          releasedtowater,
        /// <summary>
        /// restrictedwork property
        /// </summary>
          [XmlEnum("restricted work")]
          restrictedwork,
        /// <summary>
        /// safetymeeting property
        /// </summary>
          [XmlEnum("safety meeting")]
          safetymeeting,
        /// <summary>
        /// sentashore property
        /// </summary>
          [XmlEnum("sent ashore")]
          sentashore,
        /// <summary>
        /// severeaccident property
        /// </summary>
          [XmlEnum("severe accident")]
          severeaccident,
        /// <summary>
        /// sickonboard property
        /// </summary>
          [XmlEnum("sick on board")]
          sickonboard,
        /// <summary>
        /// spillorleak property
        /// </summary>
          [XmlEnum("spill or leak")]
          spillorleak,
        /// <summary>
        /// totalpermits property
        /// </summary>
          [XmlEnum("total permits")]
          totalpermits,
        /// <summary>
        /// trafficaccident property
        /// </summary>
          [XmlEnum("traffic accident")]
          trafficaccident,
        /// <summary>
        /// yeartodateincidents property
        /// </summary>
          [XmlEnum("year-to-date incidents")]
          yeartodateincidents
        }
        /// <summary>
        /// This class represents the ReportingDurationKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ReportingDurationKind xsd enumeration.")]
        public enum ReportingDurationKind 
        {
        /// <summary>
        /// day property
        /// </summary>
          day,
        /// <summary>
        /// lifetodate property
        /// </summary>
          [XmlEnum("life to date")]
          lifetodate,
        /// <summary>
        /// month property
        /// </summary>
          month,
        /// <summary>
        /// monthtodate property
        /// </summary>
          [XmlEnum("month to date")]
          monthtodate,
        /// <summary>
        /// totalcumulative property
        /// </summary>
          [XmlEnum("total cumulative")]
          totalcumulative,
        /// <summary>
        /// week property
        /// </summary>
          week,
        /// <summary>
        /// year property
        /// </summary>
          year,
        /// <summary>
        /// yeartodate property
        /// </summary>
          [XmlEnum("year to date")]
          yeartodate
        }
        /// <summary>
        /// This class represents the PlaneAngleUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PlaneAngleUom xsd enumeration.")]
        public enum PlaneAngleUom 
        {
        /// <summary>
        /// Item0001seca property
        /// </summary>
          [XmlEnum("0.001 seca")]
          Item0001seca,
        /// <summary>
        /// ccgr property
        /// </summary>
          ccgr,
        /// <summary>
        /// cgr property
        /// </summary>
          cgr,
        /// <summary>
        /// dega property
        /// </summary>
          dega,
        /// <summary>
        /// gon property
        /// </summary>
          gon,
        /// <summary>
        /// krad property
        /// </summary>
          krad,
        /// <summary>
        /// mila property
        /// </summary>
          mila,
        /// <summary>
        /// mina property
        /// </summary>
          mina,
        /// <summary>
        /// Mrad property
        /// </summary>
          Mrad,
        /// <summary>
        /// mrad property
        /// </summary>
          mrad,
        /// <summary>
        /// rad property
        /// </summary>
          rad,
        /// <summary>
        /// rev property
        /// </summary>
          rev,
        /// <summary>
        /// seca property
        /// </summary>
          seca,
        /// <summary>
        /// urad property
        /// </summary>
          urad
        }
        /// <summary>
        /// This class represents the ReportingFacility xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ReportingFacility xsd enumeration.")]
        public enum ReportingFacility 
        {
        /// <summary>
        /// blockvalve property
        /// </summary>
          [XmlEnum("block valve")]
          blockvalve,
        /// <summary>
        /// bottomhole
        /// </summary>
          bottomhole,
        /// <summary>
        /// casing
        /// </summary>
          casing,
        /// <summary>
        /// choke
        /// </summary>
          choke,
        /// <summary>
        /// cluster
        /// </summary>
          cluster,
        /// <summary>
        /// commercialentity property
        /// </summary>
          [XmlEnum("commercial entity")]
          commercialentity,
        /// <summary>
        /// company
        /// </summary>
          company,
        /// <summary>
        /// completion
        /// </summary>
          completion,
        /// <summary>
        /// compressor
        /// </summary>
          compressor,
        /// <summary>
        /// controller
        /// </summary>
          controller,
        /// <summary>
        /// controllerlift property
        /// </summary>
          [XmlEnum("controller -- lift")]
          controllerlift,
        /// <summary>
        /// country
        /// </summary>
          country,
        /// <summary>
        /// county
        /// </summary>
          county,
        /// <summary>
        /// downholemonitoringsystem property
        /// </summary>
          [XmlEnum("downhole monitoring system")]
          downholemonitoringsystem,
        /// <summary>
        /// electricsubmersiblepump property
        /// </summary>
          [XmlEnum("electric submersible pump")]
          electricsubmersiblepump,
        /// <summary>
        /// field
        /// </summary>
          field,
        /// <summary>
        /// fieldarea property
        /// </summary>
          [XmlEnum("field - area")]
          fieldarea,
        /// <summary>
        /// fieldgroup property
        /// </summary>
          [XmlEnum("field - group")]
          fieldgroup,
        /// <summary>
        /// fieldpart property
        /// </summary>
          [XmlEnum("field - part")]
          fieldpart,
        /// <summary>
        /// flowmeter property
        /// </summary>
          [XmlEnum("flow meter")]
          flowmeter,
        /// <summary>
        /// flowline
        /// </summary>
          flowline,
        /// <summary>
        /// formation
        /// </summary>
          formation,
        /// <summary>
        /// gasliftvalvemandrel property
        /// </summary>
          [XmlEnum("gas lift valve mandrel")]
          gasliftvalvemandrel,
        /// <summary>
        /// generator
        /// </summary>
          generator,
        /// <summary>
        /// installation
        /// </summary>
          installation,
        /// <summary>
        /// lease
        /// </summary>
          lease,
        /// <summary>
        /// license
        /// </summary>
          license,
        /// <summary>
        /// manifold
        /// </summary>
          manifold,
        /// <summary>
        /// organizationalunit property
        /// </summary>
          [XmlEnum("organizational unit")]
          organizationalunit,
        /// <summary>
        /// packer
        /// </summary>
          packer,
        /// <summary>
        /// perforatedinterval property
        /// </summary>
          [XmlEnum("perforated interval")]
          perforatedinterval,
        /// <summary>
        /// pipeline
        /// </summary>
          pipeline,
        /// <summary>
        /// plantprocessing property
        /// </summary>
          [XmlEnum("plant - processing")]
          plantprocessing,
        /// <summary>
        /// platform
        /// </summary>
          platform,
        /// <summary>
        /// pressuremeter property
        /// </summary>
          [XmlEnum("pressure meter")]
          pressuremeter,
        /// <summary>
        /// processingfacility property
        /// </summary>
          [XmlEnum("processing facility")]
          processingfacility,
        /// <summary>
        /// productiontubing property
        /// </summary>
          [XmlEnum("production tubing")]
          productiontubing,
        /// <summary>
        /// pump
        /// </summary>
          pump,
        /// <summary>
        /// rectifier
        /// </summary>
          rectifier,
        /// <summary>
        /// regulatingvalve property
        /// </summary>
          [XmlEnum("regulating valve")]
          regulatingvalve,
        /// <summary>
        /// remoteterminalunit property
        /// </summary>
          [XmlEnum("remote terminal unit")]
          remoteterminalunit,
        /// <summary>
        /// reservoir
        /// </summary>
          reservoir,
        /// <summary>
        /// separator
        /// </summary>
          separator,
        /// <summary>
        /// sleevevalve property
        /// </summary>
          [XmlEnum("sleeve valve")]
          sleevevalve,
        /// <summary>
        /// state
        /// </summary>
          state,
        /// <summary>
        /// storage
        /// </summary>
          storage,
        /// <summary>
        /// tank
        /// </summary>
          tank,
        /// <summary>
        /// temperaturemeter property
        /// </summary>
          [XmlEnum("temperature meter")]
          temperaturemeter,
        /// <summary>
        /// template
        /// </summary>
          template,
        /// <summary>
        /// terminal
        /// </summary>
          terminal,
        /// <summary>
        /// trap
        /// </summary>
          trap,
        /// <summary>
        /// trunkline
        /// </summary>
          trunkline,
        /// <summary>
        /// tubinghead property
        /// </summary>
          [XmlEnum("tubing head")]
          tubinghead,
        /// <summary>
        /// turbine
        /// </summary>
          turbine,
        /// <summary>
        /// unknown
        /// </summary>
          unknown,
        /// <summary>
        /// well
        /// </summary>
          well,
        /// <summary>
        /// wellgroup property
        /// </summary>
          [XmlEnum("well group")]
          wellgroup,
        /// <summary>
        /// wellbore
        /// </summary>
          wellbore,
        /// <summary>
        /// wellhead
        /// </summary>
          wellhead,
        /// <summary>
        /// zone
        /// </summary>
          zone
        }
        /// <summary>
        /// This class represents the OperationKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the OperationKind xsd enumeration.")]
        public enum OperationKind 
        {
        /// <summary>
        /// airtraffic property
        /// </summary>
          [XmlEnum("air traffic")]
          airtraffic,
        /// <summary>
        /// construction
        /// </summary>
          construction,
        /// <summary>
        /// deviations
        /// </summary>
          deviations,
        /// <summary>
        /// maintenance
        /// </summary>
          maintenance,
        /// <summary>
        /// other
        /// </summary>
          other,
        /// <summary>
        /// powerstationfailure property
        /// </summary>
          [XmlEnum("power station failure")]
          powerstationfailure,
        /// <summary>
        /// production
        /// </summary>
          production,
        /// <summary>
        /// well
        /// </summary>
          well
        }
        /// <summary>
        /// This class represents the MassPerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerMassUom xsd enumeration.")]
        public enum MassPerMassUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// mass property
        /// </summary>
          [XmlEnum("%[mass]")]
          mass,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// gkg property
        /// </summary>
          [XmlEnum("g/kg")]
          gkg,
        /// <summary>
        /// gt property
        /// </summary>
          [XmlEnum("g/t")]
          gt,
        /// <summary>
        /// kgkg property
        /// </summary>
          [XmlEnum("kg/kg")]
          kgkg,
        /// <summary>
        /// kgsack94lbm property
        /// </summary>
          [XmlEnum("kg/sack[94lbm]")]
          kgsack94lbm,
        /// <summary>
        /// kgt property
        /// </summary>
          [XmlEnum("kg/t")]
          kgt,
        /// <summary>
        /// mgg property
        /// </summary>
          [XmlEnum("mg/g")]
          mgg,
        /// <summary>
        /// mgkg property
        /// </summary>
          [XmlEnum("mg/kg")]
          mgkg,
        /// <summary>
        /// ngg property
        /// </summary>
          [XmlEnum("ng/g")]
          ngg,
        /// <summary>
        /// ngmg property
        /// </summary>
          [XmlEnum("ng/mg")]
          ngmg,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// ppmmass property
        /// </summary>
          [XmlEnum("ppm[mass]")]
          ppmmass,
        /// <summary>
        /// ugg property
        /// </summary>
          [XmlEnum("ug/g")]
          ugg,
        /// <summary>
        /// ugmg property
        /// </summary>
          [XmlEnum("ug/mg")]
          ugmg
        }
        /// <summary>
        /// This class represents the MassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassUom xsd enumeration.")]
        public enum MassUom 
        {
        /// <summary>
        /// ag property
        /// </summary>
          ag,
        /// <summary>
        /// cg property
        /// </summary>
          cg,
        /// <summary>
        /// ct property
        /// </summary>
          ct,
        /// <summary>
        /// cwtUK property
        /// </summary>
          [XmlEnum("cwt[UK]")]
          cwtUK,
        /// <summary>
        /// cwtUS property
        /// </summary>
          [XmlEnum("cwt[US]")]
          cwtUS,
        /// <summary>
        /// Eg property
        /// </summary>
          Eg,
        /// <summary>
        /// fg property
        /// </summary>
          fg,
        /// <summary>
        /// g property
        /// </summary>
          g,
        /// <summary>
        /// Gg property
        /// </summary>
          Gg,
        /// <summary>
        /// grain property
        /// </summary>
          grain,
        /// <summary>
        /// hg property
        /// </summary>
          hg,
        /// <summary>
        /// kg property
        /// </summary>
          kg,
        /// <summary>
        /// klbm property
        /// </summary>
          klbm,
        /// <summary>
        /// lbm property
        /// </summary>
          lbm,
        /// <summary>
        /// mg property
        /// </summary>
          mg,
        /// <summary>
        /// Mg property
        /// </summary>
          Mg,
        /// <summary>
        /// ng property
        /// </summary>
          ng,
        /// <summary>
        /// ozm property
        /// </summary>
          ozm,
        /// <summary>
        /// ozmtroy property
        /// </summary>
          [XmlEnum("ozm[troy]")]
          ozmtroy,
        /// <summary>
        /// pg property
        /// </summary>
          pg,
        /// <summary>
        /// sack94lbm property
        /// </summary>
          [XmlEnum("sack[94lbm]")]
          sack94lbm,
        /// <summary>
        /// t property
        /// </summary>
          t,
        /// <summary>
        /// Tg property
        /// </summary>
          Tg,
        /// <summary>
        /// tonUK property
        /// </summary>
          [XmlEnum("ton[UK]")]
          tonUK,
        /// <summary>
        /// tonUS property
        /// </summary>
          [XmlEnum("ton[US]")]
          tonUS,
        /// <summary>
        /// ug property
        /// </summary>
          ug
        }
        /// <summary>
        /// This class represents the DimensionlessUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DimensionlessUom xsd enumeration.")]
        public enum DimensionlessUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// dEuc property
        /// </summary>
          dEuc,
        /// <summary>
        /// EEuc property
        /// </summary>
          EEuc,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// fEuc property
        /// </summary>
          fEuc,
        /// <summary>
        /// GEuc property
        /// </summary>
          GEuc,
        /// <summary>
        /// kEuc property
        /// </summary>
          kEuc,
        /// <summary>
        /// MEuc property
        /// </summary>
          MEuc,
        /// <summary>
        /// mEuc property
        /// </summary>
          mEuc,
        /// <summary>
        /// nEuc property
        /// </summary>
          nEuc,
        /// <summary>
        /// pEuc property
        /// </summary>
          pEuc,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// TEuc property
        /// </summary>
          TEuc,
        /// <summary>
        /// uEuc property
        /// </summary>
          uEuc
        }
        /// <summary>
        /// This class represents the CrewType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the CrewType xsd enumeration.")]
        public enum CrewType 
        {
        /// <summary>
        /// cateringcrew property
        /// </summary>
          [XmlEnum("catering crew")]
          cateringcrew,
        /// <summary>
        /// contractorcrew property
        /// </summary>
          [XmlEnum("contractor crew")]
          contractorcrew,
        /// <summary>
        /// dayvisitors property
        /// </summary>
          [XmlEnum("day visitors")]
          dayvisitors,
        /// <summary>
        /// drillingcontractcrew property
        /// </summary>
          [XmlEnum("drilling contract crew")]
          drillingcontractcrew,
        /// <summary>
        /// othercrew property
        /// </summary>
          [XmlEnum("other crew")]
          othercrew,
        /// <summary>
        /// owncrew property
        /// </summary>
          [XmlEnum("own crew")]
          owncrew,
        /// <summary>
        /// ownothercrew property
        /// </summary>
          [XmlEnum("own other crew")]
          ownothercrew,
        /// <summary>
        /// personnelonboard property
        /// </summary>
          [XmlEnum("personnel on board")]
          personnelonboard
        }
        /// <summary>
        /// This class represents the WftTestKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the WftTestKind xsd enumeration.")]
        public enum WftTestKind 
        {
        /// <summary>
        /// buildup
        /// </summary>
          buildup,
        /// <summary>
        /// drawdown
        /// </summary>
          drawdown,
        /// <summary>
        /// unknown
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WftTestResultKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the WftTestResultKind xsd enumeration.")]
        public enum WftTestResultKind 
        {
        /// <summary>
        /// buildupresult property
        /// </summary>
          [XmlEnum("buildup result")]
          buildupresult,
        /// <summary>
        /// drawdownresult property
        /// </summary>
          [XmlEnum("drawdown result")]
          drawdownresult,
        /// <summary>
        /// unknown
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WftTestDataRole xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the WftTestDataRole xsd enumeration.")]
        public enum WftTestDataRole 
        {
        /// <summary>
        /// flowhistory property
        /// </summary>
          [XmlEnum("flow history")]
          flowhistory,
        /// <summary>
        /// pressurestream property
        /// </summary>
          [XmlEnum("pressure stream")]
          pressurestream,
        /// <summary>
        /// unknown
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MeasureClass xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MeasureClass xsd enumeration.")]
        public enum MeasureClass 
        {
        /// <summary>
        /// absorbeddose property
        /// </summary>
          [XmlEnum("absorbed dose")]
          absorbeddose,
        /// <summary>
        /// activityofradioactivity property
        /// </summary>
          [XmlEnum("activity of radioactivity")]
          activityofradioactivity,
        /// <summary>
        /// amountofsubstance property
        /// </summary>
          [XmlEnum("amount of substance")]
          amountofsubstance,
        /// <summary>
        /// amountofsubstanceperamountofsubstance property
        /// </summary>
          [XmlEnum("amount of substance per amount of substance")]
          amountofsubstanceperamountofsubstance,
        /// <summary>
        /// amountofsubstanceperarea property
        /// </summary>
          [XmlEnum("amount of substance per area")]
          amountofsubstanceperarea,
        /// <summary>
        /// amountofsubstancepertime property
        /// </summary>
          [XmlEnum("amount of substance per time")]
          amountofsubstancepertime,
        /// <summary>
        /// amountofsubstancepertimeperarea property
        /// </summary>
          [XmlEnum("amount of substance per time per area")]
          amountofsubstancepertimeperarea,
        /// <summary>
        /// amountofsubstancepervolume property
        /// </summary>
          [XmlEnum("amount of substance per volume")]
          amountofsubstancepervolume,
        /// <summary>
        /// angleperlength property
        /// </summary>
          [XmlEnum("angle per length")]
          angleperlength,
        /// <summary>
        /// anglepervolume property
        /// </summary>
          [XmlEnum("angle per volume")]
          anglepervolume,
        /// <summary>
        /// angularacceleration property
        /// </summary>
          [XmlEnum("angular acceleration")]
          angularacceleration,
        /// <summary>
        /// angularvelocity property
        /// </summary>
          [XmlEnum("angular velocity")]
          angularvelocity,
        /// <summary>
        /// apigammaray property
        /// </summary>
          [XmlEnum("api gamma ray")]
          apigammaray,
        /// <summary>
        /// apigravity property
        /// </summary>
          [XmlEnum("api gravity")]
          apigravity,
        /// <summary>
        /// apineutron property
        /// </summary>
          [XmlEnum("api neutron")]
          apineutron,
        /// <summary>
        /// area property
        /// </summary>
          area,
        /// <summary>
        /// areaperamountofsubstance property
        /// </summary>
          [XmlEnum("area per amount of substance")]
          areaperamountofsubstance,
        /// <summary>
        /// areaperarea property
        /// </summary>
          [XmlEnum("area per area")]
          areaperarea,
        /// <summary>
        /// areapercount property
        /// </summary>
          [XmlEnum("area per count")]
          areapercount,
        /// <summary>
        /// areapermass property
        /// </summary>
          [XmlEnum("area per mass")]
          areapermass,
        /// <summary>
        /// areapertime property
        /// </summary>
          [XmlEnum("area per time")]
          areapertime,
        /// <summary>
        /// areapervolume property
        /// </summary>
          [XmlEnum("area per volume")]
          areapervolume,
        /// <summary>
        /// attenuationperfrequencyinterval property
        /// </summary>
          [XmlEnum("attenuation per frequency interval")]
          attenuationperfrequencyinterval,
        /// <summary>
        /// capacitance property
        /// </summary>
          capacitance,
        /// <summary>
        /// cationexchangecapacity property
        /// </summary>
          [XmlEnum("cation exchange capacity")]
          cationexchangecapacity,
        /// <summary>
        /// datatransferspeed property
        /// </summary>
          [XmlEnum("data transfer speed")]
          datatransferspeed,
        /// <summary>
        /// diffusioncoefficient property
        /// </summary>
          [XmlEnum("diffusion coefficient")]
          diffusioncoefficient,
        /// <summary>
        /// diffusivetimeofflight property
        /// </summary>
          [XmlEnum("diffusive time of flight")]
          diffusivetimeofflight,
        /// <summary>
        /// digitalstorage property
        /// </summary>
          [XmlEnum("digital storage")]
          digitalstorage,
        /// <summary>
        /// dimensionless property
        /// </summary>
          dimensionless,
        /// <summary>
        /// dipolemoment property
        /// </summary>
          [XmlEnum("dipole moment")]
          dipolemoment,
        /// <summary>
        /// doseequivalent property
        /// </summary>
          [XmlEnum("dose equivalent")]
          doseequivalent,
        /// <summary>
        /// dynamicviscosity property
        /// </summary>
          [XmlEnum("dynamic viscosity")]
          dynamicviscosity,
        /// <summary>
        /// electriccharge property
        /// </summary>
          [XmlEnum("electric charge")]
          electriccharge,
        /// <summary>
        /// electricchargeperarea property
        /// </summary>
          [XmlEnum("electric charge per area")]
          electricchargeperarea,
        /// <summary>
        /// electricchargepermass property
        /// </summary>
          [XmlEnum("electric charge per mass")]
          electricchargepermass,
        /// <summary>
        /// electricchargepervolume property
        /// </summary>
          [XmlEnum("electric charge per volume")]
          electricchargepervolume,
        /// <summary>
        /// electricconductance property
        /// </summary>
          [XmlEnum("electric conductance")]
          electricconductance,
        /// <summary>
        /// electricconductivity property
        /// </summary>
          [XmlEnum("electric conductivity")]
          electricconductivity,
        /// <summary>
        /// electriccurrent property
        /// </summary>
          [XmlEnum("electric current")]
          electriccurrent,
        /// <summary>
        /// electriccurrentdensity property
        /// </summary>
          [XmlEnum("electric current density")]
          electriccurrentdensity,
        /// <summary>
        /// electricfieldstrength property
        /// </summary>
          [XmlEnum("electric field strength")]
          electricfieldstrength,
        /// <summary>
        /// electricpotentialdifference property
        /// </summary>
          [XmlEnum("electric potential difference")]
          electricpotentialdifference,
        /// <summary>
        /// electricresistance property
        /// </summary>
          [XmlEnum("electric resistance")]
          electricresistance,
        /// <summary>
        /// electricresistanceperlength property
        /// </summary>
          [XmlEnum("electric resistance per length")]
          electricresistanceperlength,
        /// <summary>
        /// electricalresistivity property
        /// </summary>
          [XmlEnum("electrical resistivity")]
          electricalresistivity,
        /// <summary>
        /// electromagneticmoment property
        /// </summary>
          [XmlEnum("electromagnetic moment")]
          electromagneticmoment,
        /// <summary>
        /// energy property
        /// </summary>
          energy,
        /// <summary>
        /// energylengthperarea property
        /// </summary>
          [XmlEnum("energy length per area")]
          energylengthperarea,
        /// <summary>
        /// energylengthpertimeareatemperature property
        /// </summary>
          [XmlEnum("energy length per time area temperature")]
          energylengthpertimeareatemperature,
        /// <summary>
        /// energyperarea property
        /// </summary>
          [XmlEnum("energy per area")]
          energyperarea,
        /// <summary>
        /// energyperlength property
        /// </summary>
          [XmlEnum("energy per length")]
          energyperlength,
        /// <summary>
        /// energypermass property
        /// </summary>
          [XmlEnum("energy per mass")]
          energypermass,
        /// <summary>
        /// energypermasspertime property
        /// </summary>
          [XmlEnum("energy per mass per time")]
          energypermasspertime,
        /// <summary>
        /// energypervolume property
        /// </summary>
          [XmlEnum("energy per volume")]
          energypervolume,
        /// <summary>
        /// force property
        /// </summary>
          force,
        /// <summary>
        /// forcearea property
        /// </summary>
          [XmlEnum("force area")]
          forcearea,
        /// <summary>
        /// forcelengthperlength property
        /// </summary>
          [XmlEnum("force length per length")]
          forcelengthperlength,
        /// <summary>
        /// forceperforce property
        /// </summary>
          [XmlEnum("force per force")]
          forceperforce,
        /// <summary>
        /// forceperlength property
        /// </summary>
          [XmlEnum("force per length")]
          forceperlength,
        /// <summary>
        /// forcepervolume property
        /// </summary>
          [XmlEnum("force per volume")]
          forcepervolume,
        /// <summary>
        /// frequency property
        /// </summary>
          frequency,
        /// <summary>
        /// frequencyinterval property
        /// </summary>
          [XmlEnum("frequency interval")]
          frequencyinterval,
        /// <summary>
        /// heatcapacity property
        /// </summary>
          [XmlEnum("heat capacity")]
          heatcapacity,
        /// <summary>
        /// heatflowrate property
        /// </summary>
          [XmlEnum("heat flow rate")]
          heatflowrate,
        /// <summary>
        /// heattransfercoefficient property
        /// </summary>
          [XmlEnum("heat transfer coefficient")]
          heattransfercoefficient,
        /// <summary>
        /// illuminance property
        /// </summary>
          illuminance,
        /// <summary>
        /// inductance property
        /// </summary>
          inductance,
        /// <summary>
        /// isothermalcompressibility property
        /// </summary>
          [XmlEnum("isothermal compressibility")]
          isothermalcompressibility,
        /// <summary>
        /// kinematicviscosity property
        /// </summary>
          [XmlEnum("kinematic viscosity")]
          kinematicviscosity,
        /// <summary>
        /// length property
        /// </summary>
          length,
        /// <summary>
        /// lengthperlength property
        /// </summary>
          [XmlEnum("length per length")]
          lengthperlength,
        /// <summary>
        /// lengthpermass property
        /// </summary>
          [XmlEnum("length per mass")]
          lengthpermass,
        /// <summary>
        /// lengthperpressure property
        /// </summary>
          [XmlEnum("length per pressure")]
          lengthperpressure,
        /// <summary>
        /// lengthpertemperature property
        /// </summary>
          [XmlEnum("length per temperature")]
          lengthpertemperature,
        /// <summary>
        /// lengthpertime property
        /// </summary>
          [XmlEnum("length per time")]
          lengthpertime,
        /// <summary>
        /// lengthpervolume property
        /// </summary>
          [XmlEnum("length per volume")]
          lengthpervolume,
        /// <summary>
        /// lightexposure property
        /// </summary>
          [XmlEnum("light exposure")]
          lightexposure,
        /// <summary>
        /// linearacceleration property
        /// </summary>
          [XmlEnum("linear acceleration")]
          linearacceleration,
        /// <summary>
        /// linearthermalexpansion property
        /// </summary>
          [XmlEnum("linear thermal expansion")]
          linearthermalexpansion,
        /// <summary>
        /// logarithmicpowerratio property
        /// </summary>
          [XmlEnum("logarithmic power ratio")]
          logarithmicpowerratio,
        /// <summary>
        /// logarithmicpowerratioperlength property
        /// </summary>
          [XmlEnum("logarithmic power ratio per length")]
          logarithmicpowerratioperlength,
        /// <summary>
        /// luminance property
        /// </summary>
          luminance,
        /// <summary>
        /// luminousefficacy property
        /// </summary>
          [XmlEnum("luminous efficacy")]
          luminousefficacy,
        /// <summary>
        /// luminousflux property
        /// </summary>
          [XmlEnum("luminous flux")]
          luminousflux,
        /// <summary>
        /// luminousintensity property
        /// </summary>
          [XmlEnum("luminous intensity")]
          luminousintensity,
        /// <summary>
        /// magneticdipolemoment property
        /// </summary>
          [XmlEnum("magnetic dipole moment")]
          magneticdipolemoment,
        /// <summary>
        /// magneticfieldstrength property
        /// </summary>
          [XmlEnum("magnetic field strength")]
          magneticfieldstrength,
        /// <summary>
        /// magneticflux property
        /// </summary>
          [XmlEnum("magnetic flux")]
          magneticflux,
        /// <summary>
        /// magneticfluxdensity property
        /// </summary>
          [XmlEnum("magnetic flux density")]
          magneticfluxdensity,
        /// <summary>
        /// magneticfluxdensityperlength property
        /// </summary>
          [XmlEnum("magnetic flux density per length")]
          magneticfluxdensityperlength,
        /// <summary>
        /// magneticpermeability property
        /// </summary>
          [XmlEnum("magnetic permeability")]
          magneticpermeability,
        /// <summary>
        /// magneticvectorpotential property
        /// </summary>
          [XmlEnum("magnetic vector potential")]
          magneticvectorpotential,
        /// <summary>
        /// mass property
        /// </summary>
          mass,
        /// <summary>
        /// masslength property
        /// </summary>
          [XmlEnum("mass length")]
          masslength,
        /// <summary>
        /// massperarea property
        /// </summary>
          [XmlEnum("mass per area")]
          massperarea,
        /// <summary>
        /// massperenergy property
        /// </summary>
          [XmlEnum("mass per energy")]
          massperenergy,
        /// <summary>
        /// massperlength property
        /// </summary>
          [XmlEnum("mass per length")]
          massperlength,
        /// <summary>
        /// masspermass property
        /// </summary>
          [XmlEnum("mass per mass")]
          masspermass,
        /// <summary>
        /// masspertime property
        /// </summary>
          [XmlEnum("mass per time")]
          masspertime,
        /// <summary>
        /// masspertimeperarea property
        /// </summary>
          [XmlEnum("mass per time per area")]
          masspertimeperarea,
        /// <summary>
        /// masspertimeperlength property
        /// </summary>
          [XmlEnum("mass per time per length")]
          masspertimeperlength,
        /// <summary>
        /// masspervolume property
        /// </summary>
          [XmlEnum("mass per volume")]
          masspervolume,
        /// <summary>
        /// masspervolumeperlength property
        /// </summary>
          [XmlEnum("mass per volume per length")]
          masspervolumeperlength,
        /// <summary>
        /// masspervolumeperpressure property
        /// </summary>
          [XmlEnum("mass per volume per pressure")]
          masspervolumeperpressure,
        /// <summary>
        /// masspervolumepertemperature property
        /// </summary>
          [XmlEnum("mass per volume per temperature")]
          masspervolumepertemperature,
        /// <summary>
        /// mobility property
        /// </summary>
          mobility,
        /// <summary>
        /// molarenergy property
        /// </summary>
          [XmlEnum("molar energy")]
          molarenergy,
        /// <summary>
        /// molarheatcapacity property
        /// </summary>
          [XmlEnum("molar heat capacity")]
          molarheatcapacity,
        /// <summary>
        /// molarvolume property
        /// </summary>
          [XmlEnum("molar volume")]
          molarvolume,
        /// <summary>
        /// molecularweight property
        /// </summary>
          [XmlEnum("molecular weight")]
          molecularweight,
        /// <summary>
        /// momentofforce property
        /// </summary>
          [XmlEnum("moment of force")]
          momentofforce,
        /// <summary>
        /// momentofinertia property
        /// </summary>
          [XmlEnum("moment of inertia")]
          momentofinertia,
        /// <summary>
        /// momentum property
        /// </summary>
          momentum,
        /// <summary>
        /// normalizedpower property
        /// </summary>
          [XmlEnum("normalized power")]
          normalizedpower,
        /// <summary>
        /// permeabilitylength property
        /// </summary>
          [XmlEnum("permeability length")]
          permeabilitylength,
        /// <summary>
        /// permeabilityrock property
        /// </summary>
          [XmlEnum("permeability rock")]
          permeabilityrock,
        /// <summary>
        /// permittivity property
        /// </summary>
          permittivity,
        /// <summary>
        /// planeangle property
        /// </summary>
          [XmlEnum("plane angle")]
          planeangle,
        /// <summary>
        /// potentialdifferenceperpowerdrop property
        /// </summary>
          [XmlEnum("potential difference per power drop")]
          potentialdifferenceperpowerdrop,
        /// <summary>
        /// power property
        /// </summary>
          power,
        /// <summary>
        /// powerperarea property
        /// </summary>
          [XmlEnum("power per area")]
          powerperarea,
        /// <summary>
        /// powerperpower property
        /// </summary>
          [XmlEnum("power per power")]
          powerperpower,
        /// <summary>
        /// powerpervolume property
        /// </summary>
          [XmlEnum("power per volume")]
          powerpervolume,
        /// <summary>
        /// pressure property
        /// </summary>
          pressure,
        /// <summary>
        /// pressureperpressure property
        /// </summary>
          [XmlEnum("pressure per pressure")]
          pressureperpressure,
        /// <summary>
        /// pressurepertime property
        /// </summary>
          [XmlEnum("pressure per time")]
          pressurepertime,
        /// <summary>
        /// pressurepervolume property
        /// </summary>
          [XmlEnum("pressure per volume")]
          pressurepervolume,
        /// <summary>
        /// pressuresquared property
        /// </summary>
          [XmlEnum("pressure squared")]
          pressuresquared,
        /// <summary>
        /// pressuresquaredperforcetimeperarea property
        /// </summary>
          [XmlEnum("pressure squared per force time per area")]
          pressuresquaredperforcetimeperarea,
        /// <summary>
        /// pressuretimepervolume property
        /// </summary>
          [XmlEnum("pressure time per volume")]
          pressuretimepervolume,
        /// <summary>
        /// quantityoflight property
        /// </summary>
          [XmlEnum("quantity of light")]
          quantityoflight,
        /// <summary>
        /// radiance property
        /// </summary>
          radiance,
        /// <summary>
        /// radiantintensity property
        /// </summary>
          [XmlEnum("radiant intensity")]
          radiantintensity,
        /// <summary>
        /// reciprocalarea property
        /// </summary>
          [XmlEnum("reciprocal area")]
          reciprocalarea,
        /// <summary>
        /// reciprocalelectricpotentialdifference property
        /// </summary>
          [XmlEnum("reciprocal electric potential difference")]
          reciprocalelectricpotentialdifference,
        /// <summary>
        /// reciprocalforce property
        /// </summary>
          [XmlEnum("reciprocal force")]
          reciprocalforce,
        /// <summary>
        /// reciprocallength property
        /// </summary>
          [XmlEnum("reciprocal length")]
          reciprocallength,
        /// <summary>
        /// reciprocalmass property
        /// </summary>
          [XmlEnum("reciprocal mass")]
          reciprocalmass,
        /// <summary>
        /// reciprocalmasstime property
        /// </summary>
          [XmlEnum("reciprocal mass time")]
          reciprocalmasstime,
        /// <summary>
        /// reciprocalpressure property
        /// </summary>
          [XmlEnum("reciprocal pressure")]
          reciprocalpressure,
        /// <summary>
        /// reciprocaltime property
        /// </summary>
          [XmlEnum("reciprocal time")]
          reciprocaltime,
        /// <summary>
        /// reciprocalvolume property
        /// </summary>
          [XmlEnum("reciprocal volume")]
          reciprocalvolume,
        /// <summary>
        /// reluctance property
        /// </summary>
          reluctance,
        /// <summary>
        /// secondmomentofarea property
        /// </summary>
          [XmlEnum("second moment of area")]
          secondmomentofarea,
        /// <summary>
        /// signalingeventpertime property
        /// </summary>
          [XmlEnum("signaling event per time")]
          signalingeventpertime,
        /// <summary>
        /// solidangle property
        /// </summary>
          [XmlEnum("solid angle")]
          solidangle,
        /// <summary>
        /// specificheatcapacity property
        /// </summary>
          [XmlEnum("specific heat capacity")]
          specificheatcapacity,
        /// <summary>
        /// temperatureinterval property
        /// </summary>
          [XmlEnum("temperature interval")]
          temperatureinterval,
        /// <summary>
        /// temperatureintervalperlength property
        /// </summary>
          [XmlEnum("temperature interval per length")]
          temperatureintervalperlength,
        /// <summary>
        /// temperatureintervalperpressure property
        /// </summary>
          [XmlEnum("temperature interval per pressure")]
          temperatureintervalperpressure,
        /// <summary>
        /// temperatureintervalpertime property
        /// </summary>
          [XmlEnum("temperature interval per time")]
          temperatureintervalpertime,
        /// <summary>
        /// thermalconductance property
        /// </summary>
          [XmlEnum("thermal conductance")]
          thermalconductance,
        /// <summary>
        /// thermalconductivity property
        /// </summary>
          [XmlEnum("thermal conductivity")]
          thermalconductivity,
        /// <summary>
        /// thermaldiffusivity property
        /// </summary>
          [XmlEnum("thermal diffusivity")]
          thermaldiffusivity,
        /// <summary>
        /// thermalinsulance property
        /// </summary>
          [XmlEnum("thermal insulance")]
          thermalinsulance,
        /// <summary>
        /// thermalresistance property
        /// </summary>
          [XmlEnum("thermal resistance")]
          thermalresistance,
        /// <summary>
        /// thermodynamictemperature property
        /// </summary>
          [XmlEnum("thermodynamic temperature")]
          thermodynamictemperature,
        /// <summary>
        /// thermodynamictemperatureperthermodynamictemperature property
        /// </summary>
          [XmlEnum("thermodynamic temperature per thermodynamic temperature")]
          thermodynamictemperatureperthermodynamictemperature,
        /// <summary>
        /// time property
        /// </summary>
          time,
        /// <summary>
        /// timeperlength property
        /// </summary>
          [XmlEnum("time per length")]
          timeperlength,
        /// <summary>
        /// timepermass property
        /// </summary>
          [XmlEnum("time per mass")]
          timepermass,
        /// <summary>
        /// timepertime property
        /// </summary>
          [XmlEnum("time per time")]
          timepertime,
        /// <summary>
        /// timepervolume property
        /// </summary>
          [XmlEnum("time per volume")]
          timepervolume,
        /// <summary>
        /// verticalcoordinate property
        /// </summary>
          [XmlEnum("vertical coordinate")]
          verticalcoordinate,
        /// <summary>
        /// volume property
        /// </summary>
          volume,
        /// <summary>
        /// volumeflowratepervolumeflowrate property
        /// </summary>
          [XmlEnum("volume flow rate per volume flow rate")]
          volumeflowratepervolumeflowrate,
        /// <summary>
        /// volumeperarea property
        /// </summary>
          [XmlEnum("volume per area")]
          volumeperarea,
        /// <summary>
        /// volumeperlength property
        /// </summary>
          [XmlEnum("volume per length")]
          volumeperlength,
        /// <summary>
        /// volumepermass property
        /// </summary>
          [XmlEnum("volume per mass")]
          volumepermass,
        /// <summary>
        /// volumeperpressure property
        /// </summary>
          [XmlEnum("volume per pressure")]
          volumeperpressure,
        /// <summary>
        /// volumeperrotation property
        /// </summary>
          [XmlEnum("volume per rotation")]
          volumeperrotation,
        /// <summary>
        /// volumepertime property
        /// </summary>
          [XmlEnum("volume per time")]
          volumepertime,
        /// <summary>
        /// volumepertimelength property
        /// </summary>
          [XmlEnum("volume per time length")]
          volumepertimelength,
        /// <summary>
        /// volumepertimeperarea property
        /// </summary>
          [XmlEnum("volume per time per area")]
          volumepertimeperarea,
        /// <summary>
        /// volumepertimeperlength property
        /// </summary>
          [XmlEnum("volume per time per length")]
          volumepertimeperlength,
        /// <summary>
        /// volumepertimeperpressure property
        /// </summary>
          [XmlEnum("volume per time per pressure")]
          volumepertimeperpressure,
        /// <summary>
        /// volumepertimeperpressurelength property
        /// </summary>
          [XmlEnum("volume per time per pressure length")]
          volumepertimeperpressurelength,
        /// <summary>
        /// volumepertimepertime property
        /// </summary>
          [XmlEnum("volume per time per time")]
          volumepertimepertime,
        /// <summary>
        /// volumepertimepervolume property
        /// </summary>
          [XmlEnum("volume per time per volume")]
          volumepertimepervolume,
        /// <summary>
        /// volumepervolume property
        /// </summary>
          [XmlEnum("volume per volume")]
          volumepervolume,
        /// <summary>
        /// volumetricheattransfercoefficient property
        /// </summary>
          [XmlEnum("volumetric heat transfer coefficient")]
          volumetricheattransfercoefficient,
        /// <summary>
        /// volumetricthermalexpansion property
        /// </summary>
          [XmlEnum("volumetric thermal expansion")]
          volumetricthermalexpansion,
        /// <summary>
        /// unitless property
        /// </summary>
          unitless
        }
        /// <summary>
        /// This class represents the WftEventKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the WftEventKind xsd enumeration.")]
        public enum WftEventKind 
        {
        /// <summary>
        /// toolretract property
        /// </summary>
          [XmlEnum("tool retract")]
          toolretract,
        /// <summary>
        /// toolset property
        /// </summary>
          [XmlEnum("tool set")]
          toolset,
        /// <summary>
        /// unknown
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WftStationKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the WftStationKind xsd enumeration.")]
        public enum WftStationKind 
        {
        /// <summary>
        /// The flow is occurring and being measured.
        /// </summary>
          conventional,
        /// <summary>
        /// There is no flow; you are observing the effect of pressure at this station of flow that is occurring at a different station.
        /// </summary>
          observation,
        /// <summary>
        /// unknown
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WftFlowingIntervalKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the WftFlowingIntervalKind xsd enumeration.")]
        public enum WftFlowingIntervalKind 
        {
        /// <summary>
        /// packedinterval property
        /// </summary>
          [XmlEnum("packed interval")]
          packedinterval,
        /// <summary>
        /// probe
        /// </summary>
          probe,
        /// <summary>
        /// unknown
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the AddressKindEnum xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the AddressKindEnum xsd enumeration.")]
        public enum AddressKindEnum 
        {
        /// <summary>
        /// both property
        /// </summary>
          both,
        /// <summary>
        /// mailing property
        /// </summary>
          mailing,
        /// <summary>
        /// physical
        /// </summary>
          physical
        }
        /// <summary>
        /// This class represents the PhoneType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the PhoneType xsd enumeration.")]
        public enum PhoneType 
        {
        /// <summary>
        /// fax property
        /// </summary>
          fax,
        /// <summary>
        /// mobile property
        /// </summary>
          mobile,
        /// <summary>
        /// pager property
        /// </summary>
          pager,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown,
        /// <summary>
        /// voice property
        /// </summary>
          voice,
        /// <summary>
        /// voicefax property
        /// </summary>
          [XmlEnum("voice/fax")]
          voicefax,
        /// <summary>
        /// voicemail property
        /// </summary>
          voicemail
        }
        /// <summary>
        /// This class represents the AddressQualifier xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the AddressQualifier xsd enumeration.")]
        public enum AddressQualifier 
        {
        /// <summary>
        /// permanent property
        /// </summary>
          permanent,
        /// <summary>
        /// personal property
        /// </summary>
          personal,
        /// <summary>
        /// work property
        /// </summary>
          work
        }
        /// <summary>
        /// This class represents the WellStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the WellStatus xsd enumeration.")]
        public enum WellStatus 
        {
        /// <summary>
        /// abandoned property
        /// </summary>
          abandoned,
        /// <summary>
        /// active property
        /// </summary>
          active,
        /// <summary>
        /// activeinjecting property
        /// </summary>
          [XmlEnum("active -- injecting")]
          activeinjecting,
        /// <summary>
        /// activeproducing property
        /// </summary>
          [XmlEnum("active -- producing")]
          activeproducing,
        /// <summary>
        /// completed property
        /// </summary>
          completed,
        /// <summary>
        /// drilling property
        /// </summary>
          drilling,
        /// <summary>
        /// partiallyplugged property
        /// </summary>
          [XmlEnum("partially plugged")]
          partiallyplugged,
        /// <summary>
        /// permitted property
        /// </summary>
          permitted,
        /// <summary>
        /// pluggedandabandoned property
        /// </summary>
          [XmlEnum("plugged and abandoned")]
          pluggedandabandoned,
        /// <summary>
        /// proposed property
        /// </summary>
          proposed,
        /// <summary>
        /// sold property
        /// </summary>
          sold,
        /// <summary>
        /// suspended property
        /// </summary>
          suspended,
        /// <summary>
        /// temporarilyabandoned property
        /// </summary>
          [XmlEnum("temporarily abandoned")]
          temporarilyabandoned,
        /// <summary>
        /// testing property
        /// </summary>
          testing,
        /// <summary>
        /// tight property
        /// </summary>
          tight,
        /// <summary>
        /// workingover property
        /// </summary>
          [XmlEnum("working over")]
          workingover,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MassPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerTimeUom xsd enumeration.")]
        public enum MassPerTimeUom 
        {
        /// <summary>
        /// Item1E6lbma property
        /// </summary>
          [XmlEnum("1E6 lbm/a")]
          Item1E6lbma,
        /// <summary>
        /// gs property
        /// </summary>
          [XmlEnum("g/s")]
          gs,
        /// <summary>
        /// kgd property
        /// </summary>
          [XmlEnum("kg/d")]
          kgd,
        /// <summary>
        /// kgh property
        /// </summary>
          [XmlEnum("kg/h")]
          kgh,
        /// <summary>
        /// kgmin property
        /// </summary>
          [XmlEnum("kg/min")]
          kgmin,
        /// <summary>
        /// kgs property
        /// </summary>
          [XmlEnum("kg/s")]
          kgs,
        /// <summary>
        /// lbmd property
        /// </summary>
          [XmlEnum("lbm/d")]
          lbmd,
        /// <summary>
        /// lbmh property
        /// </summary>
          [XmlEnum("lbm/h")]
          lbmh,
        /// <summary>
        /// lbmmin property
        /// </summary>
          [XmlEnum("lbm/min")]
          lbmmin,
        /// <summary>
        /// lbms property
        /// </summary>
          [XmlEnum("lbm/s")]
          lbms,
        /// <summary>
        /// Mga property
        /// </summary>
          [XmlEnum("Mg/a")]
          Mga,
        /// <summary>
        /// Mgd property
        /// </summary>
          [XmlEnum("Mg/d")]
          Mgd,
        /// <summary>
        /// Mgh property
        /// </summary>
          [XmlEnum("Mg/h")]
          Mgh,
        /// <summary>
        /// Mgmin property
        /// </summary>
          [XmlEnum("Mg/min")]
          Mgmin,
        /// <summary>
        /// ta property
        /// </summary>
          [XmlEnum("t/a")]
          ta,
        /// <summary>
        /// td property
        /// </summary>
          [XmlEnum("t/d")]
          td,
        /// <summary>
        /// th property
        /// </summary>
          [XmlEnum("t/h")]
          th,
        /// <summary>
        /// tmin property
        /// </summary>
          [XmlEnum("t/min")]
          tmin,
        /// <summary>
        /// tonUKa property
        /// </summary>
          [XmlEnum("ton[UK]/a")]
          tonUKa,
        /// <summary>
        /// tonUKd property
        /// </summary>
          [XmlEnum("ton[UK]/d")]
          tonUKd,
        /// <summary>
        /// tonUKh property
        /// </summary>
          [XmlEnum("ton[UK]/h")]
          tonUKh,
        /// <summary>
        /// tonUKmin property
        /// </summary>
          [XmlEnum("ton[UK]/min")]
          tonUKmin,
        /// <summary>
        /// tonUSa property
        /// </summary>
          [XmlEnum("ton[US]/a")]
          tonUSa,
        /// <summary>
        /// tonUSd property
        /// </summary>
          [XmlEnum("ton[US]/d")]
          tonUSd,
        /// <summary>
        /// tonUSh property
        /// </summary>
          [XmlEnum("ton[US]/h")]
          tonUSh,
        /// <summary>
        /// tonUSmin property
        /// </summary>
          [XmlEnum("ton[US]/min")]
          tonUSmin
        }
        /// <summary>
        /// This class represents the AmountOfSubstanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstanceUom xsd enumeration.")]
        public enum AmountOfSubstanceUom 
        {
        /// <summary>
        /// kmol property
        /// </summary>
          kmol,
        /// <summary>
        /// lbmol property
        /// </summary>
          lbmol,
        /// <summary>
        /// mmol property
        /// </summary>
          mmol,
        /// <summary>
        /// mol property
        /// </summary>
          mol,
        /// <summary>
        /// umol property
        /// </summary>
          umol
        }
        /// <summary>
        /// This class represents the EnergyUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyUom xsd enumeration.")]
        public enum EnergyUom 
        {
        /// <summary>
        /// Item1E6BtuIT property
        /// </summary>
          [XmlEnum("1E6 Btu[IT]")]
          Item1E6BtuIT,
        /// <summary>
        /// aJ property
        /// </summary>
          aJ,
        /// <summary>
        /// BtuIT property
        /// </summary>
          [XmlEnum("Btu[IT]")]
          BtuIT,
        /// <summary>
        /// Btuth property
        /// </summary>
          [XmlEnum("Btu[th]")]
          Btuth,
        /// <summary>
        /// BtuUK property
        /// </summary>
          [XmlEnum("Btu[UK]")]
          BtuUK,
        /// <summary>
        /// calIT property
        /// </summary>
          [XmlEnum("cal[IT]")]
          calIT,
        /// <summary>
        /// calth property
        /// </summary>
          [XmlEnum("cal[th]")]
          calth,
        /// <summary>
        /// ccalth property
        /// </summary>
          [XmlEnum("ccal[th]")]
          ccalth,
        /// <summary>
        /// ceV property
        /// </summary>
          ceV,
        /// <summary>
        /// cJ property
        /// </summary>
          cJ,
        /// <summary>
        /// dcalth property
        /// </summary>
          [XmlEnum("dcal[th]")]
          dcalth,
        /// <summary>
        /// deV property
        /// </summary>
          deV,
        /// <summary>
        /// dJ property
        /// </summary>
          dJ,
        /// <summary>
        /// Ecalth property
        /// </summary>
          [XmlEnum("Ecal[th]")]
          Ecalth,
        /// <summary>
        /// EeV property
        /// </summary>
          EeV,
        /// <summary>
        /// EJ property
        /// </summary>
          EJ,
        /// <summary>
        /// erg property
        /// </summary>
          erg,
        /// <summary>
        /// eV property
        /// </summary>
          eV,
        /// <summary>
        /// fcalth property
        /// </summary>
          [XmlEnum("fcal[th]")]
          fcalth,
        /// <summary>
        /// feV property
        /// </summary>
          feV,
        /// <summary>
        /// fJ property
        /// </summary>
          fJ,
        /// <summary>
        /// Gcalth property
        /// </summary>
          [XmlEnum("Gcal[th]")]
          Gcalth,
        /// <summary>
        /// GeV property
        /// </summary>
          GeV,
        /// <summary>
        /// GJ property
        /// </summary>
          GJ,
        /// <summary>
        /// GWh property
        /// </summary>
          [XmlEnum("GW.h")]
          GWh,
        /// <summary>
        /// hph property
        /// </summary>
          [XmlEnum("hp.h")]
          hph,
        /// <summary>
        /// hpmetrich property
        /// </summary>
          [XmlEnum("hp[metric].h")]
          hpmetrich,
        /// <summary>
        /// J property
        /// </summary>
          J,
        /// <summary>
        /// kcalth property
        /// </summary>
          [XmlEnum("kcal[th]")]
          kcalth,
        /// <summary>
        /// keV property
        /// </summary>
          keV,
        /// <summary>
        /// kJ property
        /// </summary>
          kJ,
        /// <summary>
        /// kWh property
        /// </summary>
          [XmlEnum("kW.h")]
          kWh,
        /// <summary>
        /// mcalth property
        /// </summary>
          [XmlEnum("mcal[th]")]
          mcalth,
        /// <summary>
        /// Mcalth property
        /// </summary>
          [XmlEnum("Mcal[th]")]
          Mcalth,
        /// <summary>
        /// meV property
        /// </summary>
          meV,
        /// <summary>
        /// MeV property
        /// </summary>
          MeV,
        /// <summary>
        /// MJ property
        /// </summary>
          MJ,
        /// <summary>
        /// mJ property
        /// </summary>
          mJ,
        /// <summary>
        /// MWh property
        /// </summary>
          [XmlEnum("MW.h")]
          MWh,
        /// <summary>
        /// ncalth property
        /// </summary>
          [XmlEnum("ncal[th]")]
          ncalth,
        /// <summary>
        /// neV property
        /// </summary>
          neV,
        /// <summary>
        /// nJ property
        /// </summary>
          nJ,
        /// <summary>
        /// pcalth property
        /// </summary>
          [XmlEnum("pcal[th]")]
          pcalth,
        /// <summary>
        /// peV property
        /// </summary>
          peV,
        /// <summary>
        /// pJ property
        /// </summary>
          pJ,
        /// <summary>
        /// quad property
        /// </summary>
          quad,
        /// <summary>
        /// Tcalth property
        /// </summary>
          [XmlEnum("Tcal[th]")]
          Tcalth,
        /// <summary>
        /// TeV property
        /// </summary>
          TeV,
        /// <summary>
        /// thermEC property
        /// </summary>
          [XmlEnum("therm[EC]")]
          thermEC,
        /// <summary>
        /// thermUK property
        /// </summary>
          [XmlEnum("therm[UK]")]
          thermUK,
        /// <summary>
        /// thermUS property
        /// </summary>
          [XmlEnum("therm[US]")]
          thermUS,
        /// <summary>
        /// TJ property
        /// </summary>
          TJ,
        /// <summary>
        /// TWh property
        /// </summary>
          [XmlEnum("TW.h")]
          TWh,
        /// <summary>
        /// ucalth property
        /// </summary>
          [XmlEnum("ucal[th]")]
          ucalth,
        /// <summary>
        /// ueV property
        /// </summary>
          ueV,
        /// <summary>
        /// uJ property
        /// </summary>
          uJ
        }
        /// <summary>
        /// This class represents the AmountOfSubstancePerAmountOfSubstanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstancePerAmountOfSubstanceUom xsd enumeration.")]
        public enum AmountOfSubstancePerAmountOfSubstanceUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// molar property
        /// </summary>
          [XmlEnum("%[molar]")]
          molar,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// molmol property
        /// </summary>
          [XmlEnum("mol/mol")]
          molmol,
        /// <summary>
        /// nEuc property
        /// </summary>
          nEuc,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm
        }
        /// <summary>
        /// This class represents the TransferKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the TransferKind xsd enumeration.")]
        public enum TransferKind 
        {
        /// <summary>
        /// Transfer into an asset. 
        /// </summary>
          input,
        /// <summary>
        /// Transfer out of an asset. 
        /// </summary>
          output
        }
        /// <summary>
        /// This class represents the APIGravityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the APIGravityUom xsd enumeration.")]
        public enum APIGravityUom 
        {
        /// <summary>
        /// dAPI property
        /// </summary>
          dAPI
        }
        /// <summary>
        /// This class represents the MolecularWeightUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MolecularWeightUom xsd enumeration.")]
        public enum MolecularWeightUom 
        {
        /// <summary>
        /// gmol property
        /// </summary>
          [XmlEnum("g/mol")]
          gmol,
        /// <summary>
        /// kgmol property
        /// </summary>
          [XmlEnum("kg/mol")]
          kgmol,
        /// <summary>
        /// lbmlbmol property
        /// </summary>
          [XmlEnum("lbm/lbmol")]
          lbmlbmol
        }
        /// <summary>
        /// This class represents the EnergyPerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyPerMassUom xsd enumeration.")]
        public enum EnergyPerMassUom 
        {
        /// <summary>
        /// BtuITlbm property
        /// </summary>
          [XmlEnum("Btu[IT]/lbm")]
          BtuITlbm,
        /// <summary>
        /// calthg property
        /// </summary>
          [XmlEnum("cal[th]/g")]
          calthg,
        /// <summary>
        /// calthkg property
        /// </summary>
          [XmlEnum("cal[th]/kg")]
          calthkg,
        /// <summary>
        /// calthlbm property
        /// </summary>
          [XmlEnum("cal[th]/lbm")]
          calthlbm,
        /// <summary>
        /// ergg property
        /// </summary>
          [XmlEnum("erg/g")]
          ergg,
        /// <summary>
        /// ergkg property
        /// </summary>
          [XmlEnum("erg/kg")]
          ergkg,
        /// <summary>
        /// hphlbm property
        /// </summary>
          [XmlEnum("hp.h/lbm")]
          hphlbm,
        /// <summary>
        /// Jg property
        /// </summary>
          [XmlEnum("J/g")]
          Jg,
        /// <summary>
        /// Jkg property
        /// </summary>
          [XmlEnum("J/kg")]
          Jkg,
        /// <summary>
        /// kcalthg property
        /// </summary>
          [XmlEnum("kcal[th]/g")]
          kcalthg,
        /// <summary>
        /// kcalthkg property
        /// </summary>
          [XmlEnum("kcal[th]/kg")]
          kcalthkg,
        /// <summary>
        /// kJkg property
        /// </summary>
          [XmlEnum("kJ/kg")]
          kJkg,
        /// <summary>
        /// kWhkg property
        /// </summary>
          [XmlEnum("kW.h/kg")]
          kWhkg,
        /// <summary>
        /// lbfftlbm property
        /// </summary>
          [XmlEnum("lbf.ft/lbm")]
          lbfftlbm,
        /// <summary>
        /// MJkg property
        /// </summary>
          [XmlEnum("MJ/kg")]
          MJkg,
        /// <summary>
        /// MWhkg property
        /// </summary>
          [XmlEnum("MW.h/kg")]
          MWhkg
        }
        /// <summary>
        /// This class represents the EnergyPerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyPerVolumeUom xsd enumeration.")]
        public enum EnergyPerVolumeUom 
        {
        /// <summary>
        /// BtuITbbl property
        /// </summary>
          [XmlEnum("Btu[IT]/bbl")]
          BtuITbbl,
        /// <summary>
        /// BtuITft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/ft3")]
          BtuITft3,
        /// <summary>
        /// BtuITgalUK property
        /// </summary>
          [XmlEnum("Btu[IT]/gal[UK]")]
          BtuITgalUK,
        /// <summary>
        /// BtuITgalUS property
        /// </summary>
          [XmlEnum("Btu[IT]/gal[US]")]
          BtuITgalUS,
        /// <summary>
        /// calthcm3 property
        /// </summary>
          [XmlEnum("cal[th]/cm3")]
          calthcm3,
        /// <summary>
        /// calthmL property
        /// </summary>
          [XmlEnum("cal[th]/mL")]
          calthmL,
        /// <summary>
        /// calthmm3 property
        /// </summary>
          [XmlEnum("cal[th]/mm3")]
          calthmm3,
        /// <summary>
        /// ergcm3 property
        /// </summary>
          [XmlEnum("erg/cm3")]
          ergcm3,
        /// <summary>
        /// ergm3 property
        /// </summary>
          [XmlEnum("erg/m3")]
          ergm3,
        /// <summary>
        /// hphbbl property
        /// </summary>
          [XmlEnum("hp.h/bbl")]
          hphbbl,
        /// <summary>
        /// Jdm3 property
        /// </summary>
          [XmlEnum("J/dm3")]
          Jdm3,
        /// <summary>
        /// Jm3 property
        /// </summary>
          [XmlEnum("J/m3")]
          Jm3,
        /// <summary>
        /// kcalthcm3 property
        /// </summary>
          [XmlEnum("kcal[th]/cm3")]
          kcalthcm3,
        /// <summary>
        /// kcalthm3 property
        /// </summary>
          [XmlEnum("kcal[th]/m3")]
          kcalthm3,
        /// <summary>
        /// kJdm3 property
        /// </summary>
          [XmlEnum("kJ/dm3")]
          kJdm3,
        /// <summary>
        /// kJm3 property
        /// </summary>
          [XmlEnum("kJ/m3")]
          kJm3,
        /// <summary>
        /// kWhdm3 property
        /// </summary>
          [XmlEnum("kW.h/dm3")]
          kWhdm3,
        /// <summary>
        /// kWhm3 property
        /// </summary>
          [XmlEnum("kW.h/m3")]
          kWhm3,
        /// <summary>
        /// lbfftbbl property
        /// </summary>
          [XmlEnum("lbf.ft/bbl")]
          lbfftbbl,
        /// <summary>
        /// lbfftgalUS property
        /// </summary>
          [XmlEnum("lbf.ft/gal[US]")]
          lbfftgalUS,
        /// <summary>
        /// MJm3 property
        /// </summary>
          [XmlEnum("MJ/m3")]
          MJm3,
        /// <summary>
        /// MWhm3 property
        /// </summary>
          [XmlEnum("MW.h/m3")]
          MWhm3,
        /// <summary>
        /// tonfUSmibbl property
        /// </summary>
          [XmlEnum("tonf[US].mi/bbl")]
          tonfUSmibbl
        }
        /// <summary>
        /// This class represents the ExistenceKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ExistenceKind xsd enumeration.")]
        public enum ExistenceKind 
        {
        /// <summary>
        /// actual property
        /// </summary>
          actual,
        /// <summary>
        /// planned property
        /// </summary>
          planned,
        /// <summary>
        /// simulated property
        /// </summary>
          simulated
        }
        /// <summary>
        /// This class represents the EndpointQualifier xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the EndpointQualifier xsd enumeration.")]
        public enum EndpointQualifier 
        {
        /// <summary>
        /// The value is excluded.
        /// </summary>
          exclusive,
        /// <summary>
        /// The endpoint of the range may be extended to the first encountered value if an exact value match is not found.That is, if a node index value does not match the specified range value then the next smaller value (on minimum end) or larger value (on maximum end) in the index series should be used as the endpoint. Basically, this concept is designed to support interpolation across an undefined point.
        /// </summary>
          extensive,
        /// <summary>
        /// The value is included.
        /// </summary>
          inclusive,
        /// <summary>
        /// overlapextensive property
        /// </summary>
          [XmlEnum("overlap extensive")]
          overlapextensive
        }
        /// <summary>
        /// This class represents the TestReason xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the TestReason xsd enumeration.")]
        public enum TestReason 
        {
        /// <summary>
        /// initial
        /// </summary>
          initial,
        /// <summary>
        /// other
        /// </summary>
          other,
        /// <summary>
        /// periodic
        /// </summary>
          periodic,
        /// <summary>
        /// revision
        /// </summary>
          revision
        }
        /// <summary>
        /// This class represents the ValidationState xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ValidationState xsd enumeration.")]
        public enum ValidationState 
        {
        /// <summary>
        /// unvalidated
        /// </summary>
          unvalidated,
        /// <summary>
        /// validated
        /// </summary>
          validated,
        /// <summary>
        /// validating
        /// </summary>
          validating
        }
        /// <summary>
        /// This class represents the ReportVersionStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ReportVersionStatus xsd enumeration.")]
        public enum ReportVersionStatus 
        {
        /// <summary>
        /// Final, the report is approved. 
        /// </summary>
          final,
        /// <summary>
        /// Preliminary, the report has not yet been approved.
        /// </summary>
          preliminary
        }
        /// <summary>
        /// This class represents the ReservoirFluidKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ReservoirFluidKind xsd enumeration.")]
        public enum ReservoirFluidKind 
        {
        /// <summary>
        /// blackoil property
        /// </summary>
          [XmlEnum("black oil")]
          blackoil,
        /// <summary>
        /// criticalornearcritical property
        /// </summary>
          [XmlEnum("critical or near critical")]
          criticalornearcritical,
        /// <summary>
        /// drygas property
        /// </summary>
          [XmlEnum("dry gas")]
          drygas,
        /// <summary>
        /// heavyoil property
        /// </summary>
          [XmlEnum("heavy oil")]
          heavyoil,
        /// <summary>
        /// wetgasorcondensate property
        /// </summary>
          [XmlEnum("wet gas or condensate")]
          wetgasorcondensate,
        /// <summary>
        /// volatileoil property
        /// </summary>
          [XmlEnum("volatile oil")]
          volatileoil,
        /// <summary>
        /// unknown
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PhasePresent xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the PhasePresent xsd enumeration.")]
        public enum PhasePresent 
        {
        /// <summary>
        /// gasandoilandwater property
        /// </summary>
          [XmlEnum("gas and oil and water")]
          gasandoilandwater,
        /// <summary>
        /// The phase present is water.
        /// </summary>
          water,
        /// <summary>
        /// The phase present is gas.
        /// </summary>
          gas,
        /// <summary>
        /// The phase present is oil.
        /// </summary>
          oil,
        /// <summary>
        /// oilandgas property
        /// </summary>
          [XmlEnum("oil and gas")]
          oilandgas,
        /// <summary>
        /// oilandwater property
        /// </summary>
          [XmlEnum("oil and water")]
          oilandwater,
        /// <summary>
        /// gasandwater property
        /// </summary>
          [XmlEnum("gas and water")]
          gasandwater
        }
        /// <summary>
        /// This class represents the ReservoirLifeCycleState xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ReservoirLifeCycleState xsd enumeration.")]
        public enum ReservoirLifeCycleState 
        {
        /// <summary>
        /// abandoned property
        /// </summary>
          abandoned,
        /// <summary>
        /// primaryproduction property
        /// </summary>
          [XmlEnum("primary production")]
          primaryproduction,
        /// <summary>
        /// prospect property
        /// </summary>
          prospect,
        /// <summary>
        /// tertiaryproduction property
        /// </summary>
          [XmlEnum("tertiary production")]
          tertiaryproduction,
        /// <summary>
        /// undeveloped property
        /// </summary>
          undeveloped,
        /// <summary>
        /// secondaryrecovery property
        /// </summary>
          [XmlEnum("secondary recovery")]
          secondaryrecovery
        }
        /// <summary>
        /// This class represents the ReportingEntityKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ReportingEntityKind xsd enumeration.")]
        public enum ReportingEntityKind 
        {
        /// <summary>
        /// businessunit property
        /// </summary>
          [XmlEnum("business unit")]
          businessunit,
        /// <summary>
        /// fpso
        /// </summary>
          fpso,
        /// <summary>
        /// wellcompletion property
        /// </summary>
          [XmlEnum("well completion")]
          wellcompletion,
        /// <summary>
        /// wellborecompletion property
        /// </summary>
          [XmlEnum("wellbore completion")]
          wellborecompletion,
        /// <summary>
        /// commercialentity property
        /// </summary>
          [XmlEnum("commercial entity")]
          commercialentity,
        /// <summary>
        /// company
        /// </summary>
          company,
        /// <summary>
        /// contactinterval property
        /// </summary>
          [XmlEnum("contact interval")]
          contactinterval,
        /// <summary>
        /// country
        /// </summary>
          country,
        /// <summary>
        /// county
        /// </summary>
          county,
        /// <summary>
        /// facility
        /// </summary>
          facility,
        /// <summary>
        /// field
        /// </summary>
          field,
        /// <summary>
        /// fieldpart property
        /// </summary>
          [XmlEnum("field - part")]
          fieldpart,
        /// <summary>
        /// flowmeter property
        /// </summary>
          [XmlEnum("flow meter")]
          flowmeter,
        /// <summary>
        /// formation
        /// </summary>
          formation,
        /// <summary>
        /// gasplant property
        /// </summary>
          [XmlEnum("gas plant")]
          gasplant,
        /// <summary>
        /// lease
        /// </summary>
          lease,
        /// <summary>
        /// license
        /// </summary>
          license,
        /// <summary>
        /// pipeline
        /// </summary>
          pipeline,
        /// <summary>
        /// platform
        /// </summary>
          platform,
        /// <summary>
        /// productionprocessingfacility property
        /// </summary>
          [XmlEnum("production processing facility")]
          productionprocessingfacility,
        /// <summary>
        /// reservoir
        /// </summary>
          reservoir,
        /// <summary>
        /// rockfluidunitfeature property
        /// </summary>
          [XmlEnum("rock-fluid unit feature")]
          rockfluidunitfeature,
        /// <summary>
        /// state
        /// </summary>
          state,
        /// <summary>
        /// tank
        /// </summary>
          tank,
        /// <summary>
        /// terminal
        /// </summary>
          terminal,
        /// <summary>
        /// well
        /// </summary>
          well,
        /// <summary>
        /// wellgroup property
        /// </summary>
          [XmlEnum("well group")]
          wellgroup,
        /// <summary>
        /// wellbore
        /// </summary>
          wellbore,
        /// <summary>
        /// oiltanker property
        /// </summary>
          [XmlEnum("oil tanker")]
          oiltanker,
        /// <summary>
        /// tankertruck property
        /// </summary>
          [XmlEnum("tanker truck")]
          tankertruck
        }
        /// <summary>
        /// This class represents the SampleQuality xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the SampleQuality xsd enumeration.")]
        public enum SampleQuality 
        {
        /// <summary>
        /// The sample quality is invalid.
        /// </summary>
          invalid,
        /// <summary>
        /// The sample quality is unknown.
        /// </summary>
          unknown,
        /// <summary>
        /// The sample quality is valid.
        /// </summary>
          valid
        }
        /// <summary>
        /// This class represents the FluidContaminant xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the FluidContaminant xsd enumeration.")]
        public enum FluidContaminant 
        {
        /// <summary>
        /// cementfluids property
        /// </summary>
          [XmlEnum("cement fluids")]
          cementfluids,
        /// <summary>
        /// completionfluid property
        /// </summary>
          [XmlEnum("completion fluid")]
          completionfluid,
        /// <summary>
        /// drillingmud property
        /// </summary>
          [XmlEnum("drilling mud")]
          drillingmud,
        /// <summary>
        /// extraneousgas property
        /// </summary>
          [XmlEnum("extraneous gas")]
          extraneousgas,
        /// <summary>
        /// extraneousoil property
        /// </summary>
          [XmlEnum("extraneous oil")]
          extraneousoil,
        /// <summary>
        /// extraneouswater property
        /// </summary>
          [XmlEnum("extraneous water")]
          extraneouswater,
        /// <summary>
        /// formationwater property
        /// </summary>
          [XmlEnum("formation water")]
          formationwater,
        /// <summary>
        /// treatmentchemicals property
        /// </summary>
          [XmlEnum("treatment chemicals")]
          treatmentchemicals,
        /// <summary>
        /// The fluid contaminant is solid.
        /// </summary>
          solid,
        /// <summary>
        /// The fluid contaminant is unknown.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ElectricalResistivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricalResistivityUom xsd enumeration.")]
        public enum ElectricalResistivityUom 
        {
        /// <summary>
        /// kohmm property
        /// </summary>
          [XmlEnum("kohm.m")]
          kohmm,
        /// <summary>
        /// nohmmil2ft property
        /// </summary>
          [XmlEnum("nohm.mil2/ft")]
          nohmmil2ft,
        /// <summary>
        /// nohmmm2m property
        /// </summary>
          [XmlEnum("nohm.mm2/m")]
          nohmmm2m,
        /// <summary>
        /// ohmcm property
        /// </summary>
          [XmlEnum("ohm.cm")]
          ohmcm,
        /// <summary>
        /// ohmm property
        /// </summary>
          [XmlEnum("ohm.m")]
          ohmm,
        /// <summary>
        /// ohmm2m property
        /// </summary>
          [XmlEnum("ohm.m2/m")]
          ohmm2m
        }
        /// <summary>
        /// This class represents the ReciprocalPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalPressureUom xsd enumeration.")]
        public enum ReciprocalPressureUom 
        {
        /// <summary>
        /// Item1bar property
        /// </summary>
          [XmlEnum("1/bar")]
          Item1bar,
        /// <summary>
        /// Item1kPa property
        /// </summary>
          [XmlEnum("1/kPa")]
          Item1kPa,
        /// <summary>
        /// Item1Pa property
        /// </summary>
          [XmlEnum("1/Pa")]
          Item1Pa,
        /// <summary>
        /// Item1pPa property
        /// </summary>
          [XmlEnum("1/pPa")]
          Item1pPa,
        /// <summary>
        /// Item1psi property
        /// </summary>
          [XmlEnum("1/psi")]
          Item1psi,
        /// <summary>
        /// Item1upsi property
        /// </summary>
          [XmlEnum("1/upsi")]
          Item1upsi
        }
        /// <summary>
        /// This class represents the CompressibilityKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the CompressibilityKind xsd enumeration.")]
        public enum CompressibilityKind 
        {
        /// <summary>
        /// The average measure.
        /// </summary>
          average,
        /// <summary>
        /// A specific point measure.
        /// </summary>
          point
        }
        /// <summary>
        /// This class represents the VolumePerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerMassUom xsd enumeration.")]
        public enum VolumePerMassUom 
        {
        /// <summary>
        /// Item001Lkg property
        /// </summary>
          [XmlEnum("0.01 L/kg")]
          Item001Lkg,
        /// <summary>
        /// bbltonUK property
        /// </summary>
          [XmlEnum("bbl/ton[UK]")]
          bbltonUK,
        /// <summary>
        /// bbltonUS property
        /// </summary>
          [XmlEnum("bbl/ton[US]")]
          bbltonUS,
        /// <summary>
        /// cm3g property
        /// </summary>
          [XmlEnum("cm3/g")]
          cm3g,
        /// <summary>
        /// dm3kg property
        /// </summary>
          [XmlEnum("dm3/kg")]
          dm3kg,
        /// <summary>
        /// dm3t property
        /// </summary>
          [XmlEnum("dm3/t")]
          dm3t,
        /// <summary>
        /// ft3kg property
        /// </summary>
          [XmlEnum("ft3/kg")]
          ft3kg,
        /// <summary>
        /// ft3lbm property
        /// </summary>
          [XmlEnum("ft3/lbm")]
          ft3lbm,
        /// <summary>
        /// ft3sack94lbm property
        /// </summary>
          [XmlEnum("ft3/sack[94lbm]")]
          ft3sack94lbm,
        /// <summary>
        /// galUKlbm property
        /// </summary>
          [XmlEnum("gal[UK]/lbm")]
          galUKlbm,
        /// <summary>
        /// galUSlbm property
        /// </summary>
          [XmlEnum("gal[US]/lbm")]
          galUSlbm,
        /// <summary>
        /// galUSsack94lbm property
        /// </summary>
          [XmlEnum("gal[US]/sack[94lbm]")]
          galUSsack94lbm,
        /// <summary>
        /// galUStonUK property
        /// </summary>
          [XmlEnum("gal[US]/ton[UK]")]
          galUStonUK,
        /// <summary>
        /// galUStonUS property
        /// </summary>
          [XmlEnum("gal[US]/ton[US]")]
          galUStonUS,
        /// <summary>
        /// Lkg property
        /// </summary>
          [XmlEnum("L/kg")]
          Lkg,
        /// <summary>
        /// Lt property
        /// </summary>
          [XmlEnum("L/t")]
          Lt,
        /// <summary>
        /// LtonUK property
        /// </summary>
          [XmlEnum("L/ton[UK]")]
          LtonUK,
        /// <summary>
        /// m3g property
        /// </summary>
          [XmlEnum("m3/g")]
          m3g,
        /// <summary>
        /// m3kg property
        /// </summary>
          [XmlEnum("m3/kg")]
          m3kg,
        /// <summary>
        /// m3t property
        /// </summary>
          [XmlEnum("m3/t")]
          m3t,
        /// <summary>
        /// m3tonUK property
        /// </summary>
          [XmlEnum("m3/ton[UK]")]
          m3tonUK,
        /// <summary>
        /// m3tonUS property
        /// </summary>
          [XmlEnum("m3/ton[US]")]
          m3tonUS
        }
        /// <summary>
        /// This class represents the DynamicViscosityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DynamicViscosityUom xsd enumeration.")]
        public enum DynamicViscosityUom 
        {
        /// <summary>
        /// cP property
        /// </summary>
          cP,
        /// <summary>
        /// dP property
        /// </summary>
          dP,
        /// <summary>
        /// dynescm2 property
        /// </summary>
          [XmlEnum("dyne.s/cm2")]
          dynescm2,
        /// <summary>
        /// EP property
        /// </summary>
          EP,
        /// <summary>
        /// fP property
        /// </summary>
          fP,
        /// <summary>
        /// GP property
        /// </summary>
          GP,
        /// <summary>
        /// kgfsm2 property
        /// </summary>
          [XmlEnum("kgf.s/m2")]
          kgfsm2,
        /// <summary>
        /// kP property
        /// </summary>
          kP,
        /// <summary>
        /// lbfsft2 property
        /// </summary>
          [XmlEnum("lbf.s/ft2")]
          lbfsft2,
        /// <summary>
        /// lbfsin2 property
        /// </summary>
          [XmlEnum("lbf.s/in2")]
          lbfsin2,
        /// <summary>
        /// mP property
        /// </summary>
          mP,
        /// <summary>
        /// MP property
        /// </summary>
          MP,
        /// <summary>
        /// mPas property
        /// </summary>
          [XmlEnum("mPa.s")]
          mPas,
        /// <summary>
        /// Nsm2 property
        /// </summary>
          [XmlEnum("N.s/m2")]
          Nsm2,
        /// <summary>
        /// nP property
        /// </summary>
          nP,
        /// <summary>
        /// P property
        /// </summary>
          P,
        /// <summary>
        /// Pas property
        /// </summary>
          [XmlEnum("Pa.s")]
          Pas,
        /// <summary>
        /// pP property
        /// </summary>
          pP,
        /// <summary>
        /// psis property
        /// </summary>
          [XmlEnum("psi.s")]
          psis,
        /// <summary>
        /// TP property
        /// </summary>
          TP,
        /// <summary>
        /// uP property
        /// </summary>
          uP
        }
        /// <summary>
        /// This class represents the ElectricConductivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricConductivityUom xsd enumeration.")]
        public enum ElectricConductivityUom 
        {
        /// <summary>
        /// kSm property
        /// </summary>
          [XmlEnum("kS/m")]
          kSm,
        /// <summary>
        /// mScm property
        /// </summary>
          [XmlEnum("mS/cm")]
          mScm,
        /// <summary>
        /// mSm property
        /// </summary>
          [XmlEnum("mS/m")]
          mSm,
        /// <summary>
        /// Sm property
        /// </summary>
          [XmlEnum("S/m")]
          Sm
        }
        /// <summary>
        /// This class represents the VolumetricThermalExpansionUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumetricThermalExpansionUom xsd enumeration.")]
        public enum VolumetricThermalExpansionUom 
        {
        /// <summary>
        /// Item1deltaC property
        /// </summary>
          [XmlEnum("1/deltaC")]
          Item1deltaC,
        /// <summary>
        /// Item1deltaF property
        /// </summary>
          [XmlEnum("1/deltaF")]
          Item1deltaF,
        /// <summary>
        /// Item1deltaK property
        /// </summary>
          [XmlEnum("1/deltaK")]
          Item1deltaK,
        /// <summary>
        /// Item1deltaR property
        /// </summary>
          [XmlEnum("1/deltaR")]
          Item1deltaR,
        /// <summary>
        /// Item1E6m3m3deltaC property
        /// </summary>
          [XmlEnum("1E-6 m3/(m3.deltaC)")]
          Item1E6m3m3deltaC,
        /// <summary>
        /// Item1E6m3m3deltaF property
        /// </summary>
          [XmlEnum("1E-6 m3/(m3.deltaF)")]
          Item1E6m3m3deltaF,
        /// <summary>
        /// m3m3deltaK property
        /// </summary>
          [XmlEnum("m3/(m3.deltaK)")]
          m3m3deltaK,
        /// <summary>
        /// ppmvoldeltaC property
        /// </summary>
          [XmlEnum("ppm[vol]/deltaC")]
          ppmvoldeltaC,
        /// <summary>
        /// ppmvoldeltaF property
        /// </summary>
          [XmlEnum("ppm[vol]/deltaF")]
          ppmvoldeltaF
        }
        /// <summary>
        /// This class represents the MolarEnergyUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MolarEnergyUom xsd enumeration.")]
        public enum MolarEnergyUom 
        {
        /// <summary>
        /// BtuITlbmol property
        /// </summary>
          [XmlEnum("Btu[IT]/lbmol")]
          BtuITlbmol,
        /// <summary>
        /// Jmol property
        /// </summary>
          [XmlEnum("J/mol")]
          Jmol,
        /// <summary>
        /// kcalthmol property
        /// </summary>
          [XmlEnum("kcal[th]/mol")]
          kcalthmol,
        /// <summary>
        /// kJkmol property
        /// </summary>
          [XmlEnum("kJ/kmol")]
          kJkmol,
        /// <summary>
        /// MJkmol property
        /// </summary>
          [XmlEnum("MJ/kmol")]
          MJkmol
        }
        /// <summary>
        /// This class represents the EnergyLengthPerTimeAreaTemperatureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyLengthPerTimeAreaTemperatureUom xsd enumeration.")]
        public enum EnergyLengthPerTimeAreaTemperatureUom 
        {
        /// <summary>
        /// BtuITinhft2deltaF property
        /// </summary>
          [XmlEnum("Btu[IT].in/(h.ft2.deltaF)")]
          BtuITinhft2deltaF,
        /// <summary>
        /// Jmsm2deltaK property
        /// </summary>
          [XmlEnum("J.m/(s.m2.deltaK)")]
          Jmsm2deltaK,
        /// <summary>
        /// kJmhm2deltaK property
        /// </summary>
          [XmlEnum("kJ.m/(h.m2.deltaK)")]
          kJmhm2deltaK,
        /// <summary>
        /// WmdeltaK property
        /// </summary>
          [XmlEnum("W/(m.deltaK)")]
          WmdeltaK
        }
        /// <summary>
        /// This class represents the VolumeReferenceKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the VolumeReferenceKind xsd enumeration.")]
        public enum VolumeReferenceKind 
        {
        /// <summary>
        /// initialreservoir property
        /// </summary>
          [XmlEnum("initial reservoir")]
          initialreservoir,
        /// <summary>
        /// saturationcalculated property
        /// </summary>
          [XmlEnum("saturation-calculated")]
          saturationcalculated,
        /// <summary>
        /// saturationmeasured property
        /// </summary>
          [XmlEnum("saturation-measured")]
          saturationmeasured,
        /// <summary>
        /// separatorstage1 property
        /// </summary>
          [XmlEnum("separator stage 1")]
          separatorstage1,
        /// <summary>
        /// separatorstage10 property
        /// </summary>
          [XmlEnum("separator stage 10")]
          separatorstage10,
        /// <summary>
        /// separatorstage2 property
        /// </summary>
          [XmlEnum("separator stage 2")]
          separatorstage2,
        /// <summary>
        /// separatorstage3 property
        /// </summary>
          [XmlEnum("separator stage 3")]
          separatorstage3,
        /// <summary>
        /// separatorstage4 property
        /// </summary>
          [XmlEnum("separator stage 4")]
          separatorstage4,
        /// <summary>
        /// separatorstage5 property
        /// </summary>
          [XmlEnum("separator stage 5")]
          separatorstage5,
        /// <summary>
        /// separatorstage6 property
        /// </summary>
          [XmlEnum("separator stage 6")]
          separatorstage6,
        /// <summary>
        /// separatorstage7 property
        /// </summary>
          [XmlEnum("separator stage 7")]
          separatorstage7,
        /// <summary>
        /// separatorstage8 property
        /// </summary>
          [XmlEnum("separator stage 8")]
          separatorstage8,
        /// <summary>
        /// separatorstage9 property
        /// </summary>
          [XmlEnum("separator stage 9")]
          separatorstage9,
        /// <summary>
        /// stocktank property
        /// </summary>
          [XmlEnum("stock tank")]
          stocktank,
        /// <summary>
        /// The reference volume was measured at unknown conditions.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the FluidAnalysisStepCondition xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the FluidAnalysisStepCondition xsd enumeration.")]
        public enum FluidAnalysisStepCondition 
        {
        /// <summary>
        /// currentreservoirconditions property
        /// </summary>
          [XmlEnum("current reservoir conditions")]
          currentreservoirconditions,
        /// <summary>
        /// initialreservoirconditions property
        /// </summary>
          [XmlEnum("initial reservoir conditions")]
          initialreservoirconditions,
        /// <summary>
        /// initialsaturationconditions property
        /// </summary>
          [XmlEnum("initial saturation conditions")]
          initialsaturationconditions,
        /// <summary>
        /// stocktankconditions property
        /// </summary>
          [XmlEnum("stock tank conditions")]
          stocktankconditions
        }
        /// <summary>
        /// This class represents the ThermodynamicPhase xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ThermodynamicPhase xsd enumeration.")]
        public enum ThermodynamicPhase 
        {
        /// <summary>
        /// A water-rich liquid phase.
        /// </summary>
          aqueous,
        /// <summary>
        /// An oil-rich liquid phase.
        /// </summary>
          oleic,
        /// <summary>
        /// A gaseous phase at the conditions present.
        /// </summary>
          vapor,
        /// <summary>
        /// totalhydrocarbon property
        /// </summary>
          [XmlEnum("total hydrocarbon")]
          totalhydrocarbon
        }
        /// <summary>
        /// This class represents the saturationKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the saturationKind xsd enumeration.")]
        public enum SaturationKind 
        {
        /// <summary>
        /// The fluid is saturated.
        /// </summary>
          saturated,
        /// <summary>
        /// The fluid is under-saturated.
        /// </summary>
          undersaturated
        }
        /// <summary>
        /// This class represents the LengthPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerTimeUom xsd enumeration.")]
        public enum LengthPerTimeUom 
        {
        /// <summary>
        /// Item1000fth property
        /// </summary>
          [XmlEnum("1000 ft/h")]
          Item1000fth,
        /// <summary>
        /// Item1000fts property
        /// </summary>
          [XmlEnum("1000 ft/s")]
          Item1000fts,
        /// <summary>
        /// cma property
        /// </summary>
          [XmlEnum("cm/a")]
          cma,
        /// <summary>
        /// cms property
        /// </summary>
          [XmlEnum("cm/s")]
          cms,
        /// <summary>
        /// dms property
        /// </summary>
          [XmlEnum("dm/s")]
          dms,
        /// <summary>
        /// ftd property
        /// </summary>
          [XmlEnum("ft/d")]
          ftd,
        /// <summary>
        /// fth property
        /// </summary>
          [XmlEnum("ft/h")]
          fth,
        /// <summary>
        /// ftmin property
        /// </summary>
          [XmlEnum("ft/min")]
          ftmin,
        /// <summary>
        /// ftms property
        /// </summary>
          [XmlEnum("ft/ms")]
          ftms,
        /// <summary>
        /// fts property
        /// </summary>
          [XmlEnum("ft/s")]
          fts,
        /// <summary>
        /// ftus property
        /// </summary>
          [XmlEnum("ft/us")]
          ftus,
        /// <summary>
        /// ina property
        /// </summary>
          [XmlEnum("in/a")]
          ina,
        /// <summary>
        /// inmin property
        /// </summary>
          [XmlEnum("in/min")]
          inmin,
        /// <summary>
        /// ins property
        /// </summary>
          [XmlEnum("in/s")]
          ins,
        /// <summary>
        /// kmh property
        /// </summary>
          [XmlEnum("km/h")]
          kmh,
        /// <summary>
        /// kms property
        /// </summary>
          [XmlEnum("km/s")]
          kms,
        /// <summary>
        /// knot property
        /// </summary>
          knot,
        /// <summary>
        /// md property
        /// </summary>
          [XmlEnum("m/d")]
          md,
        /// <summary>
        /// mh property
        /// </summary>
          [XmlEnum("m/h")]
          mh,
        /// <summary>
        /// mmin property
        /// </summary>
          [XmlEnum("m/min")]
          mmin,
        /// <summary>
        /// mms property
        /// </summary>
          [XmlEnum("m/ms")]
          mms,
        /// <summary>
        /// ms property
        /// </summary>
          [XmlEnum("m/s")]
          ms,
        /// <summary>
        /// mih property
        /// </summary>
          [XmlEnum("mi/h")]
          mih,
        /// <summary>
        /// mila property
        /// </summary>
          [XmlEnum("mil/a")]
          mila,
        /// <summary>
        /// mma property
        /// </summary>
          [XmlEnum("mm/a")]
          mma,
        /// <summary>
        /// mms1 property
        /// </summary>
          [XmlEnum("mm/s")]
          mms1,
        /// <summary>
        /// nms property
        /// </summary>
          [XmlEnum("nm/s")]
          nms,
        /// <summary>
        /// ums property
        /// </summary>
          [XmlEnum("um/s")]
          ums
        }
        /// <summary>
        /// This class represents the AreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaUom xsd enumeration.")]
        public enum AreaUom 
        {
        /// <summary>
        /// acre property
        /// </summary>
          acre,
        /// <summary>
        /// b property
        /// </summary>
          b,
        /// <summary>
        /// cm2 property
        /// </summary>
          cm2,
        /// <summary>
        /// ft2 property
        /// </summary>
          ft2,
        /// <summary>
        /// ha property
        /// </summary>
          ha,
        /// <summary>
        /// in2 property
        /// </summary>
          in2,
        /// <summary>
        /// km2 property
        /// </summary>
          km2,
        /// <summary>
        /// m2 property
        /// </summary>
          m2,
        /// <summary>
        /// miUS2 property
        /// </summary>
          [XmlEnum("mi[US]2")]
          miUS2,
        /// <summary>
        /// mi2 property
        /// </summary>
          mi2,
        /// <summary>
        /// mm2 property
        /// </summary>
          mm2,
        /// <summary>
        /// section property
        /// </summary>
          section,
        /// <summary>
        /// um2 property
        /// </summary>
          um2,
        /// <summary>
        /// yd2 property
        /// </summary>
          yd2
        }
        /// <summary>
        /// This class represents the PermeabilityRockUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PermeabilityRockUom xsd enumeration.")]
        public enum PermeabilityRockUom 
        {
        /// <summary>
        /// D property
        /// </summary>
          D,
        /// <summary>
        /// DAPI property
        /// </summary>
          [XmlEnum("D[API]")]
          DAPI,
        /// <summary>
        /// mD property
        /// </summary>
          mD,
        /// <summary>
        /// TDAPI property
        /// </summary>
          [XmlEnum("TD[API]")]
          TDAPI
        }
        /// <summary>
        /// This class represents the ForcePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForcePerLengthUom xsd enumeration.")]
        public enum ForcePerLengthUom 
        {
        /// <summary>
        /// Item001lbfft property
        /// </summary>
          [XmlEnum("0.01 lbf/ft")]
          Item001lbfft,
        /// <summary>
        /// Item130lbfm property
        /// </summary>
          [XmlEnum("1/30 lbf/m")]
          Item130lbfm,
        /// <summary>
        /// Item130Nm property
        /// </summary>
          [XmlEnum("1/30 N/m")]
          Item130Nm,
        /// <summary>
        /// dynecm property
        /// </summary>
          [XmlEnum("dyne/cm")]
          dynecm,
        /// <summary>
        /// kgfcm property
        /// </summary>
          [XmlEnum("kgf/cm")]
          kgfcm,
        /// <summary>
        /// kNm property
        /// </summary>
          [XmlEnum("kN/m")]
          kNm,
        /// <summary>
        /// lbfft property
        /// </summary>
          [XmlEnum("lbf/ft")]
          lbfft,
        /// <summary>
        /// lbfin property
        /// </summary>
          [XmlEnum("lbf/in")]
          lbfin,
        /// <summary>
        /// mNkm property
        /// </summary>
          [XmlEnum("mN/km")]
          mNkm,
        /// <summary>
        /// mNm property
        /// </summary>
          [XmlEnum("mN/m")]
          mNm,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N/m")]
          Nm,
        /// <summary>
        /// pdlcm property
        /// </summary>
          [XmlEnum("pdl/cm")]
          pdlcm,
        /// <summary>
        /// tonfUKft property
        /// </summary>
          [XmlEnum("tonf[UK]/ft")]
          tonfUKft,
        /// <summary>
        /// tonfUSft property
        /// </summary>
          [XmlEnum("tonf[US]/ft")]
          tonfUSft
        }
        /// <summary>
        /// This class represents the ThermodynamicTemperaturePerThermodynamicTemperatureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermodynamicTemperaturePerThermodynamicTemperatureUom xsd enumeration.")]
        public enum ThermodynamicTemperaturePerThermodynamicTemperatureUom 
        {
        /// <summary>
        /// degCdegC property
        /// </summary>
          [XmlEnum("degC/degC")]
          degCdegC,
        /// <summary>
        /// degFdegF property
        /// </summary>
          [XmlEnum("degF/degF")]
          degFdegF,
        /// <summary>
        /// degRdegR property
        /// </summary>
          [XmlEnum("degR/degR")]
          degRdegR,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// KK property
        /// </summary>
          [XmlEnum("K/K")]
          KK
        }
        /// <summary>
        /// This class represents the PressurePerPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressurePerPressureUom xsd enumeration.")]
        public enum PressurePerPressureUom 
        {
        /// <summary>
        /// atmatm property
        /// </summary>
          [XmlEnum("atm/atm")]
          atmatm,
        /// <summary>
        /// barbar property
        /// </summary>
          [XmlEnum("bar/bar")]
          barbar,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// kPakPa property
        /// </summary>
          [XmlEnum("kPa/kPa")]
          kPakPa,
        /// <summary>
        /// MPaMPa property
        /// </summary>
          [XmlEnum("MPa/MPa")]
          MPaMPa,
        /// <summary>
        /// PaPa property
        /// </summary>
          [XmlEnum("Pa/Pa")]
          PaPa,
        /// <summary>
        /// psipsi property
        /// </summary>
          [XmlEnum("psi/psi")]
          psipsi
        }
        /// <summary>
        /// This class represents the MixingRule xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the MixingRule xsd enumeration.")]
        public enum MixingRule 
        {
        /// <summary>
        /// The mixing rule kind is asymmetric.
        /// </summary>
          asymmetric,
        /// <summary>
        /// The mixing rule kind is classical.
        /// </summary>
          classical
        }
        /// <summary>
        /// This class represents the MolarVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MolarVolumeUom xsd enumeration.")]
        public enum MolarVolumeUom 
        {
        /// <summary>
        /// dm3kmol property
        /// </summary>
          [XmlEnum("dm3/kmol")]
          dm3kmol,
        /// <summary>
        /// ft3lbmol property
        /// </summary>
          [XmlEnum("ft3/lbmol")]
          ft3lbmol,
        /// <summary>
        /// Lkmol property
        /// </summary>
          [XmlEnum("L/kmol")]
          Lkmol,
        /// <summary>
        /// Lmol property
        /// </summary>
          [XmlEnum("L/mol")]
          Lmol,
        /// <summary>
        /// m3kmol property
        /// </summary>
          [XmlEnum("m3/kmol")]
          m3kmol,
        /// <summary>
        /// m3mol property
        /// </summary>
          [XmlEnum("m3/mol")]
          m3mol
        }
        /// <summary>
        /// This class represents the FluidSampleKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the FluidSampleKind xsd enumeration.")]
        public enum FluidSampleKind 
        {
        /// <summary>
        /// The fluid sample has originated from synthetic creation.
        /// </summary>
          synthetic,
        /// <summary>
        /// separatorwater property
        /// </summary>
          [XmlEnum("separator water")]
          separatorwater,
        /// <summary>
        /// separatoroil property
        /// </summary>
          [XmlEnum("separator oil")]
          separatoroil,
        /// <summary>
        /// separatorgas property
        /// </summary>
          [XmlEnum("separator gas")]
          separatorgas,
        /// <summary>
        /// downholecased property
        /// </summary>
          [XmlEnum("downhole cased")]
          downholecased,
        /// <summary>
        /// downholeopen property
        /// </summary>
          [XmlEnum("downhole open")]
          downholeopen,
        /// <summary>
        /// The fluid sample has originated from recombined samples.
        /// </summary>
          recombined,
        /// <summary>
        /// The fluid sample has originated from wellhead sampling.
        /// </summary>
          wellhead,
        /// <summary>
        /// The fluid sample has originated from commingled flow.
        /// </summary>
          commingled
        }
        /// <summary>
        /// This class represents the SampleAction xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the SampleAction xsd enumeration.")]
        public enum SampleAction 
        {
        /// <summary>
        /// The action on the sample for this event was custody transfer to new custodian.
        /// </summary>
          custodyTransfer,
        /// <summary>
        /// The action on the sample for this event was destruction.
        /// </summary>
          destroyed,
        /// <summary>
        /// The action on the sample for this event was sample transfer.
        /// </summary>
          sampleTransfer,
        /// <summary>
        /// The action on the sample for this event was movement to storage.
        /// </summary>
          stored,
        /// <summary>
        /// subSampleDead property
        /// </summary>
          [XmlEnum("subSample Dead")]
          subSampleDead,
        /// <summary>
        /// subSampleLive property
        /// </summary>
          [XmlEnum("subSample Live")]
          subSampleLive
        }
        /// <summary>
        /// This class represents the OpticalPathConfiguration xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the OpticalPathConfiguration xsd enumeration.")]
        public enum OpticalPathConfiguration 
        {
        /// <summary>
        /// accuratesingleendedduallaser property
        /// </summary>
          [XmlEnum("accurate single-ended/dual laser")]
          accuratesingleendedduallaser,
        /// <summary>
        /// differentiallosscalibrated property
        /// </summary>
          [XmlEnum("differential loss calibrated")]
          differentiallosscalibrated,
        /// <summary>
        /// doubleended property
        /// </summary>
          [XmlEnum("double-ended")]
          doubleended,
        /// <summary>
        /// singleended property
        /// </summary>
          [XmlEnum("single-ended")]
          singleended
        }
        /// <summary>
        /// This class represents the BusinessUnitKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the BusinessUnitKind xsd enumeration.")]
        public enum BusinessUnitKind 
        {
        /// <summary>
        /// businessarea property
        /// </summary>
          businessarea,
        /// <summary>
        /// company property
        /// </summary>
          company,
        /// <summary>
        /// field property
        /// </summary>
          field,
        /// <summary>
        /// license property
        /// </summary>
          license,
        /// <summary>
        /// platform property
        /// </summary>
          platform,
        /// <summary>
        /// terminal property
        /// </summary>
          terminal,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TraceProcessingType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the TraceProcessingType xsd enumeration.")]
        public enum TraceProcessingType 
        {
        /// <summary>
        /// asacquired property
        /// </summary>
          [XmlEnum("as acquired")]
          asacquired,
        /// <summary>
        /// recalibrated
        /// </summary>
          recalibrated
        }
        /// <summary>
        /// This class represents the InterpretationProcessingType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the InterpretationProcessingType xsd enumeration.")]
        public enum InterpretationProcessingType 
        {
        /// <summary>
        /// averaged
        /// </summary>
          averaged,
        /// <summary>
        /// denormalized
        /// </summary>
          denormalized,
        /// <summary>
        /// depthcorrected property
        /// </summary>
          [XmlEnum("depth-corrected")]
          depthcorrected,
        /// <summary>
        /// manufacturergenerated property
        /// </summary>
          [XmlEnum("manufacturer-generated")]
          manufacturergenerated,
        /// <summary>
        /// temperatureshifted property
        /// </summary>
          [XmlEnum("temperature-shifted")]
          temperatureshifted,
        /// <summary>
        /// usercustom property
        /// </summary>
          [XmlEnum("user-custom")]
          usercustom
        }
        /// <summary>
        /// This class represents the TerminationType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the TerminationType xsd enumeration.")]
        public enum TerminationType 
        {
        /// <summary>
        /// loopedbacktoinstrumentbox property
        /// </summary>
          [XmlEnum("looped back to instrument box")]
          loopedbacktoinstrumentbox,
        /// <summary>
        /// terminationatcable property
        /// </summary>
          [XmlEnum("termination at cable")]
          terminationatcable
        }
        /// <summary>
        /// This class represents the FiberSpliceTypes xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the FiberSpliceTypes xsd enumeration.")]
        public enum FiberSpliceTypes 
        {
        /// <summary>
        /// cablesplice property
        /// </summary>
          [XmlEnum("cable splice")]
          cablesplice,
        /// <summary>
        /// hsplice property
        /// </summary>
          [XmlEnum("h splice")]
          hsplice,
        /// <summary>
        /// usercustom property
        /// </summary>
          [XmlEnum("user-custom")]
          usercustom
        }
        /// <summary>
        /// This class represents the FiberMode xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the FiberMode xsd enumeration.")]
        public enum FiberMode 
        {
        /// <summary>
        /// multimode property
        /// </summary>
          multimode,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// singlemode property
        /// </summary>
          singlemode
        }
        /// <summary>
        /// This class represents the CableType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the CableType xsd enumeration.")]
        public enum CableType 
        {
        /// <summary>
        /// electricalfibercable property
        /// </summary>
          [XmlEnum("electrical-fiber-cable")]
          electricalfibercable,
        /// <summary>
        /// multifibercable property
        /// </summary>
          [XmlEnum("multi-fiber-cable")]
          multifibercable,
        /// <summary>
        /// singlefibercable property
        /// </summary>
          [XmlEnum("single-fiber-cable")]
          singlefibercable
        }
        /// <summary>
        /// This class represents the LogarithmicPowerRatioPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LogarithmicPowerRatioPerLengthUom xsd enumeration.")]
        public enum LogarithmicPowerRatioPerLengthUom 
        {
        /// <summary>
        /// Bm property
        /// </summary>
          [XmlEnum("B/m")]
          Bm,
        /// <summary>
        /// dBft property
        /// </summary>
          [XmlEnum("dB/ft")]
          dBft,
        /// <summary>
        /// dBkm property
        /// </summary>
          [XmlEnum("dB/km")]
          dBkm,
        /// <summary>
        /// dBm property
        /// </summary>
          [XmlEnum("dB/m")]
          dBm
        }
        /// <summary>
        /// This class represents the PermanentCableInstallationType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the PermanentCableInstallationType xsd enumeration.")]
        public enum PermanentCableInstallationType 
        {
        /// <summary>
        /// buriedparalleltotubular property
        /// </summary>
          [XmlEnum("buried parallel to tubular")]
          buriedparalleltotubular,
        /// <summary>
        /// clampedtotubular property
        /// </summary>
          [XmlEnum("clamped to tubular")]
          clampedtotubular,
        /// <summary>
        /// wrappedaroundtubular property
        /// </summary>
          [XmlEnum("wrapped around tubular")]
          wrappedaroundtubular
        }
        /// <summary>
        /// This class represents the InterventionConveyanceType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the InterventionConveyanceType xsd enumeration.")]
        public enum InterventionConveyanceType 
        {
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// rod property
        /// </summary>
          rod,
        /// <summary>
        /// slickline property
        /// </summary>
          slickline,
        /// <summary>
        /// wireline property
        /// </summary>
          wireline
        }
        /// <summary>
        /// This class represents the ControlLineSize xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ControlLineSize xsd enumeration.")]
        public enum ControlLineSize 
        {
        /// <summary>
        /// diameter025inweight0028lbft property
        /// </summary>
          [XmlEnum("diameter 0.25 in weight 0.028 lb/ft")]
          diameter025inweight0028lbft,
        /// <summary>
        /// diameter025inweight0035lbft property
        /// </summary>
          [XmlEnum("diameter 0.25 in weight 0.035 lb/ft")]
          diameter025inweight0035lbft,
        /// <summary>
        /// diameter0375inweight0048lbft property
        /// </summary>
          [XmlEnum("diameter 0.375 in weight 0.048 lb/ft")]
          diameter0375inweight0048lbft
        }
        /// <summary>
        /// This class represents the ControlLineMaterial xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ControlLineMaterial xsd enumeration.")]
        public enum ControlLineMaterial 
        {
        /// <summary>
        /// inc825 property
        /// </summary>
          [XmlEnum("inc 825")]
          inc825,
        /// <summary>
        /// ss316 property
        /// </summary>
          [XmlEnum("ss 316")]
          ss316
        }
        /// <summary>
        /// This class represents the ControlLineEncapsulationType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ControlLineEncapsulationType xsd enumeration.")]
        public enum ControlLineEncapsulationType 
        {
        /// <summary>
        /// round
        /// </summary>
          round,
        /// <summary>
        /// square
        /// </summary>
          square
        }
        /// <summary>
        /// This class represents the ControlLineEncapsulationSize xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ControlLineEncapsulationSize xsd enumeration.")]
        public enum ControlLineEncapsulationSize 
        {
        /// <summary>
        /// Item11x11 property
        /// </summary>
          [XmlEnum("11x11")]
          Item11x11,
        /// <summary>
        /// Item23x11 property
        /// </summary>
          [XmlEnum("23x11")]
          Item23x11
        }
        /// <summary>
        /// This class represents the FiberConnectorTypes xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the FiberConnectorTypes xsd enumeration.")]
        public enum FiberConnectorTypes 
        {
        /// <summary>
        /// drymate property
        /// </summary>
          [XmlEnum("dry mate")]
          drymate,
        /// <summary>
        /// wetmate property
        /// </summary>
          [XmlEnum("wet mate")]
          wetmate
        }
        /// <summary>
        /// This class represents the FiberEndType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the FiberEndType xsd enumeration.")]
        public enum FiberEndType 
        {
        /// <summary>
        /// anglepolished property
        /// </summary>
          [XmlEnum("angle polished")]
          anglepolished,
        /// <summary>
        /// flatpolished property
        /// </summary>
          [XmlEnum("flat polished")]
          flatpolished
        }
        /// <summary>
        /// This class represents the DasDimensions xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the DasDimensions xsd enumeration.")]
        public enum DasDimensions 
        {
        /// <summary>
        /// Enumeration value to indicate the frequency dimension in a multi-dimensional array.
        /// </summary>
          frequency,
        /// <summary>
        /// Enumeration value to indicate the locus dimension in a multi-dimensional array.
        /// </summary>
          locus,
        /// <summary>
        /// Enumeration value to indicate the time dimension in a multi-dimensional array.
        /// </summary>
          time
        }
        /// <summary>
        /// This class represents the WellboreDatumReference xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the WellboreDatumReference xsd enumeration.")]
        public enum WellboreDatumReference 
        {
        /// <summary>
        /// groundlevel property
        /// </summary>
          [XmlEnum("ground level")]
          groundlevel,
        /// <summary>
        /// kellybushing property
        /// </summary>
          [XmlEnum("kelly bushing")]
          kellybushing,
        /// <summary>
        /// meansealevel property
        /// </summary>
          [XmlEnum("mean sea level")]
          meansealevel,
        /// <summary>
        /// derrickfloor property
        /// </summary>
          [XmlEnum("derrick floor")]
          derrickfloor,
        /// <summary>
        /// casingflange property
        /// </summary>
          [XmlEnum("casing flange")]
          casingflange,
        /// <summary>
        /// crownvalve property
        /// </summary>
          [XmlEnum("crown valve")]
          crownvalve,
        /// <summary>
        /// rotarybushing property
        /// </summary>
          [XmlEnum("rotary bushing")]
          rotarybushing,
        /// <summary>
        /// rotarytable property
        /// </summary>
          [XmlEnum("rotary table")]
          rotarytable,
        /// <summary>
        /// seafloor property
        /// </summary>
          [XmlEnum("sea floor")]
          seafloor,
        /// <summary>
        /// lowestastronomicaltide property
        /// </summary>
          [XmlEnum("lowest astronomical tide")]
          lowestastronomicaltide,
        /// <summary>
        /// meanhigherhighwater property
        /// </summary>
          [XmlEnum("mean higher high water")]
          meanhigherhighwater,
        /// <summary>
        /// meanhighwater property
        /// </summary>
          [XmlEnum("mean high water")]
          meanhighwater,
        /// <summary>
        /// meanlowerlowwater property
        /// </summary>
          [XmlEnum("mean lower low water")]
          meanlowerlowwater,
        /// <summary>
        /// meanlowwater property
        /// </summary>
          [XmlEnum("mean low water")]
          meanlowwater,
        /// <summary>
        /// meantidelevel property
        /// </summary>
          [XmlEnum("mean tide level")]
          meantidelevel,
        /// <summary>
        /// kickoffpoint property
        /// </summary>
          [XmlEnum("kickoff point")]
          kickoffpoint
        }
        /// <summary>
        /// This class represents the FacilityKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the FacilityKind xsd enumeration.")]
        public enum FacilityKind 
        {
        /// <summary>
        /// The calibration affects the acquisition which runs neither inside a well or a pipeline.
        /// </summary>
          generic,
        /// <summary>
        /// The calibration affects the acquisition which runs inside a pipeline.
        /// </summary>
          pipeline,
        /// <summary>
        /// The calibration affects the acquisition which runs inside a well.
        /// </summary>
          well
        }
        /// <summary>
        /// This class represents the ProductFlowPortType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ProductFlowPortType xsd enumeration.")]
        public enum ProductFlowPortType 
        {
        /// <summary>
        /// inlet property
        /// </summary>
          inlet,
        /// <summary>
        /// outlet property
        /// </summary>
          outlet,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the FacilityParameter xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the FacilityParameter xsd enumeration.")]
        public enum FacilityParameter 
        {
        /// <summary>
        /// absorbeddoseclass property
        /// </summary>
          [XmlEnum("absorbed dose class")]
          absorbeddoseclass,
        /// <summary>
        /// accelerationlinearclass property
        /// </summary>
          [XmlEnum("acceleration linear class")]
          accelerationlinearclass,
        /// <summary>
        /// activityofradioactivityclass property
        /// </summary>
          [XmlEnum("activity (of radioactivity) class")]
          activityofradioactivityclass,
        /// <summary>
        /// alarmabsolutepressure property
        /// </summary>
          [XmlEnum("alarm absolute pressure")]
          alarmabsolutepressure,
        /// <summary>
        /// amountofsubstanceclass property
        /// </summary>
          [XmlEnum("amount of substance class")]
          amountofsubstanceclass,
        /// <summary>
        /// angleperlength property
        /// </summary>
          [XmlEnum("angle per length")]
          angleperlength,
        /// <summary>
        /// anglepertime property
        /// </summary>
          [XmlEnum("angle per time")]
          anglepertime,
        /// <summary>
        /// anglepervolume property
        /// </summary>
          [XmlEnum("angle per volume")]
          anglepervolume,
        /// <summary>
        /// angularaccelerationclass property
        /// </summary>
          [XmlEnum("angular acceleration class")]
          angularaccelerationclass,
        /// <summary>
        /// annulusinnerdiameter property
        /// </summary>
          [XmlEnum("annulus inner diameter")]
          annulusinnerdiameter,
        /// <summary>
        /// annulusouterdiameter property
        /// </summary>
          [XmlEnum("annulus outer diameter")]
          annulusouterdiameter,
        /// <summary>
        /// areaclass property
        /// </summary>
          [XmlEnum("area class")]
          areaclass,
        /// <summary>
        /// areaperarea property
        /// </summary>
          [XmlEnum("area per area")]
          areaperarea,
        /// <summary>
        /// areapervolume property
        /// </summary>
          [XmlEnum("area per volume")]
          areapervolume,
        /// <summary>
        /// atmosphericpressure property
        /// </summary>
          [XmlEnum("atmospheric pressure")]
          atmosphericpressure,
        /// <summary>
        /// attenuationclass property
        /// </summary>
          [XmlEnum("attenuation class")]
          attenuationclass,
        /// <summary>
        /// attenuationperlength property
        /// </summary>
          [XmlEnum("attenuation per length")]
          attenuationperlength,
        /// <summary>
        /// Indicates the availability of the facility. This should be implemented as a string value. A value of "true" indicates that it is available for use. That is, it may be currently shut-down but it can be restarted. A value of "false" indicates that the facility is not available to be used. That is, it cannot be restarted at this time.
        /// </summary>
          available,
        /// <summary>
        /// availableroom property
        /// </summary>
          [XmlEnum("available room")]
          availableroom,
        /// <summary>
        /// blockvalvestatus property
        /// </summary>
          [XmlEnum("block valve status")]
          blockvalvestatus,
        /// <summary>
        /// capacitanceclass property
        /// </summary>
          [XmlEnum("capacitance class")]
          capacitanceclass,
        /// <summary>
        /// The abstract supertype of all enumerated string properties.
        /// </summary>
          categorical,
        /// <summary>
        /// cathodicprotectionoutputcurrent property
        /// </summary>
          [XmlEnum("cathodic protection output current")]
          cathodicprotectionoutputcurrent,
        /// <summary>
        /// cathodicprotectionoutputvoltage property
        /// </summary>
          [XmlEnum("cathodic protection output voltage")]
          cathodicprotectionoutputvoltage,
        /// <summary>
        /// chargedensityclass property
        /// </summary>
          [XmlEnum("charge density class")]
          chargedensityclass,
        /// <summary>
        /// chemicalpotentialclass property
        /// </summary>
          [XmlEnum("chemical potential class")]
          chemicalpotentialclass,
        /// <summary>
        /// chokeposition property
        /// </summary>
          [XmlEnum("choke position")]
          chokeposition,
        /// <summary>
        /// chokesetting property
        /// </summary>
          [XmlEnum("choke setting")]
          chokesetting,
        /// <summary>
        /// A property whose values are constrained to specific string values
        /// </summary>
          code,
        /// <summary>
        /// compressibilityclass property
        /// </summary>
          [XmlEnum("compressibility class")]
          compressibilityclass,
        /// <summary>
        /// concentrationofBclass property
        /// </summary>
          [XmlEnum("concentration of B class")]
          concentrationofBclass,
        /// <summary>
        /// conductivityclass property
        /// </summary>
          [XmlEnum("conductivity class")]
          conductivityclass,
        /// <summary>
        /// Continuous.
        /// </summary>
          continuous,
        /// <summary>
        /// crosssectionabsorptionclass property
        /// </summary>
          [XmlEnum("cross section absorption class")]
          crosssectionabsorptionclass,
        /// <summary>
        /// currentdensityclass property
        /// </summary>
          [XmlEnum("current density class")]
          currentdensityclass,
        /// <summary>
        /// darcyflowcoefficientclass property
        /// </summary>
          [XmlEnum("darcy flow coefficient class")]
          darcyflowcoefficientclass,
        /// <summary>
        /// datatransmissionspeedclass property
        /// </summary>
          [XmlEnum("data transmission speed class")]
          datatransmissionspeedclass,
        /// <summary>
        /// deltatemperatureclass property
        /// </summary>
          [XmlEnum("delta temperature class")]
          deltatemperatureclass,
        /// <summary>
        /// Density.
        /// </summary>
          density,
        /// <summary>
        /// densityclass property
        /// </summary>
          [XmlEnum("density class")]
          densityclass,
        /// <summary>
        /// densityflowrate property
        /// </summary>
          [XmlEnum("density flow rate")]
          densityflowrate,
        /// <summary>
        /// densitystandard property
        /// </summary>
          [XmlEnum("density standard")]
          densitystandard,
        /// <summary>
        /// dewpointtemperature property
        /// </summary>
          [XmlEnum("dewpoint temperature")]
          dewpointtemperature,
        /// <summary>
        /// differentialpressure property
        /// </summary>
          [XmlEnum("differential pressure")]
          differentialpressure,
        /// <summary>
        /// differentialtemperature property
        /// </summary>
          [XmlEnum("differential temperature")]
          differentialtemperature,
        /// <summary>
        /// diffusioncoefficientclass property
        /// </summary>
          [XmlEnum("diffusion coefficient class")]
          diffusioncoefficientclass,
        /// <summary>
        /// digitalstorageclass property
        /// </summary>
          [XmlEnum("digital storage class")]
          digitalstorageclass,
        /// <summary>
        /// dimensionlessclass property
        /// </summary>
          [XmlEnum("dimensionless class")]
          dimensionlessclass,
        /// <summary>
        /// discrete
        /// </summary>
          discrete,
        /// <summary>
        /// doseequivalentclass property
        /// </summary>
          [XmlEnum("dose equivalent class")]
          doseequivalentclass,
        /// <summary>
        /// doseequivalentrateclass property
        /// </summary>
          [XmlEnum("dose equivalent rate class")]
          doseequivalentrateclass,
        /// <summary>
        /// dynamicviscosityclass property
        /// </summary>
          [XmlEnum("dynamic viscosity class")]
          dynamicviscosityclass,
        /// <summary>
        /// electricchargeclass property
        /// </summary>
          [XmlEnum("electric charge class")]
          electricchargeclass,
        /// <summary>
        /// electricconductanceclass property
        /// </summary>
          [XmlEnum("electric conductance class")]
          electricconductanceclass,
        /// <summary>
        /// electriccurrentclass property
        /// </summary>
          [XmlEnum("electric current class")]
          electriccurrentclass,
        /// <summary>
        /// electricdipolemomentclass property
        /// </summary>
          [XmlEnum("electric dipole moment class")]
          electricdipolemomentclass,
        /// <summary>
        /// electricfieldstrengthclass property
        /// </summary>
          [XmlEnum("electric field strength class")]
          electricfieldstrengthclass,
        /// <summary>
        /// electricpolarizationclass property
        /// </summary>
          [XmlEnum("electric polarization class")]
          electricpolarizationclass,
        /// <summary>
        /// electricpotentialclass property
        /// </summary>
          [XmlEnum("electric potential class")]
          electricpotentialclass,
        /// <summary>
        /// electricalresistivityclass property
        /// </summary>
          [XmlEnum("electrical resistivity class")]
          electricalresistivityclass,
        /// <summary>
        /// electrochemicalequivalentclass property
        /// </summary>
          [XmlEnum("electrochemical equivalent class")]
          electrochemicalequivalentclass,
        /// <summary>
        /// electromagneticmomentclass property
        /// </summary>
          [XmlEnum("electromagnetic moment class")]
          electromagneticmomentclass,
        /// <summary>
        /// energylengthperarea property
        /// </summary>
          [XmlEnum("energy length per area")]
          energylengthperarea,
        /// <summary>
        /// energylengthpertimeareatemperature property
        /// </summary>
          [XmlEnum("energy length per time area temperature")]
          energylengthpertimeareatemperature,
        /// <summary>
        /// energyperarea property
        /// </summary>
          [XmlEnum("energy per area")]
          energyperarea,
        /// <summary>
        /// energyperlength property
        /// </summary>
          [XmlEnum("energy per length")]
          energyperlength,
        /// <summary>
        /// equivalentpermass property
        /// </summary>
          [XmlEnum("equivalent per mass")]
          equivalentpermass,
        /// <summary>
        /// equivalentpervolume property
        /// </summary>
          [XmlEnum("equivalent per volume")]
          equivalentpervolume,
        /// <summary>
        /// exposureradioactivityclass property
        /// </summary>
          [XmlEnum("exposure (radioactivity) class")]
          exposureradioactivityclass,
        /// <summary>
        /// facilityuptime property
        /// </summary>
          [XmlEnum("facility uptime")]
          facilityuptime,
        /// <summary>
        /// flowrate property
        /// </summary>
          [XmlEnum("flow rate")]
          flowrate,
        /// <summary>
        /// flowratestandard property
        /// </summary>
          [XmlEnum("flow rate standard")]
          flowratestandard,
        /// <summary>
        /// forceareaclass property
        /// </summary>
          [XmlEnum("force area class")]
          forceareaclass,
        /// <summary>
        /// forceclass property
        /// </summary>
          [XmlEnum("force class")]
          forceclass,
        /// <summary>
        /// forcelengthperlength property
        /// </summary>
          [XmlEnum("force length per length")]
          forcelengthperlength,
        /// <summary>
        /// forceperforce property
        /// </summary>
          [XmlEnum("force per force")]
          forceperforce,
        /// <summary>
        /// forceperlength property
        /// </summary>
          [XmlEnum("force per length")]
          forceperlength,
        /// <summary>
        /// forcepervolume property
        /// </summary>
          [XmlEnum("force per volume")]
          forcepervolume,
        /// <summary>
        /// frequencyclass property
        /// </summary>
          [XmlEnum("frequency class")]
          frequencyclass,
        /// <summary>
        /// frequencyintervalclass property
        /// </summary>
          [XmlEnum("frequency interval class")]
          frequencyintervalclass,
        /// <summary>
        /// gammarayAPIunitclass property
        /// </summary>
          [XmlEnum("gamma ray API unit class")]
          gammarayAPIunitclass,
        /// <summary>
        /// gasliquidratio property
        /// </summary>
          [XmlEnum("gas liquid ratio")]
          gasliquidratio,
        /// <summary>
        /// gasoilratio property
        /// </summary>
          [XmlEnum("gas oil ratio")]
          gasoilratio,
        /// <summary>
        /// grosscalorificvaluestandard property
        /// </summary>
          [XmlEnum("gross calorific value standard")]
          grosscalorificvaluestandard,
        /// <summary>
        /// heatcapacityclass property
        /// </summary>
          [XmlEnum("heat capacity class")]
          heatcapacityclass,
        /// <summary>
        /// heatflowrateclass property
        /// </summary>
          [XmlEnum("heat flow rate class")]
          heatflowrateclass,
        /// <summary>
        /// heattransfercoefficientclass property
        /// </summary>
          [XmlEnum("heat transfer coefficient class")]
          heattransfercoefficientclass,
        /// <summary>
        /// illuminanceclass property
        /// </summary>
          [XmlEnum("illuminance class")]
          illuminanceclass,
        /// <summary>
        /// internalcontrolvalvestatus property
        /// </summary>
          [XmlEnum("internal control valve status")]
          internalcontrolvalvestatus,
        /// <summary>
        /// irradianceclass property
        /// </summary>
          [XmlEnum("irradiance class")]
          irradianceclass,
        /// <summary>
        /// isothermalcompressibilityclass property
        /// </summary>
          [XmlEnum("isothermal compressibility class")]
          isothermalcompressibilityclass,
        /// <summary>
        /// kinematicviscosityclass property
        /// </summary>
          [XmlEnum("kinematic viscosity class")]
          kinematicviscosityclass,
        /// <summary>
        /// lengthclass property
        /// </summary>
          [XmlEnum("length class")]
          lengthclass,
        /// <summary>
        /// lengthperlength property
        /// </summary>
          [XmlEnum("length per length")]
          lengthperlength,
        /// <summary>
        /// lengthpertemperature property
        /// </summary>
          [XmlEnum("length per temperature")]
          lengthpertemperature,
        /// <summary>
        /// lengthpervolume property
        /// </summary>
          [XmlEnum("length per volume")]
          lengthpervolume,
        /// <summary>
        /// levelofpowerintensityclass property
        /// </summary>
          [XmlEnum("level of power intensity class")]
          levelofpowerintensityclass,
        /// <summary>
        /// lightexposureclass property
        /// </summary>
          [XmlEnum("light exposure class")]
          lightexposureclass,
        /// <summary>
        /// linearthermalexpansionclass property
        /// </summary>
          [XmlEnum("linear thermal expansion class")]
          linearthermalexpansionclass,
        /// <summary>
        /// luminanceclass property
        /// </summary>
          [XmlEnum("luminance class")]
          luminanceclass,
        /// <summary>
        /// luminousefficacyclass property
        /// </summary>
          [XmlEnum("luminous efficacy class")]
          luminousefficacyclass,
        /// <summary>
        /// luminousfluxclass property
        /// </summary>
          [XmlEnum("luminous flux class")]
          luminousfluxclass,
        /// <summary>
        /// luminousintensityclass property
        /// </summary>
          [XmlEnum("luminous intensity class")]
          luminousintensityclass,
        /// <summary>
        /// magneticdipolemomentclass property
        /// </summary>
          [XmlEnum("magnetic dipole moment class")]
          magneticdipolemomentclass,
        /// <summary>
        /// magneticfieldstrengthclass property
        /// </summary>
          [XmlEnum("magnetic field strength class")]
          magneticfieldstrengthclass,
        /// <summary>
        /// magneticfluxclass property
        /// </summary>
          [XmlEnum("magnetic flux class")]
          magneticfluxclass,
        /// <summary>
        /// magneticinductionclass property
        /// </summary>
          [XmlEnum("magnetic induction class")]
          magneticinductionclass,
        /// <summary>
        /// magneticpermeabilityclass property
        /// </summary>
          [XmlEnum("magnetic permeability class")]
          magneticpermeabilityclass,
        /// <summary>
        /// magneticvectorpotentialclass property
        /// </summary>
          [XmlEnum("magnetic vector potential class")]
          magneticvectorpotentialclass,
        /// <summary>
        /// mass
        /// </summary>
          mass,
        /// <summary>
        /// massattenuationcoefficientclass property
        /// </summary>
          [XmlEnum("mass attenuation coefficient class")]
          massattenuationcoefficientclass,
        /// <summary>
        /// massclass property
        /// </summary>
          [XmlEnum("mass class")]
          massclass,
        /// <summary>
        /// massconcentration property
        /// </summary>
          [XmlEnum("mass concentration")]
          massconcentration,
        /// <summary>
        /// massconcentrationclass property
        /// </summary>
          [XmlEnum("mass concentration class")]
          massconcentrationclass,
        /// <summary>
        /// massflowrateclass property
        /// </summary>
          [XmlEnum("mass flow rate class")]
          massflowrateclass,
        /// <summary>
        /// masslengthclass property
        /// </summary>
          [XmlEnum("mass length class")]
          masslengthclass,
        /// <summary>
        /// massperenergy property
        /// </summary>
          [XmlEnum("mass per energy")]
          massperenergy,
        /// <summary>
        /// massperlength property
        /// </summary>
          [XmlEnum("mass per length")]
          massperlength,
        /// <summary>
        /// masspertimeperarea property
        /// </summary>
          [XmlEnum("mass per time per area")]
          masspertimeperarea,
        /// <summary>
        /// masspertimeperlength property
        /// </summary>
          [XmlEnum("mass per time per length")]
          masspertimeperlength,
        /// <summary>
        /// masspervolumeperlength property
        /// </summary>
          [XmlEnum("mass per volume per length")]
          masspervolumeperlength,
        /// <summary>
        /// measureddepth property
        /// </summary>
          [XmlEnum("measured depth")]
          measureddepth,
        /// <summary>
        /// mobilityclass property
        /// </summary>
          [XmlEnum("mobility class")]
          mobilityclass,
        /// <summary>
        /// modulusofcompressionclass property
        /// </summary>
          [XmlEnum("modulus of compression class")]
          modulusofcompressionclass,
        /// <summary>
        /// molarconcentration property
        /// </summary>
          [XmlEnum("molar concentration")]
          molarconcentration,
        /// <summary>
        /// molarfraction property
        /// </summary>
          [XmlEnum("molar fraction")]
          molarfraction,
        /// <summary>
        /// molarheatcapacityclass property
        /// </summary>
          [XmlEnum("molar heat capacity class")]
          molarheatcapacityclass,
        /// <summary>
        /// molarvolumeclass property
        /// </summary>
          [XmlEnum("molar volume class")]
          molarvolumeclass,
        /// <summary>
        /// moleperarea property
        /// </summary>
          [XmlEnum("mole per area")]
          moleperarea,
        /// <summary>
        /// molepertime property
        /// </summary>
          [XmlEnum("mole per time")]
          molepertime,
        /// <summary>
        /// molepertimeperarea property
        /// </summary>
          [XmlEnum("mole per time per area")]
          molepertimeperarea,
        /// <summary>
        /// molecularweight property
        /// </summary>
          [XmlEnum("molecular weight")]
          molecularweight,
        /// <summary>
        /// momentofforceclass property
        /// </summary>
          [XmlEnum("moment of force class")]
          momentofforceclass,
        /// <summary>
        /// momentofinertiaclass property
        /// </summary>
          [XmlEnum("moment of inertia class")]
          momentofinertiaclass,
        /// <summary>
        /// momentofsectionclass property
        /// </summary>
          [XmlEnum("moment of section class")]
          momentofsectionclass,
        /// <summary>
        /// momentumclass property
        /// </summary>
          [XmlEnum("momentum class")]
          momentumclass,
        /// <summary>
        /// motorcurrent property
        /// </summary>
          [XmlEnum("motor current")]
          motorcurrent,
        /// <summary>
        /// motorcurrentleakage property
        /// </summary>
          [XmlEnum("motor current leakage")]
          motorcurrentleakage,
        /// <summary>
        /// motorspeed property
        /// </summary>
          [XmlEnum("motor speed")]
          motorspeed,
        /// <summary>
        /// motortemperature property
        /// </summary>
          [XmlEnum("motor temperature")]
          motortemperature,
        /// <summary>
        /// motorvibration property
        /// </summary>
          [XmlEnum("motor vibration")]
          motorvibration,
        /// <summary>
        /// motorvoltage property
        /// </summary>
          [XmlEnum("motor voltage")]
          motorvoltage,
        /// <summary>
        /// neutronAPIunitclass property
        /// </summary>
          [XmlEnum("neutron API unit class")]
          neutronAPIunitclass,
        /// <summary>
        /// nonDarcyflowcoefficientclass property
        /// </summary>
          [XmlEnum("nonDarcy flow coefficient class")]
          nonDarcyflowcoefficientclass,
        /// <summary>
        /// openingsize property
        /// </summary>
          [XmlEnum("opening size")]
          openingsize,
        /// <summary>
        /// operationspertime property
        /// </summary>
          [XmlEnum("operations per time")]
          operationspertime,
        /// <summary>
        /// parachorclass property
        /// </summary>
          [XmlEnum("parachor class")]
          parachorclass,
        /// <summary>
        /// perarea property
        /// </summary>
          [XmlEnum("per area")]
          perarea,
        /// <summary>
        /// perelectricpotential property
        /// </summary>
          [XmlEnum("per electric potential")]
          perelectricpotential,
        /// <summary>
        /// perforce property
        /// </summary>
          [XmlEnum("per force")]
          perforce,
        /// <summary>
        /// perlength property
        /// </summary>
          [XmlEnum("per length")]
          perlength,
        /// <summary>
        /// permass property
        /// </summary>
          [XmlEnum("per mass")]
          permass,
        /// <summary>
        /// pervolume property
        /// </summary>
          [XmlEnum("per volume")]
          pervolume,
        /// <summary>
        /// permeabilitylengthclass property
        /// </summary>
          [XmlEnum("permeability length class")]
          permeabilitylengthclass,
        /// <summary>
        /// permeabilityrockclass property
        /// </summary>
          [XmlEnum("permeability rock class")]
          permeabilityrockclass,
        /// <summary>
        /// permeanceclass property
        /// </summary>
          [XmlEnum("permeance class")]
          permeanceclass,
        /// <summary>
        /// permittivityclass property
        /// </summary>
          [XmlEnum("permittivity class")]
          permittivityclass,
        /// <summary>
        /// pHclass property
        /// </summary>
          [XmlEnum("pH class")]
          pHclass,
        /// <summary>
        /// planeangleclass property
        /// </summary>
          [XmlEnum("plane angle class")]
          planeangleclass,
        /// <summary>
        /// potentialdifferenceperpowerdrop property
        /// </summary>
          [XmlEnum("potential difference per power drop")]
          potentialdifferenceperpowerdrop,
        /// <summary>
        /// powerclass property
        /// </summary>
          [XmlEnum("power class")]
          powerclass,
        /// <summary>
        /// powerpervolume property
        /// </summary>
          [XmlEnum("power per volume")]
          powerpervolume,
        /// <summary>
        /// pressure
        /// </summary>
          pressure,
        /// <summary>
        /// pressureclass property
        /// </summary>
          [XmlEnum("pressure class")]
          pressureclass,
        /// <summary>
        /// pressurepertime property
        /// </summary>
          [XmlEnum("pressure per time")]
          pressurepertime,
        /// <summary>
        /// pressuresquaredclass property
        /// </summary>
          [XmlEnum("pressure squared class")]
          pressuresquaredclass,
        /// <summary>
        /// pressuresquaredperforcetimeperarea property
        /// </summary>
          [XmlEnum("pressure squared per force time per area")]
          pressuresquaredperforcetimeperarea,
        /// <summary>
        /// pressuretimepervolume property
        /// </summary>
          [XmlEnum("pressure time per volume")]
          pressuretimepervolume,
        /// <summary>
        /// productivityindexclass property
        /// </summary>
          [XmlEnum("productivity index class")]
          productivityindexclass,
        /// <summary>
        /// pumpcountonline property
        /// </summary>
          [XmlEnum("pump count online")]
          pumpcountonline,
        /// <summary>
        /// pumpstatus property
        /// </summary>
          [XmlEnum("pump status")]
          pumpstatus,
        /// <summary>
        /// quantity
        /// </summary>
          quantity,
        /// <summary>
        /// quantityoflightclass property
        /// </summary>
          [XmlEnum("quantity of light class")]
          quantityoflightclass,
        /// <summary>
        /// radianceclass property
        /// </summary>
          [XmlEnum("radiance class")]
          radianceclass,
        /// <summary>
        /// radiantintensityclass property
        /// </summary>
          [XmlEnum("radiant intensity class")]
          radiantintensityclass,
        /// <summary>
        /// reciprocatingspeed property
        /// </summary>
          [XmlEnum("reciprocating speed")]
          reciprocatingspeed,
        /// <summary>
        /// rectifierstructurepotential property
        /// </summary>
          [XmlEnum("rectifier structure potential")]
          rectifierstructurepotential,
        /// <summary>
        /// reidvaporpressure property
        /// </summary>
          [XmlEnum("reid vapor pressure")]
          reidvaporpressure,
        /// <summary>
        /// relativeopeningsize property
        /// </summary>
          [XmlEnum("relative opening size")]
          relativeopeningsize,
        /// <summary>
        /// relativepowerclass property
        /// </summary>
          [XmlEnum("relative power class")]
          relativepowerclass,
        /// <summary>
        /// relativetanklevel property
        /// </summary>
          [XmlEnum("relative tank level")]
          relativetanklevel,
        /// <summary>
        /// relativetimeclass property
        /// </summary>
          [XmlEnum("relative time class")]
          relativetimeclass,
        /// <summary>
        /// relativevalveopening property
        /// </summary>
          [XmlEnum("relative valve opening")]
          relativevalveopening,
        /// <summary>
        /// reluctanceclass property
        /// </summary>
          [XmlEnum("reluctance class")]
          reluctanceclass,
        /// <summary>
        /// resistanceclass property
        /// </summary>
          [XmlEnum("resistance class")]
          resistanceclass,
        /// <summary>
        /// resistivityperlength property
        /// </summary>
          [XmlEnum("resistivity per length")]
          resistivityperlength,
        /// <summary>
        /// rootproperty property
        /// </summary>
          [XmlEnum("root property")]
          rootproperty,
        /// <summary>
        /// scheduleddowntime property
        /// </summary>
          [XmlEnum("scheduled downtime")]
          scheduleddowntime,
        /// <summary>
        /// secondmomentofareaclass property
        /// </summary>
          [XmlEnum("second moment of area class")]
          secondmomentofareaclass,
        /// <summary>
        /// shutdownorder property
        /// </summary>
          [XmlEnum("shutdown order")]
          shutdownorder,
        /// <summary>
        /// shutinpressure property
        /// </summary>
          [XmlEnum("shutin pressure")]
          shutinpressure,
        /// <summary>
        /// shutintemperature property
        /// </summary>
          [XmlEnum("shutin temperature")]
          shutintemperature,
        /// <summary>
        /// solidangleclass property
        /// </summary>
          [XmlEnum("solid angle class")]
          solidangleclass,
        /// <summary>
        /// specificactivityofradioactivity property
        /// </summary>
          [XmlEnum("specific activity (of radioactivity)")]
          specificactivityofradioactivity,
        /// <summary>
        /// specificenergyclass property
        /// </summary>
          [XmlEnum("specific energy class")]
          specificenergyclass,
        /// <summary>
        /// specificgravity property
        /// </summary>
          [XmlEnum("specific gravity")]
          specificgravity,
        /// <summary>
        /// specificheatcapacityclass property
        /// </summary>
          [XmlEnum("specific heat capacity class")]
          specificheatcapacityclass,
        /// <summary>
        /// specificproductivityindexclass property
        /// </summary>
          [XmlEnum("specific productivity index class")]
          specificproductivityindexclass,
        /// <summary>
        /// specificvolumeclass property
        /// </summary>
          [XmlEnum("specific volume class")]
          specificvolumeclass,
        /// <summary>
        /// subsurfacesafetyvalvestatus property
        /// </summary>
          [XmlEnum("sub surface safety valve status")]
          subsurfacesafetyvalvestatus,
        /// <summary>
        /// surfacedensityclass property
        /// </summary>
          [XmlEnum("surface density class")]
          surfacedensityclass,
        /// <summary>
        /// surfacesafetyvalvestatus property
        /// </summary>
          [XmlEnum("surface safety valve status")]
          surfacesafetyvalvestatus,
        /// <summary>
        /// tankfluidlevel property
        /// </summary>
          [XmlEnum("tank fluid level")]
          tankfluidlevel,
        /// <summary>
        /// tankproductstandardvolume property
        /// </summary>
          [XmlEnum("tank product standard volume")]
          tankproductstandardvolume,
        /// <summary>
        /// tankproductvolume property
        /// </summary>
          [XmlEnum("tank product volume")]
          tankproductvolume,
        /// <summary>
        /// temperature
        /// </summary>
          temperature,
        /// <summary>
        /// temperatureperlength property
        /// </summary>
          [XmlEnum("temperature per length")]
          temperatureperlength,
        /// <summary>
        /// temperaturepertime property
        /// </summary>
          [XmlEnum("temperature per time")]
          temperaturepertime,
        /// <summary>
        /// thermalconductanceclass property
        /// </summary>
          [XmlEnum("thermal conductance class")]
          thermalconductanceclass,
        /// <summary>
        /// thermalconductivityclass property
        /// </summary>
          [XmlEnum("thermal conductivity class")]
          thermalconductivityclass,
        /// <summary>
        /// thermaldiffusivityclass property
        /// </summary>
          [XmlEnum("thermal diffusivity class")]
          thermaldiffusivityclass,
        /// <summary>
        /// thermalinsulanceclass property
        /// </summary>
          [XmlEnum("thermal insulance class")]
          thermalinsulanceclass,
        /// <summary>
        /// thermalresistanceclass property
        /// </summary>
          [XmlEnum("thermal resistance class")]
          thermalresistanceclass,
        /// <summary>
        /// thermodynamictemperatureclass property
        /// </summary>
          [XmlEnum("thermodynamic temperature class")]
          thermodynamictemperatureclass,
        /// <summary>
        /// timeclass property
        /// </summary>
          [XmlEnum("time class")]
          timeclass,
        /// <summary>
        /// timeperlength property
        /// </summary>
          [XmlEnum("time per length")]
          timeperlength,
        /// <summary>
        /// timepervolume property
        /// </summary>
          [XmlEnum("time per volume")]
          timepervolume,
        /// <summary>
        /// truevaporpressure property
        /// </summary>
          [XmlEnum("true vapor pressure")]
          truevaporpressure,
        /// <summary>
        /// unitproductivityindexclass property
        /// </summary>
          [XmlEnum("unit productivity index class")]
          unitproductivityindexclass,
        /// <summary>
        /// unitless
        /// </summary>
          unitless,
        /// <summary>
        /// unknown
        /// </summary>
          unknown,
        /// <summary>
        /// valveopening property
        /// </summary>
          [XmlEnum("valve opening")]
          valveopening,
        /// <summary>
        /// valvestatus property
        /// </summary>
          [XmlEnum("valve status")]
          valvestatus,
        /// <summary>
        /// velocityclass property
        /// </summary>
          [XmlEnum("velocity class")]
          velocityclass,
        /// <summary>
        /// volume
        /// </summary>
          volume,
        /// <summary>
        /// volumeclass property
        /// </summary>
          [XmlEnum("volume class")]
          volumeclass,
        /// <summary>
        /// volumeconcentration property
        /// </summary>
          [XmlEnum("volume concentration")]
          volumeconcentration,
        /// <summary>
        /// volumeflowrateclass property
        /// </summary>
          [XmlEnum("volume flow rate class")]
          volumeflowrateclass,
        /// <summary>
        /// volumelengthpertime property
        /// </summary>
          [XmlEnum("volume length per time")]
          volumelengthpertime,
        /// <summary>
        /// volumeperarea property
        /// </summary>
          [XmlEnum("volume per area")]
          volumeperarea,
        /// <summary>
        /// volumeperlength property
        /// </summary>
          [XmlEnum("volume per length")]
          volumeperlength,
        /// <summary>
        /// volumepertimeperarea property
        /// </summary>
          [XmlEnum("volume per time per area")]
          volumepertimeperarea,
        /// <summary>
        /// volumepertimeperlength property
        /// </summary>
          [XmlEnum("volume per time per length")]
          volumepertimeperlength,
        /// <summary>
        /// volumepertimepertime property
        /// </summary>
          [XmlEnum("volume per time per time")]
          volumepertimepertime,
        /// <summary>
        /// volumepertimepervolume property
        /// </summary>
          [XmlEnum("volume per time per volume")]
          volumepertimepervolume,
        /// <summary>
        /// volumepervolume property
        /// </summary>
          [XmlEnum("volume per volume")]
          volumepervolume,
        /// <summary>
        /// volumestandard property
        /// </summary>
          [XmlEnum("volume standard")]
          volumestandard,
        /// <summary>
        /// volumetricefficiency property
        /// </summary>
          [XmlEnum("volumetric efficiency")]
          volumetricefficiency,
        /// <summary>
        /// volumetricheattransfercoefficient property
        /// </summary>
          [XmlEnum("volumetric heat transfer coefficient")]
          volumetricheattransfercoefficient,
        /// <summary>
        /// volumetricthermalexpansionclass property
        /// </summary>
          [XmlEnum("volumetric thermal expansion class")]
          volumetricthermalexpansionclass,
        /// <summary>
        /// welloperatingstatus property
        /// </summary>
          [XmlEnum("well operating status")]
          welloperatingstatus,
        /// <summary>
        /// welloperationtype property
        /// </summary>
          [XmlEnum("well operation type")]
          welloperationtype,
        /// <summary>
        /// wobbeindex property
        /// </summary>
          [XmlEnum("wobbe index")]
          wobbeindex,
        /// <summary>
        /// work
        /// </summary>
          work,
        /// <summary>
        /// workclass property
        /// </summary>
          [XmlEnum("work class")]
          workclass
        }
        /// <summary>
        /// This class represents the FlowQualifier xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the FlowQualifier xsd enumeration.")]
        public enum FlowQualifier 
        {
        /// <summary>
        /// allocated property
        /// </summary>
          allocated,
        /// <summary>
        /// budget property
        /// </summary>
          budget,
        /// <summary>
        /// constraint property
        /// </summary>
          constraint,
        /// <summary>
        /// derived property
        /// </summary>
          derived,
        /// <summary>
        /// difference property
        /// </summary>
          difference,
        /// <summary>
        /// estimate property
        /// </summary>
          estimate,
        /// <summary>
        /// forecast property
        /// </summary>
          forecast,
        /// <summary>
        /// massadjusted property
        /// </summary>
          [XmlEnum("mass adjusted")]
          massadjusted,
        /// <summary>
        /// measured property
        /// </summary>
          measured,
        /// <summary>
        /// metered property
        /// </summary>
          metered,
        /// <summary>
        /// meteredfiscal property
        /// </summary>
          [XmlEnum("metered - fiscal")]
          meteredfiscal,
        /// <summary>
        /// nominated property
        /// </summary>
          nominated,
        /// <summary>
        /// potential property
        /// </summary>
          potential,
        /// <summary>
        /// processed property
        /// </summary>
          processed,
        /// <summary>
        /// quota property
        /// </summary>
          quota,
        /// <summary>
        /// recommended property
        /// </summary>
          recommended,
        /// <summary>
        /// simulated property
        /// </summary>
          simulated,
        /// <summary>
        /// target property
        /// </summary>
          target,
        /// <summary>
        /// tariffbasis property
        /// </summary>
          [XmlEnum("tariff basis")]
          tariffbasis,
        /// <summary>
        /// valueadjusted property
        /// </summary>
          [XmlEnum("value adjusted")]
          valueadjusted
        }
        /// <summary>
        /// This class represents the ReportingFlow xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ReportingFlow xsd enumeration.")]
        public enum ReportingFlow 
        {
        /// <summary>
        /// consume
        /// </summary>
          consume,
        /// <summary>
        /// consumeblackstart property
        /// </summary>
          [XmlEnum("consume - black start")]
          consumeblackstart,
        /// <summary>
        /// consumecompressor property
        /// </summary>
          [XmlEnum("consume - compressor")]
          consumecompressor,
        /// <summary>
        /// consumeemitted property
        /// </summary>
          [XmlEnum("consume - emitted")]
          consumeemitted,
        /// <summary>
        /// consumeflare property
        /// </summary>
          [XmlEnum("consume - flare")]
          consumeflare,
        /// <summary>
        /// consumefuel property
        /// </summary>
          [XmlEnum("consume - fuel")]
          consumefuel,
        /// <summary>
        /// consumeHPflare property
        /// </summary>
          [XmlEnum("consume - HP flare")]
          consumeHPflare,
        /// <summary>
        /// consumeLPflare property
        /// </summary>
          [XmlEnum("consume - LP flare")]
          consumeLPflare,
        /// <summary>
        /// consumenoncompressor property
        /// </summary>
          [XmlEnum("consume - non compressor")]
          consumenoncompressor,
        /// <summary>
        /// consumeventing property
        /// </summary>
          [XmlEnum("consume - venting")]
          consumeventing,
        /// <summary>
        /// disposal
        /// </summary>
          disposal,
        /// <summary>
        /// export
        /// </summary>
          export,
        /// <summary>
        /// exportnominated property
        /// </summary>
          [XmlEnum("export - nominated")]
          exportnominated,
        /// <summary>
        /// exportrequested property
        /// </summary>
          [XmlEnum("export - requested")]
          exportrequested,
        /// <summary>
        /// exportshortfall property
        /// </summary>
          [XmlEnum("export - shortfall")]
          exportshortfall,
        /// <summary>
        /// gaslift property
        /// </summary>
          [XmlEnum("gas lift")]
          gaslift,
        /// <summary>
        /// hydrocarbonaccounting property
        /// </summary>
          [XmlEnum("hydrocarbon accounting")]
          hydrocarbonaccounting,
        /// <summary>
        /// import
        /// </summary>
          import,
        /// <summary>
        /// injection
        /// </summary>
          injection,
        /// <summary>
        /// inventory
        /// </summary>
          inventory,
        /// <summary>
        /// overboard
        /// </summary>
          overboard,
        /// <summary>
        /// production
        /// </summary>
          production,
        /// <summary>
        /// sale
        /// </summary>
          sale,
        /// <summary>
        /// storage
        /// </summary>
          storage,
        /// <summary>
        /// unknown
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ReportingProduct xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ReportingProduct xsd enumeration.")]
        public enum ReportingProduct 
        {
        /// <summary>
        /// aqueous
        /// </summary>
          aqueous,
        /// <summary>
        /// c10
        /// </summary>
          c10,
        /// <summary>
        /// c101 property
        /// </summary>
          [XmlEnum("c10-")]
          c101,
        /// <summary>
        /// c102 property
        /// </summary>
          [XmlEnum("c10+")]
          c102,
        /// <summary>
        /// c2 property
        /// </summary>
          [XmlEnum("c2-")]
          c2,
        /// <summary>
        /// c21 property
        /// </summary>
          [XmlEnum("c2+")]
          c21,
        /// <summary>
        /// c3 property
        /// </summary>
          [XmlEnum("c3-")]
          c3,
        /// <summary>
        /// c31 property
        /// </summary>
          [XmlEnum("c3+")]
          c31,
        /// <summary>
        /// c4 property
        /// </summary>
          [XmlEnum("c4-")]
          c4,
        /// <summary>
        /// c41 property
        /// </summary>
          [XmlEnum("c4+")]
          c41,
        /// <summary>
        /// c5 property
        /// </summary>
          [XmlEnum("c5-")]
          c5,
        /// <summary>
        /// c51 property
        /// </summary>
          [XmlEnum("c5+")]
          c51,
        /// <summary>
        /// c6 property
        /// </summary>
          [XmlEnum("c6-")]
          c6,
        /// <summary>
        /// c61 property
        /// </summary>
          [XmlEnum("c6+")]
          c61,
        /// <summary>
        /// c7
        /// </summary>
          c7,
        /// <summary>
        /// c71 property
        /// </summary>
          [XmlEnum("c7-")]
          c71,
        /// <summary>
        /// c72 property
        /// </summary>
          [XmlEnum("c7+")]
          c72,
        /// <summary>
        /// c8
        /// </summary>
          c8,
        /// <summary>
        /// c81 property
        /// </summary>
          [XmlEnum("c8-")]
          c81,
        /// <summary>
        /// c82 property
        /// </summary>
          [XmlEnum("c8+")]
          c82,
        /// <summary>
        /// c9
        /// </summary>
          c9,
        /// <summary>
        /// c91 property
        /// </summary>
          [XmlEnum("c9-")]
          c91,
        /// <summary>
        /// c92 property
        /// </summary>
          [XmlEnum("c9+")]
          c92,
        /// <summary>
        /// carbondioxidegas property
        /// </summary>
          [XmlEnum("carbon dioxide gas")]
          carbondioxidegas,
        /// <summary>
        /// carbonmonoxidegas property
        /// </summary>
          [XmlEnum("carbon monoxide gas")]
          carbonmonoxidegas,
        /// <summary>
        /// chemical
        /// </summary>
          chemical,
        /// <summary>
        /// condensate
        /// </summary>
          condensate,
        /// <summary>
        /// condensategross property
        /// </summary>
          [XmlEnum("condensate - gross")]
          condensategross,
        /// <summary>
        /// condensatenet property
        /// </summary>
          [XmlEnum("condensate - net")]
          condensatenet,
        /// <summary>
        /// crudestabilized property
        /// </summary>
          [XmlEnum("crude - stabilized")]
          crudestabilized,
        /// <summary>
        /// cuttings
        /// </summary>
          cuttings,
        /// <summary>
        /// diesel
        /// </summary>
          diesel,
        /// <summary>
        /// diethyleneglycol property
        /// </summary>
          [XmlEnum("diethylene glycol")]
          diethyleneglycol,
        /// <summary>
        /// dioxygen
        /// </summary>
          dioxygen,
        /// <summary>
        /// electricpower property
        /// </summary>
          [XmlEnum("electric power")]
          electricpower,
        /// <summary>
        /// ethane
        /// </summary>
          ethane,
        /// <summary>
        /// ethanecomponent property
        /// </summary>
          [XmlEnum("ethane - component")]
          ethanecomponent,
        /// <summary>
        /// gas
        /// </summary>
          gas,
        /// <summary>
        /// gascomponentinoil property
        /// </summary>
          [XmlEnum("gas - component in oil")]
          gascomponentinoil,
        /// <summary>
        /// gasdry property
        /// </summary>
          [XmlEnum("gas - dry")]
          gasdry,
        /// <summary>
        /// gasrich property
        /// </summary>
          [XmlEnum("gas - rich")]
          gasrich,
        /// <summary>
        /// gaswet property
        /// </summary>
          [XmlEnum("gas - wet")]
          gaswet,
        /// <summary>
        /// heliumgas property
        /// </summary>
          [XmlEnum("helium gas")]
          heliumgas,
        /// <summary>
        /// heptane
        /// </summary>
          heptane,
        /// <summary>
        /// hydrauliccontrolfluid property
        /// </summary>
          [XmlEnum("hydraulic control fluid")]
          hydrauliccontrolfluid,
        /// <summary>
        /// hydrogengas property
        /// </summary>
          [XmlEnum("hydrogen gas")]
          hydrogengas,
        /// <summary>
        /// hydrogensulfide property
        /// </summary>
          [XmlEnum("hydrogen sulfide")]
          hydrogensulfide,
        /// <summary>
        /// ibutanecomponent property
        /// </summary>
          [XmlEnum("i-butane - component")]
          ibutanecomponent,
        /// <summary>
        /// isobutane
        /// </summary>
          isobutane,
        /// <summary>
        /// isopentane
        /// </summary>
          isopentane,
        /// <summary>
        /// liquefiednaturalgas property
        /// </summary>
          [XmlEnum("liquefied natural gas")]
          liquefiednaturalgas,
        /// <summary>
        /// liquefiedpetroleumgas property
        /// </summary>
          [XmlEnum("liquefied petroleum gas")]
          liquefiedpetroleumgas,
        /// <summary>
        /// liquid
        /// </summary>
          liquid,
        /// <summary>
        /// methane
        /// </summary>
          methane,
        /// <summary>
        /// methanecomponent property
        /// </summary>
          [XmlEnum("methane - component")]
          methanecomponent,
        /// <summary>
        /// methanol
        /// </summary>
          methanol,
        /// <summary>
        /// mixedbutane property
        /// </summary>
          [XmlEnum("mixed butane")]
          mixedbutane,
        /// <summary>
        /// monoethyleneglycol property
        /// </summary>
          [XmlEnum("monoethylene glycol")]
          monoethyleneglycol,
        /// <summary>
        /// naphta
        /// </summary>
          naphtha,
        /// <summary>
        /// naturalgasliquid property
        /// </summary>
          [XmlEnum("natural gas liquid")]
          naturalgasliquid,
        /// <summary>
        /// nbutanecomponent property
        /// </summary>
          [XmlEnum("n-butane - component")]
          nbutanecomponent,
        /// <summary>
        /// neopentane
        /// </summary>
          neopentane,
        /// <summary>
        /// NGLcomponentingas property
        /// </summary>
          [XmlEnum("NGL - component in gas")]
          NGLcomponentingas,
        /// <summary>
        /// nitrogengas property
        /// </summary>
          [XmlEnum("nitrogen gas")]
          nitrogengas,
        /// <summary>
        /// nitrogenoxidegas property
        /// </summary>
          [XmlEnum("nitrogen oxide gas")]
          nitrogenoxidegas,
        /// <summary>
        /// normalbutane property
        /// </summary>
          [XmlEnum("normal butane")]
          normalbutane,
        /// <summary>
        /// normalpentane property
        /// </summary>
          [XmlEnum("normal pentane")]
          normalpentane,
        /// <summary>
        /// oil
        /// </summary>
          oil,
        /// <summary>
        /// oilcomponentinwater property
        /// </summary>
          [XmlEnum("oil - component in water")]
          oilcomponentinwater,
        /// <summary>
        /// oilgross property
        /// </summary>
          [XmlEnum("oil - gross")]
          oilgross,
        /// <summary>
        /// oilnet property
        /// </summary>
          [XmlEnum("oil - net")]
          oilnet,
        /// <summary>
        /// oilandgas property
        /// </summary>
          [XmlEnum("oil and gas")]
          oilandgas,
        /// <summary>
        /// oleic
        /// </summary>
          oleic,
        /// <summary>
        /// pentanecomponent property
        /// </summary>
          [XmlEnum("pentane - component")]
          pentanecomponent,
        /// <summary>
        /// petroleumgasliquid property
        /// </summary>
          [XmlEnum("petroleum gas liquid")]
          petroleumgasliquid,
        /// <summary>
        /// propane
        /// </summary>
          propane,
        /// <summary>
        /// propanecomponent property
        /// </summary>
          [XmlEnum("propane - component")]
          propanecomponent,
        /// <summary>
        /// salt
        /// </summary>
          salt,
        /// <summary>
        /// sandcomponent property
        /// </summary>
          [XmlEnum("sand - component")]
          sandcomponent,
        /// <summary>
        /// triethyleneglycol property
        /// </summary>
          [XmlEnum("triethylene glycol")]
          triethyleneglycol,
        /// <summary>
        /// unknown
        /// </summary>
          unknown,
        /// <summary>
        /// vapor
        /// </summary>
          vapor,
        /// <summary>
        /// water
        /// </summary>
          water,
        /// <summary>
        /// waterdischarge property
        /// </summary>
          [XmlEnum("water - discharge")]
          waterdischarge,
        /// <summary>
        /// waterprocessed property
        /// </summary>
          [XmlEnum("water - processed")]
          waterprocessed
        }
        /// <summary>
        /// This class represents the PathDefectTypes xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the PathDefectTypes xsd enumeration.")]
        public enum PathDefectTypes 
        {
        /// <summary>
        /// darkenedfiber property
        /// </summary>
          [XmlEnum("darkened fiber")]
          darkenedfiber,
        /// <summary>
        /// other
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the OTDRReason xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the OTDRReason xsd enumeration.")]
        public enum OTDRReason 
        {
        /// <summary>
        /// dts
        /// </summary>
          dts,
        /// <summary>
        /// other
        /// </summary>
          other,
        /// <summary>
        /// postinstallation property
        /// </summary>
          [XmlEnum("post-installation")]
          postinstallation,
        /// <summary>
        /// preinstallation property
        /// </summary>
          [XmlEnum("pre-installation")]
          preinstallation,
        /// <summary>
        /// run
        /// </summary>
          run
        }
        /// <summary>
        /// This class represents the OTDRDirection xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the OTDRDirection xsd enumeration.")]
        public enum OTDRDirection 
        {
        /// <summary>
        /// backward
        /// </summary>
          backward,
        /// <summary>
        /// forward
        /// </summary>
          forward
        }
        /// <summary>
        /// This class represents the CalculationMethod xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the CalculationMethod xsd enumeration.")]
        public enum CalculationMethod 
        {
        /// <summary>
        /// No calculations are performed to create data where none exists at index points within an existing set of data.
        /// </summary>
          none,
        /// <summary>
        /// stepwiseconstant property
        /// </summary>
          [XmlEnum("step wise constant")]
          stepwiseconstant,
        /// <summary>
        /// Unknown.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ReferenceCondition xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReferenceCondition xsd enumeration.")]
        public enum ReferenceCondition 
        {
        /// <summary>
        /// Item0degC1atm property
        /// </summary>
          [XmlEnum("0 degC 1 atm")]
          Item0degC1atm,
        /// <summary>
        /// Item0degC1bar property
        /// </summary>
          [XmlEnum("0 degC 1 bar")]
          Item0degC1bar,
        /// <summary>
        /// Item15degC1atm property
        /// </summary>
          [XmlEnum("15 degC 1 atm")]
          Item15degC1atm,
        /// <summary>
        /// Item15degC1bar property
        /// </summary>
          [XmlEnum("15 degC 1 bar")]
          Item15degC1bar,
        /// <summary>
        /// Item20degC1atm property
        /// </summary>
          [XmlEnum("20 degC 1 atm")]
          Item20degC1atm,
        /// <summary>
        /// Item20degC1bar property
        /// </summary>
          [XmlEnum("20 degC 1 bar")]
          Item20degC1bar,
        /// <summary>
        /// Item25degC1bar property
        /// </summary>
          [XmlEnum("25 degC 1 bar")]
          Item25degC1bar,
        /// <summary>
        /// Item60degF1atm property
        /// </summary>
          [XmlEnum("60 degF 1 atm")]
          Item60degF1atm,
        /// <summary>
        /// Item60degF30inHg property
        /// </summary>
          [XmlEnum("60 degF 30 in Hg")]
          Item60degF30inHg,
        /// <summary>
        /// ambient property
        /// </summary>
          ambient
        }
        /// <summary>
        /// This class represents the WellFluid xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the WellFluid xsd enumeration.")]
        public enum WellFluid 
        {
        /// <summary>
        /// This is generally an injected fluid.
        /// </summary>
          air,
        /// <summary>
        /// Liquid hydrocarbons produced with natural gas that are separated from the gas by cooling and various other means. Condensate generally has an API gravity of 50 degrees to 120 degrees and is water white, straw, or bluish in color. It is the liquid recovery from a well classified as a gas well. It is generally dissolved in the gaseous state under reservoir conditions but separates as a liquid either in passing up the hole or at the surface. These hydrocarbons, from associated and non-associated gas well gas, normally are recovered from lease separators or field facilities by mechanical separation.
        /// </summary>
          condensate,
        /// <summary>
        /// The well facility is classified as a dry well. It has not been nor will it be used to produce or inject any fluids.
        /// </summary>
          dry,
        /// <summary>
        /// The well is classified as a gas well, producing or injecting a hydrocarbon gas. The gas is generally methane, but may have a mixture of other gases also.
        /// </summary>
          gas,
        /// <summary>
        /// gaswater property
        /// </summary>
          [XmlEnum("gas-water")]
          gaswater,
        /// <summary>
        /// nonHCgas property
        /// </summary>
          [XmlEnum("non HC gas")]
          nonHCgas,
        /// <summary>
        /// nonHCgasCO2 property
        /// </summary>
          [XmlEnum("non HC gas -- CO2")]
          nonHCgasCO2,
        /// <summary>
        /// The liquid hydrocarbon, generally referred to as crude oil.
        /// </summary>
          oil,
        /// <summary>
        /// oilgas property
        /// </summary>
          [XmlEnum("oil-gas")]
          oilgas,
        /// <summary>
        /// oilwater property
        /// </summary>
          [XmlEnum("oil-water")]
          oilwater,
        /// <summary>
        /// The gaseous state of water. This is generally an injected fluid, but it is possible that some hydrothermal wells produce steam.
        /// </summary>
          steam,
        /// <summary>
        /// The well is classified as a water well without distinguishing between brine or fresh water.
        /// </summary>
          water,
        /// <summary>
        /// waterbrine property
        /// </summary>
          [XmlEnum("water -- brine")]
          waterbrine,
        /// <summary>
        /// waterfreshwater property
        /// </summary>
          [XmlEnum("water -- fresh water")]
          waterfreshwater
        }
        /// <summary>
        /// This class represents the WellOperationMethod xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the WellOperationMethod xsd enumeration.")]
        public enum WellOperationMethod 
        {
        /// <summary>
        /// continuousgaslift property
        /// </summary>
          [XmlEnum("continuous gas lift")]
          continuousgaslift,
        /// <summary>
        /// electricsubmersiblepumplift property
        /// </summary>
          [XmlEnum("electric submersible pump lift")]
          electricsubmersiblepumplift,
        /// <summary>
        /// foamlift property
        /// </summary>
          [XmlEnum("foam lift")]
          foamlift,
        /// <summary>
        /// hydraulicpumplift property
        /// </summary>
          [XmlEnum("hydraulic pump lift")]
          hydraulicpumplift,
        /// <summary>
        /// intermittentgaslift property
        /// </summary>
          [XmlEnum("intermittent gas lift")]
          intermittentgaslift,
        /// <summary>
        /// jetpumplift property
        /// </summary>
          [XmlEnum("jet pump lift")]
          jetpumplift,
        /// <summary>
        /// naturalflow property
        /// </summary>
          [XmlEnum("natural flow")]
          naturalflow,
        /// <summary>
        /// plungergaslift property
        /// </summary>
          [XmlEnum("plunger gas lift")]
          plungergaslift,
        /// <summary>
        /// progressivecavitypumplift property
        /// </summary>
          [XmlEnum("progressive cavity pump lift")]
          progressivecavitypumplift,
        /// <summary>
        /// suckerrodpumplift property
        /// </summary>
          [XmlEnum("sucker rod pump lift")]
          suckerrodpumplift,
        /// <summary>
        /// unknown
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the FlowSubQualifier xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the FlowSubQualifier xsd enumeration.")]
        public enum FlowSubQualifier 
        {
        /// <summary>
        /// declinecurve property
        /// </summary>
          [XmlEnum("decline curve")]
          declinecurve,
        /// <summary>
        /// difference property
        /// </summary>
          difference,
        /// <summary>
        /// fiscal property
        /// </summary>
          fiscal,
        /// <summary>
        /// fixed property
        /// </summary>
          @fixed,
        /// <summary>
        /// maximum property
        /// </summary>
          maximum,
        /// <summary>
        /// minimum property
        /// </summary>
          minimum,
        /// <summary>
        /// raw property
        /// </summary>
          raw,
        /// <summary>
        /// recalibrated property
        /// </summary>
          recalibrated,
        /// <summary>
        /// standard property
        /// </summary>
          standard
        }
        /// <summary>
        /// This class represents the IsothermalCompressibilityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the IsothermalCompressibilityUom xsd enumeration.")]
        public enum IsothermalCompressibilityUom 
        {
        /// <summary>
        /// dm3kWh property
        /// </summary>
          [XmlEnum("dm3/(kW.h)")]
          dm3kWh,
        /// <summary>
        /// dm3MJ property
        /// </summary>
          [XmlEnum("dm3/MJ")]
          dm3MJ,
        /// <summary>
        /// m3kWh property
        /// </summary>
          [XmlEnum("m3/(kW.h)")]
          m3kWh,
        /// <summary>
        /// m3J property
        /// </summary>
          [XmlEnum("m3/J")]
          m3J,
        /// <summary>
        /// mm3J property
        /// </summary>
          [XmlEnum("mm3/J")]
          mm3J,
        /// <summary>
        /// ptUKhph property
        /// </summary>
          [XmlEnum("pt[UK]/(hp.h)")]
          ptUKhph
        }
        /// <summary>
        /// This class represents the BalanceFlowPart xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the BalanceFlowPart xsd enumeration.")]
        public enum BalanceFlowPart 
        {
        /// <summary>
        /// adjustedclosing property
        /// </summary>
          [XmlEnum("adjusted closing")]
          adjustedclosing,
        /// <summary>
        /// closingbalance property
        /// </summary>
          [XmlEnum("closing balance")]
          closingbalance,
        /// <summary>
        /// closingstorageinventory property
        /// </summary>
          [XmlEnum("closing storage inventory")]
          closingstorageinventory,
        /// <summary>
        /// completedlifting property
        /// </summary>
          [XmlEnum("completed lifting")]
          completedlifting,
        /// <summary>
        /// gainloss property
        /// </summary>
          [XmlEnum("gain/loss")]
          gainloss,
        /// <summary>
        /// inputtostorage property
        /// </summary>
          [XmlEnum("input to storage")]
          inputtostorage,
        /// <summary>
        /// A volume that is transferred ("lifted").
        /// </summary>
          lifted,
        /// <summary>
        /// liftingentitlement property
        /// </summary>
          [XmlEnum("lifting entitlement")]
          liftingentitlement,
        /// <summary>
        /// liftingentitlementremaining property
        /// </summary>
          [XmlEnum("lifting entitlement remaining")]
          liftingentitlementremaining,
        /// <summary>
        /// A gas volume that is the quantity of gas which the operator responsible for gas transportation decides must be provided by the gas producing fields in order to make deliveries as requested by gas shippers and provide operating tolerances.
        /// </summary>
          linepack,
        /// <summary>
        /// openingbalance property
        /// </summary>
          [XmlEnum("opening balance")]
          openingbalance,
        /// <summary>
        /// A gas volume that is the unused and available quantity of gas within a gas transportation system and/or at one or many gas producing fields that is accessible by the operator responsible for gas transportation for the purposes of alleviating field curtailment.
        /// </summary>
          opflex,
        /// <summary>
        /// partiallifting property
        /// </summary>
          [XmlEnum("partial lifting")]
          partiallifting,
        /// <summary>
        /// pipelinelifting property
        /// </summary>
          [XmlEnum("pipeline lifting")]
          pipelinelifting,
        /// <summary>
        /// productionmassadjustment property
        /// </summary>
          [XmlEnum("production - mass adjustment")]
          productionmassadjustment,
        /// <summary>
        /// productionvalueadjustment property
        /// </summary>
          [XmlEnum("production -- value adjustment")]
          productionvalueadjustment,
        /// <summary>
        /// productionimbalance property
        /// </summary>
          [XmlEnum("production imbalance")]
          productionimbalance,
        /// <summary>
        /// A swap of a volume in between different parties (often used in crude sales),e.g. "I have this volume with this quality and value and you can give me this higher volume for it with a lower quality."
        /// </summary>
          swap,
        /// <summary>
        /// tankerlifting property
        /// </summary>
          [XmlEnum("tanker lifting")]
          tankerlifting,
        /// <summary>
        /// Typically used within the cargo shipper operations and in this context: is a change in ownership as executed between shippers of the cargo.
        /// </summary>
          transaction,
        /// <summary>
        /// A volume that is the volume of a hydrocarbon product which changes custody in the operation.
        /// </summary>
          transfer,
        /// <summary>
        /// Unknown.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BalanceEventKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the BalanceEventKind xsd enumeration.")]
        public enum BalanceEventKind 
        {
        /// <summary>
        /// billoflading property
        /// </summary>
          [XmlEnum("bill of lading")]
          billoflading,
        /// <summary>
        /// transactiondate property
        /// </summary>
          [XmlEnum("transaction date")]
          transactiondate,
        /// <summary>
        /// Unknown. 
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BalanceDestinationType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the BalanceDestinationType xsd enumeration.")]
        public enum BalanceDestinationType 
        {
        /// <summary>
        /// Defines the name of the destination harbor.
        /// </summary>
          harbor,
        /// <summary>
        /// Defines the name of the destination terminal.
        /// </summary>
          terminal,
        /// <summary>
        /// Unknown. 
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the AxisOrder2d xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AxisOrder2d xsd enumeration.")]
        public enum AxisOrder2d 
        {
        /// <summary>
        /// eastingnorthing property
        /// </summary>
          [XmlEnum("easting northing")]
          eastingnorthing,
        /// <summary>
        /// northingeasting property
        /// </summary>
          [XmlEnum("northing easting")]
          northingeasting,
        /// <summary>
        /// westingsouthing property
        /// </summary>
          [XmlEnum("westing southing")]
          westingsouthing,
        /// <summary>
        /// southingwesting property
        /// </summary>
          [XmlEnum("southing westing")]
          southingwesting,
        /// <summary>
        /// northingwesting property
        /// </summary>
          [XmlEnum("northing westing")]
          northingwesting,
        /// <summary>
        /// westingnorthing property
        /// </summary>
          [XmlEnum("westing northing")]
          westingnorthing
        }
        /// <summary>
        /// This class represents the RelatedTimeTypeRelativePosition xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
        [Description("This class represents the RelatedTimeTypeRelativePosition xsd enumeration.")]
        public enum RelatedTimeTypeRelativePosition 
        {
        /// <summary>
        /// Before property
        /// </summary>
          Before,
        /// <summary>
        /// After property
        /// </summary>
          After,
        /// <summary>
        /// Begins property
        /// </summary>
          Begins,
        /// <summary>
        /// Ends property
        /// </summary>
          Ends,
        /// <summary>
        /// During property
        /// </summary>
          During,
        /// <summary>
        /// Equals property
        /// </summary>
          Equals,
        /// <summary>
        /// Contains property
        /// </summary>
          Contains,
        /// <summary>
        /// Overlaps property
        /// </summary>
          Overlaps,
        /// <summary>
        /// Meets property
        /// </summary>
          Meets,
        /// <summary>
        /// OverlappedBy property
        /// </summary>
          OverlappedBy,
        /// <summary>
        /// MetBy property
        /// </summary>
          MetBy,
        /// <summary>
        /// BegunBy property
        /// </summary>
          BegunBy,
        /// <summary>
        /// EndedBy property
        /// </summary>
          EndedBy
        }
        /// <summary>
        /// This class represents the AggregationType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
        [Description("This class represents the AggregationType xsd enumeration.")]
        public enum AggregationType 
        {
        /// <summary>
        /// set property
        /// </summary>
          set,
        /// <summary>
        /// bag property
        /// </summary>
          bag,
        /// <summary>
        /// sequence property
        /// </summary>
          sequence,
        /// <summary>
        /// array property
        /// </summary>
          array,
        /// <summary>
        /// record property
        /// </summary>
          record,
        /// <summary>
        /// table property
        /// </summary>
          table
        }
        /// <summary>
        /// This class represents the VerticalDirection xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VerticalDirection xsd enumeration.")]
        public enum VerticalDirection 
        {
        /// <summary>
        /// up property
        /// </summary>
          up,
        /// <summary>
        /// down property
        /// </summary>
          down
        }
        /// <summary>
        /// This class represents the NorthReferenceKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the NorthReferenceKind xsd enumeration.")]
        public enum NorthReferenceKind 
        {
        /// <summary>
        /// astronomicnorth property
        /// </summary>
          [XmlEnum("astronomic north")]
          astronomicnorth,
        /// <summary>
        /// compassnorth property
        /// </summary>
          [XmlEnum("compass north")]
          compassnorth,
        /// <summary>
        /// gridnorth property
        /// </summary>
          [XmlEnum("grid north")]
          gridnorth,
        /// <summary>
        /// magneticnorth property
        /// </summary>
          [XmlEnum("magnetic north")]
          magneticnorth,
        /// <summary>
        /// plantnorth property
        /// </summary>
          [XmlEnum("plant north")]
          plantnorth,
        /// <summary>
        /// truenorth property
        /// </summary>
          [XmlEnum("true north")]
          truenorth
        }
        /// <summary>
        /// This class represents the AxisDirectionKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AxisDirectionKind xsd enumeration.")]
        public enum AxisDirectionKind 
        {
        /// <summary>
        /// aft property
        /// </summary>
          aft,
        /// <summary>
        /// awayfrom property
        /// </summary>
          [XmlEnum("away-from")]
          awayfrom,
        /// <summary>
        /// clockwise property
        /// </summary>
          clockwise,
        /// <summary>
        /// columnnegative property
        /// </summary>
          [XmlEnum("column-negative")]
          columnnegative,
        /// <summary>
        /// columnpositive property
        /// </summary>
          [XmlEnum("column-positive")]
          columnpositive,
        /// <summary>
        /// counterclockwise property
        /// </summary>
          [XmlEnum("counter-clockwise")]
          counterclockwise,
        /// <summary>
        /// displaydown property
        /// </summary>
          [XmlEnum("display-down")]
          displaydown,
        /// <summary>
        /// displayleft property
        /// </summary>
          [XmlEnum("display-left")]
          displayleft,
        /// <summary>
        /// displayright property
        /// </summary>
          [XmlEnum("display-right")]
          displayright,
        /// <summary>
        /// displayup property
        /// </summary>
          [XmlEnum("display-up")]
          displayup,
        /// <summary>
        /// down property
        /// </summary>
          down,
        /// <summary>
        /// east property
        /// </summary>
          east,
        /// <summary>
        /// eastnortheast property
        /// </summary>
          [XmlEnum("east-north-east")]
          eastnortheast,
        /// <summary>
        /// eastsoutheast property
        /// </summary>
          [XmlEnum("east-south-east")]
          eastsoutheast,
        /// <summary>
        /// forward property
        /// </summary>
          forward,
        /// <summary>
        /// future property
        /// </summary>
          future,
        /// <summary>
        /// geocentricx property
        /// </summary>
          [XmlEnum("geocentric x")]
          geocentricx,
        /// <summary>
        /// geocentricy property
        /// </summary>
          [XmlEnum("geocentric y")]
          geocentricy,
        /// <summary>
        /// geocentricz property
        /// </summary>
          [XmlEnum("geocentric z")]
          geocentricz,
        /// <summary>
        /// northeast property
        /// </summary>
          [XmlEnum("north-east")]
          northeast,
        /// <summary>
        /// northnortheast property
        /// </summary>
          [XmlEnum("north-north-east")]
          northnortheast,
        /// <summary>
        /// northnorthwest property
        /// </summary>
          [XmlEnum("north-north-west")]
          northnorthwest,
        /// <summary>
        /// northwest property
        /// </summary>
          [XmlEnum("north-west")]
          northwest,
        /// <summary>
        /// past property
        /// </summary>
          past,
        /// <summary>
        /// port property
        /// </summary>
          port,
        /// <summary>
        /// rownegative property
        /// </summary>
          [XmlEnum("row-negative")]
          rownegative,
        /// <summary>
        /// rowpositive property
        /// </summary>
          [XmlEnum("row-positive")]
          rowpositive,
        /// <summary>
        /// south property
        /// </summary>
          south,
        /// <summary>
        /// southeast property
        /// </summary>
          [XmlEnum("south-east")]
          southeast,
        /// <summary>
        /// southsoutheast property
        /// </summary>
          [XmlEnum("south-south-east")]
          southsoutheast,
        /// <summary>
        /// southsouthwest property
        /// </summary>
          [XmlEnum("south-south-west")]
          southsouthwest,
        /// <summary>
        /// southwest property
        /// </summary>
          [XmlEnum("south-west")]
          southwest,
        /// <summary>
        /// starboard property
        /// </summary>
          starboard,
        /// <summary>
        /// towards property
        /// </summary>
          towards,
        /// <summary>
        /// up property
        /// </summary>
          up,
        /// <summary>
        /// west property
        /// </summary>
          west,
        /// <summary>
        /// westnorthwest property
        /// </summary>
          [XmlEnum("west-north-west")]
          westnorthwest,
        /// <summary>
        /// westsouthwest property
        /// </summary>
          [XmlEnum("west-south-west")]
          westsouthwest
        }
        /// <summary>
        /// This class represents the ActivityParameterKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ActivityParameterKind xsd enumeration.")]
        public enum ActivityParameterKind 
        {
        /// <summary>
        /// dataObject property
        /// </summary>
          dataObject,
        /// <summary>
        /// double property
        /// </summary>
          @double,
        /// <summary>
        /// integer property
        /// </summary>
          integer,
        /// <summary>
        /// string property
        /// </summary>
          @string,
        /// <summary>
        /// timestamp property
        /// </summary>
          timestamp,
        /// <summary>
        /// subActivity property
        /// </summary>
          subActivity
        }
        /// <summary>
        /// This class represents the GrowingStatusKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the GrowingStatusKind xsd enumeration.")]
        public enum GrowingStatusKind 
        {
        /// <summary>
        /// active property
        /// </summary>
          active,
        /// <summary>
        /// inactive property
        /// </summary>
          inactive
        }
        /// <summary>
        /// This class represents the Facet xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the Facet xsd enumeration.")]
        public enum Facet 
        {
        /// <summary>
        /// I property
        /// </summary>
          I,
        /// <summary>
        /// J property
        /// </summary>
          J,
        /// <summary>
        /// K property
        /// </summary>
          K,
        /// <summary>
        /// X property
        /// </summary>
          X,
        /// <summary>
        /// Y property
        /// </summary>
          Y,
        /// <summary>
        /// Z property
        /// </summary>
          Z,
        /// <summary>
        /// I1 property
        /// </summary>
          [XmlEnum("I+")]
          I1,
        /// <summary>
        /// J1 property
        /// </summary>
          [XmlEnum("J+")]
          J1,
        /// <summary>
        /// K1 property
        /// </summary>
          [XmlEnum("K+")]
          K1,
        /// <summary>
        /// X1 property
        /// </summary>
          [XmlEnum("X+")]
          X1,
        /// <summary>
        /// Y1 property
        /// </summary>
          [XmlEnum("Y+")]
          Y1,
        /// <summary>
        /// Z1 property
        /// </summary>
          [XmlEnum("Z+")]
          Z1,
        /// <summary>
        /// I2 property
        /// </summary>
          [XmlEnum("I-")]
          I2,
        /// <summary>
        /// J2 property
        /// </summary>
          [XmlEnum("J-")]
          J2,
        /// <summary>
        /// K2 property
        /// </summary>
          [XmlEnum("K-")]
          K2,
        /// <summary>
        /// X2 property
        /// </summary>
          [XmlEnum("X-")]
          X2,
        /// <summary>
        /// Y2 property
        /// </summary>
          [XmlEnum("Y-")]
          Y2,
        /// <summary>
        /// Z2 property
        /// </summary>
          [XmlEnum("Z-")]
          Z2,
        /// <summary>
        /// net property
        /// </summary>
          net,
        /// <summary>
        /// gross property
        /// </summary>
          gross,
        /// <summary>
        /// plus property
        /// </summary>
          plus,
        /// <summary>
        /// minus property
        /// </summary>
          minus,
        /// <summary>
        /// average property
        /// </summary>
          average,
        /// <summary>
        /// maximum property
        /// </summary>
          maximum,
        /// <summary>
        /// minimum property
        /// </summary>
          minimum,
        /// <summary>
        /// maximumthreshold property
        /// </summary>
          [XmlEnum("maximum threshold")]
          maximumthreshold,
        /// <summary>
        /// minimumthreshold property
        /// </summary>
          [XmlEnum("minimum threshold")]
          minimumthreshold,
        /// <summary>
        /// surfacecondition property
        /// </summary>
          [XmlEnum("surface condition")]
          surfacecondition,
        /// <summary>
        /// reservoircondition property
        /// </summary>
          [XmlEnum("reservoir condition")]
          reservoircondition,
        /// <summary>
        /// oil property
        /// </summary>
          oil,
        /// <summary>
        /// water property
        /// </summary>
          water,
        /// <summary>
        /// gas property
        /// </summary>
          gas,
        /// <summary>
        /// condensate property
        /// </summary>
          condensate,
        /// <summary>
        /// cumulative property
        /// </summary>
          cumulative
        }
        /// <summary>
        /// This class represents the FacetKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the FacetKind xsd enumeration.")]
        public enum FacetKind 
        {
        /// <summary>
        /// conditions property
        /// </summary>
          conditions,
        /// <summary>
        /// side property
        /// </summary>
          side,
        /// <summary>
        /// direction property
        /// </summary>
          direction,
        /// <summary>
        /// netgross property
        /// </summary>
          netgross,
        /// <summary>
        /// qualifier property
        /// </summary>
          qualifier,
        /// <summary>
        /// statistics property
        /// </summary>
          statistics,
        /// <summary>
        /// what property
        /// </summary>
          what
        }
        /// <summary>
        /// This class represents the LegacyMassPerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LegacyMassPerVolumeUom xsd enumeration.")]
        public enum LegacyMassPerVolumeUom 
        {
        /// <summary>
        /// kgscm property
        /// </summary>
          [XmlEnum("kg/scm")]
          kgscm,
        /// <summary>
        /// lbm1000scf property
        /// </summary>
          [XmlEnum("lbm/1000scf")]
          lbm1000scf,
        /// <summary>
        /// lbm1E6scf property
        /// </summary>
          [XmlEnum("lbm/1E6scf")]
          lbm1E6scf
        }
        /// <summary>
        /// This class represents the LegacyPressurePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LegacyPressurePerVolumeUom xsd enumeration.")]
        public enum LegacyPressurePerVolumeUom 
        {
        /// <summary>
        /// Pascm property
        /// </summary>
          [XmlEnum("Pa/scm")]
          Pascm,
        /// <summary>
        /// psi1000scf property
        /// </summary>
          [XmlEnum("psi/1000scf")]
          psi1000scf,
        /// <summary>
        /// psi1E6scf property
        /// </summary>
          [XmlEnum("psi/1E6scf")]
          psi1E6scf
        }
        /// <summary>
        /// This class represents the LegacyPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LegacyPressureUom xsd enumeration.")]
        public enum LegacyPressureUom 
        {
        /// <summary>
        /// psia property
        /// </summary>
          psia,
        /// <summary>
        /// psig property
        /// </summary>
          psig
        }
        /// <summary>
        /// This class represents the LegacyVolumePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LegacyVolumePerAreaUom xsd enumeration.")]
        public enum LegacyVolumePerAreaUom 
        {
        /// <summary>
        /// Item1E6stbacre property
        /// </summary>
          [XmlEnum("1E6stb/acre")]
          Item1E6stbacre,
        /// <summary>
        /// scfft2 property
        /// </summary>
          [XmlEnum("scf/ft2")]
          scfft2,
        /// <summary>
        /// scmm2 property
        /// </summary>
          [XmlEnum("scm/m2")]
          scmm2,
        /// <summary>
        /// stbacre property
        /// </summary>
          [XmlEnum("stb/acre")]
          stbacre
        }
        /// <summary>
        /// This class represents the LegacyVolumePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LegacyVolumePerTimeUom xsd enumeration.")]
        public enum LegacyVolumePerTimeUom 
        {
        /// <summary>
        /// Item1000scfd property
        /// </summary>
          [XmlEnum("1000scf/d")]
          Item1000scfd,
        /// <summary>
        /// Item1000scfmo property
        /// </summary>
          [XmlEnum("1000scf/mo")]
          Item1000scfmo,
        /// <summary>
        /// Item1000scmd property
        /// </summary>
          [XmlEnum("1000scm/d")]
          Item1000scmd,
        /// <summary>
        /// Item1000scmmo property
        /// </summary>
          [XmlEnum("1000scm/mo")]
          Item1000scmmo,
        /// <summary>
        /// Item1000stbd property
        /// </summary>
          [XmlEnum("1000stb/d")]
          Item1000stbd,
        /// <summary>
        /// Item1000stbmo property
        /// </summary>
          [XmlEnum("1000stb/mo")]
          Item1000stbmo,
        /// <summary>
        /// Item1E6scfd property
        /// </summary>
          [XmlEnum("1E6scf/d")]
          Item1E6scfd,
        /// <summary>
        /// Item1E6scfmo property
        /// </summary>
          [XmlEnum("1E6scf/mo")]
          Item1E6scfmo,
        /// <summary>
        /// Item1E6scmd property
        /// </summary>
          [XmlEnum("1E6scm/d")]
          Item1E6scmd,
        /// <summary>
        /// Item1E6scmmo property
        /// </summary>
          [XmlEnum("1E6scm/mo")]
          Item1E6scmmo,
        /// <summary>
        /// Item1E6stbd property
        /// </summary>
          [XmlEnum("1E6stb/d")]
          Item1E6stbd,
        /// <summary>
        /// Item1E6stbmo property
        /// </summary>
          [XmlEnum("1E6stb/mo")]
          Item1E6stbmo,
        /// <summary>
        /// scfd property
        /// </summary>
          [XmlEnum("scf/d")]
          scfd,
        /// <summary>
        /// scmd property
        /// </summary>
          [XmlEnum("scm/d")]
          scmd,
        /// <summary>
        /// scmh property
        /// </summary>
          [XmlEnum("scm/h")]
          scmh,
        /// <summary>
        /// scmmo property
        /// </summary>
          [XmlEnum("scm/mo")]
          scmmo,
        /// <summary>
        /// scms property
        /// </summary>
          [XmlEnum("scm/s")]
          scms,
        /// <summary>
        /// stbd property
        /// </summary>
          [XmlEnum("stb/d")]
          stbd,
        /// <summary>
        /// stbmo property
        /// </summary>
          [XmlEnum("stb/mo")]
          stbmo
        }
        /// <summary>
        /// This class represents the LegacyVolumePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LegacyVolumePerVolumeUom xsd enumeration.")]
        public enum LegacyVolumePerVolumeUom 
        {
        /// <summary>
        /// Item1000scfstb property
        /// </summary>
          [XmlEnum("1000scf/stb")]
          Item1000scfstb,
        /// <summary>
        /// Item1E6scfstb property
        /// </summary>
          [XmlEnum("1E6scf/stb")]
          Item1E6scfstb,
        /// <summary>
        /// Item1E6stbacreft property
        /// </summary>
          [XmlEnum("1E6stb/acre.ft")]
          Item1E6stbacreft,
        /// <summary>
        /// acreft1E6stb property
        /// </summary>
          [XmlEnum("acre.ft/1E6stb")]
          acreft1E6stb,
        /// <summary>
        /// bbl1000scf property
        /// </summary>
          [XmlEnum("bbl/1000scf")]
          bbl1000scf,
        /// <summary>
        /// bbl1E6scf property
        /// </summary>
          [XmlEnum("bbl/1E6scf")]
          bbl1E6scf,
        /// <summary>
        /// bblscf property
        /// </summary>
          [XmlEnum("bbl/scf")]
          bblscf,
        /// <summary>
        /// bblstb property
        /// </summary>
          [XmlEnum("bbl/stb")]
          bblstb,
        /// <summary>
        /// ft3scf property
        /// </summary>
          [XmlEnum("ft3/scf")]
          ft3scf,
        /// <summary>
        /// ft3stb property
        /// </summary>
          [XmlEnum("ft3/stb")]
          ft3stb,
        /// <summary>
        /// galUS1000scf property
        /// </summary>
          [XmlEnum("galUS/1000scf")]
          galUS1000scf,
        /// <summary>
        /// m3scm property
        /// </summary>
          [XmlEnum("m3/scm")]
          m3scm,
        /// <summary>
        /// mlscm property
        /// </summary>
          [XmlEnum("ml/scm")]
          mlscm,
        /// <summary>
        /// scfbbl property
        /// </summary>
          [XmlEnum("scf/bbl")]
          scfbbl,
        /// <summary>
        /// scfft3 property
        /// </summary>
          [XmlEnum("scf/ft3")]
          scfft3,
        /// <summary>
        /// scfscf property
        /// </summary>
          [XmlEnum("scf/scf")]
          scfscf,
        /// <summary>
        /// scfstb property
        /// </summary>
          [XmlEnum("scf/stb")]
          scfstb,
        /// <summary>
        /// scmm3 property
        /// </summary>
          [XmlEnum("scm/m3")]
          scmm3,
        /// <summary>
        /// scmscm property
        /// </summary>
          [XmlEnum("scm/scm")]
          scmscm,
        /// <summary>
        /// scmstb property
        /// </summary>
          [XmlEnum("scm/stb")]
          scmstb,
        /// <summary>
        /// stb1000scf property
        /// </summary>
          [XmlEnum("stb/1000scf")]
          stb1000scf,
        /// <summary>
        /// stb1000scm property
        /// </summary>
          [XmlEnum("stb/1000scm")]
          stb1000scm,
        /// <summary>
        /// stb1E6scf property
        /// </summary>
          [XmlEnum("stb/1E6scf")]
          stb1E6scf,
        /// <summary>
        /// stb1E6scm property
        /// </summary>
          [XmlEnum("stb/1E6scm")]
          stb1E6scm,
        /// <summary>
        /// stbbbl property
        /// </summary>
          [XmlEnum("stb/bbl")]
          stbbbl,
        /// <summary>
        /// stbscm property
        /// </summary>
          [XmlEnum("stb/scm")]
          stbscm,
        /// <summary>
        /// stbstb property
        /// </summary>
          [XmlEnum("stb/stb")]
          stbstb
        }
        /// <summary>
        /// This class represents the LegacyVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LegacyVolumeUom xsd enumeration.")]
        public enum LegacyVolumeUom 
        {
        /// <summary>
        /// Item1000scm property
        /// </summary>
          [XmlEnum("1000scm")]
          Item1000scm,
        /// <summary>
        /// Item1000stb property
        /// </summary>
          [XmlEnum("1000stb")]
          Item1000stb,
        /// <summary>
        /// Item1E6scf property
        /// </summary>
          [XmlEnum("1E6scf")]
          Item1E6scf,
        /// <summary>
        /// Item1E6scm property
        /// </summary>
          [XmlEnum("1E6scm")]
          Item1E6scm,
        /// <summary>
        /// Item1E6stb property
        /// </summary>
          [XmlEnum("1E6stb")]
          Item1E6stb,
        /// <summary>
        /// Item1E9scf property
        /// </summary>
          [XmlEnum("1E9scf")]
          Item1E9scf,
        /// <summary>
        /// kscf property
        /// </summary>
          kscf,
        /// <summary>
        /// scf property
        /// </summary>
          scf,
        /// <summary>
        /// scm property
        /// </summary>
          scm,
        /// <summary>
        /// stb property
        /// </summary>
          stb
        }
        /// <summary>
        /// This class represents the AbsorbedDoseUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AbsorbedDoseUom xsd enumeration.")]
        public enum AbsorbedDoseUom 
        {
        /// <summary>
        /// cGy property
        /// </summary>
          cGy,
        /// <summary>
        /// crd property
        /// </summary>
          crd,
        /// <summary>
        /// dGy property
        /// </summary>
          dGy,
        /// <summary>
        /// drd property
        /// </summary>
          drd,
        /// <summary>
        /// EGy property
        /// </summary>
          EGy,
        /// <summary>
        /// Erd property
        /// </summary>
          Erd,
        /// <summary>
        /// fGy property
        /// </summary>
          fGy,
        /// <summary>
        /// frd property
        /// </summary>
          frd,
        /// <summary>
        /// GGy property
        /// </summary>
          GGy,
        /// <summary>
        /// Grd property
        /// </summary>
          Grd,
        /// <summary>
        /// Gy property
        /// </summary>
          Gy,
        /// <summary>
        /// kGy property
        /// </summary>
          kGy,
        /// <summary>
        /// krd property
        /// </summary>
          krd,
        /// <summary>
        /// mGy property
        /// </summary>
          mGy,
        /// <summary>
        /// MGy property
        /// </summary>
          MGy,
        /// <summary>
        /// Mrd property
        /// </summary>
          Mrd,
        /// <summary>
        /// mrd property
        /// </summary>
          mrd,
        /// <summary>
        /// nGy property
        /// </summary>
          nGy,
        /// <summary>
        /// nrd property
        /// </summary>
          nrd,
        /// <summary>
        /// pGy property
        /// </summary>
          pGy,
        /// <summary>
        /// prd property
        /// </summary>
          prd,
        /// <summary>
        /// rd property
        /// </summary>
          rd,
        /// <summary>
        /// TGy property
        /// </summary>
          TGy,
        /// <summary>
        /// Trd property
        /// </summary>
          Trd,
        /// <summary>
        /// uGy property
        /// </summary>
          uGy,
        /// <summary>
        /// urd property
        /// </summary>
          urd
        }
        /// <summary>
        /// This class represents the ActivityOfRadioactivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ActivityOfRadioactivityUom xsd enumeration.")]
        public enum ActivityOfRadioactivityUom 
        {
        /// <summary>
        /// Bq property
        /// </summary>
          Bq,
        /// <summary>
        /// Ci property
        /// </summary>
          Ci,
        /// <summary>
        /// GBq property
        /// </summary>
          GBq,
        /// <summary>
        /// MBq property
        /// </summary>
          MBq,
        /// <summary>
        /// mCi property
        /// </summary>
          mCi,
        /// <summary>
        /// nCi property
        /// </summary>
          nCi,
        /// <summary>
        /// pCi property
        /// </summary>
          pCi,
        /// <summary>
        /// TBq property
        /// </summary>
          TBq,
        /// <summary>
        /// uCi property
        /// </summary>
          uCi
        }
        /// <summary>
        /// This class represents the AmountOfSubstancePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstancePerAreaUom xsd enumeration.")]
        public enum AmountOfSubstancePerAreaUom 
        {
        /// <summary>
        /// molm2 property
        /// </summary>
          [XmlEnum("mol/m2")]
          molm2
        }
        /// <summary>
        /// This class represents the AmountOfSubstancePerTimePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstancePerTimePerAreaUom xsd enumeration.")]
        public enum AmountOfSubstancePerTimePerAreaUom 
        {
        /// <summary>
        /// lbmolhft2 property
        /// </summary>
          [XmlEnum("lbmol/(h.ft2)")]
          lbmolhft2,
        /// <summary>
        /// lbmolsft2 property
        /// </summary>
          [XmlEnum("lbmol/(s.ft2)")]
          lbmolsft2,
        /// <summary>
        /// molsm2 property
        /// </summary>
          [XmlEnum("mol/(s.m2)")]
          molsm2
        }
        /// <summary>
        /// This class represents the AmountOfSubstancePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstancePerTimeUom xsd enumeration.")]
        public enum AmountOfSubstancePerTimeUom 
        {
        /// <summary>
        /// kat property
        /// </summary>
          kat,
        /// <summary>
        /// kmolh property
        /// </summary>
          [XmlEnum("kmol/h")]
          kmolh,
        /// <summary>
        /// kmols property
        /// </summary>
          [XmlEnum("kmol/s")]
          kmols,
        /// <summary>
        /// lbmolh property
        /// </summary>
          [XmlEnum("lbmol/h")]
          lbmolh,
        /// <summary>
        /// lbmols property
        /// </summary>
          [XmlEnum("lbmol/s")]
          lbmols,
        /// <summary>
        /// mols property
        /// </summary>
          [XmlEnum("mol/s")]
          mols
        }
        /// <summary>
        /// This class represents the AmountOfSubstancePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstancePerVolumeUom xsd enumeration.")]
        public enum AmountOfSubstancePerVolumeUom 
        {
        /// <summary>
        /// kmolm3 property
        /// </summary>
          [XmlEnum("kmol/m3")]
          kmolm3,
        /// <summary>
        /// lbmolft3 property
        /// </summary>
          [XmlEnum("lbmol/ft3")]
          lbmolft3,
        /// <summary>
        /// lbmolgalUK property
        /// </summary>
          [XmlEnum("lbmol/gal[UK]")]
          lbmolgalUK,
        /// <summary>
        /// lbmolgalUS property
        /// </summary>
          [XmlEnum("lbmol/gal[US]")]
          lbmolgalUS,
        /// <summary>
        /// molm3 property
        /// </summary>
          [XmlEnum("mol/m3")]
          molm3
        }
        /// <summary>
        /// This class represents the AnglePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AnglePerLengthUom xsd enumeration.")]
        public enum AnglePerLengthUom 
        {
        /// <summary>
        /// Item001degaft property
        /// </summary>
          [XmlEnum("0.01 dega/ft")]
          Item001degaft,
        /// <summary>
        /// Item130degaft property
        /// </summary>
          [XmlEnum("1/30 dega/ft")]
          Item130degaft,
        /// <summary>
        /// Item130degam property
        /// </summary>
          [XmlEnum("1/30 dega/m")]
          Item130degam,
        /// <summary>
        /// degaft property
        /// </summary>
          [XmlEnum("dega/ft")]
          degaft,
        /// <summary>
        /// degam property
        /// </summary>
          [XmlEnum("dega/m")]
          degam,
        /// <summary>
        /// radft property
        /// </summary>
          [XmlEnum("rad/ft")]
          radft,
        /// <summary>
        /// radm property
        /// </summary>
          [XmlEnum("rad/m")]
          radm,
        /// <summary>
        /// revft property
        /// </summary>
          [XmlEnum("rev/ft")]
          revft,
        /// <summary>
        /// revm property
        /// </summary>
          [XmlEnum("rev/m")]
          revm
        }
        /// <summary>
        /// This class represents the AnglePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AnglePerVolumeUom xsd enumeration.")]
        public enum AnglePerVolumeUom 
        {
        /// <summary>
        /// radft3 property
        /// </summary>
          [XmlEnum("rad/ft3")]
          radft3,
        /// <summary>
        /// radm3 property
        /// </summary>
          [XmlEnum("rad/m3")]
          radm3
        }
        /// <summary>
        /// This class represents the AngularAccelerationUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AngularAccelerationUom xsd enumeration.")]
        public enum AngularAccelerationUom 
        {
        /// <summary>
        /// rads2 property
        /// </summary>
          [XmlEnum("rad/s2")]
          rads2,
        /// <summary>
        /// rpms property
        /// </summary>
          [XmlEnum("rpm/s")]
          rpms
        }
        /// <summary>
        /// This class represents the APIGammaRayUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the APIGammaRayUom xsd enumeration.")]
        public enum APIGammaRayUom 
        {
        /// <summary>
        /// gAPI property
        /// </summary>
          gAPI
        }
        /// <summary>
        /// This class represents the APINeutronUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the APINeutronUom xsd enumeration.")]
        public enum APINeutronUom 
        {
        /// <summary>
        /// nAPI property
        /// </summary>
          nAPI
        }
        /// <summary>
        /// This class represents the AreaPerAmountOfSubstanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerAmountOfSubstanceUom xsd enumeration.")]
        public enum AreaPerAmountOfSubstanceUom 
        {
        /// <summary>
        /// m2mol property
        /// </summary>
          [XmlEnum("m2/mol")]
          m2mol
        }
        /// <summary>
        /// This class represents the AreaPerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerAreaUom xsd enumeration.")]
        public enum AreaPerAreaUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// area property
        /// </summary>
          [XmlEnum("%[area]")]
          area,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// in2ft2 property
        /// </summary>
          [XmlEnum("in2/ft2")]
          in2ft2,
        /// <summary>
        /// in2in2 property
        /// </summary>
          [XmlEnum("in2/in2")]
          in2in2,
        /// <summary>
        /// m2m2 property
        /// </summary>
          [XmlEnum("m2/m2")]
          m2m2,
        /// <summary>
        /// mm2mm2 property
        /// </summary>
          [XmlEnum("mm2/mm2")]
          mm2mm2
        }
        /// <summary>
        /// This class represents the AreaPerCountUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerCountUom xsd enumeration.")]
        public enum AreaPerCountUom 
        {
        /// <summary>
        /// belectron property
        /// </summary>
          [XmlEnum("b/electron")]
          belectron
        }
        /// <summary>
        /// This class represents the AreaPerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerMassUom xsd enumeration.")]
        public enum AreaPerMassUom 
        {
        /// <summary>
        /// cm2g property
        /// </summary>
          [XmlEnum("cm2/g")]
          cm2g,
        /// <summary>
        /// ft2lbm property
        /// </summary>
          [XmlEnum("ft2/lbm")]
          ft2lbm,
        /// <summary>
        /// m2g property
        /// </summary>
          [XmlEnum("m2/g")]
          m2g,
        /// <summary>
        /// m2kg property
        /// </summary>
          [XmlEnum("m2/kg")]
          m2kg
        }
        /// <summary>
        /// This class represents the AreaPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerTimeUom xsd enumeration.")]
        public enum AreaPerTimeUom 
        {
        /// <summary>
        /// cm2s property
        /// </summary>
          [XmlEnum("cm2/s")]
          cm2s,
        /// <summary>
        /// ft2h property
        /// </summary>
          [XmlEnum("ft2/h")]
          ft2h,
        /// <summary>
        /// ft2s property
        /// </summary>
          [XmlEnum("ft2/s")]
          ft2s,
        /// <summary>
        /// in2s property
        /// </summary>
          [XmlEnum("in2/s")]
          in2s,
        /// <summary>
        /// m2d property
        /// </summary>
          [XmlEnum("m2/d")]
          m2d,
        /// <summary>
        /// m2h property
        /// </summary>
          [XmlEnum("m2/h")]
          m2h,
        /// <summary>
        /// m2s property
        /// </summary>
          [XmlEnum("m2/s")]
          m2s,
        /// <summary>
        /// mm2s property
        /// </summary>
          [XmlEnum("mm2/s")]
          mm2s
        }
        /// <summary>
        /// This class represents the AreaPerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerVolumeUom xsd enumeration.")]
        public enum AreaPerVolumeUom 
        {
        /// <summary>
        /// Item1m property
        /// </summary>
          [XmlEnum("1/m")]
          Item1m,
        /// <summary>
        /// bcm3 property
        /// </summary>
          [XmlEnum("b/cm3")]
          bcm3,
        /// <summary>
        /// cu property
        /// </summary>
          cu,
        /// <summary>
        /// ft2in3 property
        /// </summary>
          [XmlEnum("ft2/in3")]
          ft2in3,
        /// <summary>
        /// m2cm3 property
        /// </summary>
          [XmlEnum("m2/cm3")]
          m2cm3,
        /// <summary>
        /// m2m3 property
        /// </summary>
          [XmlEnum("m2/m3")]
          m2m3
        }
        /// <summary>
        /// This class represents the AttenuationPerFrequencyIntervalUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AttenuationPerFrequencyIntervalUom xsd enumeration.")]
        public enum AttenuationPerFrequencyIntervalUom 
        {
        /// <summary>
        /// BO property
        /// </summary>
          [XmlEnum("B/O")]
          BO,
        /// <summary>
        /// dBO property
        /// </summary>
          [XmlEnum("dB/O")]
          dBO
        }
        /// <summary>
        /// This class represents the CapacitanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the CapacitanceUom xsd enumeration.")]
        public enum CapacitanceUom 
        {
        /// <summary>
        /// cF property
        /// </summary>
          cF,
        /// <summary>
        /// dF property
        /// </summary>
          dF,
        /// <summary>
        /// EF property
        /// </summary>
          EF,
        /// <summary>
        /// F property
        /// </summary>
          F,
        /// <summary>
        /// fF property
        /// </summary>
          fF,
        /// <summary>
        /// GF property
        /// </summary>
          GF,
        /// <summary>
        /// kF property
        /// </summary>
          kF,
        /// <summary>
        /// mF property
        /// </summary>
          mF,
        /// <summary>
        /// MF property
        /// </summary>
          MF,
        /// <summary>
        /// nF property
        /// </summary>
          nF,
        /// <summary>
        /// pF property
        /// </summary>
          pF,
        /// <summary>
        /// TF property
        /// </summary>
          TF,
        /// <summary>
        /// uF property
        /// </summary>
          uF
        }
        /// <summary>
        /// This class represents the CationExchangeCapacityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the CationExchangeCapacityUom xsd enumeration.")]
        public enum CationExchangeCapacityUom 
        {
        /// <summary>
        /// Item01meqg property
        /// </summary>
          [XmlEnum(".01 meq/g")]
          Item01meqg
        }
        /// <summary>
        /// This class represents the DataTransferSpeedUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DataTransferSpeedUom xsd enumeration.")]
        public enum DataTransferSpeedUom 
        {
        /// <summary>
        /// bits property
        /// </summary>
          [XmlEnum("bit/s")]
          bits,
        /// <summary>
        /// bytes property
        /// </summary>
          [XmlEnum("byte/s")]
          bytes
        }
        /// <summary>
        /// This class represents the DiffusionCoefficientUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DiffusionCoefficientUom xsd enumeration.")]
        public enum DiffusionCoefficientUom 
        {
        /// <summary>
        /// m2s property
        /// </summary>
          [XmlEnum("m2/s")]
          m2s
        }
        /// <summary>
        /// This class represents the DiffusiveTimeOfFlightUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DiffusiveTimeOfFlightUom xsd enumeration.")]
        public enum DiffusiveTimeOfFlightUom 
        {
        /// <summary>
        /// h05 property
        /// </summary>
          [XmlEnum("h(0.5)")]
          h05,
        /// <summary>
        /// s05 property
        /// </summary>
          [XmlEnum("s(0.5)")]
          s05
        }
        /// <summary>
        /// This class represents the DigitalStorageUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DigitalStorageUom xsd enumeration.")]
        public enum DigitalStorageUom 
        {
        /// <summary>
        /// bit property
        /// </summary>
          bit,
        /// <summary>
        /// byte property
        /// </summary>
          @byte,
        /// <summary>
        /// Kibyte property
        /// </summary>
          Kibyte,
        /// <summary>
        /// Mibyte property
        /// </summary>
          Mibyte
        }
        /// <summary>
        /// This class represents the DipoleMomentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DipoleMomentUom xsd enumeration.")]
        public enum DipoleMomentUom 
        {
        /// <summary>
        /// Cm property
        /// </summary>
          [XmlEnum("C.m")]
          Cm
        }
        /// <summary>
        /// This class represents the DoseEquivalentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DoseEquivalentUom xsd enumeration.")]
        public enum DoseEquivalentUom 
        {
        /// <summary>
        /// mrem property
        /// </summary>
          mrem,
        /// <summary>
        /// mSv property
        /// </summary>
          mSv,
        /// <summary>
        /// rem property
        /// </summary>
          rem,
        /// <summary>
        /// Sv property
        /// </summary>
          Sv
        }
        /// <summary>
        /// This class represents the ElectricChargePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricChargePerAreaUom xsd enumeration.")]
        public enum ElectricChargePerAreaUom 
        {
        /// <summary>
        /// Ccm2 property
        /// </summary>
          [XmlEnum("C/cm2")]
          Ccm2,
        /// <summary>
        /// Cm2 property
        /// </summary>
          [XmlEnum("C/m2")]
          Cm2,
        /// <summary>
        /// Cmm2 property
        /// </summary>
          [XmlEnum("C/mm2")]
          Cmm2,
        /// <summary>
        /// mCm2 property
        /// </summary>
          [XmlEnum("mC/m2")]
          mCm2
        }
        /// <summary>
        /// This class represents the ElectricChargePerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricChargePerMassUom xsd enumeration.")]
        public enum ElectricChargePerMassUom 
        {
        /// <summary>
        /// Askg property
        /// </summary>
          [XmlEnum("A.s/kg")]
          Askg,
        /// <summary>
        /// Cg property
        /// </summary>
          [XmlEnum("C/g")]
          Cg,
        /// <summary>
        /// Ckg property
        /// </summary>
          [XmlEnum("C/kg")]
          Ckg
        }
        /// <summary>
        /// This class represents the ElectricChargePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricChargePerVolumeUom xsd enumeration.")]
        public enum ElectricChargePerVolumeUom 
        {
        /// <summary>
        /// Asm3 property
        /// </summary>
          [XmlEnum("A.s/m3")]
          Asm3,
        /// <summary>
        /// Ccm3 property
        /// </summary>
          [XmlEnum("C/cm3")]
          Ccm3,
        /// <summary>
        /// Cm3 property
        /// </summary>
          [XmlEnum("C/m3")]
          Cm3,
        /// <summary>
        /// Cmm3 property
        /// </summary>
          [XmlEnum("C/mm3")]
          Cmm3
        }
        /// <summary>
        /// This class represents the ElectricChargeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricChargeUom xsd enumeration.")]
        public enum ElectricChargeUom 
        {
        /// <summary>
        /// Ah property
        /// </summary>
          [XmlEnum("A.h")]
          Ah,
        /// <summary>
        /// As property
        /// </summary>
          [XmlEnum("A.s")]
          As,
        /// <summary>
        /// C property
        /// </summary>
          C,
        /// <summary>
        /// cC property
        /// </summary>
          cC,
        /// <summary>
        /// dC property
        /// </summary>
          dC,
        /// <summary>
        /// EC property
        /// </summary>
          EC,
        /// <summary>
        /// fC property
        /// </summary>
          fC,
        /// <summary>
        /// GC property
        /// </summary>
          GC,
        /// <summary>
        /// kC property
        /// </summary>
          kC,
        /// <summary>
        /// MC property
        /// </summary>
          MC,
        /// <summary>
        /// mC property
        /// </summary>
          mC,
        /// <summary>
        /// nC property
        /// </summary>
          nC,
        /// <summary>
        /// pC property
        /// </summary>
          pC,
        /// <summary>
        /// TC property
        /// </summary>
          TC,
        /// <summary>
        /// uC property
        /// </summary>
          uC
        }
        /// <summary>
        /// This class represents the ElectricConductanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricConductanceUom xsd enumeration.")]
        public enum ElectricConductanceUom 
        {
        /// <summary>
        /// cS property
        /// </summary>
          cS,
        /// <summary>
        /// dS property
        /// </summary>
          dS,
        /// <summary>
        /// ES property
        /// </summary>
          ES,
        /// <summary>
        /// fS property
        /// </summary>
          fS,
        /// <summary>
        /// GS property
        /// </summary>
          GS,
        /// <summary>
        /// kS property
        /// </summary>
          kS,
        /// <summary>
        /// mS property
        /// </summary>
          mS,
        /// <summary>
        /// MS property
        /// </summary>
          MS,
        /// <summary>
        /// nS property
        /// </summary>
          nS,
        /// <summary>
        /// pS property
        /// </summary>
          pS,
        /// <summary>
        /// S property
        /// </summary>
          S,
        /// <summary>
        /// TS property
        /// </summary>
          TS,
        /// <summary>
        /// uS property
        /// </summary>
          uS
        }
        /// <summary>
        /// This class represents the ElectricCurrentDensityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricCurrentDensityUom xsd enumeration.")]
        public enum ElectricCurrentDensityUom 
        {
        /// <summary>
        /// Acm2 property
        /// </summary>
          [XmlEnum("A/cm2")]
          Acm2,
        /// <summary>
        /// Aft2 property
        /// </summary>
          [XmlEnum("A/ft2")]
          Aft2,
        /// <summary>
        /// Am2 property
        /// </summary>
          [XmlEnum("A/m2")]
          Am2,
        /// <summary>
        /// Amm2 property
        /// </summary>
          [XmlEnum("A/mm2")]
          Amm2,
        /// <summary>
        /// mAcm2 property
        /// </summary>
          [XmlEnum("mA/cm2")]
          mAcm2,
        /// <summary>
        /// mAft2 property
        /// </summary>
          [XmlEnum("mA/ft2")]
          mAft2,
        /// <summary>
        /// uAcm2 property
        /// </summary>
          [XmlEnum("uA/cm2")]
          uAcm2,
        /// <summary>
        /// uAin2 property
        /// </summary>
          [XmlEnum("uA/in2")]
          uAin2
        }
        /// <summary>
        /// This class represents the ElectricFieldStrengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricFieldStrengthUom xsd enumeration.")]
        public enum ElectricFieldStrengthUom 
        {
        /// <summary>
        /// mVft property
        /// </summary>
          [XmlEnum("mV/ft")]
          mVft,
        /// <summary>
        /// mVm property
        /// </summary>
          [XmlEnum("mV/m")]
          mVm,
        /// <summary>
        /// uVft property
        /// </summary>
          [XmlEnum("uV/ft")]
          uVft,
        /// <summary>
        /// uVm property
        /// </summary>
          [XmlEnum("uV/m")]
          uVm,
        /// <summary>
        /// Vm property
        /// </summary>
          [XmlEnum("V/m")]
          Vm
        }
        /// <summary>
        /// This class represents the ElectricPotentialDifferenceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricPotentialDifferenceUom xsd enumeration.")]
        public enum ElectricPotentialDifferenceUom 
        {
        /// <summary>
        /// cV property
        /// </summary>
          cV,
        /// <summary>
        /// dV property
        /// </summary>
          dV,
        /// <summary>
        /// fV property
        /// </summary>
          fV,
        /// <summary>
        /// GV property
        /// </summary>
          GV,
        /// <summary>
        /// kV property
        /// </summary>
          kV,
        /// <summary>
        /// mV property
        /// </summary>
          mV,
        /// <summary>
        /// MV property
        /// </summary>
          MV,
        /// <summary>
        /// nV property
        /// </summary>
          nV,
        /// <summary>
        /// pV property
        /// </summary>
          pV,
        /// <summary>
        /// TV property
        /// </summary>
          TV,
        /// <summary>
        /// uV property
        /// </summary>
          uV,
        /// <summary>
        /// V property
        /// </summary>
          V
        }
        /// <summary>
        /// This class represents the ElectricResistancePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricResistancePerLengthUom xsd enumeration.")]
        public enum ElectricResistancePerLengthUom 
        {
        /// <summary>
        /// ohmm property
        /// </summary>
          [XmlEnum("ohm/m")]
          ohmm,
        /// <summary>
        /// uohmft property
        /// </summary>
          [XmlEnum("uohm/ft")]
          uohmft,
        /// <summary>
        /// uohmm property
        /// </summary>
          [XmlEnum("uohm/m")]
          uohmm
        }
        /// <summary>
        /// This class represents the ElectricResistanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricResistanceUom xsd enumeration.")]
        public enum ElectricResistanceUom 
        {
        /// <summary>
        /// cohm property
        /// </summary>
          cohm,
        /// <summary>
        /// dohm property
        /// </summary>
          dohm,
        /// <summary>
        /// Eohm property
        /// </summary>
          Eohm,
        /// <summary>
        /// fohm property
        /// </summary>
          fohm,
        /// <summary>
        /// Gohm property
        /// </summary>
          Gohm,
        /// <summary>
        /// kohm property
        /// </summary>
          kohm,
        /// <summary>
        /// Mohm property
        /// </summary>
          Mohm,
        /// <summary>
        /// mohm property
        /// </summary>
          mohm,
        /// <summary>
        /// nohm property
        /// </summary>
          nohm,
        /// <summary>
        /// ohm property
        /// </summary>
          ohm,
        /// <summary>
        /// pohm property
        /// </summary>
          pohm,
        /// <summary>
        /// Tohm property
        /// </summary>
          Tohm,
        /// <summary>
        /// uohm property
        /// </summary>
          uohm
        }
        /// <summary>
        /// This class represents the ElectromagneticMomentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectromagneticMomentUom xsd enumeration.")]
        public enum ElectromagneticMomentUom 
        {
        /// <summary>
        /// Am2 property
        /// </summary>
          [XmlEnum("A.m2")]
          Am2
        }
        /// <summary>
        /// This class represents the EnergyLengthPerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyLengthPerAreaUom xsd enumeration.")]
        public enum EnergyLengthPerAreaUom 
        {
        /// <summary>
        /// Jmm2 property
        /// </summary>
          [XmlEnum("J.m/m2")]
          Jmm2,
        /// <summary>
        /// kcalthmcm2 property
        /// </summary>
          [XmlEnum("kcal[th].m/cm2")]
          kcalthmcm2
        }
        /// <summary>
        /// This class represents the EnergyPerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyPerAreaUom xsd enumeration.")]
        public enum EnergyPerAreaUom 
        {
        /// <summary>
        /// ergcm2 property
        /// </summary>
          [XmlEnum("erg/cm2")]
          ergcm2,
        /// <summary>
        /// Jcm2 property
        /// </summary>
          [XmlEnum("J/cm2")]
          Jcm2,
        /// <summary>
        /// Jm2 property
        /// </summary>
          [XmlEnum("J/m2")]
          Jm2,
        /// <summary>
        /// kgfmcm2 property
        /// </summary>
          [XmlEnum("kgf.m/cm2")]
          kgfmcm2,
        /// <summary>
        /// lbfftin2 property
        /// </summary>
          [XmlEnum("lbf.ft/in2")]
          lbfftin2,
        /// <summary>
        /// mJcm2 property
        /// </summary>
          [XmlEnum("mJ/cm2")]
          mJcm2,
        /// <summary>
        /// mJm2 property
        /// </summary>
          [XmlEnum("mJ/m2")]
          mJm2,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N/m")]
          Nm
        }
        /// <summary>
        /// This class represents the EnergyPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyPerLengthUom xsd enumeration.")]
        public enum EnergyPerLengthUom 
        {
        /// <summary>
        /// Jm property
        /// </summary>
          [XmlEnum("J/m")]
          Jm,
        /// <summary>
        /// MJm property
        /// </summary>
          [XmlEnum("MJ/m")]
          MJm
        }
        /// <summary>
        /// This class represents the EnergyPerMassPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyPerMassPerTimeUom xsd enumeration.")]
        public enum EnergyPerMassPerTimeUom 
        {
        /// <summary>
        /// mremh property
        /// </summary>
          [XmlEnum("mrem/h")]
          mremh,
        /// <summary>
        /// mSvh property
        /// </summary>
          [XmlEnum("mSv/h")]
          mSvh,
        /// <summary>
        /// remh property
        /// </summary>
          [XmlEnum("rem/h")]
          remh,
        /// <summary>
        /// Svh property
        /// </summary>
          [XmlEnum("Sv/h")]
          Svh,
        /// <summary>
        /// Svs property
        /// </summary>
          [XmlEnum("Sv/s")]
          Svs
        }
        /// <summary>
        /// This class represents the ForceAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForceAreaUom xsd enumeration.")]
        public enum ForceAreaUom 
        {
        /// <summary>
        /// dynecm2 property
        /// </summary>
          [XmlEnum("dyne.cm2")]
          dynecm2,
        /// <summary>
        /// kgfm2 property
        /// </summary>
          [XmlEnum("kgf.m2")]
          kgfm2,
        /// <summary>
        /// kNm2 property
        /// </summary>
          [XmlEnum("kN.m2")]
          kNm2,
        /// <summary>
        /// lbfin2 property
        /// </summary>
          [XmlEnum("lbf.in2")]
          lbfin2,
        /// <summary>
        /// mNm2 property
        /// </summary>
          [XmlEnum("mN.m2")]
          mNm2,
        /// <summary>
        /// Nm2 property
        /// </summary>
          [XmlEnum("N.m2")]
          Nm2,
        /// <summary>
        /// pdlcm2 property
        /// </summary>
          [XmlEnum("pdl.cm2")]
          pdlcm2,
        /// <summary>
        /// tonfUKft2 property
        /// </summary>
          [XmlEnum("tonf[UK].ft2")]
          tonfUKft2,
        /// <summary>
        /// tonfUSft2 property
        /// </summary>
          [XmlEnum("tonf[US].ft2")]
          tonfUSft2
        }
        /// <summary>
        /// This class represents the ForceLengthPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForceLengthPerLengthUom xsd enumeration.")]
        public enum ForceLengthPerLengthUom 
        {
        /// <summary>
        /// kgfmm property
        /// </summary>
          [XmlEnum("kgf.m/m")]
          kgfmm,
        /// <summary>
        /// lbfftin property
        /// </summary>
          [XmlEnum("lbf.ft/in")]
          lbfftin,
        /// <summary>
        /// lbfinin property
        /// </summary>
          [XmlEnum("lbf.in/in")]
          lbfinin,
        /// <summary>
        /// Nmm property
        /// </summary>
          [XmlEnum("N.m/m")]
          Nmm,
        /// <summary>
        /// tonfUSmift property
        /// </summary>
          [XmlEnum("tonf[US].mi/ft")]
          tonfUSmift
        }
        /// <summary>
        /// This class represents the ForcePerForceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForcePerForceUom xsd enumeration.")]
        public enum ForcePerForceUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// kgfkgf property
        /// </summary>
          [XmlEnum("kgf/kgf")]
          kgfkgf,
        /// <summary>
        /// lbflbf property
        /// </summary>
          [XmlEnum("lbf/lbf")]
          lbflbf,
        /// <summary>
        /// NN property
        /// </summary>
          [XmlEnum("N/N")]
          NN
        }
        /// <summary>
        /// This class represents the ForcePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForcePerVolumeUom xsd enumeration.")]
        public enum ForcePerVolumeUom 
        {
        /// <summary>
        /// Item0001psift property
        /// </summary>
          [XmlEnum("0.001 psi/ft")]
          Item0001psift,
        /// <summary>
        /// Item001psift property
        /// </summary>
          [XmlEnum("0.01 psi/ft")]
          Item001psift,
        /// <summary>
        /// atmft property
        /// </summary>
          [XmlEnum("atm/ft")]
          atmft,
        /// <summary>
        /// atmhm property
        /// </summary>
          [XmlEnum("atm/hm")]
          atmhm,
        /// <summary>
        /// atmm property
        /// </summary>
          [XmlEnum("atm/m")]
          atmm,
        /// <summary>
        /// barkm property
        /// </summary>
          [XmlEnum("bar/km")]
          barkm,
        /// <summary>
        /// barm property
        /// </summary>
          [XmlEnum("bar/m")]
          barm,
        /// <summary>
        /// GPacm property
        /// </summary>
          [XmlEnum("GPa/cm")]
          GPacm,
        /// <summary>
        /// kPahm property
        /// </summary>
          [XmlEnum("kPa/hm")]
          kPahm,
        /// <summary>
        /// kPam property
        /// </summary>
          [XmlEnum("kPa/m")]
          kPam,
        /// <summary>
        /// lbfft3 property
        /// </summary>
          [XmlEnum("lbf/ft3")]
          lbfft3,
        /// <summary>
        /// lbfgalUS property
        /// </summary>
          [XmlEnum("lbf/gal[US]")]
          lbfgalUS,
        /// <summary>
        /// MPam property
        /// </summary>
          [XmlEnum("MPa/m")]
          MPam,
        /// <summary>
        /// Nm3 property
        /// </summary>
          [XmlEnum("N/m3")]
          Nm3,
        /// <summary>
        /// Pam property
        /// </summary>
          [XmlEnum("Pa/m")]
          Pam,
        /// <summary>
        /// psift property
        /// </summary>
          [XmlEnum("psi/ft")]
          psift,
        /// <summary>
        /// psim property
        /// </summary>
          [XmlEnum("psi/m")]
          psim
        }
        /// <summary>
        /// This class represents the ForceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForceUom xsd enumeration.")]
        public enum ForceUom 
        {
        /// <summary>
        /// Item10kN property
        /// </summary>
          [XmlEnum("10 kN")]
          Item10kN,
        /// <summary>
        /// cN property
        /// </summary>
          cN,
        /// <summary>
        /// daN property
        /// </summary>
          daN,
        /// <summary>
        /// dN property
        /// </summary>
          dN,
        /// <summary>
        /// dyne property
        /// </summary>
          dyne,
        /// <summary>
        /// EN property
        /// </summary>
          EN,
        /// <summary>
        /// fN property
        /// </summary>
          fN,
        /// <summary>
        /// gf property
        /// </summary>
          gf,
        /// <summary>
        /// GN property
        /// </summary>
          GN,
        /// <summary>
        /// hN property
        /// </summary>
          hN,
        /// <summary>
        /// kdyne property
        /// </summary>
          kdyne,
        /// <summary>
        /// kgf property
        /// </summary>
          kgf,
        /// <summary>
        /// klbf property
        /// </summary>
          klbf,
        /// <summary>
        /// kN property
        /// </summary>
          kN,
        /// <summary>
        /// lbf property
        /// </summary>
          lbf,
        /// <summary>
        /// Mgf property
        /// </summary>
          Mgf,
        /// <summary>
        /// mN property
        /// </summary>
          mN,
        /// <summary>
        /// MN property
        /// </summary>
          MN,
        /// <summary>
        /// N property
        /// </summary>
          N,
        /// <summary>
        /// nN property
        /// </summary>
          nN,
        /// <summary>
        /// ozf property
        /// </summary>
          ozf,
        /// <summary>
        /// pdl property
        /// </summary>
          pdl,
        /// <summary>
        /// pN property
        /// </summary>
          pN,
        /// <summary>
        /// TN property
        /// </summary>
          TN,
        /// <summary>
        /// tonfUK property
        /// </summary>
          [XmlEnum("tonf[UK]")]
          tonfUK,
        /// <summary>
        /// tonfUS property
        /// </summary>
          [XmlEnum("tonf[US]")]
          tonfUS,
        /// <summary>
        /// uN property
        /// </summary>
          uN
        }
        /// <summary>
        /// This class represents the FrequencyIntervalUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the FrequencyIntervalUom xsd enumeration.")]
        public enum FrequencyIntervalUom 
        {
        /// <summary>
        /// O property
        /// </summary>
          O
        }
        /// <summary>
        /// This class represents the HeatCapacityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the HeatCapacityUom xsd enumeration.")]
        public enum HeatCapacityUom 
        {
        /// <summary>
        /// JdeltaK property
        /// </summary>
          [XmlEnum("J/deltaK")]
          JdeltaK
        }
        /// <summary>
        /// This class represents the HeatFlowRateUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the HeatFlowRateUom xsd enumeration.")]
        public enum HeatFlowRateUom 
        {
        /// <summary>
        /// Item1E6BtuITh property
        /// </summary>
          [XmlEnum("1E6 Btu[IT]/h")]
          Item1E6BtuITh,
        /// <summary>
        /// BtuITh property
        /// </summary>
          [XmlEnum("Btu[IT]/h")]
          BtuITh,
        /// <summary>
        /// BtuITmin property
        /// </summary>
          [XmlEnum("Btu[IT]/min")]
          BtuITmin,
        /// <summary>
        /// BtuITs property
        /// </summary>
          [XmlEnum("Btu[IT]/s")]
          BtuITs,
        /// <summary>
        /// calthh property
        /// </summary>
          [XmlEnum("cal[th]/h")]
          calthh,
        /// <summary>
        /// EJa property
        /// </summary>
          [XmlEnum("EJ/a")]
          EJa,
        /// <summary>
        /// erga property
        /// </summary>
          [XmlEnum("erg/a")]
          erga,
        /// <summary>
        /// GW property
        /// </summary>
          GW,
        /// <summary>
        /// Js property
        /// </summary>
          [XmlEnum("J/s")]
          Js,
        /// <summary>
        /// kcalthh property
        /// </summary>
          [XmlEnum("kcal[th]/h")]
          kcalthh,
        /// <summary>
        /// kW property
        /// </summary>
          kW,
        /// <summary>
        /// lbfftmin property
        /// </summary>
          [XmlEnum("lbf.ft/min")]
          lbfftmin,
        /// <summary>
        /// lbffts property
        /// </summary>
          [XmlEnum("lbf.ft/s")]
          lbffts,
        /// <summary>
        /// MJa property
        /// </summary>
          [XmlEnum("MJ/a")]
          MJa,
        /// <summary>
        /// mW property
        /// </summary>
          mW,
        /// <summary>
        /// MW property
        /// </summary>
          MW,
        /// <summary>
        /// nW property
        /// </summary>
          nW,
        /// <summary>
        /// quada property
        /// </summary>
          [XmlEnum("quad/a")]
          quada,
        /// <summary>
        /// TJa property
        /// </summary>
          [XmlEnum("TJ/a")]
          TJa,
        /// <summary>
        /// TW property
        /// </summary>
          TW,
        /// <summary>
        /// ucalths property
        /// </summary>
          [XmlEnum("ucal[th]/s")]
          ucalths,
        /// <summary>
        /// uW property
        /// </summary>
          uW,
        /// <summary>
        /// W property
        /// </summary>
          W
        }
        /// <summary>
        /// This class represents the HeatTransferCoefficientUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the HeatTransferCoefficientUom xsd enumeration.")]
        public enum HeatTransferCoefficientUom 
        {
        /// <summary>
        /// BtuIThft2deltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2.deltaF)")]
          BtuIThft2deltaF,
        /// <summary>
        /// BtuIThft2deltaR property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2.deltaR)")]
          BtuIThft2deltaR,
        /// <summary>
        /// BtuIThm2deltaC property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.m2.deltaC)")]
          BtuIThm2deltaC,
        /// <summary>
        /// BtuITsft2deltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft2.deltaF)")]
          BtuITsft2deltaF,
        /// <summary>
        /// calthhcm2deltaC property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm2.deltaC)")]
          calthhcm2deltaC,
        /// <summary>
        /// calthscm2deltaC property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm2.deltaC)")]
          calthscm2deltaC,
        /// <summary>
        /// Jsm2deltaC property
        /// </summary>
          [XmlEnum("J/(s.m2.deltaC)")]
          Jsm2deltaC,
        /// <summary>
        /// kcalthhm2deltaC property
        /// </summary>
          [XmlEnum("kcal[th]/(h.m2.deltaC)")]
          kcalthhm2deltaC,
        /// <summary>
        /// kJhm2deltaK property
        /// </summary>
          [XmlEnum("kJ/(h.m2.deltaK)")]
          kJhm2deltaK,
        /// <summary>
        /// kWm2deltaK property
        /// </summary>
          [XmlEnum("kW/(m2.deltaK)")]
          kWm2deltaK,
        /// <summary>
        /// Wm2deltaK property
        /// </summary>
          [XmlEnum("W/(m2.deltaK)")]
          Wm2deltaK
        }
        /// <summary>
        /// This class represents the IlluminanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the IlluminanceUom xsd enumeration.")]
        public enum IlluminanceUom 
        {
        /// <summary>
        /// footcandle property
        /// </summary>
          footcandle,
        /// <summary>
        /// klx property
        /// </summary>
          klx,
        /// <summary>
        /// lmm2 property
        /// </summary>
          [XmlEnum("lm/m2")]
          lmm2,
        /// <summary>
        /// lx property
        /// </summary>
          lx
        }
        /// <summary>
        /// This class represents the InductanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the InductanceUom xsd enumeration.")]
        public enum InductanceUom 
        {
        /// <summary>
        /// cH property
        /// </summary>
          cH,
        /// <summary>
        /// dH property
        /// </summary>
          dH,
        /// <summary>
        /// EH property
        /// </summary>
          EH,
        /// <summary>
        /// fH property
        /// </summary>
          fH,
        /// <summary>
        /// GH property
        /// </summary>
          GH,
        /// <summary>
        /// H property
        /// </summary>
          H,
        /// <summary>
        /// kH property
        /// </summary>
          kH,
        /// <summary>
        /// MH property
        /// </summary>
          MH,
        /// <summary>
        /// mH property
        /// </summary>
          mH,
        /// <summary>
        /// nH property
        /// </summary>
          nH,
        /// <summary>
        /// TH property
        /// </summary>
          TH,
        /// <summary>
        /// uH property
        /// </summary>
          uH
        }
        /// <summary>
        /// This class represents the KinematicViscosityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the KinematicViscosityUom xsd enumeration.")]
        public enum KinematicViscosityUom 
        {
        /// <summary>
        /// cm2s property
        /// </summary>
          [XmlEnum("cm2/s")]
          cm2s,
        /// <summary>
        /// cSt property
        /// </summary>
          cSt,
        /// <summary>
        /// ft2h property
        /// </summary>
          [XmlEnum("ft2/h")]
          ft2h,
        /// <summary>
        /// ft2s property
        /// </summary>
          [XmlEnum("ft2/s")]
          ft2s,
        /// <summary>
        /// in2s property
        /// </summary>
          [XmlEnum("in2/s")]
          in2s,
        /// <summary>
        /// m2h property
        /// </summary>
          [XmlEnum("m2/h")]
          m2h,
        /// <summary>
        /// m2s property
        /// </summary>
          [XmlEnum("m2/s")]
          m2s,
        /// <summary>
        /// mm2s property
        /// </summary>
          [XmlEnum("mm2/s")]
          mm2s,
        /// <summary>
        /// Pasm3kg property
        /// </summary>
          [XmlEnum("Pa.s.m3/kg")]
          Pasm3kg,
        /// <summary>
        /// St property
        /// </summary>
          St
        }
        /// <summary>
        /// This class represents the LengthPerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerMassUom xsd enumeration.")]
        public enum LengthPerMassUom 
        {
        /// <summary>
        /// ftlbm property
        /// </summary>
          [XmlEnum("ft/lbm")]
          ftlbm,
        /// <summary>
        /// mkg property
        /// </summary>
          [XmlEnum("m/kg")]
          mkg
        }
        /// <summary>
        /// This class represents the LengthPerPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerPressureUom xsd enumeration.")]
        public enum LengthPerPressureUom 
        {
        /// <summary>
        /// ftpsi property
        /// </summary>
          [XmlEnum("ft/psi")]
          ftpsi,
        /// <summary>
        /// mkPa property
        /// </summary>
          [XmlEnum("m/kPa")]
          mkPa,
        /// <summary>
        /// mPa property
        /// </summary>
          [XmlEnum("m/Pa")]
          mPa
        }
        /// <summary>
        /// This class represents the LengthPerTemperatureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerTemperatureUom xsd enumeration.")]
        public enum LengthPerTemperatureUom 
        {
        /// <summary>
        /// ftdeltaF property
        /// </summary>
          [XmlEnum("ft/deltaF")]
          ftdeltaF,
        /// <summary>
        /// mdeltaK property
        /// </summary>
          [XmlEnum("m/deltaK")]
          mdeltaK
        }
        /// <summary>
        /// This class represents the LengthPerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerVolumeUom xsd enumeration.")]
        public enum LengthPerVolumeUom 
        {
        /// <summary>
        /// ftbbl property
        /// </summary>
          [XmlEnum("ft/bbl")]
          ftbbl,
        /// <summary>
        /// ftft3 property
        /// </summary>
          [XmlEnum("ft/ft3")]
          ftft3,
        /// <summary>
        /// ftgalUS property
        /// </summary>
          [XmlEnum("ft/gal[US]")]
          ftgalUS,
        /// <summary>
        /// kmdm3 property
        /// </summary>
          [XmlEnum("km/dm3")]
          kmdm3,
        /// <summary>
        /// kmL property
        /// </summary>
          [XmlEnum("km/L")]
          kmL,
        /// <summary>
        /// mm3 property
        /// </summary>
          [XmlEnum("m/m3")]
          mm3,
        /// <summary>
        /// migalUK property
        /// </summary>
          [XmlEnum("mi/gal[UK]")]
          migalUK,
        /// <summary>
        /// migalUS property
        /// </summary>
          [XmlEnum("mi/gal[US]")]
          migalUS
        }
        /// <summary>
        /// This class represents the LightExposureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LightExposureUom xsd enumeration.")]
        public enum LightExposureUom 
        {
        /// <summary>
        /// footcandles property
        /// </summary>
          [XmlEnum("footcandle.s")]
          footcandles,
        /// <summary>
        /// lxs property
        /// </summary>
          [XmlEnum("lx.s")]
          lxs
        }
        /// <summary>
        /// This class represents the LinearAccelerationUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LinearAccelerationUom xsd enumeration.")]
        public enum LinearAccelerationUom 
        {
        /// <summary>
        /// cms2 property
        /// </summary>
          [XmlEnum("cm/s2")]
          cms2,
        /// <summary>
        /// fts2 property
        /// </summary>
          [XmlEnum("ft/s2")]
          fts2,
        /// <summary>
        /// Gal property
        /// </summary>
          Gal,
        /// <summary>
        /// gn property
        /// </summary>
          gn,
        /// <summary>
        /// ins2 property
        /// </summary>
          [XmlEnum("in/s2")]
          ins2,
        /// <summary>
        /// ms2 property
        /// </summary>
          [XmlEnum("m/s2")]
          ms2,
        /// <summary>
        /// mGal property
        /// </summary>
          mGal,
        /// <summary>
        /// mgn property
        /// </summary>
          mgn
        }
        /// <summary>
        /// This class represents the LinearThermalExpansionUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LinearThermalExpansionUom xsd enumeration.")]
        public enum LinearThermalExpansionUom 
        {
        /// <summary>
        /// Item1deltaK property
        /// </summary>
          [XmlEnum("1/deltaK")]
          Item1deltaK,
        /// <summary>
        /// inindeltaF property
        /// </summary>
          [XmlEnum("in/(in.deltaF)")]
          inindeltaF,
        /// <summary>
        /// mmdeltaK property
        /// </summary>
          [XmlEnum("m/(m.deltaK)")]
          mmdeltaK,
        /// <summary>
        /// mmmmdeltaK property
        /// </summary>
          [XmlEnum("mm/(mm.deltaK)")]
          mmmmdeltaK
        }
        /// <summary>
        /// This class represents the LogarithmicPowerRatioUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LogarithmicPowerRatioUom xsd enumeration.")]
        public enum LogarithmicPowerRatioUom 
        {
        /// <summary>
        /// B property
        /// </summary>
          B,
        /// <summary>
        /// dB property
        /// </summary>
          dB
        }
        /// <summary>
        /// This class represents the LuminanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LuminanceUom xsd enumeration.")]
        public enum LuminanceUom 
        {
        /// <summary>
        /// cdm2 property
        /// </summary>
          [XmlEnum("cd/m2")]
          cdm2
        }
        /// <summary>
        /// This class represents the LuminousEfficacyUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LuminousEfficacyUom xsd enumeration.")]
        public enum LuminousEfficacyUom 
        {
        /// <summary>
        /// lmW property
        /// </summary>
          [XmlEnum("lm/W")]
          lmW
        }
        /// <summary>
        /// This class represents the LuminousFluxUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LuminousFluxUom xsd enumeration.")]
        public enum LuminousFluxUom 
        {
        /// <summary>
        /// lm property
        /// </summary>
          lm
        }
        /// <summary>
        /// This class represents the LuminousIntensityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LuminousIntensityUom xsd enumeration.")]
        public enum LuminousIntensityUom 
        {
        /// <summary>
        /// cd property
        /// </summary>
          cd,
        /// <summary>
        /// kcd property
        /// </summary>
          kcd
        }
        /// <summary>
        /// This class represents the MagneticDipoleMomentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticDipoleMomentUom xsd enumeration.")]
        public enum MagneticDipoleMomentUom 
        {
        /// <summary>
        /// Wbm property
        /// </summary>
          [XmlEnum("Wb.m")]
          Wbm
        }
        /// <summary>
        /// This class represents the MagneticFieldStrengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticFieldStrengthUom xsd enumeration.")]
        public enum MagneticFieldStrengthUom 
        {
        /// <summary>
        /// Am property
        /// </summary>
          [XmlEnum("A/m")]
          Am,
        /// <summary>
        /// Amm property
        /// </summary>
          [XmlEnum("A/mm")]
          Amm,
        /// <summary>
        /// Oe property
        /// </summary>
          Oe
        }
        /// <summary>
        /// This class represents the MagneticFluxDensityPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticFluxDensityPerLengthUom xsd enumeration.")]
        public enum MagneticFluxDensityPerLengthUom 
        {
        /// <summary>
        /// gausscm property
        /// </summary>
          [XmlEnum("gauss/cm")]
          gausscm,
        /// <summary>
        /// mTdm property
        /// </summary>
          [XmlEnum("mT/dm")]
          mTdm,
        /// <summary>
        /// Tm property
        /// </summary>
          [XmlEnum("T/m")]
          Tm
        }
        /// <summary>
        /// This class represents the MagneticFluxDensityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticFluxDensityUom xsd enumeration.")]
        public enum MagneticFluxDensityUom 
        {
        /// <summary>
        /// cgauss property
        /// </summary>
          cgauss,
        /// <summary>
        /// cT property
        /// </summary>
          cT,
        /// <summary>
        /// dgauss property
        /// </summary>
          dgauss,
        /// <summary>
        /// dT property
        /// </summary>
          dT,
        /// <summary>
        /// Egauss property
        /// </summary>
          Egauss,
        /// <summary>
        /// ET property
        /// </summary>
          ET,
        /// <summary>
        /// fgauss property
        /// </summary>
          fgauss,
        /// <summary>
        /// fT property
        /// </summary>
          fT,
        /// <summary>
        /// gauss property
        /// </summary>
          gauss,
        /// <summary>
        /// Ggauss property
        /// </summary>
          Ggauss,
        /// <summary>
        /// GT property
        /// </summary>
          GT,
        /// <summary>
        /// kgauss property
        /// </summary>
          kgauss,
        /// <summary>
        /// kT property
        /// </summary>
          kT,
        /// <summary>
        /// mgauss property
        /// </summary>
          mgauss,
        /// <summary>
        /// Mgauss property
        /// </summary>
          Mgauss,
        /// <summary>
        /// mT property
        /// </summary>
          mT,
        /// <summary>
        /// ngauss property
        /// </summary>
          ngauss,
        /// <summary>
        /// nT property
        /// </summary>
          nT,
        /// <summary>
        /// pgauss property
        /// </summary>
          pgauss,
        /// <summary>
        /// pT property
        /// </summary>
          pT,
        /// <summary>
        /// T property
        /// </summary>
          T,
        /// <summary>
        /// Tgauss property
        /// </summary>
          Tgauss,
        /// <summary>
        /// TT property
        /// </summary>
          TT,
        /// <summary>
        /// ugauss property
        /// </summary>
          ugauss,
        /// <summary>
        /// uT property
        /// </summary>
          uT
        }
        /// <summary>
        /// This class represents the MagneticFluxUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticFluxUom xsd enumeration.")]
        public enum MagneticFluxUom 
        {
        /// <summary>
        /// cWb property
        /// </summary>
          cWb,
        /// <summary>
        /// dWb property
        /// </summary>
          dWb,
        /// <summary>
        /// EWb property
        /// </summary>
          EWb,
        /// <summary>
        /// fWb property
        /// </summary>
          fWb,
        /// <summary>
        /// GWb property
        /// </summary>
          GWb,
        /// <summary>
        /// kWb property
        /// </summary>
          kWb,
        /// <summary>
        /// mWb property
        /// </summary>
          mWb,
        /// <summary>
        /// MWb property
        /// </summary>
          MWb,
        /// <summary>
        /// nWb property
        /// </summary>
          nWb,
        /// <summary>
        /// pWb property
        /// </summary>
          pWb,
        /// <summary>
        /// TWb property
        /// </summary>
          TWb,
        /// <summary>
        /// uWb property
        /// </summary>
          uWb,
        /// <summary>
        /// Wb property
        /// </summary>
          Wb
        }
        /// <summary>
        /// This class represents the MagneticPermeabilityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticPermeabilityUom xsd enumeration.")]
        public enum MagneticPermeabilityUom 
        {
        /// <summary>
        /// Hm property
        /// </summary>
          [XmlEnum("H/m")]
          Hm,
        /// <summary>
        /// uHm property
        /// </summary>
          [XmlEnum("uH/m")]
          uHm
        }
        /// <summary>
        /// This class represents the MagneticVectorPotentialUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticVectorPotentialUom xsd enumeration.")]
        public enum MagneticVectorPotentialUom 
        {
        /// <summary>
        /// Wbm property
        /// </summary>
          [XmlEnum("Wb/m")]
          Wbm,
        /// <summary>
        /// Wbmm property
        /// </summary>
          [XmlEnum("Wb/mm")]
          Wbmm
        }
        /// <summary>
        /// This class represents the MassLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassLengthUom xsd enumeration.")]
        public enum MassLengthUom 
        {
        /// <summary>
        /// kgm property
        /// </summary>
          [XmlEnum("kg.m")]
          kgm,
        /// <summary>
        /// lbmft property
        /// </summary>
          [XmlEnum("lbm.ft")]
          lbmft
        }
        /// <summary>
        /// This class represents the MassPerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerAreaUom xsd enumeration.")]
        public enum MassPerAreaUom 
        {
        /// <summary>
        /// Item001lbmft2 property
        /// </summary>
          [XmlEnum("0.01 lbm/ft2")]
          Item001lbmft2,
        /// <summary>
        /// kgm2 property
        /// </summary>
          [XmlEnum("kg/m2")]
          kgm2,
        /// <summary>
        /// lbmft2 property
        /// </summary>
          [XmlEnum("lbm/ft2")]
          lbmft2,
        /// <summary>
        /// Mgm2 property
        /// </summary>
          [XmlEnum("Mg/m2")]
          Mgm2,
        /// <summary>
        /// tonUSft2 property
        /// </summary>
          [XmlEnum("ton[US]/ft2")]
          tonUSft2
        }
        /// <summary>
        /// This class represents the MassPerEnergyUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerEnergyUom xsd enumeration.")]
        public enum MassPerEnergyUom 
        {
        /// <summary>
        /// kgkWh property
        /// </summary>
          [XmlEnum("kg/(kW.h)")]
          kgkWh,
        /// <summary>
        /// kgJ property
        /// </summary>
          [XmlEnum("kg/J")]
          kgJ,
        /// <summary>
        /// kgMJ property
        /// </summary>
          [XmlEnum("kg/MJ")]
          kgMJ,
        /// <summary>
        /// lbmhph property
        /// </summary>
          [XmlEnum("lbm/(hp.h)")]
          lbmhph,
        /// <summary>
        /// mgJ property
        /// </summary>
          [XmlEnum("mg/J")]
          mgJ
        }
        /// <summary>
        /// This class represents the MassPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerLengthUom xsd enumeration.")]
        public enum MassPerLengthUom 
        {
        /// <summary>
        /// kgmcm2 property
        /// </summary>
          [XmlEnum("kg.m/cm2")]
          kgmcm2,
        /// <summary>
        /// kgm property
        /// </summary>
          [XmlEnum("kg/m")]
          kgm,
        /// <summary>
        /// klbmin property
        /// </summary>
          [XmlEnum("klbm/in")]
          klbmin,
        /// <summary>
        /// lbmft property
        /// </summary>
          [XmlEnum("lbm/ft")]
          lbmft,
        /// <summary>
        /// Mgin property
        /// </summary>
          [XmlEnum("Mg/in")]
          Mgin
        }
        /// <summary>
        /// This class represents the MassPerTimePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerTimePerAreaUom xsd enumeration.")]
        public enum MassPerTimePerAreaUom 
        {
        /// <summary>
        /// gftcm3s property
        /// </summary>
          [XmlEnum("g.ft/(cm3.s)")]
          gftcm3s,
        /// <summary>
        /// gmcm3s property
        /// </summary>
          [XmlEnum("g.m/(cm3.s)")]
          gmcm3s,
        /// <summary>
        /// kgm2s property
        /// </summary>
          [XmlEnum("kg/(m2.s)")]
          kgm2s,
        /// <summary>
        /// kPasm property
        /// </summary>
          [XmlEnum("kPa.s/m")]
          kPasm,
        /// <summary>
        /// lbmft2h property
        /// </summary>
          [XmlEnum("lbm/(ft2.h)")]
          lbmft2h,
        /// <summary>
        /// lbmft2s property
        /// </summary>
          [XmlEnum("lbm/(ft2.s)")]
          lbmft2s,
        /// <summary>
        /// MPasm property
        /// </summary>
          [XmlEnum("MPa.s/m")]
          MPasm
        }
        /// <summary>
        /// This class represents the MassPerTimePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerTimePerLengthUom xsd enumeration.")]
        public enum MassPerTimePerLengthUom 
        {
        /// <summary>
        /// kgms property
        /// </summary>
          [XmlEnum("kg/(m.s)")]
          kgms,
        /// <summary>
        /// lbmfth property
        /// </summary>
          [XmlEnum("lbm/(ft.h)")]
          lbmfth,
        /// <summary>
        /// lbmfts property
        /// </summary>
          [XmlEnum("lbm/(ft.s)")]
          lbmfts,
        /// <summary>
        /// Pas property
        /// </summary>
          [XmlEnum("Pa.s")]
          Pas
        }
        /// <summary>
        /// This class represents the MassPerVolumePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerVolumePerLengthUom xsd enumeration.")]
        public enum MassPerVolumePerLengthUom 
        {
        /// <summary>
        /// gcm4 property
        /// </summary>
          [XmlEnum("g/cm4")]
          gcm4,
        /// <summary>
        /// kgdm4 property
        /// </summary>
          [XmlEnum("kg/dm4")]
          kgdm4,
        /// <summary>
        /// kgm4 property
        /// </summary>
          [XmlEnum("kg/m4")]
          kgm4,
        /// <summary>
        /// lbmgalUKft property
        /// </summary>
          [XmlEnum("lbm/(gal[UK].ft)")]
          lbmgalUKft,
        /// <summary>
        /// lbmgalUSft property
        /// </summary>
          [XmlEnum("lbm/(gal[US].ft)")]
          lbmgalUSft,
        /// <summary>
        /// lbmft4 property
        /// </summary>
          [XmlEnum("lbm/ft4")]
          lbmft4,
        /// <summary>
        /// Pas2m3 property
        /// </summary>
          [XmlEnum("Pa.s2/m3")]
          Pas2m3
        }
        /// <summary>
        /// This class represents the MassPerVolumePerPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerVolumePerPressureUom xsd enumeration.")]
        public enum MassPerVolumePerPressureUom 
        {
        /// <summary>
        /// kgm3kPa property
        /// </summary>
          [XmlEnum("kg/m3.kPa")]
          kgm3kPa,
        /// <summary>
        /// lbftpsi property
        /// </summary>
          [XmlEnum("lb/ft.psi")]
          lbftpsi
        }
        /// <summary>
        /// This class represents the MassPerVolumePerTemperatureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerVolumePerTemperatureUom xsd enumeration.")]
        public enum MassPerVolumePerTemperatureUom 
        {
        /// <summary>
        /// kgm3degC property
        /// </summary>
          [XmlEnum("kg/m3.degC")]
          kgm3degC,
        /// <summary>
        /// kgm3K property
        /// </summary>
          [XmlEnum("kg/m3.K")]
          kgm3K,
        /// <summary>
        /// lbftdegF property
        /// </summary>
          [XmlEnum("lb/ft.degF")]
          lbftdegF
        }
        /// <summary>
        /// This class represents the MassPerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerVolumeUom xsd enumeration.")]
        public enum MassPerVolumeUom 
        {
        /// <summary>
        /// Item0001lbmbbl property
        /// </summary>
          [XmlEnum("0.001 lbm/bbl")]
          Item0001lbmbbl,
        /// <summary>
        /// Item0001lbmgalUK property
        /// </summary>
          [XmlEnum("0.001 lbm/gal[UK]")]
          Item0001lbmgalUK,
        /// <summary>
        /// Item0001lbmgalUS property
        /// </summary>
          [XmlEnum("0.001 lbm/gal[US]")]
          Item0001lbmgalUS,
        /// <summary>
        /// Item001grainft3 property
        /// </summary>
          [XmlEnum("0.01 grain/ft3")]
          Item001grainft3,
        /// <summary>
        /// Item01lbmbbl property
        /// </summary>
          [XmlEnum("0.1 lbm/bbl")]
          Item01lbmbbl,
        /// <summary>
        /// Item10Mgm3 property
        /// </summary>
          [XmlEnum("10 Mg/m3")]
          Item10Mgm3,
        /// <summary>
        /// gcm3 property
        /// </summary>
          [XmlEnum("g/cm3")]
          gcm3,
        /// <summary>
        /// gdm3 property
        /// </summary>
          [XmlEnum("g/dm3")]
          gdm3,
        /// <summary>
        /// ggalUK property
        /// </summary>
          [XmlEnum("g/gal[UK]")]
          ggalUK,
        /// <summary>
        /// ggalUS property
        /// </summary>
          [XmlEnum("g/gal[US]")]
          ggalUS,
        /// <summary>
        /// gL property
        /// </summary>
          [XmlEnum("g/L")]
          gL,
        /// <summary>
        /// gm3 property
        /// </summary>
          [XmlEnum("g/m3")]
          gm3,
        /// <summary>
        /// grainft3 property
        /// </summary>
          [XmlEnum("grain/ft3")]
          grainft3,
        /// <summary>
        /// graingalUS property
        /// </summary>
          [XmlEnum("grain/gal[US]")]
          graingalUS,
        /// <summary>
        /// kgdm3 property
        /// </summary>
          [XmlEnum("kg/dm3")]
          kgdm3,
        /// <summary>
        /// kgL property
        /// </summary>
          [XmlEnum("kg/L")]
          kgL,
        /// <summary>
        /// kgm3 property
        /// </summary>
          [XmlEnum("kg/m3")]
          kgm3,
        /// <summary>
        /// lbmbbl property
        /// </summary>
          [XmlEnum("lbm/bbl")]
          lbmbbl,
        /// <summary>
        /// lbmft3 property
        /// </summary>
          [XmlEnum("lbm/ft3")]
          lbmft3,
        /// <summary>
        /// lbmgalUK property
        /// </summary>
          [XmlEnum("lbm/gal[UK]")]
          lbmgalUK,
        /// <summary>
        /// lbmgalUS property
        /// </summary>
          [XmlEnum("lbm/gal[US]")]
          lbmgalUS,
        /// <summary>
        /// lbmin3 property
        /// </summary>
          [XmlEnum("lbm/in3")]
          lbmin3,
        /// <summary>
        /// mgdm3 property
        /// </summary>
          [XmlEnum("mg/dm3")]
          mgdm3,
        /// <summary>
        /// mggalUS property
        /// </summary>
          [XmlEnum("mg/gal[US]")]
          mggalUS,
        /// <summary>
        /// mgL property
        /// </summary>
          [XmlEnum("mg/L")]
          mgL,
        /// <summary>
        /// mgm3 property
        /// </summary>
          [XmlEnum("mg/m3")]
          mgm3,
        /// <summary>
        /// Mgm3 property
        /// </summary>
          [XmlEnum("Mg/m3")]
          Mgm3,
        /// <summary>
        /// tm3 property
        /// </summary>
          [XmlEnum("t/m3")]
          tm3,
        /// <summary>
        /// ugcm3 property
        /// </summary>
          [XmlEnum("ug/cm3")]
          ugcm3
        }
        /// <summary>
        /// This class represents the MobilityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MobilityUom xsd enumeration.")]
        public enum MobilityUom 
        {
        /// <summary>
        /// DPas property
        /// </summary>
          [XmlEnum("D/(Pa.s)")]
          DPas,
        /// <summary>
        /// DcP property
        /// </summary>
          [XmlEnum("D/cP")]
          DcP,
        /// <summary>
        /// mDft2lbfs property
        /// </summary>
          [XmlEnum("mD.ft2/(lbf.s)")]
          mDft2lbfs,
        /// <summary>
        /// mDin2lbfs property
        /// </summary>
          [XmlEnum("mD.in2/(lbf.s)")]
          mDin2lbfs,
        /// <summary>
        /// mDPas property
        /// </summary>
          [XmlEnum("mD/(Pa.s)")]
          mDPas,
        /// <summary>
        /// mDcP property
        /// </summary>
          [XmlEnum("mD/cP")]
          mDcP,
        /// <summary>
        /// TDAPIPas property
        /// </summary>
          [XmlEnum("TD[API]/(Pa.s)")]
          TDAPIPas
        }
        /// <summary>
        /// This class represents the MolarHeatCapacityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MolarHeatCapacityUom xsd enumeration.")]
        public enum MolarHeatCapacityUom 
        {
        /// <summary>
        /// BtuITlbmoldeltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbmol.deltaF)")]
          BtuITlbmoldeltaF,
        /// <summary>
        /// calthmoldeltaC property
        /// </summary>
          [XmlEnum("cal[th]/(mol.deltaC)")]
          calthmoldeltaC,
        /// <summary>
        /// JmoldeltaK property
        /// </summary>
          [XmlEnum("J/(mol.deltaK)")]
          JmoldeltaK,
        /// <summary>
        /// kJkmoldeltaK property
        /// </summary>
          [XmlEnum("kJ/(kmol.deltaK)")]
          kJkmoldeltaK
        }
        /// <summary>
        /// This class represents the MomentOfForceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MomentOfForceUom xsd enumeration.")]
        public enum MomentOfForceUom 
        {
        /// <summary>
        /// Item1000lbfft property
        /// </summary>
          [XmlEnum("1000 lbf.ft")]
          Item1000lbfft,
        /// <summary>
        /// daNm property
        /// </summary>
          [XmlEnum("daN.m")]
          daNm,
        /// <summary>
        /// dNm property
        /// </summary>
          [XmlEnum("dN.m")]
          dNm,
        /// <summary>
        /// J property
        /// </summary>
          J,
        /// <summary>
        /// kgfm property
        /// </summary>
          [XmlEnum("kgf.m")]
          kgfm,
        /// <summary>
        /// kNm property
        /// </summary>
          [XmlEnum("kN.m")]
          kNm,
        /// <summary>
        /// lbfft property
        /// </summary>
          [XmlEnum("lbf.ft")]
          lbfft,
        /// <summary>
        /// lbfin property
        /// </summary>
          [XmlEnum("lbf.in")]
          lbfin,
        /// <summary>
        /// lbmft2s2 property
        /// </summary>
          [XmlEnum("lbm.ft2/s2")]
          lbmft2s2,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N.m")]
          Nm,
        /// <summary>
        /// pdlft property
        /// </summary>
          [XmlEnum("pdl.ft")]
          pdlft,
        /// <summary>
        /// tonfUSft property
        /// </summary>
          [XmlEnum("tonf[US].ft")]
          tonfUSft,
        /// <summary>
        /// tonfUSmi property
        /// </summary>
          [XmlEnum("tonf[US].mi")]
          tonfUSmi
        }
        /// <summary>
        /// This class represents the MomentOfInertiaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MomentOfInertiaUom xsd enumeration.")]
        public enum MomentOfInertiaUom 
        {
        /// <summary>
        /// kgm2 property
        /// </summary>
          [XmlEnum("kg.m2")]
          kgm2,
        /// <summary>
        /// lbmft2 property
        /// </summary>
          [XmlEnum("lbm.ft2")]
          lbmft2
        }
        /// <summary>
        /// This class represents the MomentumUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MomentumUom xsd enumeration.")]
        public enum MomentumUom 
        {
        /// <summary>
        /// kgms property
        /// </summary>
          [XmlEnum("kg.m/s")]
          kgms,
        /// <summary>
        /// lbmfts property
        /// </summary>
          [XmlEnum("lbm.ft/s")]
          lbmfts
        }
        /// <summary>
        /// This class represents the NormalizedPowerUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the NormalizedPowerUom xsd enumeration.")]
        public enum NormalizedPowerUom 
        {
        /// <summary>
        /// BW property
        /// </summary>
          [XmlEnum("B.W")]
          BW,
        /// <summary>
        /// dBmW property
        /// </summary>
          [XmlEnum("dB.mW")]
          dBmW,
        /// <summary>
        /// dBMW property
        /// </summary>
          [XmlEnum("dB.MW")]
          dBMW,
        /// <summary>
        /// dBW property
        /// </summary>
          [XmlEnum("dB.W")]
          dBW
        }
        /// <summary>
        /// This class represents the PermeabilityLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PermeabilityLengthUom xsd enumeration.")]
        public enum PermeabilityLengthUom 
        {
        /// <summary>
        /// Dft property
        /// </summary>
          [XmlEnum("D.ft")]
          Dft,
        /// <summary>
        /// Dm property
        /// </summary>
          [XmlEnum("D.m")]
          Dm,
        /// <summary>
        /// mDft property
        /// </summary>
          [XmlEnum("mD.ft")]
          mDft,
        /// <summary>
        /// mDm property
        /// </summary>
          [XmlEnum("mD.m")]
          mDm,
        /// <summary>
        /// TDAPIm property
        /// </summary>
          [XmlEnum("TD[API].m")]
          TDAPIm
        }
        /// <summary>
        /// This class represents the PermittivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PermittivityUom xsd enumeration.")]
        public enum PermittivityUom 
        {
        /// <summary>
        /// Fm property
        /// </summary>
          [XmlEnum("F/m")]
          Fm,
        /// <summary>
        /// uFm property
        /// </summary>
          [XmlEnum("uF/m")]
          uFm
        }
        /// <summary>
        /// This class represents the PotentialDifferencePerPowerDropUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PotentialDifferencePerPowerDropUom xsd enumeration.")]
        public enum PotentialDifferencePerPowerDropUom 
        {
        /// <summary>
        /// VB property
        /// </summary>
          [XmlEnum("V/B")]
          VB,
        /// <summary>
        /// VdB property
        /// </summary>
          [XmlEnum("V/dB")]
          VdB
        }
        /// <summary>
        /// This class represents the PowerPerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PowerPerAreaUom xsd enumeration.")]
        public enum PowerPerAreaUom 
        {
        /// <summary>
        /// BtuIThft2 property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2)")]
          BtuIThft2,
        /// <summary>
        /// BtuITsft2 property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft2)")]
          BtuITsft2,
        /// <summary>
        /// calthhcm2 property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm2)")]
          calthhcm2,
        /// <summary>
        /// hpin2 property
        /// </summary>
          [XmlEnum("hp/in2")]
          hpin2,
        /// <summary>
        /// hphydin2 property
        /// </summary>
          [XmlEnum("hp[hyd]/in2")]
          hphydin2,
        /// <summary>
        /// kWcm2 property
        /// </summary>
          [XmlEnum("kW/cm2")]
          kWcm2,
        /// <summary>
        /// kWm2 property
        /// </summary>
          [XmlEnum("kW/m2")]
          kWm2,
        /// <summary>
        /// mWm2 property
        /// </summary>
          [XmlEnum("mW/m2")]
          mWm2,
        /// <summary>
        /// ucalthscm2 property
        /// </summary>
          [XmlEnum("ucal[th]/(s.cm2)")]
          ucalthscm2,
        /// <summary>
        /// Wcm2 property
        /// </summary>
          [XmlEnum("W/cm2")]
          Wcm2,
        /// <summary>
        /// Wm2 property
        /// </summary>
          [XmlEnum("W/m2")]
          Wm2,
        /// <summary>
        /// Wmm2 property
        /// </summary>
          [XmlEnum("W/mm2")]
          Wmm2
        }
        /// <summary>
        /// This class represents the PowerPerPowerUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PowerPerPowerUom xsd enumeration.")]
        public enum PowerPerPowerUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// BtuIThph property
        /// </summary>
          [XmlEnum("Btu[IT]/(hp.h)")]
          BtuIThph,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// WkW property
        /// </summary>
          [XmlEnum("W/kW")]
          WkW,
        /// <summary>
        /// WW property
        /// </summary>
          [XmlEnum("W/W")]
          WW
        }
        /// <summary>
        /// This class represents the PowerPerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PowerPerVolumeUom xsd enumeration.")]
        public enum PowerPerVolumeUom 
        {
        /// <summary>
        /// BtuIThft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft3)")]
          BtuIThft3,
        /// <summary>
        /// BtuITsft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft3)")]
          BtuITsft3,
        /// <summary>
        /// calthhcm3 property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm3)")]
          calthhcm3,
        /// <summary>
        /// calthscm3 property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm3)")]
          calthscm3,
        /// <summary>
        /// hpft3 property
        /// </summary>
          [XmlEnum("hp/ft3")]
          hpft3,
        /// <summary>
        /// kWm3 property
        /// </summary>
          [XmlEnum("kW/m3")]
          kWm3,
        /// <summary>
        /// uWm3 property
        /// </summary>
          [XmlEnum("uW/m3")]
          uWm3,
        /// <summary>
        /// Wm3 property
        /// </summary>
          [XmlEnum("W/m3")]
          Wm3
        }
        /// <summary>
        /// This class represents the PowerUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PowerUom xsd enumeration.")]
        public enum PowerUom 
        {
        /// <summary>
        /// cW property
        /// </summary>
          cW,
        /// <summary>
        /// dW property
        /// </summary>
          dW,
        /// <summary>
        /// EW property
        /// </summary>
          EW,
        /// <summary>
        /// fW property
        /// </summary>
          fW,
        /// <summary>
        /// GW property
        /// </summary>
          GW,
        /// <summary>
        /// hp property
        /// </summary>
          hp,
        /// <summary>
        /// hpelec property
        /// </summary>
          [XmlEnum("hp[elec]")]
          hpelec,
        /// <summary>
        /// hphyd property
        /// </summary>
          [XmlEnum("hp[hyd]")]
          hphyd,
        /// <summary>
        /// hpmetric property
        /// </summary>
          [XmlEnum("hp[metric]")]
          hpmetric,
        /// <summary>
        /// kW property
        /// </summary>
          kW,
        /// <summary>
        /// MW property
        /// </summary>
          MW,
        /// <summary>
        /// mW property
        /// </summary>
          mW,
        /// <summary>
        /// nW property
        /// </summary>
          nW,
        /// <summary>
        /// pW property
        /// </summary>
          pW,
        /// <summary>
        /// tonRefrig property
        /// </summary>
          tonRefrig,
        /// <summary>
        /// TW property
        /// </summary>
          TW,
        /// <summary>
        /// uW property
        /// </summary>
          uW,
        /// <summary>
        /// W property
        /// </summary>
          W
        }
        /// <summary>
        /// This class represents the PressurePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressurePerTimeUom xsd enumeration.")]
        public enum PressurePerTimeUom 
        {
        /// <summary>
        /// atmh property
        /// </summary>
          [XmlEnum("atm/h")]
          atmh,
        /// <summary>
        /// barh property
        /// </summary>
          [XmlEnum("bar/h")]
          barh,
        /// <summary>
        /// kPah property
        /// </summary>
          [XmlEnum("kPa/h")]
          kPah,
        /// <summary>
        /// kPamin property
        /// </summary>
          [XmlEnum("kPa/min")]
          kPamin,
        /// <summary>
        /// MPah property
        /// </summary>
          [XmlEnum("MPa/h")]
          MPah,
        /// <summary>
        /// Pah property
        /// </summary>
          [XmlEnum("Pa/h")]
          Pah,
        /// <summary>
        /// Pas property
        /// </summary>
          [XmlEnum("Pa/s")]
          Pas,
        /// <summary>
        /// psih property
        /// </summary>
          [XmlEnum("psi/h")]
          psih,
        /// <summary>
        /// psimin property
        /// </summary>
          [XmlEnum("psi/min")]
          psimin
        }
        /// <summary>
        /// This class represents the PressurePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressurePerVolumeUom xsd enumeration.")]
        public enum PressurePerVolumeUom 
        {
        /// <summary>
        /// Pam3 property
        /// </summary>
          [XmlEnum("Pa/m3")]
          Pam3,
        /// <summary>
        /// psi2dcPft3 property
        /// </summary>
          [XmlEnum("psi2.d/(cP.ft3)")]
          psi2dcPft3
        }
        /// <summary>
        /// This class represents the PressureSquaredPerForceTimePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressureSquaredPerForceTimePerAreaUom xsd enumeration.")]
        public enum PressureSquaredPerForceTimePerAreaUom 
        {
        /// <summary>
        /// Item0001kPa2cP property
        /// </summary>
          [XmlEnum("0.001 kPa2/cP")]
          Item0001kPa2cP,
        /// <summary>
        /// bar2cP property
        /// </summary>
          [XmlEnum("bar2/cP")]
          bar2cP,
        /// <summary>
        /// kPa2cP property
        /// </summary>
          [XmlEnum("kPa2/cP")]
          kPa2cP,
        /// <summary>
        /// Pa2Pas property
        /// </summary>
          [XmlEnum("Pa2/(Pa.s)")]
          Pa2Pas,
        /// <summary>
        /// psi2cP property
        /// </summary>
          [XmlEnum("psi2/cP")]
          psi2cP
        }
        /// <summary>
        /// This class represents the PressureSquaredUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressureSquaredUom xsd enumeration.")]
        public enum PressureSquaredUom 
        {
        /// <summary>
        /// bar2 property
        /// </summary>
          bar2,
        /// <summary>
        /// GPa2 property
        /// </summary>
          GPa2,
        /// <summary>
        /// kPa2 property
        /// </summary>
          kPa2,
        /// <summary>
        /// kpsi2 property
        /// </summary>
          kpsi2,
        /// <summary>
        /// Pa2 property
        /// </summary>
          Pa2,
        /// <summary>
        /// psi2 property
        /// </summary>
          psi2
        }
        /// <summary>
        /// This class represents the PressureTimePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressureTimePerVolumeUom xsd enumeration.")]
        public enum PressureTimePerVolumeUom 
        {
        /// <summary>
        /// Pasm3 property
        /// </summary>
          [XmlEnum("Pa.s/m3")]
          Pasm3,
        /// <summary>
        /// psidbbl property
        /// </summary>
          [XmlEnum("psi.d/bbl")]
          psidbbl
        }
        /// <summary>
        /// This class represents the QuantityOfLightUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the QuantityOfLightUom xsd enumeration.")]
        public enum QuantityOfLightUom 
        {
        /// <summary>
        /// lms property
        /// </summary>
          [XmlEnum("lm.s")]
          lms
        }
        /// <summary>
        /// This class represents the RadianceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the RadianceUom xsd enumeration.")]
        public enum RadianceUom 
        {
        /// <summary>
        /// Wm2sr property
        /// </summary>
          [XmlEnum("W/(m2.sr)")]
          Wm2sr
        }
        /// <summary>
        /// This class represents the RadiantIntensityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the RadiantIntensityUom xsd enumeration.")]
        public enum RadiantIntensityUom 
        {
        /// <summary>
        /// Wsr property
        /// </summary>
          [XmlEnum("W/sr")]
          Wsr
        }
        /// <summary>
        /// This class represents the ReciprocalAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalAreaUom xsd enumeration.")]
        public enum ReciprocalAreaUom 
        {
        /// <summary>
        /// Item1ft2 property
        /// </summary>
          [XmlEnum("1/ft2")]
          Item1ft2,
        /// <summary>
        /// Item1km2 property
        /// </summary>
          [XmlEnum("1/km2")]
          Item1km2,
        /// <summary>
        /// Item1m2 property
        /// </summary>
          [XmlEnum("1/m2")]
          Item1m2,
        /// <summary>
        /// Item1mi2 property
        /// </summary>
          [XmlEnum("1/mi2")]
          Item1mi2
        }
        /// <summary>
        /// This class represents the ReciprocalElectricPotentialDifferenceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalElectricPotentialDifferenceUom xsd enumeration.")]
        public enum ReciprocalElectricPotentialDifferenceUom 
        {
        /// <summary>
        /// Item1uV property
        /// </summary>
          [XmlEnum("1/uV")]
          Item1uV,
        /// <summary>
        /// Item1V property
        /// </summary>
          [XmlEnum("1/V")]
          Item1V
        }
        /// <summary>
        /// This class represents the ReciprocalForceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalForceUom xsd enumeration.")]
        public enum ReciprocalForceUom 
        {
        /// <summary>
        /// Item1lbf property
        /// </summary>
          [XmlEnum("1/lbf")]
          Item1lbf,
        /// <summary>
        /// Item1N property
        /// </summary>
          [XmlEnum("1/N")]
          Item1N
        }
        /// <summary>
        /// This class represents the ReciprocalLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalLengthUom xsd enumeration.")]
        public enum ReciprocalLengthUom 
        {
        /// <summary>
        /// Item1angstrom property
        /// </summary>
          [XmlEnum("1/angstrom")]
          Item1angstrom,
        /// <summary>
        /// Item1cm property
        /// </summary>
          [XmlEnum("1/cm")]
          Item1cm,
        /// <summary>
        /// Item1ft property
        /// </summary>
          [XmlEnum("1/ft")]
          Item1ft,
        /// <summary>
        /// Item1in property
        /// </summary>
          [XmlEnum("1/in")]
          Item1in,
        /// <summary>
        /// Item1m property
        /// </summary>
          [XmlEnum("1/m")]
          Item1m,
        /// <summary>
        /// Item1mi property
        /// </summary>
          [XmlEnum("1/mi")]
          Item1mi,
        /// <summary>
        /// Item1mm property
        /// </summary>
          [XmlEnum("1/mm")]
          Item1mm,
        /// <summary>
        /// Item1nm property
        /// </summary>
          [XmlEnum("1/nm")]
          Item1nm,
        /// <summary>
        /// Item1yd property
        /// </summary>
          [XmlEnum("1/yd")]
          Item1yd,
        /// <summary>
        /// Item1E91ft property
        /// </summary>
          [XmlEnum("1E-9 1/ft")]
          Item1E91ft
        }
        /// <summary>
        /// This class represents the ReciprocalMassTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalMassTimeUom xsd enumeration.")]
        public enum ReciprocalMassTimeUom 
        {
        /// <summary>
        /// Item1kgs property
        /// </summary>
          [XmlEnum("1/(kg.s)")]
          Item1kgs,
        /// <summary>
        /// Bqkg property
        /// </summary>
          [XmlEnum("Bq/kg")]
          Bqkg,
        /// <summary>
        /// pCig property
        /// </summary>
          [XmlEnum("pCi/g")]
          pCig
        }
        /// <summary>
        /// This class represents the ReciprocalMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalMassUom xsd enumeration.")]
        public enum ReciprocalMassUom 
        {
        /// <summary>
        /// Item1g property
        /// </summary>
          [XmlEnum("1/g")]
          Item1g,
        /// <summary>
        /// Item1kg property
        /// </summary>
          [XmlEnum("1/kg")]
          Item1kg,
        /// <summary>
        /// Item1lbm property
        /// </summary>
          [XmlEnum("1/lbm")]
          Item1lbm
        }
        /// <summary>
        /// This class represents the ReciprocalTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalTimeUom xsd enumeration.")]
        public enum ReciprocalTimeUom 
        {
        /// <summary>
        /// Item1a property
        /// </summary>
          [XmlEnum("1/a")]
          Item1a,
        /// <summary>
        /// Item1d property
        /// </summary>
          [XmlEnum("1/d")]
          Item1d,
        /// <summary>
        /// Item1h property
        /// </summary>
          [XmlEnum("1/h")]
          Item1h,
        /// <summary>
        /// Item1min property
        /// </summary>
          [XmlEnum("1/min")]
          Item1min,
        /// <summary>
        /// Item1ms property
        /// </summary>
          [XmlEnum("1/ms")]
          Item1ms,
        /// <summary>
        /// Item1s property
        /// </summary>
          [XmlEnum("1/s")]
          Item1s,
        /// <summary>
        /// Item1us property
        /// </summary>
          [XmlEnum("1/us")]
          Item1us,
        /// <summary>
        /// Item1wk property
        /// </summary>
          [XmlEnum("1/wk")]
          Item1wk
        }
        /// <summary>
        /// This class represents the ReciprocalVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalVolumeUom xsd enumeration.")]
        public enum ReciprocalVolumeUom 
        {
        /// <summary>
        /// Item1bbl property
        /// </summary>
          [XmlEnum("1/bbl")]
          Item1bbl,
        /// <summary>
        /// Item1ft3 property
        /// </summary>
          [XmlEnum("1/ft3")]
          Item1ft3,
        /// <summary>
        /// Item1galUK property
        /// </summary>
          [XmlEnum("1/gal[UK]")]
          Item1galUK,
        /// <summary>
        /// Item1galUS property
        /// </summary>
          [XmlEnum("1/gal[US]")]
          Item1galUS,
        /// <summary>
        /// Item1L property
        /// </summary>
          [XmlEnum("1/L")]
          Item1L,
        /// <summary>
        /// Item1m3 property
        /// </summary>
          [XmlEnum("1/m3")]
          Item1m3
        }
        /// <summary>
        /// This class represents the ReluctanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReluctanceUom xsd enumeration.")]
        public enum ReluctanceUom 
        {
        /// <summary>
        /// Item1H property
        /// </summary>
          [XmlEnum("1/H")]
          Item1H
        }
        /// <summary>
        /// This class represents the SecondMomentOfAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the SecondMomentOfAreaUom xsd enumeration.")]
        public enum SecondMomentOfAreaUom 
        {
        /// <summary>
        /// cm4 property
        /// </summary>
          cm4,
        /// <summary>
        /// in4 property
        /// </summary>
          in4,
        /// <summary>
        /// m4 property
        /// </summary>
          m4
        }
        /// <summary>
        /// This class represents the SignalingEventPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the SignalingEventPerTimeUom xsd enumeration.")]
        public enum SignalingEventPerTimeUom 
        {
        /// <summary>
        /// Bd property
        /// </summary>
          Bd
        }
        /// <summary>
        /// This class represents the SolidAngleUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the SolidAngleUom xsd enumeration.")]
        public enum SolidAngleUom 
        {
        /// <summary>
        /// sr property
        /// </summary>
          sr
        }
        /// <summary>
        /// This class represents the SpecificHeatCapacityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the SpecificHeatCapacityUom xsd enumeration.")]
        public enum SpecificHeatCapacityUom 
        {
        /// <summary>
        /// BtuITlbmdeltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbm.deltaF)")]
          BtuITlbmdeltaF,
        /// <summary>
        /// BtuITlbmdeltaR property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbm.deltaR)")]
          BtuITlbmdeltaR,
        /// <summary>
        /// calthgdeltaK property
        /// </summary>
          [XmlEnum("cal[th]/(g.deltaK)")]
          calthgdeltaK,
        /// <summary>
        /// JgdeltaK property
        /// </summary>
          [XmlEnum("J/(g.deltaK)")]
          JgdeltaK,
        /// <summary>
        /// JkgdeltaK property
        /// </summary>
          [XmlEnum("J/(kg.deltaK)")]
          JkgdeltaK,
        /// <summary>
        /// kcalthkgdeltaC property
        /// </summary>
          [XmlEnum("kcal[th]/(kg.deltaC)")]
          kcalthkgdeltaC,
        /// <summary>
        /// kJkgdeltaK property
        /// </summary>
          [XmlEnum("kJ/(kg.deltaK)")]
          kJkgdeltaK,
        /// <summary>
        /// kWhkgdeltaC property
        /// </summary>
          [XmlEnum("kW.h/(kg.deltaC)")]
          kWhkgdeltaC
        }
        /// <summary>
        /// This class represents the TemperatureIntervalPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TemperatureIntervalPerLengthUom xsd enumeration.")]
        public enum TemperatureIntervalPerLengthUom 
        {
        /// <summary>
        /// Item001deltaFft property
        /// </summary>
          [XmlEnum("0.01 deltaF/ft")]
          Item001deltaFft,
        /// <summary>
        /// deltaCft property
        /// </summary>
          [XmlEnum("deltaC/ft")]
          deltaCft,
        /// <summary>
        /// deltaChm property
        /// </summary>
          [XmlEnum("deltaC/hm")]
          deltaChm,
        /// <summary>
        /// deltaCkm property
        /// </summary>
          [XmlEnum("deltaC/km")]
          deltaCkm,
        /// <summary>
        /// deltaCm property
        /// </summary>
          [XmlEnum("deltaC/m")]
          deltaCm,
        /// <summary>
        /// deltaFft property
        /// </summary>
          [XmlEnum("deltaF/ft")]
          deltaFft,
        /// <summary>
        /// deltaFm property
        /// </summary>
          [XmlEnum("deltaF/m")]
          deltaFm,
        /// <summary>
        /// deltaKkm property
        /// </summary>
          [XmlEnum("deltaK/km")]
          deltaKkm,
        /// <summary>
        /// deltaKm property
        /// </summary>
          [XmlEnum("deltaK/m")]
          deltaKm
        }
        /// <summary>
        /// This class represents the TemperatureIntervalPerPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TemperatureIntervalPerPressureUom xsd enumeration.")]
        public enum TemperatureIntervalPerPressureUom 
        {
        /// <summary>
        /// deltaCkPa property
        /// </summary>
          [XmlEnum("deltaC/kPa")]
          deltaCkPa,
        /// <summary>
        /// deltaFpsi property
        /// </summary>
          [XmlEnum("deltaF/psi")]
          deltaFpsi,
        /// <summary>
        /// deltaKPa property
        /// </summary>
          [XmlEnum("deltaK/Pa")]
          deltaKPa
        }
        /// <summary>
        /// This class represents the TemperatureIntervalPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TemperatureIntervalPerTimeUom xsd enumeration.")]
        public enum TemperatureIntervalPerTimeUom 
        {
        /// <summary>
        /// deltaCh property
        /// </summary>
          [XmlEnum("deltaC/h")]
          deltaCh,
        /// <summary>
        /// deltaCmin property
        /// </summary>
          [XmlEnum("deltaC/min")]
          deltaCmin,
        /// <summary>
        /// deltaCs property
        /// </summary>
          [XmlEnum("deltaC/s")]
          deltaCs,
        /// <summary>
        /// deltaFh property
        /// </summary>
          [XmlEnum("deltaF/h")]
          deltaFh,
        /// <summary>
        /// deltaFmin property
        /// </summary>
          [XmlEnum("deltaF/min")]
          deltaFmin,
        /// <summary>
        /// deltaFs property
        /// </summary>
          [XmlEnum("deltaF/s")]
          deltaFs,
        /// <summary>
        /// deltaKs property
        /// </summary>
          [XmlEnum("deltaK/s")]
          deltaKs
        }
        /// <summary>
        /// This class represents the TemperatureIntervalUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TemperatureIntervalUom xsd enumeration.")]
        public enum TemperatureIntervalUom 
        {
        /// <summary>
        /// deltaC property
        /// </summary>
          deltaC,
        /// <summary>
        /// deltaF property
        /// </summary>
          deltaF,
        /// <summary>
        /// deltaK property
        /// </summary>
          deltaK,
        /// <summary>
        /// deltaR property
        /// </summary>
          deltaR
        }
        /// <summary>
        /// This class represents the ThermalConductanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermalConductanceUom xsd enumeration.")]
        public enum ThermalConductanceUom 
        {
        /// <summary>
        /// WdeltaK property
        /// </summary>
          [XmlEnum("W/deltaK")]
          WdeltaK
        }
        /// <summary>
        /// This class represents the ThermalConductivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermalConductivityUom xsd enumeration.")]
        public enum ThermalConductivityUom 
        {
        /// <summary>
        /// BtuIThftdeltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft.deltaF)")]
          BtuIThftdeltaF,
        /// <summary>
        /// calthhcmdeltaC property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm.deltaC)")]
          calthhcmdeltaC,
        /// <summary>
        /// calthscmdeltaC property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm.deltaC)")]
          calthscmdeltaC,
        /// <summary>
        /// kcalthhmdeltaC property
        /// </summary>
          [XmlEnum("kcal[th]/(h.m.deltaC)")]
          kcalthhmdeltaC,
        /// <summary>
        /// WmdeltaK property
        /// </summary>
          [XmlEnum("W/(m.deltaK)")]
          WmdeltaK
        }
        /// <summary>
        /// This class represents the ThermalDiffusivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermalDiffusivityUom xsd enumeration.")]
        public enum ThermalDiffusivityUom 
        {
        /// <summary>
        /// cm2s property
        /// </summary>
          [XmlEnum("cm2/s")]
          cm2s,
        /// <summary>
        /// ft2h property
        /// </summary>
          [XmlEnum("ft2/h")]
          ft2h,
        /// <summary>
        /// ft2s property
        /// </summary>
          [XmlEnum("ft2/s")]
          ft2s,
        /// <summary>
        /// in2s property
        /// </summary>
          [XmlEnum("in2/s")]
          in2s,
        /// <summary>
        /// m2h property
        /// </summary>
          [XmlEnum("m2/h")]
          m2h,
        /// <summary>
        /// m2s property
        /// </summary>
          [XmlEnum("m2/s")]
          m2s,
        /// <summary>
        /// mm2s property
        /// </summary>
          [XmlEnum("mm2/s")]
          mm2s
        }
        /// <summary>
        /// This class represents the ThermalInsulanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermalInsulanceUom xsd enumeration.")]
        public enum ThermalInsulanceUom 
        {
        /// <summary>
        /// deltaCm2hkcalth property
        /// </summary>
          [XmlEnum("deltaC.m2.h/kcal[th]")]
          deltaCm2hkcalth,
        /// <summary>
        /// deltaFft2hBtuIT property
        /// </summary>
          [XmlEnum("deltaF.ft2.h/Btu[IT]")]
          deltaFft2hBtuIT,
        /// <summary>
        /// deltaKm2kW property
        /// </summary>
          [XmlEnum("deltaK.m2/kW")]
          deltaKm2kW,
        /// <summary>
        /// deltaKm2W property
        /// </summary>
          [XmlEnum("deltaK.m2/W")]
          deltaKm2W
        }
        /// <summary>
        /// This class represents the ThermalResistanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermalResistanceUom xsd enumeration.")]
        public enum ThermalResistanceUom 
        {
        /// <summary>
        /// deltaKW property
        /// </summary>
          [XmlEnum("deltaK/W")]
          deltaKW
        }
        /// <summary>
        /// This class represents the TimePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TimePerLengthUom xsd enumeration.")]
        public enum TimePerLengthUom 
        {
        /// <summary>
        /// Item0001hft property
        /// </summary>
          [XmlEnum("0.001 h/ft")]
          Item0001hft,
        /// <summary>
        /// hkm property
        /// </summary>
          [XmlEnum("h/km")]
          hkm,
        /// <summary>
        /// minft property
        /// </summary>
          [XmlEnum("min/ft")]
          minft,
        /// <summary>
        /// minm property
        /// </summary>
          [XmlEnum("min/m")]
          minm,
        /// <summary>
        /// mscm property
        /// </summary>
          [XmlEnum("ms/cm")]
          mscm,
        /// <summary>
        /// msft property
        /// </summary>
          [XmlEnum("ms/ft")]
          msft,
        /// <summary>
        /// msin property
        /// </summary>
          [XmlEnum("ms/in")]
          msin,
        /// <summary>
        /// msm property
        /// </summary>
          [XmlEnum("ms/m")]
          msm,
        /// <summary>
        /// nsft property
        /// </summary>
          [XmlEnum("ns/ft")]
          nsft,
        /// <summary>
        /// nsm property
        /// </summary>
          [XmlEnum("ns/m")]
          nsm,
        /// <summary>
        /// scm property
        /// </summary>
          [XmlEnum("s/cm")]
          scm,
        /// <summary>
        /// sft property
        /// </summary>
          [XmlEnum("s/ft")]
          sft,
        /// <summary>
        /// sin property
        /// </summary>
          [XmlEnum("s/in")]
          sin,
        /// <summary>
        /// sm property
        /// </summary>
          [XmlEnum("s/m")]
          sm,
        /// <summary>
        /// usft property
        /// </summary>
          [XmlEnum("us/ft")]
          usft,
        /// <summary>
        /// usin property
        /// </summary>
          [XmlEnum("us/in")]
          usin,
        /// <summary>
        /// usm property
        /// </summary>
          [XmlEnum("us/m")]
          usm
        }
        /// <summary>
        /// This class represents the TimePerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TimePerMassUom xsd enumeration.")]
        public enum TimePerMassUom 
        {
        /// <summary>
        /// skg property
        /// </summary>
          [XmlEnum("s/kg")]
          skg
        }
        /// <summary>
        /// This class represents the TimePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TimePerTimeUom xsd enumeration.")]
        public enum TimePerTimeUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// mss property
        /// </summary>
          [XmlEnum("ms/s")]
          mss,
        /// <summary>
        /// ss property
        /// </summary>
          [XmlEnum("s/s")]
          ss
        }
        /// <summary>
        /// This class represents the TimePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TimePerVolumeUom xsd enumeration.")]
        public enum TimePerVolumeUom 
        {
        /// <summary>
        /// Item0001dft3 property
        /// </summary>
          [XmlEnum("0.001 d/ft3")]
          Item0001dft3,
        /// <summary>
        /// dbbl property
        /// </summary>
          [XmlEnum("d/bbl")]
          dbbl,
        /// <summary>
        /// dft3 property
        /// </summary>
          [XmlEnum("d/ft3")]
          dft3,
        /// <summary>
        /// dm3 property
        /// </summary>
          [XmlEnum("d/m3")]
          dm3,
        /// <summary>
        /// hft3 property
        /// </summary>
          [XmlEnum("h/ft3")]
          hft3,
        /// <summary>
        /// hm3 property
        /// </summary>
          [XmlEnum("h/m3")]
          hm3,
        /// <summary>
        /// sft3 property
        /// </summary>
          [XmlEnum("s/ft3")]
          sft3,
        /// <summary>
        /// sL property
        /// </summary>
          [XmlEnum("s/L")]
          sL,
        /// <summary>
        /// sm3 property
        /// </summary>
          [XmlEnum("s/m3")]
          sm3,
        /// <summary>
        /// sqtUK property
        /// </summary>
          [XmlEnum("s/qt[UK]")]
          sqtUK,
        /// <summary>
        /// sqtUS property
        /// </summary>
          [XmlEnum("s/qt[US]")]
          sqtUS
        }
        /// <summary>
        /// This class represents the VolumeFlowRatePerVolumeFlowRateUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumeFlowRatePerVolumeFlowRateUom xsd enumeration.")]
        public enum VolumeFlowRatePerVolumeFlowRateUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// bbldbbld property
        /// </summary>
          [XmlEnum("(bbl/d)/(bbl/d)")]
          bbldbbld,
        /// <summary>
        /// m3dm3d property
        /// </summary>
          [XmlEnum("(m3/d)/(m3/d)")]
          m3dm3d,
        /// <summary>
        /// m3sm3s property
        /// </summary>
          [XmlEnum("(m3/s)/(m3/s)")]
          m3sm3s,
        /// <summary>
        /// Item1E6ft3dbbld property
        /// </summary>
          [XmlEnum("1E6 (ft3/d)/(bbl/d)")]
          Item1E6ft3dbbld,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc
        }
        /// <summary>
        /// This class represents the VolumePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerAreaUom xsd enumeration.")]
        public enum VolumePerAreaUom 
        {
        /// <summary>
        /// Item1E6bblacre property
        /// </summary>
          [XmlEnum("1E6 bbl/acre")]
          Item1E6bblacre,
        /// <summary>
        /// bblacre property
        /// </summary>
          [XmlEnum("bbl/acre")]
          bblacre,
        /// <summary>
        /// ft3ft2 property
        /// </summary>
          [XmlEnum("ft3/ft2")]
          ft3ft2,
        /// <summary>
        /// m3m2 property
        /// </summary>
          [XmlEnum("m3/m2")]
          m3m2
        }
        /// <summary>
        /// This class represents the VolumePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerLengthUom xsd enumeration.")]
        public enum VolumePerLengthUom 
        {
        /// <summary>
        /// Item001dm3km property
        /// </summary>
          [XmlEnum("0.01 dm3/km")]
          Item001dm3km,
        /// <summary>
        /// Item001Lkm property
        /// </summary>
          [XmlEnum("0.01 L/km")]
          Item001Lkm,
        /// <summary>
        /// bblft property
        /// </summary>
          [XmlEnum("bbl/ft")]
          bblft,
        /// <summary>
        /// bblin property
        /// </summary>
          [XmlEnum("bbl/in")]
          bblin,
        /// <summary>
        /// bblmi property
        /// </summary>
          [XmlEnum("bbl/mi")]
          bblmi,
        /// <summary>
        /// dm3m property
        /// </summary>
          [XmlEnum("dm3/m")]
          dm3m,
        /// <summary>
        /// ft3ft property
        /// </summary>
          [XmlEnum("ft3/ft")]
          ft3ft,
        /// <summary>
        /// galUKmi property
        /// </summary>
          [XmlEnum("gal[UK]/mi")]
          galUKmi,
        /// <summary>
        /// galUSft property
        /// </summary>
          [XmlEnum("gal[US]/ft")]
          galUSft,
        /// <summary>
        /// galUSmi property
        /// </summary>
          [XmlEnum("gal[US]/mi")]
          galUSmi,
        /// <summary>
        /// in3ft property
        /// </summary>
          [XmlEnum("in3/ft")]
          in3ft,
        /// <summary>
        /// Lm property
        /// </summary>
          [XmlEnum("L/m")]
          Lm,
        /// <summary>
        /// m3km property
        /// </summary>
          [XmlEnum("m3/km")]
          m3km,
        /// <summary>
        /// m3m property
        /// </summary>
          [XmlEnum("m3/m")]
          m3m
        }
        /// <summary>
        /// This class represents the VolumePerPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerPressureUom xsd enumeration.")]
        public enum VolumePerPressureUom 
        {
        /// <summary>
        /// bblpsi property
        /// </summary>
          [XmlEnum("bbl/psi")]
          bblpsi,
        /// <summary>
        /// m3kPa property
        /// </summary>
          [XmlEnum("m3/kPa")]
          m3kPa,
        /// <summary>
        /// m3Pa property
        /// </summary>
          [XmlEnum("m3/Pa")]
          m3Pa
        }
        /// <summary>
        /// This class represents the VolumePerRotationUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerRotationUom xsd enumeration.")]
        public enum VolumePerRotationUom 
        {
        /// <summary>
        /// ft3rad property
        /// </summary>
          [XmlEnum("ft3/rad")]
          ft3rad,
        /// <summary>
        /// m3rad property
        /// </summary>
          [XmlEnum("m3/rad")]
          m3rad,
        /// <summary>
        /// m3rev property
        /// </summary>
          [XmlEnum("m3/rev")]
          m3rev
        }
        /// <summary>
        /// This class represents the VolumePerTimeLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimeLengthUom xsd enumeration.")]
        public enum VolumePerTimeLengthUom 
        {
        /// <summary>
        /// Item1000bblftd property
        /// </summary>
          [XmlEnum("1000 bbl.ft/d")]
          Item1000bblftd,
        /// <summary>
        /// Item1000m4d property
        /// </summary>
          [XmlEnum("1000 m4/d")]
          Item1000m4d,
        /// <summary>
        /// m4s property
        /// </summary>
          [XmlEnum("m4/s")]
          m4s
        }
        /// <summary>
        /// This class represents the VolumePerTimePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerAreaUom xsd enumeration.")]
        public enum VolumePerTimePerAreaUom 
        {
        /// <summary>
        /// ft3minft2 property
        /// </summary>
          [XmlEnum("ft3/(min.ft2)")]
          ft3minft2,
        /// <summary>
        /// ft3sft2 property
        /// </summary>
          [XmlEnum("ft3/(s.ft2)")]
          ft3sft2,
        /// <summary>
        /// galUKhft2 property
        /// </summary>
          [XmlEnum("gal[UK]/(h.ft2)")]
          galUKhft2,
        /// <summary>
        /// galUKhin2 property
        /// </summary>
          [XmlEnum("gal[UK]/(h.in2)")]
          galUKhin2,
        /// <summary>
        /// galUKminft2 property
        /// </summary>
          [XmlEnum("gal[UK]/(min.ft2)")]
          galUKminft2,
        /// <summary>
        /// galUShft2 property
        /// </summary>
          [XmlEnum("gal[US]/(h.ft2)")]
          galUShft2,
        /// <summary>
        /// galUShin2 property
        /// </summary>
          [XmlEnum("gal[US]/(h.in2)")]
          galUShin2,
        /// <summary>
        /// galUSminft2 property
        /// </summary>
          [XmlEnum("gal[US]/(min.ft2)")]
          galUSminft2,
        /// <summary>
        /// m3sm2 property
        /// </summary>
          [XmlEnum("m3/(s.m2)")]
          m3sm2
        }
        /// <summary>
        /// This class represents the VolumePerTimePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerLengthUom xsd enumeration.")]
        public enum VolumePerTimePerLengthUom 
        {
        /// <summary>
        /// Item1000ft3dft property
        /// </summary>
          [XmlEnum("1000 ft3/(d.ft)")]
          Item1000ft3dft,
        /// <summary>
        /// Item1000m3dm property
        /// </summary>
          [XmlEnum("1000 m3/(d.m)")]
          Item1000m3dm,
        /// <summary>
        /// Item1000m3hm property
        /// </summary>
          [XmlEnum("1000 m3/(h.m)")]
          Item1000m3hm,
        /// <summary>
        /// bbldft property
        /// </summary>
          [XmlEnum("bbl/(d.ft)")]
          bbldft,
        /// <summary>
        /// ft3dft property
        /// </summary>
          [XmlEnum("ft3/(d.ft)")]
          ft3dft,
        /// <summary>
        /// galUKhft property
        /// </summary>
          [XmlEnum("gal[UK]/(h.ft)")]
          galUKhft,
        /// <summary>
        /// galUKhin property
        /// </summary>
          [XmlEnum("gal[UK]/(h.in)")]
          galUKhin,
        /// <summary>
        /// galUKminft property
        /// </summary>
          [XmlEnum("gal[UK]/(min.ft)")]
          galUKminft,
        /// <summary>
        /// galUShft property
        /// </summary>
          [XmlEnum("gal[US]/(h.ft)")]
          galUShft,
        /// <summary>
        /// galUShin property
        /// </summary>
          [XmlEnum("gal[US]/(h.in)")]
          galUShin,
        /// <summary>
        /// galUSminft property
        /// </summary>
          [XmlEnum("gal[US]/(min.ft)")]
          galUSminft,
        /// <summary>
        /// m3dm property
        /// </summary>
          [XmlEnum("m3/(d.m)")]
          m3dm,
        /// <summary>
        /// m3hm property
        /// </summary>
          [XmlEnum("m3/(h.m)")]
          m3hm,
        /// <summary>
        /// m3sft property
        /// </summary>
          [XmlEnum("m3/(s.ft)")]
          m3sft,
        /// <summary>
        /// m3sm property
        /// </summary>
          [XmlEnum("m3/(s.m)")]
          m3sm
        }
        /// <summary>
        /// This class represents the VolumePerTimePerPressureLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerPressureLengthUom xsd enumeration.")]
        public enum VolumePerTimePerPressureLengthUom 
        {
        /// <summary>
        /// bblftpsid property
        /// </summary>
          [XmlEnum("bbl/(ft.psi.d)")]
          bblftpsid,
        /// <summary>
        /// ft3ftpsid property
        /// </summary>
          [XmlEnum("ft3/(ft.psi.d)")]
          ft3ftpsid,
        /// <summary>
        /// m2kPad property
        /// </summary>
          [XmlEnum("m2/(kPa.d)")]
          m2kPad,
        /// <summary>
        /// m2Pas property
        /// </summary>
          [XmlEnum("m2/(Pa.s)")]
          m2Pas
        }
        /// <summary>
        /// This class represents the VolumePerTimePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerTimeUom xsd enumeration.")]
        public enum VolumePerTimePerTimeUom 
        {
        /// <summary>
        /// bbld2 property
        /// </summary>
          [XmlEnum("bbl/d2")]
          bbld2,
        /// <summary>
        /// bblh2 property
        /// </summary>
          [XmlEnum("bbl/h2")]
          bblh2,
        /// <summary>
        /// dm3s2 property
        /// </summary>
          [XmlEnum("dm3/s2")]
          dm3s2,
        /// <summary>
        /// ft3d2 property
        /// </summary>
          [XmlEnum("ft3/d2")]
          ft3d2,
        /// <summary>
        /// ft3h2 property
        /// </summary>
          [XmlEnum("ft3/h2")]
          ft3h2,
        /// <summary>
        /// ft3min2 property
        /// </summary>
          [XmlEnum("ft3/min2")]
          ft3min2,
        /// <summary>
        /// ft3s2 property
        /// </summary>
          [XmlEnum("ft3/s2")]
          ft3s2,
        /// <summary>
        /// galUKh2 property
        /// </summary>
          [XmlEnum("gal[UK]/h2")]
          galUKh2,
        /// <summary>
        /// galUKmin2 property
        /// </summary>
          [XmlEnum("gal[UK]/min2")]
          galUKmin2,
        /// <summary>
        /// galUSh2 property
        /// </summary>
          [XmlEnum("gal[US]/h2")]
          galUSh2,
        /// <summary>
        /// galUSmin2 property
        /// </summary>
          [XmlEnum("gal[US]/min2")]
          galUSmin2,
        /// <summary>
        /// Ls2 property
        /// </summary>
          [XmlEnum("L/s2")]
          Ls2,
        /// <summary>
        /// m3d2 property
        /// </summary>
          [XmlEnum("m3/d2")]
          m3d2,
        /// <summary>
        /// m3s2 property
        /// </summary>
          [XmlEnum("m3/s2")]
          m3s2
        }
        /// <summary>
        /// This class represents the VolumePerTimePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerVolumeUom xsd enumeration.")]
        public enum VolumePerTimePerVolumeUom 
        {
        /// <summary>
        /// bbldacreft property
        /// </summary>
          [XmlEnum("bbl/(d.acre.ft)")]
          bbldacreft,
        /// <summary>
        /// m3sm3 property
        /// </summary>
          [XmlEnum("m3/(s.m3)")]
          m3sm3
        }
        /// <summary>
        /// This class represents the VolumePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimeUom xsd enumeration.")]
        public enum VolumePerTimeUom 
        {
        /// <summary>
        /// Item130cm3min property
        /// </summary>
          [XmlEnum("1/30 cm3/min")]
          Item130cm3min,
        /// <summary>
        /// Item1000bbld property
        /// </summary>
          [XmlEnum("1000 bbl/d")]
          Item1000bbld,
        /// <summary>
        /// Item1000ft3d property
        /// </summary>
          [XmlEnum("1000 ft3/d")]
          Item1000ft3d,
        /// <summary>
        /// Item1000m3d property
        /// </summary>
          [XmlEnum("1000 m3/d")]
          Item1000m3d,
        /// <summary>
        /// Item1000m3h property
        /// </summary>
          [XmlEnum("1000 m3/h")]
          Item1000m3h,
        /// <summary>
        /// Item1E6bbld property
        /// </summary>
          [XmlEnum("1E6 bbl/d")]
          Item1E6bbld,
        /// <summary>
        /// Item1E6ft3d property
        /// </summary>
          [XmlEnum("1E6 ft3/d")]
          Item1E6ft3d,
        /// <summary>
        /// Item1E6m3d property
        /// </summary>
          [XmlEnum("1E6 m3/d")]
          Item1E6m3d,
        /// <summary>
        /// bbld property
        /// </summary>
          [XmlEnum("bbl/d")]
          bbld,
        /// <summary>
        /// bblh property
        /// </summary>
          [XmlEnum("bbl/h")]
          bblh,
        /// <summary>
        /// bblmin property
        /// </summary>
          [XmlEnum("bbl/min")]
          bblmin,
        /// <summary>
        /// cm3h property
        /// </summary>
          [XmlEnum("cm3/h")]
          cm3h,
        /// <summary>
        /// cm3min property
        /// </summary>
          [XmlEnum("cm3/min")]
          cm3min,
        /// <summary>
        /// cm3s property
        /// </summary>
          [XmlEnum("cm3/s")]
          cm3s,
        /// <summary>
        /// dm3s property
        /// </summary>
          [XmlEnum("dm3/s")]
          dm3s,
        /// <summary>
        /// ft3d property
        /// </summary>
          [XmlEnum("ft3/d")]
          ft3d,
        /// <summary>
        /// ft3h property
        /// </summary>
          [XmlEnum("ft3/h")]
          ft3h,
        /// <summary>
        /// ft3min property
        /// </summary>
          [XmlEnum("ft3/min")]
          ft3min,
        /// <summary>
        /// ft3s property
        /// </summary>
          [XmlEnum("ft3/s")]
          ft3s,
        /// <summary>
        /// galUKd property
        /// </summary>
          [XmlEnum("gal[UK]/d")]
          galUKd,
        /// <summary>
        /// galUKh property
        /// </summary>
          [XmlEnum("gal[UK]/h")]
          galUKh,
        /// <summary>
        /// galUKmin property
        /// </summary>
          [XmlEnum("gal[UK]/min")]
          galUKmin,
        /// <summary>
        /// galUSd property
        /// </summary>
          [XmlEnum("gal[US]/d")]
          galUSd,
        /// <summary>
        /// galUSh property
        /// </summary>
          [XmlEnum("gal[US]/h")]
          galUSh,
        /// <summary>
        /// galUSmin property
        /// </summary>
          [XmlEnum("gal[US]/min")]
          galUSmin,
        /// <summary>
        /// Lh property
        /// </summary>
          [XmlEnum("L/h")]
          Lh,
        /// <summary>
        /// Lmin property
        /// </summary>
          [XmlEnum("L/min")]
          Lmin,
        /// <summary>
        /// Ls property
        /// </summary>
          [XmlEnum("L/s")]
          Ls,
        /// <summary>
        /// m3d property
        /// </summary>
          [XmlEnum("m3/d")]
          m3d,
        /// <summary>
        /// m3h property
        /// </summary>
          [XmlEnum("m3/h")]
          m3h,
        /// <summary>
        /// m3min property
        /// </summary>
          [XmlEnum("m3/min")]
          m3min,
        /// <summary>
        /// m3s property
        /// </summary>
          [XmlEnum("m3/s")]
          m3s
        }
        /// <summary>
        /// This class represents the VolumePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerVolumeUom xsd enumeration.")]
        public enum VolumePerVolumeUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// vol property
        /// </summary>
          [XmlEnum("%[vol]")]
          vol,
        /// <summary>
        /// Item0001bblft3 property
        /// </summary>
          [XmlEnum("0.001 bbl/ft3")]
          Item0001bblft3,
        /// <summary>
        /// Item0001bblm3 property
        /// </summary>
          [XmlEnum("0.001 bbl/m3")]
          Item0001bblm3,
        /// <summary>
        /// Item0001galUKbbl property
        /// </summary>
          [XmlEnum("0.001 gal[UK]/bbl")]
          Item0001galUKbbl,
        /// <summary>
        /// Item0001galUKgalUK property
        /// </summary>
          [XmlEnum("0.001 gal[UK]/gal[UK]")]
          Item0001galUKgalUK,
        /// <summary>
        /// Item0001galUSbbl property
        /// </summary>
          [XmlEnum("0.001 gal[US]/bbl")]
          Item0001galUSbbl,
        /// <summary>
        /// Item0001galUSft3 property
        /// </summary>
          [XmlEnum("0.001 gal[US]/ft3")]
          Item0001galUSft3,
        /// <summary>
        /// Item0001galUSgalUS property
        /// </summary>
          [XmlEnum("0.001 gal[US]/gal[US]")]
          Item0001galUSgalUS,
        /// <summary>
        /// Item0001ptUKbbl property
        /// </summary>
          [XmlEnum("0.001 pt[UK]/bbl")]
          Item0001ptUKbbl,
        /// <summary>
        /// Item001bblbbl property
        /// </summary>
          [XmlEnum("0.01 bbl/bbl")]
          Item001bblbbl,
        /// <summary>
        /// Item01galUSbbl property
        /// </summary>
          [XmlEnum("0.1 gal[US]/bbl")]
          Item01galUSbbl,
        /// <summary>
        /// Item01Lbbl property
        /// </summary>
          [XmlEnum("0.1 L/bbl")]
          Item01Lbbl,
        /// <summary>
        /// Item01ptUSbbl property
        /// </summary>
          [XmlEnum("0.1 pt[US]/bbl")]
          Item01ptUSbbl,
        /// <summary>
        /// Item1000ft3bbl property
        /// </summary>
          [XmlEnum("1000 ft3/bbl")]
          Item1000ft3bbl,
        /// <summary>
        /// Item1000m3m3 property
        /// </summary>
          [XmlEnum("1000 m3/m3")]
          Item1000m3m3,
        /// <summary>
        /// Item1E6acreftbbl property
        /// </summary>
          [XmlEnum("1E-6 acre.ft/bbl")]
          Item1E6acreftbbl,
        /// <summary>
        /// Item1E6bblft3 property
        /// </summary>
          [XmlEnum("1E-6 bbl/ft3")]
          Item1E6bblft3,
        /// <summary>
        /// Item1E6bblm3 property
        /// </summary>
          [XmlEnum("1E-6 bbl/m3")]
          Item1E6bblm3,
        /// <summary>
        /// Item1E6bblacreft property
        /// </summary>
          [XmlEnum("1E6 bbl/(acre.ft)")]
          Item1E6bblacreft,
        /// <summary>
        /// Item1E6ft3acreft property
        /// </summary>
          [XmlEnum("1E6 ft3/(acre.ft)")]
          Item1E6ft3acreft,
        /// <summary>
        /// Item1E6ft3bbl property
        /// </summary>
          [XmlEnum("1E6 ft3/bbl")]
          Item1E6ft3bbl,
        /// <summary>
        /// bblacreft property
        /// </summary>
          [XmlEnum("bbl/(acre.ft)")]
          bblacreft,
        /// <summary>
        /// bblbbl property
        /// </summary>
          [XmlEnum("bbl/bbl")]
          bblbbl,
        /// <summary>
        /// bblft3 property
        /// </summary>
          [XmlEnum("bbl/ft3")]
          bblft3,
        /// <summary>
        /// bblm3 property
        /// </summary>
          [XmlEnum("bbl/m3")]
          bblm3,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// cm3cm3 property
        /// </summary>
          [XmlEnum("cm3/cm3")]
          cm3cm3,
        /// <summary>
        /// cm3L property
        /// </summary>
          [XmlEnum("cm3/L")]
          cm3L,
        /// <summary>
        /// cm3m3 property
        /// </summary>
          [XmlEnum("cm3/m3")]
          cm3m3,
        /// <summary>
        /// dm3m3 property
        /// </summary>
          [XmlEnum("dm3/m3")]
          dm3m3,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// ft3bbl property
        /// </summary>
          [XmlEnum("ft3/bbl")]
          ft3bbl,
        /// <summary>
        /// ft3ft3 property
        /// </summary>
          [XmlEnum("ft3/ft3")]
          ft3ft3,
        /// <summary>
        /// galUKft3 property
        /// </summary>
          [XmlEnum("gal[UK]/ft3")]
          galUKft3,
        /// <summary>
        /// galUSbbl property
        /// </summary>
          [XmlEnum("gal[US]/bbl")]
          galUSbbl,
        /// <summary>
        /// galUSft3 property
        /// </summary>
          [XmlEnum("gal[US]/ft3")]
          galUSft3,
        /// <summary>
        /// Lm3 property
        /// </summary>
          [XmlEnum("L/m3")]
          Lm3,
        /// <summary>
        /// m3ham property
        /// </summary>
          [XmlEnum("m3/(ha.m)")]
          m3ham,
        /// <summary>
        /// m3bbl property
        /// </summary>
          [XmlEnum("m3/bbl")]
          m3bbl,
        /// <summary>
        /// m3m3 property
        /// </summary>
          [XmlEnum("m3/m3")]
          m3m3,
        /// <summary>
        /// mLgalUK property
        /// </summary>
          [XmlEnum("mL/gal[UK]")]
          mLgalUK,
        /// <summary>
        /// mLgalUS property
        /// </summary>
          [XmlEnum("mL/gal[US]")]
          mLgalUS,
        /// <summary>
        /// mLmL property
        /// </summary>
          [XmlEnum("mL/mL")]
          mLmL,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// ppmvol property
        /// </summary>
          [XmlEnum("ppm[vol]")]
          ppmvol
        }
        /// <summary>
        /// This class represents the VolumetricHeatTransferCoefficientUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumetricHeatTransferCoefficientUom xsd enumeration.")]
        public enum VolumetricHeatTransferCoefficientUom 
        {
        /// <summary>
        /// BtuIThft3deltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft3.deltaF)")]
          BtuIThft3deltaF,
        /// <summary>
        /// BtuITsft3deltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft3.deltaF)")]
          BtuITsft3deltaF,
        /// <summary>
        /// kWm3deltaK property
        /// </summary>
          [XmlEnum("kW/(m3.deltaK)")]
          kWm3deltaK,
        /// <summary>
        /// Wm3deltaK property
        /// </summary>
          [XmlEnum("W/(m3.deltaK)")]
          Wm3deltaK
        }
        /// <summary>
        /// This class represents the VolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumeUom xsd enumeration.")]
        public enum VolumeUom 
        {
        /// <summary>
        /// Item1000bbl property
        /// </summary>
          [XmlEnum("1000 bbl")]
          Item1000bbl,
        /// <summary>
        /// Item1000ft3 property
        /// </summary>
          [XmlEnum("1000 ft3")]
          Item1000ft3,
        /// <summary>
        /// Item1000galUK property
        /// </summary>
          [XmlEnum("1000 gal[UK]")]
          Item1000galUK,
        /// <summary>
        /// Item1000galUS property
        /// </summary>
          [XmlEnum("1000 gal[US]")]
          Item1000galUS,
        /// <summary>
        /// Item1000m3 property
        /// </summary>
          [XmlEnum("1000 m3")]
          Item1000m3,
        /// <summary>
        /// Item1E6galUS property
        /// </summary>
          [XmlEnum("1E-6 gal[US]")]
          Item1E6galUS,
        /// <summary>
        /// Item1E12ft3 property
        /// </summary>
          [XmlEnum("1E12 ft3")]
          Item1E12ft3,
        /// <summary>
        /// Item1E6bbl property
        /// </summary>
          [XmlEnum("1E6 bbl")]
          Item1E6bbl,
        /// <summary>
        /// Item1E6ft3 property
        /// </summary>
          [XmlEnum("1E6 ft3")]
          Item1E6ft3,
        /// <summary>
        /// Item1E6m3 property
        /// </summary>
          [XmlEnum("1E6 m3")]
          Item1E6m3,
        /// <summary>
        /// Item1E9bbl property
        /// </summary>
          [XmlEnum("1E9 bbl")]
          Item1E9bbl,
        /// <summary>
        /// Item1E9ft3 property
        /// </summary>
          [XmlEnum("1E9 ft3")]
          Item1E9ft3,
        /// <summary>
        /// acreft property
        /// </summary>
          [XmlEnum("acre.ft")]
          acreft,
        /// <summary>
        /// bbl property
        /// </summary>
          bbl,
        /// <summary>
        /// cm3 property
        /// </summary>
          cm3,
        /// <summary>
        /// dm3 property
        /// </summary>
          dm3,
        /// <summary>
        /// flozUK property
        /// </summary>
          [XmlEnum("floz[UK]")]
          flozUK,
        /// <summary>
        /// flozUS property
        /// </summary>
          [XmlEnum("floz[US]")]
          flozUS,
        /// <summary>
        /// ft3 property
        /// </summary>
          ft3,
        /// <summary>
        /// galUK property
        /// </summary>
          [XmlEnum("gal[UK]")]
          galUK,
        /// <summary>
        /// galUS property
        /// </summary>
          [XmlEnum("gal[US]")]
          galUS,
        /// <summary>
        /// ham property
        /// </summary>
          [XmlEnum("ha.m")]
          ham,
        /// <summary>
        /// hL property
        /// </summary>
          hL,
        /// <summary>
        /// in3 property
        /// </summary>
          in3,
        /// <summary>
        /// km3 property
        /// </summary>
          km3,
        /// <summary>
        /// L property
        /// </summary>
          L,
        /// <summary>
        /// m3 property
        /// </summary>
          m3,
        /// <summary>
        /// mi3 property
        /// </summary>
          mi3,
        /// <summary>
        /// mL property
        /// </summary>
          mL,
        /// <summary>
        /// mm3 property
        /// </summary>
          mm3,
        /// <summary>
        /// ptUK property
        /// </summary>
          [XmlEnum("pt[UK]")]
          ptUK,
        /// <summary>
        /// ptUS property
        /// </summary>
          [XmlEnum("pt[US]")]
          ptUS,
        /// <summary>
        /// qtUK property
        /// </summary>
          [XmlEnum("qt[UK]")]
          qtUK,
        /// <summary>
        /// qtUS property
        /// </summary>
          [XmlEnum("qt[US]")]
          qtUS,
        /// <summary>
        /// um2m property
        /// </summary>
          [XmlEnum("um2.m")]
          um2m,
        /// <summary>
        /// yd3 property
        /// </summary>
          yd3
        }
        /// <summary>
        /// This class represents the ChannelStatusKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ChannelStatusKind xsd enumeration.")]
        public enum ChannelStatusKind 
        {
        /// <summary>
        /// active property
        /// </summary>
          active,
        /// <summary>
        /// closed property
        /// </summary>
          closed,
        /// <summary>
        /// inactive property
        /// </summary>
          inactive
        }
        /// <summary>
        /// This class represents the GeochronologicalRank xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the GeochronologicalRank xsd enumeration.")]
        public enum GeochronologicalRank 
        {
        /// <summary>
        /// eon property
        /// </summary>
          eon,
        /// <summary>
        /// era property
        /// </summary>
          era,
        /// <summary>
        /// period property
        /// </summary>
          period,
        /// <summary>
        /// epoch property
        /// </summary>
          epoch,
        /// <summary>
        /// age property
        /// </summary>
          age,
        /// <summary>
        /// chron property
        /// </summary>
          chron
        }
        /// <summary>
        /// This class represents the LegacyUnitOfMeasure xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LegacyUnitOfMeasure xsd enumeration.")]
        public enum LegacyUnitOfMeasure 
        {
        /// <summary>
        /// Item1000scfd property
        /// </summary>
          [XmlEnum("1000scf/d")]
          Item1000scfd,
        /// <summary>
        /// Item1000scfmo property
        /// </summary>
          [XmlEnum("1000scf/mo")]
          Item1000scfmo,
        /// <summary>
        /// Item1000scfstb property
        /// </summary>
          [XmlEnum("1000scf/stb")]
          Item1000scfstb,
        /// <summary>
        /// Item1000scm property
        /// </summary>
          [XmlEnum("1000scm")]
          Item1000scm,
        /// <summary>
        /// Item1000scmd property
        /// </summary>
          [XmlEnum("1000scm/d")]
          Item1000scmd,
        /// <summary>
        /// Item1000scmmo property
        /// </summary>
          [XmlEnum("1000scm/mo")]
          Item1000scmmo,
        /// <summary>
        /// Item1000stb property
        /// </summary>
          [XmlEnum("1000stb")]
          Item1000stb,
        /// <summary>
        /// Item1000stbd property
        /// </summary>
          [XmlEnum("1000stb/d")]
          Item1000stbd,
        /// <summary>
        /// Item1000stbmo property
        /// </summary>
          [XmlEnum("1000stb/mo")]
          Item1000stbmo,
        /// <summary>
        /// Item1E6scf property
        /// </summary>
          [XmlEnum("1E6scf")]
          Item1E6scf,
        /// <summary>
        /// Item1E6scfd property
        /// </summary>
          [XmlEnum("1E6scf/d")]
          Item1E6scfd,
        /// <summary>
        /// Item1E6scfmo property
        /// </summary>
          [XmlEnum("1E6scf/mo")]
          Item1E6scfmo,
        /// <summary>
        /// Item1E6scfstb property
        /// </summary>
          [XmlEnum("1E6scf/stb")]
          Item1E6scfstb,
        /// <summary>
        /// Item1E6scm property
        /// </summary>
          [XmlEnum("1E6scm")]
          Item1E6scm,
        /// <summary>
        /// Item1E6scmd property
        /// </summary>
          [XmlEnum("1E6scm/d")]
          Item1E6scmd,
        /// <summary>
        /// Item1E6scmmo property
        /// </summary>
          [XmlEnum("1E6scm/mo")]
          Item1E6scmmo,
        /// <summary>
        /// Item1E6stb property
        /// </summary>
          [XmlEnum("1E6stb")]
          Item1E6stb,
        /// <summary>
        /// Item1E6stbacre property
        /// </summary>
          [XmlEnum("1E6stb/acre")]
          Item1E6stbacre,
        /// <summary>
        /// Item1E6stbacreft property
        /// </summary>
          [XmlEnum("1E6stb/acre.ft")]
          Item1E6stbacreft,
        /// <summary>
        /// Item1E6stbd property
        /// </summary>
          [XmlEnum("1E6stb/d")]
          Item1E6stbd,
        /// <summary>
        /// Item1E6stbmo property
        /// </summary>
          [XmlEnum("1E6stb/mo")]
          Item1E6stbmo,
        /// <summary>
        /// Item1E9scf property
        /// </summary>
          [XmlEnum("1E9scf")]
          Item1E9scf,
        /// <summary>
        /// acreft1E6stb property
        /// </summary>
          [XmlEnum("acre.ft/1E6stb")]
          acreft1E6stb,
        /// <summary>
        /// bbl1000scf property
        /// </summary>
          [XmlEnum("bbl/1000scf")]
          bbl1000scf,
        /// <summary>
        /// bbl1E6scf property
        /// </summary>
          [XmlEnum("bbl/1E6scf")]
          bbl1E6scf,
        /// <summary>
        /// bblscf property
        /// </summary>
          [XmlEnum("bbl/scf")]
          bblscf,
        /// <summary>
        /// bblstb property
        /// </summary>
          [XmlEnum("bbl/stb")]
          bblstb,
        /// <summary>
        /// ft3scf property
        /// </summary>
          [XmlEnum("ft3/scf")]
          ft3scf,
        /// <summary>
        /// ft3stb property
        /// </summary>
          [XmlEnum("ft3/stb")]
          ft3stb,
        /// <summary>
        /// galUS1000scf property
        /// </summary>
          [XmlEnum("galUS/1000scf")]
          galUS1000scf,
        /// <summary>
        /// kgscm property
        /// </summary>
          [XmlEnum("kg/scm")]
          kgscm,
        /// <summary>
        /// kscf property
        /// </summary>
          kscf,
        /// <summary>
        /// lbm1000scf property
        /// </summary>
          [XmlEnum("lbm/1000scf")]
          lbm1000scf,
        /// <summary>
        /// lbm1E6scf property
        /// </summary>
          [XmlEnum("lbm/1E6scf")]
          lbm1E6scf,
        /// <summary>
        /// m3scm property
        /// </summary>
          [XmlEnum("m3/scm")]
          m3scm,
        /// <summary>
        /// mlscm property
        /// </summary>
          [XmlEnum("ml/scm")]
          mlscm,
        /// <summary>
        /// Pascm property
        /// </summary>
          [XmlEnum("Pa/scm")]
          Pascm,
        /// <summary>
        /// psi1000scf property
        /// </summary>
          [XmlEnum("psi/1000scf")]
          psi1000scf,
        /// <summary>
        /// psi1E6scf property
        /// </summary>
          [XmlEnum("psi/1E6scf")]
          psi1E6scf,
        /// <summary>
        /// psia property
        /// </summary>
          psia,
        /// <summary>
        /// psig property
        /// </summary>
          psig,
        /// <summary>
        /// scf property
        /// </summary>
          scf,
        /// <summary>
        /// scfbbl property
        /// </summary>
          [XmlEnum("scf/bbl")]
          scfbbl,
        /// <summary>
        /// scfd property
        /// </summary>
          [XmlEnum("scf/d")]
          scfd,
        /// <summary>
        /// scfft2 property
        /// </summary>
          [XmlEnum("scf/ft2")]
          scfft2,
        /// <summary>
        /// scfft3 property
        /// </summary>
          [XmlEnum("scf/ft3")]
          scfft3,
        /// <summary>
        /// scfscf property
        /// </summary>
          [XmlEnum("scf/scf")]
          scfscf,
        /// <summary>
        /// scfstb property
        /// </summary>
          [XmlEnum("scf/stb")]
          scfstb,
        /// <summary>
        /// scm property
        /// </summary>
          scm,
        /// <summary>
        /// scmd property
        /// </summary>
          [XmlEnum("scm/d")]
          scmd,
        /// <summary>
        /// scmh property
        /// </summary>
          [XmlEnum("scm/h")]
          scmh,
        /// <summary>
        /// scmm2 property
        /// </summary>
          [XmlEnum("scm/m2")]
          scmm2,
        /// <summary>
        /// scmm3 property
        /// </summary>
          [XmlEnum("scm/m3")]
          scmm3,
        /// <summary>
        /// scmmo property
        /// </summary>
          [XmlEnum("scm/mo")]
          scmmo,
        /// <summary>
        /// scms property
        /// </summary>
          [XmlEnum("scm/s")]
          scms,
        /// <summary>
        /// scmscm property
        /// </summary>
          [XmlEnum("scm/scm")]
          scmscm,
        /// <summary>
        /// scmstb property
        /// </summary>
          [XmlEnum("scm/stb")]
          scmstb,
        /// <summary>
        /// stb property
        /// </summary>
          stb,
        /// <summary>
        /// stb1000scf property
        /// </summary>
          [XmlEnum("stb/1000scf")]
          stb1000scf,
        /// <summary>
        /// stb1000scm property
        /// </summary>
          [XmlEnum("stb/1000scm")]
          stb1000scm,
        /// <summary>
        /// stb1E6scf property
        /// </summary>
          [XmlEnum("stb/1E6scf")]
          stb1E6scf,
        /// <summary>
        /// stb1E6scm property
        /// </summary>
          [XmlEnum("stb/1E6scm")]
          stb1E6scm,
        /// <summary>
        /// stbacre property
        /// </summary>
          [XmlEnum("stb/acre")]
          stbacre,
        /// <summary>
        /// stbbbl property
        /// </summary>
          [XmlEnum("stb/bbl")]
          stbbbl,
        /// <summary>
        /// stbd property
        /// </summary>
          [XmlEnum("stb/d")]
          stbd,
        /// <summary>
        /// stbmo property
        /// </summary>
          [XmlEnum("stb/mo")]
          stbmo,
        /// <summary>
        /// stbscm property
        /// </summary>
          [XmlEnum("stb/scm")]
          stbscm,
        /// <summary>
        /// stbstb property
        /// </summary>
          [XmlEnum("stb/stb")]
          stbstb
        }
        /// <summary>
        /// This class represents the LithologyKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LithologyKind xsd enumeration.")]
        public enum LithologyKind 
        {
        /// <summary>
        /// alkalifeldsparrhyolite property
        /// </summary>
          [XmlEnum("alkali feldspar rhyolite")]
          alkalifeldsparrhyolite,
        /// <summary>
        /// alkaliolivinebasalt property
        /// </summary>
          [XmlEnum("alkali olivine basalt")]
          alkaliolivinebasalt,
        /// <summary>
        /// amphibolite property
        /// </summary>
          amphibolite,
        /// <summary>
        /// andesite property
        /// </summary>
          andesite,
        /// <summary>
        /// anhydrite property
        /// </summary>
          anhydrite,
        /// <summary>
        /// anorthositicrock property
        /// </summary>
          [XmlEnum("anorthositic rock")]
          anorthositicrock,
        /// <summary>
        /// anthracite property
        /// </summary>
          anthracite,
        /// <summary>
        /// aplite property
        /// </summary>
          aplite,
        /// <summary>
        /// arenite property
        /// </summary>
          arenite,
        /// <summary>
        /// argillaceous property
        /// </summary>
          argillaceous,
        /// <summary>
        /// arkose property
        /// </summary>
          arkose,
        /// <summary>
        /// basalt property
        /// </summary>
          basalt,
        /// <summary>
        /// basanite property
        /// </summary>
          basanite,
        /// <summary>
        /// bauxite property
        /// </summary>
          bauxite,
        /// <summary>
        /// bituminouscoal property
        /// </summary>
          [XmlEnum("bituminous coal")]
          bituminouscoal,
        /// <summary>
        /// blueschistmetamorphicrock property
        /// </summary>
          [XmlEnum("blueschist metamorphic rock")]
          blueschistmetamorphicrock,
        /// <summary>
        /// boninite property
        /// </summary>
          boninite,
        /// <summary>
        /// breccia property
        /// </summary>
          breccia,
        /// <summary>
        /// carbonateooze property
        /// </summary>
          [XmlEnum("carbonate ooze")]
          carbonateooze,
        /// <summary>
        /// carbonatite property
        /// </summary>
          carbonatite,
        /// <summary>
        /// chalk property
        /// </summary>
          chalk,
        /// <summary>
        /// chert property
        /// </summary>
          chert,
        /// <summary>
        /// clay property
        /// </summary>
          clay,
        /// <summary>
        /// claystone property
        /// </summary>
          claystone,
        /// <summary>
        /// coal property
        /// </summary>
          coal,
        /// <summary>
        /// conglomerate property
        /// </summary>
          conglomerate,
        /// <summary>
        /// dacite property
        /// </summary>
          dacite,
        /// <summary>
        /// diabase property
        /// </summary>
          diabase,
        /// <summary>
        /// diamictite property
        /// </summary>
          diamictite,
        /// <summary>
        /// diorite property
        /// </summary>
          diorite,
        /// <summary>
        /// dioritoid property
        /// </summary>
          dioritoid,
        /// <summary>
        /// doleriticrock property
        /// </summary>
          [XmlEnum("doleritic rock")]
          doleriticrock,
        /// <summary>
        /// dolomite property
        /// </summary>
          dolomite,
        /// <summary>
        /// dolomitic property
        /// </summary>
          dolomitic,
        /// <summary>
        /// eclogite property
        /// </summary>
          eclogite,
        /// <summary>
        /// exoticalkalinerock property
        /// </summary>
          [XmlEnum("exotic alkaline rock")]
          exoticalkalinerock,
        /// <summary>
        /// feldspar property
        /// </summary>
          feldspar,
        /// <summary>
        /// feldspathicarenite property
        /// </summary>
          [XmlEnum("feldspathic arenite")]
          feldspathicarenite,
        /// <summary>
        /// finegrainedigneousrock property
        /// </summary>
          [XmlEnum("fine grained igneous rock")]
          finegrainedigneousrock,
        /// <summary>
        /// foiddioritoid property
        /// </summary>
          [XmlEnum("foid dioritoid")]
          foiddioritoid,
        /// <summary>
        /// foidgabbroid property
        /// </summary>
          [XmlEnum("foid gabbroid")]
          foidgabbroid,
        /// <summary>
        /// foidsyenitoid property
        /// </summary>
          [XmlEnum("foid syenitoid")]
          foidsyenitoid,
        /// <summary>
        /// foidite property
        /// </summary>
          foidite,
        /// <summary>
        /// foiditoid property
        /// </summary>
          foiditoid,
        /// <summary>
        /// foidolite property
        /// </summary>
          foidolite,
        /// <summary>
        /// foliatedmetamorphicrock property
        /// </summary>
          [XmlEnum("foliated metamorphic rock")]
          foliatedmetamorphicrock,
        /// <summary>
        /// fragmentaligneousrock property
        /// </summary>
          [XmlEnum("fragmental igneous rock")]
          fragmentaligneousrock,
        /// <summary>
        /// gabbro property
        /// </summary>
          gabbro,
        /// <summary>
        /// gabbroicrock property
        /// </summary>
          [XmlEnum("gabbroic rock")]
          gabbroicrock,
        /// <summary>
        /// gabbroid property
        /// </summary>
          gabbroid,
        /// <summary>
        /// glauconite property
        /// </summary>
          glauconite,
        /// <summary>
        /// gneiss property
        /// </summary>
          gneiss,
        /// <summary>
        /// granite property
        /// </summary>
          granite,
        /// <summary>
        /// granodiorite property
        /// </summary>
          granodiorite,
        /// <summary>
        /// granofels property
        /// </summary>
          granofels,
        /// <summary>
        /// granulite property
        /// </summary>
          granulite,
        /// <summary>
        /// gravel property
        /// </summary>
          gravel,
        /// <summary>
        /// greenstone property
        /// </summary>
          greenstone,
        /// <summary>
        /// gumbo property
        /// </summary>
          gumbo,
        /// <summary>
        /// gypsum property
        /// </summary>
          gypsum,
        /// <summary>
        /// halite property
        /// </summary>
          halite,
        /// <summary>
        /// hornfels property
        /// </summary>
          hornfels,
        /// <summary>
        /// igneousrock property
        /// </summary>
          [XmlEnum("igneous rock")]
          igneousrock,
        /// <summary>
        /// impactgeneratedmaterial property
        /// </summary>
          [XmlEnum("impact generated material")]
          impactgeneratedmaterial,
        /// <summary>
        /// impuredolomite property
        /// </summary>
          [XmlEnum("impure dolomite")]
          impuredolomite,
        /// <summary>
        /// impurelimestone property
        /// </summary>
          [XmlEnum("impure limestone")]
          impurelimestone,
        /// <summary>
        /// intrusiverockplutonic property
        /// </summary>
          [XmlEnum("intrusive rock (plutonic)")]
          intrusiverockplutonic,
        /// <summary>
        /// ironrichsedimentaryrock property
        /// </summary>
          [XmlEnum("iron rich sedimentary rock")]
          ironrichsedimentaryrock,
        /// <summary>
        /// kalsiliticandmeliliticrocks property
        /// </summary>
          [XmlEnum("kalsilitic and melilitic rocks")]
          kalsiliticandmeliliticrocks,
        /// <summary>
        /// komatiiticrock property
        /// </summary>
          [XmlEnum("komatiitic rock")]
          komatiiticrock,
        /// <summary>
        /// latiticrock property
        /// </summary>
          [XmlEnum("latitic rock")]
          latiticrock,
        /// <summary>
        /// lignite property
        /// </summary>
          lignite,
        /// <summary>
        /// limeboundstone property
        /// </summary>
          [XmlEnum("lime boundstone")]
          limeboundstone,
        /// <summary>
        /// limeframestone property
        /// </summary>
          [XmlEnum("lime framestone")]
          limeframestone,
        /// <summary>
        /// limegrainstone property
        /// </summary>
          [XmlEnum("lime grainstone")]
          limegrainstone,
        /// <summary>
        /// limemudstone property
        /// </summary>
          [XmlEnum("lime mudstone")]
          limemudstone,
        /// <summary>
        /// limepackstone property
        /// </summary>
          [XmlEnum("lime packstone")]
          limepackstone,
        /// <summary>
        /// limewackestone property
        /// </summary>
          [XmlEnum("lime wackestone")]
          limewackestone,
        /// <summary>
        /// limestone property
        /// </summary>
          limestone,
        /// <summary>
        /// marble property
        /// </summary>
          marble,
        /// <summary>
        /// marl property
        /// </summary>
          marl,
        /// <summary>
        /// metamorphicrock property
        /// </summary>
          [XmlEnum("metamorphic rock")]
          metamorphicrock,
        /// <summary>
        /// micaschist property
        /// </summary>
          [XmlEnum("mica schist")]
          micaschist,
        /// <summary>
        /// migmatite property
        /// </summary>
          migmatite,
        /// <summary>
        /// monzogabbro property
        /// </summary>
          monzogabbro,
        /// <summary>
        /// mud property
        /// </summary>
          mud,
        /// <summary>
        /// mudstone property
        /// </summary>
          mudstone,
        /// <summary>
        /// myloniticrock property
        /// </summary>
          [XmlEnum("mylonitic rock")]
          myloniticrock,
        /// <summary>
        /// nodescription property
        /// </summary>
          [XmlEnum("no description")]
          nodescription,
        /// <summary>
        /// nosample property
        /// </summary>
          [XmlEnum("no sample")]
          nosample,
        /// <summary>
        /// ooze property
        /// </summary>
          ooze,
        /// <summary>
        /// ophiolite property
        /// </summary>
          ophiolite,
        /// <summary>
        /// organicbearingmudstone property
        /// </summary>
          [XmlEnum("organic bearing mudstone")]
          organicbearingmudstone,
        /// <summary>
        /// peat property
        /// </summary>
          peat,
        /// <summary>
        /// pegmatite property
        /// </summary>
          pegmatite,
        /// <summary>
        /// peridotite property
        /// </summary>
          peridotite,
        /// <summary>
        /// phaneriticigneousrock property
        /// </summary>
          [XmlEnum("phaneritic igneous rock")]
          phaneriticigneousrock,
        /// <summary>
        /// phonolite property
        /// </summary>
          phonolite,
        /// <summary>
        /// phonolitoid property
        /// </summary>
          phonolitoid,
        /// <summary>
        /// phosphate property
        /// </summary>
          phosphate,
        /// <summary>
        /// phosphaterock property
        /// </summary>
          [XmlEnum("phosphate rock")]
          phosphaterock,
        /// <summary>
        /// phyllite property
        /// </summary>
          phyllite,
        /// <summary>
        /// porphyry property
        /// </summary>
          porphyry,
        /// <summary>
        /// potassiumandmagnesiumsalts property
        /// </summary>
          [XmlEnum("potassium and magnesium salts")]
          potassiumandmagnesiumsalts,
        /// <summary>
        /// pyroclasticbreccia property
        /// </summary>
          [XmlEnum("pyroclastic breccia")]
          pyroclasticbreccia,
        /// <summary>
        /// pyroclasticrock property
        /// </summary>
          [XmlEnum("pyroclastic rock")]
          pyroclasticrock,
        /// <summary>
        /// pyroxenite property
        /// </summary>
          pyroxenite,
        /// <summary>
        /// quartzarenite property
        /// </summary>
          [XmlEnum("quartz arenite")]
          quartzarenite,
        /// <summary>
        /// quartzite property
        /// </summary>
          quartzite,
        /// <summary>
        /// rhyolite property
        /// </summary>
          rhyolite,
        /// <summary>
        /// rocksalt property
        /// </summary>
          [XmlEnum("rock salt")]
          rocksalt,
        /// <summary>
        /// sand property
        /// </summary>
          sand,
        /// <summary>
        /// sandstone property
        /// </summary>
          sandstone,
        /// <summary>
        /// sandy property
        /// </summary>
          sandy,
        /// <summary>
        /// sapropel property
        /// </summary>
          sapropel,
        /// <summary>
        /// schist property
        /// </summary>
          schist,
        /// <summary>
        /// serpentinite property
        /// </summary>
          serpentinite,
        /// <summary>
        /// shale property
        /// </summary>
          shale,
        /// <summary>
        /// siliceousooze property
        /// </summary>
          [XmlEnum("siliceous ooze")]
          siliceousooze,
        /// <summary>
        /// silt property
        /// </summary>
          silt,
        /// <summary>
        /// siltstone property
        /// </summary>
          siltstone,
        /// <summary>
        /// skarn property
        /// </summary>
          skarn,
        /// <summary>
        /// slate property
        /// </summary>
          slate,
        /// <summary>
        /// spilite property
        /// </summary>
          spilite,
        /// <summary>
        /// syenite property
        /// </summary>
          syenite,
        /// <summary>
        /// syenitoid property
        /// </summary>
          syenitoid,
        /// <summary>
        /// sylvite property
        /// </summary>
          sylvite,
        /// <summary>
        /// tephrite property
        /// </summary>
          tephrite,
        /// <summary>
        /// tephritoid property
        /// </summary>
          tephritoid,
        /// <summary>
        /// tholeiiticbasalt property
        /// </summary>
          [XmlEnum("tholeiitic basalt")]
          tholeiiticbasalt,
        /// <summary>
        /// tonalite property
        /// </summary>
          tonalite,
        /// <summary>
        /// trachyte property
        /// </summary>
          trachyte,
        /// <summary>
        /// trachyticrock property
        /// </summary>
          [XmlEnum("trachytic rock")]
          trachyticrock,
        /// <summary>
        /// trachytoid property
        /// </summary>
          trachytoid,
        /// <summary>
        /// travertine property
        /// </summary>
          travertine,
        /// <summary>
        /// tuff property
        /// </summary>
          tuff,
        /// <summary>
        /// tuffite property
        /// </summary>
          tuffite,
        /// <summary>
        /// ultrabasic property
        /// </summary>
          ultrabasic,
        /// <summary>
        /// undifferentiated property
        /// </summary>
          undifferentiated,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown,
        /// <summary>
        /// wacke property
        /// </summary>
          wacke
        }
        /// <summary>
        /// This class represents the LithologyQualifierKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LithologyQualifierKind xsd enumeration.")]
        public enum LithologyQualifierKind 
        {
        /// <summary>
        /// alkalifeldsparrhyolite property
        /// </summary>
          [XmlEnum("alkali feldspar rhyolite")]
          alkalifeldsparrhyolite,
        /// <summary>
        /// alkaliolivinebasalt property
        /// </summary>
          [XmlEnum("alkali olivine basalt")]
          alkaliolivinebasalt,
        /// <summary>
        /// amphibolite property
        /// </summary>
          amphibolite,
        /// <summary>
        /// amphibolitic property
        /// </summary>
          amphibolitic,
        /// <summary>
        /// andesite property
        /// </summary>
          andesite,
        /// <summary>
        /// andesitic property
        /// </summary>
          andesitic,
        /// <summary>
        /// anhydrite property
        /// </summary>
          anhydrite,
        /// <summary>
        /// anhydritic property
        /// </summary>
          anhydritic,
        /// <summary>
        /// ankerite property
        /// </summary>
          ankerite,
        /// <summary>
        /// ankeritic property
        /// </summary>
          ankeritic,
        /// <summary>
        /// anorthositicrock property
        /// </summary>
          [XmlEnum("anorthositic rock")]
          anorthositicrock,
        /// <summary>
        /// anthracite property
        /// </summary>
          anthracite,
        /// <summary>
        /// anthracitic property
        /// </summary>
          anthracitic,
        /// <summary>
        /// aplite property
        /// </summary>
          aplite,
        /// <summary>
        /// aplitic property
        /// </summary>
          aplitic,
        /// <summary>
        /// arenite property
        /// </summary>
          arenite,
        /// <summary>
        /// arenitic property
        /// </summary>
          arenitic,
        /// <summary>
        /// argillaceous property
        /// </summary>
          argillaceous,
        /// <summary>
        /// arkose property
        /// </summary>
          arkose,
        /// <summary>
        /// arkosic property
        /// </summary>
          arkosic,
        /// <summary>
        /// barite property
        /// </summary>
          barite,
        /// <summary>
        /// baritic property
        /// </summary>
          baritic,
        /// <summary>
        /// basalt property
        /// </summary>
          basalt,
        /// <summary>
        /// basaltic property
        /// </summary>
          basaltic,
        /// <summary>
        /// basanite property
        /// </summary>
          basanite,
        /// <summary>
        /// basanitic property
        /// </summary>
          basanitic,
        /// <summary>
        /// bauxite property
        /// </summary>
          bauxite,
        /// <summary>
        /// bauxitic property
        /// </summary>
          bauxitic,
        /// <summary>
        /// belemnites property
        /// </summary>
          belemnites,
        /// <summary>
        /// belemnitic property
        /// </summary>
          belemnitic,
        /// <summary>
        /// bioturbated property
        /// </summary>
          bioturbated,
        /// <summary>
        /// bioturbation property
        /// </summary>
          bioturbation,
        /// <summary>
        /// bitumen property
        /// </summary>
          bitumen,
        /// <summary>
        /// bituminous property
        /// </summary>
          bituminous,
        /// <summary>
        /// bituminouscoal property
        /// </summary>
          [XmlEnum("bituminous coal")]
          bituminouscoal,
        /// <summary>
        /// blueschistmetamorphicrock property
        /// </summary>
          [XmlEnum("blueschist metamorphic rock")]
          blueschistmetamorphicrock,
        /// <summary>
        /// boninite property
        /// </summary>
          boninite,
        /// <summary>
        /// breccia property
        /// </summary>
          breccia,
        /// <summary>
        /// brecciated property
        /// </summary>
          brecciated,
        /// <summary>
        /// bryozoan property
        /// </summary>
          bryozoan,
        /// <summary>
        /// bryozoans property
        /// </summary>
          bryozoans,
        /// <summary>
        /// burrowed property
        /// </summary>
          burrowed,
        /// <summary>
        /// burrows property
        /// </summary>
          burrows,
        /// <summary>
        /// calcareous property
        /// </summary>
          calcareous,
        /// <summary>
        /// calcite property
        /// </summary>
          calcite,
        /// <summary>
        /// calciteconcretion property
        /// </summary>
          [XmlEnum("calcite concretion")]
          calciteconcretion,
        /// <summary>
        /// calcitic property
        /// </summary>
          calcitic,
        /// <summary>
        /// carbonaceous property
        /// </summary>
          carbonaceous,
        /// <summary>
        /// carbonateooze property
        /// </summary>
          [XmlEnum("carbonate ooze")]
          carbonateooze,
        /// <summary>
        /// carbonatite property
        /// </summary>
          carbonatite,
        /// <summary>
        /// carbonatitic property
        /// </summary>
          carbonatitic,
        /// <summary>
        /// chalk property
        /// </summary>
          chalk,
        /// <summary>
        /// chalky property
        /// </summary>
          chalky,
        /// <summary>
        /// chamosite property
        /// </summary>
          chamosite,
        /// <summary>
        /// chamositic property
        /// </summary>
          chamositic,
        /// <summary>
        /// chert property
        /// </summary>
          chert,
        /// <summary>
        /// cherty property
        /// </summary>
          cherty,
        /// <summary>
        /// chlorite property
        /// </summary>
          chlorite,
        /// <summary>
        /// chloritic property
        /// </summary>
          chloritic,
        /// <summary>
        /// clay property
        /// </summary>
          clay,
        /// <summary>
        /// claystone property
        /// </summary>
          claystone,
        /// <summary>
        /// coal property
        /// </summary>
          coal,
        /// <summary>
        /// concretionary property
        /// </summary>
          concretionary,
        /// <summary>
        /// concretions property
        /// </summary>
          concretions,
        /// <summary>
        /// conglomerate property
        /// </summary>
          conglomerate,
        /// <summary>
        /// conglomeratic property
        /// </summary>
          conglomeratic,
        /// <summary>
        /// coralfragments property
        /// </summary>
          [XmlEnum("coral fragments")]
          coralfragments,
        /// <summary>
        /// coralline property
        /// </summary>
          coralline,
        /// <summary>
        /// crinoidal property
        /// </summary>
          crinoidal,
        /// <summary>
        /// crinoids property
        /// </summary>
          crinoids,
        /// <summary>
        /// dacite property
        /// </summary>
          dacite,
        /// <summary>
        /// dacitic property
        /// </summary>
          dacitic,
        /// <summary>
        /// diabase property
        /// </summary>
          diabase,
        /// <summary>
        /// diabasic property
        /// </summary>
          diabasic,
        /// <summary>
        /// diamictite property
        /// </summary>
          diamictite,
        /// <summary>
        /// diamictitic property
        /// </summary>
          diamictitic,
        /// <summary>
        /// diatomaceous property
        /// </summary>
          diatomaceous,
        /// <summary>
        /// diatoms property
        /// </summary>
          diatoms,
        /// <summary>
        /// diorite property
        /// </summary>
          diorite,
        /// <summary>
        /// dioritic property
        /// </summary>
          dioritic,
        /// <summary>
        /// dioritoid property
        /// </summary>
          dioritoid,
        /// <summary>
        /// dioritoidic property
        /// </summary>
          dioritoidic,
        /// <summary>
        /// doleriticrock property
        /// </summary>
          [XmlEnum("doleritic rock")]
          doleriticrock,
        /// <summary>
        /// dolomite property
        /// </summary>
          dolomite,
        /// <summary>
        /// dolomiteconcretion property
        /// </summary>
          [XmlEnum("dolomite concretion")]
          dolomiteconcretion,
        /// <summary>
        /// dolomitestringer property
        /// </summary>
          [XmlEnum("dolomite stringer")]
          dolomitestringer,
        /// <summary>
        /// dolomitic property
        /// </summary>
          dolomitic,
        /// <summary>
        /// eclogite property
        /// </summary>
          eclogite,
        /// <summary>
        /// eclogitic property
        /// </summary>
          eclogitic,
        /// <summary>
        /// exoticalkalinerock property
        /// </summary>
          [XmlEnum("exotic alkaline rock")]
          exoticalkalinerock,
        /// <summary>
        /// feldspar property
        /// </summary>
          feldspar,
        /// <summary>
        /// feldsparic property
        /// </summary>
          feldsparic,
        /// <summary>
        /// feldspathic property
        /// </summary>
          feldspathic,
        /// <summary>
        /// feldspathicarenite property
        /// </summary>
          [XmlEnum("feldspathic arenite")]
          feldspathicarenite,
        /// <summary>
        /// ferruginous property
        /// </summary>
          ferruginous,
        /// <summary>
        /// finegrainedigneousrock property
        /// </summary>
          [XmlEnum("fine grained igneous rock")]
          finegrainedigneousrock,
        /// <summary>
        /// foiddioritoid property
        /// </summary>
          [XmlEnum("foid dioritoid")]
          foiddioritoid,
        /// <summary>
        /// foidgabbroid property
        /// </summary>
          [XmlEnum("foid gabbroid")]
          foidgabbroid,
        /// <summary>
        /// foidsyenitoid property
        /// </summary>
          [XmlEnum("foid syenitoid")]
          foidsyenitoid,
        /// <summary>
        /// foidite property
        /// </summary>
          foidite,
        /// <summary>
        /// foiditic property
        /// </summary>
          foiditic,
        /// <summary>
        /// foiditoid property
        /// </summary>
          foiditoid,
        /// <summary>
        /// foidolite property
        /// </summary>
          foidolite,
        /// <summary>
        /// foidolitic property
        /// </summary>
          foidolitic,
        /// <summary>
        /// foliatedmetamorphicrock property
        /// </summary>
          [XmlEnum("foliated metamorphic rock")]
          foliatedmetamorphicrock,
        /// <summary>
        /// foraminifera property
        /// </summary>
          foraminifera,
        /// <summary>
        /// foraminiferous property
        /// </summary>
          foraminiferous,
        /// <summary>
        /// forams property
        /// </summary>
          forams,
        /// <summary>
        /// fossilfragments property
        /// </summary>
          [XmlEnum("fossil fragments")]
          fossilfragments,
        /// <summary>
        /// fossiliferous property
        /// </summary>
          fossiliferous,
        /// <summary>
        /// fossilsundifferentiated property
        /// </summary>
          [XmlEnum("fossils undifferentiated")]
          fossilsundifferentiated,
        /// <summary>
        /// fragmentaligneousrock property
        /// </summary>
          [XmlEnum("fragmental igneous rock")]
          fragmentaligneousrock,
        /// <summary>
        /// gabbro property
        /// </summary>
          gabbro,
        /// <summary>
        /// gabbroic property
        /// </summary>
          gabbroic,
        /// <summary>
        /// gabbroicrock property
        /// </summary>
          [XmlEnum("gabbroic rock")]
          gabbroicrock,
        /// <summary>
        /// gabbroid property
        /// </summary>
          gabbroid,
        /// <summary>
        /// gabbroidic property
        /// </summary>
          gabbroidic,
        /// <summary>
        /// gilsonite property
        /// </summary>
          gilsonite,
        /// <summary>
        /// gilsonitic property
        /// </summary>
          gilsonitic,
        /// <summary>
        /// glauconite property
        /// </summary>
          glauconite,
        /// <summary>
        /// glauconitic property
        /// </summary>
          glauconitic,
        /// <summary>
        /// gneiss property
        /// </summary>
          gneiss,
        /// <summary>
        /// gneissic property
        /// </summary>
          gneissic,
        /// <summary>
        /// granite property
        /// </summary>
          granite,
        /// <summary>
        /// granitic property
        /// </summary>
          granitic,
        /// <summary>
        /// granodiorite property
        /// </summary>
          granodiorite,
        /// <summary>
        /// granodioritic property
        /// </summary>
          granodioritic,
        /// <summary>
        /// granofels property
        /// </summary>
          granofels,
        /// <summary>
        /// granulite property
        /// </summary>
          granulite,
        /// <summary>
        /// granulitic property
        /// </summary>
          granulitic,
        /// <summary>
        /// gravel property
        /// </summary>
          gravel,
        /// <summary>
        /// gravelly property
        /// </summary>
          gravelly,
        /// <summary>
        /// greenstone property
        /// </summary>
          greenstone,
        /// <summary>
        /// gumbo property
        /// </summary>
          gumbo,
        /// <summary>
        /// gypsiferous property
        /// </summary>
          gypsiferous,
        /// <summary>
        /// gypsum property
        /// </summary>
          gypsum,
        /// <summary>
        /// halite property
        /// </summary>
          halite,
        /// <summary>
        /// halitic property
        /// </summary>
          halitic,
        /// <summary>
        /// hornfels property
        /// </summary>
          hornfels,
        /// <summary>
        /// hornfelsic property
        /// </summary>
          hornfelsic,
        /// <summary>
        /// igneous property
        /// </summary>
          igneous,
        /// <summary>
        /// igneousrock property
        /// </summary>
          [XmlEnum("igneous rock")]
          igneousrock,
        /// <summary>
        /// illite property
        /// </summary>
          illite,
        /// <summary>
        /// illitic property
        /// </summary>
          illitic,
        /// <summary>
        /// impactgeneratedmaterial property
        /// </summary>
          [XmlEnum("impact generated material")]
          impactgeneratedmaterial,
        /// <summary>
        /// impuredolomite property
        /// </summary>
          [XmlEnum("impure dolomite")]
          impuredolomite,
        /// <summary>
        /// impurelimestone property
        /// </summary>
          [XmlEnum("impure limestone")]
          impurelimestone,
        /// <summary>
        /// intrusiverockplutonic property
        /// </summary>
          [XmlEnum("intrusive rock (plutonic)")]
          intrusiverockplutonic,
        /// <summary>
        /// ironrichsedimentaryrock property
        /// </summary>
          [XmlEnum("iron rich sedimentary rock")]
          ironrichsedimentaryrock,
        /// <summary>
        /// kalsiliticandmeliliticrocks property
        /// </summary>
          [XmlEnum("kalsilitic and melilitic rocks")]
          kalsiliticandmeliliticrocks,
        /// <summary>
        /// kaolinite property
        /// </summary>
          kaolinite,
        /// <summary>
        /// kaolinitic property
        /// </summary>
          kaolinitic,
        /// <summary>
        /// komatiiticrock property
        /// </summary>
          [XmlEnum("komatiitic rock")]
          komatiiticrock,
        /// <summary>
        /// latiticrock property
        /// </summary>
          [XmlEnum("latitic rock")]
          latiticrock,
        /// <summary>
        /// lignite property
        /// </summary>
          lignite,
        /// <summary>
        /// lignitic property
        /// </summary>
          lignitic,
        /// <summary>
        /// limeboundstone property
        /// </summary>
          [XmlEnum("lime boundstone")]
          limeboundstone,
        /// <summary>
        /// limeframestone property
        /// </summary>
          [XmlEnum("lime framestone")]
          limeframestone,
        /// <summary>
        /// limegrainstone property
        /// </summary>
          [XmlEnum("lime grainstone")]
          limegrainstone,
        /// <summary>
        /// limemudstone property
        /// </summary>
          [XmlEnum("lime mudstone")]
          limemudstone,
        /// <summary>
        /// limepackstone property
        /// </summary>
          [XmlEnum("lime packstone")]
          limepackstone,
        /// <summary>
        /// limewackestone property
        /// </summary>
          [XmlEnum("lime wackestone")]
          limewackestone,
        /// <summary>
        /// limestone property
        /// </summary>
          limestone,
        /// <summary>
        /// limestonestringer property
        /// </summary>
          [XmlEnum("limestone stringer")]
          limestonestringer,
        /// <summary>
        /// lithic property
        /// </summary>
          lithic,
        /// <summary>
        /// lithicfragments property
        /// </summary>
          [XmlEnum("lithic fragments")]
          lithicfragments,
        /// <summary>
        /// marble property
        /// </summary>
          marble,
        /// <summary>
        /// marcasite property
        /// </summary>
          marcasite,
        /// <summary>
        /// marcasitic property
        /// </summary>
          marcasitic,
        /// <summary>
        /// marl property
        /// </summary>
          marl,
        /// <summary>
        /// marly property
        /// </summary>
          marly,
        /// <summary>
        /// metamorphicrock property
        /// </summary>
          [XmlEnum("metamorphic rock")]
          metamorphicrock,
        /// <summary>
        /// mica property
        /// </summary>
          mica,
        /// <summary>
        /// micaschist property
        /// </summary>
          [XmlEnum("mica schist")]
          micaschist,
        /// <summary>
        /// micaceous property
        /// </summary>
          micaceous,
        /// <summary>
        /// microfossiliferous property
        /// </summary>
          microfossiliferous,
        /// <summary>
        /// microfossils property
        /// </summary>
          microfossils,
        /// <summary>
        /// migmatite property
        /// </summary>
          migmatite,
        /// <summary>
        /// migmatitic property
        /// </summary>
          migmatitic,
        /// <summary>
        /// monzogabbro property
        /// </summary>
          monzogabbro,
        /// <summary>
        /// monzogabbroic property
        /// </summary>
          monzogabbroic,
        /// <summary>
        /// mud property
        /// </summary>
          mud,
        /// <summary>
        /// muddy property
        /// </summary>
          muddy,
        /// <summary>
        /// mudstone property
        /// </summary>
          mudstone,
        /// <summary>
        /// myloniticrock property
        /// </summary>
          [XmlEnum("mylonitic rock")]
          myloniticrock,
        /// <summary>
        /// nosample property
        /// </summary>
          [XmlEnum("no sample")]
          nosample,
        /// <summary>
        /// oncolite property
        /// </summary>
          oncolite,
        /// <summary>
        /// oncoliths property
        /// </summary>
          oncoliths,
        /// <summary>
        /// oncolitic property
        /// </summary>
          oncolitic,
        /// <summary>
        /// ooids property
        /// </summary>
          ooids,
        /// <summary>
        /// ooliths property
        /// </summary>
          ooliths,
        /// <summary>
        /// oolitic property
        /// </summary>
          oolitic,
        /// <summary>
        /// ooze property
        /// </summary>
          ooze,
        /// <summary>
        /// ophiolite property
        /// </summary>
          ophiolite,
        /// <summary>
        /// ophiolitic property
        /// </summary>
          ophiolitic,
        /// <summary>
        /// organicbearingmudstone property
        /// </summary>
          [XmlEnum("organic bearing mudstone")]
          organicbearingmudstone,
        /// <summary>
        /// ostracodal property
        /// </summary>
          ostracodal,
        /// <summary>
        /// ostracods property
        /// </summary>
          ostracods,
        /// <summary>
        /// peat property
        /// </summary>
          peat,
        /// <summary>
        /// peaty property
        /// </summary>
          peaty,
        /// <summary>
        /// pebble property
        /// </summary>
          pebble,
        /// <summary>
        /// pebbly property
        /// </summary>
          pebbly,
        /// <summary>
        /// pegmatite property
        /// </summary>
          pegmatite,
        /// <summary>
        /// pegmatitic property
        /// </summary>
          pegmatitic,
        /// <summary>
        /// pelletal property
        /// </summary>
          pelletal,
        /// <summary>
        /// pellets property
        /// </summary>
          pellets,
        /// <summary>
        /// peloidal property
        /// </summary>
          peloidal,
        /// <summary>
        /// peloids property
        /// </summary>
          peloids,
        /// <summary>
        /// peridotite property
        /// </summary>
          peridotite,
        /// <summary>
        /// peridotitic property
        /// </summary>
          peridotitic,
        /// <summary>
        /// phaneriticigneousrock property
        /// </summary>
          [XmlEnum("phaneritic igneous rock")]
          phaneriticigneousrock,
        /// <summary>
        /// phonolite property
        /// </summary>
          phonolite,
        /// <summary>
        /// phonolitic property
        /// </summary>
          phonolitic,
        /// <summary>
        /// phonolitoid property
        /// </summary>
          phonolitoid,
        /// <summary>
        /// phosphate property
        /// </summary>
          phosphate,
        /// <summary>
        /// phosphaterock property
        /// </summary>
          [XmlEnum("phosphate rock")]
          phosphaterock,
        /// <summary>
        /// phosphatic property
        /// </summary>
          phosphatic,
        /// <summary>
        /// phyllite property
        /// </summary>
          phyllite,
        /// <summary>
        /// phyllitic property
        /// </summary>
          phyllitic,
        /// <summary>
        /// pisolite property
        /// </summary>
          pisolite,
        /// <summary>
        /// pisoliths property
        /// </summary>
          pisoliths,
        /// <summary>
        /// pisolitic property
        /// </summary>
          pisolitic,
        /// <summary>
        /// plantremains property
        /// </summary>
          [XmlEnum("plant remains")]
          plantremains,
        /// <summary>
        /// porphyritic property
        /// </summary>
          porphyritic,
        /// <summary>
        /// porphyry property
        /// </summary>
          porphyry,
        /// <summary>
        /// potassiumandmagnesiumsalts property
        /// </summary>
          [XmlEnum("potassium and magnesium salts")]
          potassiumandmagnesiumsalts,
        /// <summary>
        /// pyrite property
        /// </summary>
          pyrite,
        /// <summary>
        /// pyritic property
        /// </summary>
          pyritic,
        /// <summary>
        /// pyroclasticbreccia property
        /// </summary>
          [XmlEnum("pyroclastic breccia")]
          pyroclasticbreccia,
        /// <summary>
        /// pyroclasticrock property
        /// </summary>
          [XmlEnum("pyroclastic rock")]
          pyroclasticrock,
        /// <summary>
        /// pyroxenite property
        /// </summary>
          pyroxenite,
        /// <summary>
        /// pyroxenitic property
        /// </summary>
          pyroxenitic,
        /// <summary>
        /// quartiferous property
        /// </summary>
          quartiferous,
        /// <summary>
        /// quartz property
        /// </summary>
          quartz,
        /// <summary>
        /// quartzarenite property
        /// </summary>
          [XmlEnum("quartz arenite")]
          quartzarenite,
        /// <summary>
        /// quartzite property
        /// </summary>
          quartzite,
        /// <summary>
        /// quartzitic property
        /// </summary>
          quartzitic,
        /// <summary>
        /// radiolaria property
        /// </summary>
          radiolaria,
        /// <summary>
        /// radiolarian property
        /// </summary>
          radiolarian,
        /// <summary>
        /// rhyolite property
        /// </summary>
          rhyolite,
        /// <summary>
        /// rhyolitic property
        /// </summary>
          rhyolitic,
        /// <summary>
        /// rocksalt property
        /// </summary>
          [XmlEnum("rock salt")]
          rocksalt,
        /// <summary>
        /// rootlets property
        /// </summary>
          rootlets,
        /// <summary>
        /// salty property
        /// </summary>
          salty,
        /// <summary>
        /// sand property
        /// </summary>
          sand,
        /// <summary>
        /// sandstone property
        /// </summary>
          sandstone,
        /// <summary>
        /// sandy property
        /// </summary>
          sandy,
        /// <summary>
        /// sapropel property
        /// </summary>
          sapropel,
        /// <summary>
        /// sapropelic property
        /// </summary>
          sapropelic,
        /// <summary>
        /// schist property
        /// </summary>
          schist,
        /// <summary>
        /// schisty property
        /// </summary>
          schisty,
        /// <summary>
        /// sepentinitic property
        /// </summary>
          sepentinitic,
        /// <summary>
        /// serpentinite property
        /// </summary>
          serpentinite,
        /// <summary>
        /// shale property
        /// </summary>
          shale,
        /// <summary>
        /// shaly property
        /// </summary>
          shaly,
        /// <summary>
        /// shellfragments property
        /// </summary>
          [XmlEnum("shell fragments")]
          shellfragments,
        /// <summary>
        /// shelly property
        /// </summary>
          shelly,
        /// <summary>
        /// siderite property
        /// </summary>
          siderite,
        /// <summary>
        /// sideriteconcretion property
        /// </summary>
          [XmlEnum("siderite concretion")]
          sideriteconcretion,
        /// <summary>
        /// sideritic property
        /// </summary>
          sideritic,
        /// <summary>
        /// siliceousooze property
        /// </summary>
          [XmlEnum("siliceous ooze")]
          siliceousooze,
        /// <summary>
        /// silt property
        /// </summary>
          silt,
        /// <summary>
        /// siltstone property
        /// </summary>
          siltstone,
        /// <summary>
        /// silty property
        /// </summary>
          silty,
        /// <summary>
        /// skarn property
        /// </summary>
          skarn,
        /// <summary>
        /// skarny property
        /// </summary>
          skarny,
        /// <summary>
        /// slate property
        /// </summary>
          slate,
        /// <summary>
        /// slaty property
        /// </summary>
          slaty,
        /// <summary>
        /// smectite property
        /// </summary>
          smectite,
        /// <summary>
        /// smectitic property
        /// </summary>
          smectitic,
        /// <summary>
        /// spicular property
        /// </summary>
          spicular,
        /// <summary>
        /// spicules property
        /// </summary>
          spicules,
        /// <summary>
        /// spilite property
        /// </summary>
          spilite,
        /// <summary>
        /// spilitic property
        /// </summary>
          spilitic,
        /// <summary>
        /// stylolites property
        /// </summary>
          stylolites,
        /// <summary>
        /// stylolitic property
        /// </summary>
          stylolitic,
        /// <summary>
        /// syenite property
        /// </summary>
          syenite,
        /// <summary>
        /// syenitic property
        /// </summary>
          syenitic,
        /// <summary>
        /// syenitoid property
        /// </summary>
          syenitoid,
        /// <summary>
        /// sylvite property
        /// </summary>
          sylvite,
        /// <summary>
        /// sylvitic property
        /// </summary>
          sylvitic,
        /// <summary>
        /// tarry property
        /// </summary>
          tarry,
        /// <summary>
        /// tephrite property
        /// </summary>
          tephrite,
        /// <summary>
        /// tephritic property
        /// </summary>
          tephritic,
        /// <summary>
        /// tephritoid property
        /// </summary>
          tephritoid,
        /// <summary>
        /// tholeiiticbasalt property
        /// </summary>
          [XmlEnum("tholeiitic basalt")]
          tholeiiticbasalt,
        /// <summary>
        /// tonalite property
        /// </summary>
          tonalite,
        /// <summary>
        /// tonalitic property
        /// </summary>
          tonalitic,
        /// <summary>
        /// trachyte property
        /// </summary>
          trachyte,
        /// <summary>
        /// trachytic property
        /// </summary>
          trachytic,
        /// <summary>
        /// trachyticrock property
        /// </summary>
          [XmlEnum("trachytic rock")]
          trachyticrock,
        /// <summary>
        /// trachytoid property
        /// </summary>
          trachytoid,
        /// <summary>
        /// travertine property
        /// </summary>
          travertine,
        /// <summary>
        /// tuff property
        /// </summary>
          tuff,
        /// <summary>
        /// tuffaceous property
        /// </summary>
          tuffaceous,
        /// <summary>
        /// tuffite property
        /// </summary>
          tuffite,
        /// <summary>
        /// tuffitic property
        /// </summary>
          tuffitic,
        /// <summary>
        /// ultrabasic property
        /// </summary>
          ultrabasic,
        /// <summary>
        /// undifferentiated property
        /// </summary>
          undifferentiated,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown,
        /// <summary>
        /// wacke property
        /// </summary>
          wacke
        }
        /// <summary>
        /// This class represents the LithostratigraphicRank xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LithostratigraphicRank xsd enumeration.")]
        public enum LithostratigraphicRank 
        {
        /// <summary>
        /// group property
        /// </summary>
          group,
        /// <summary>
        /// formation property
        /// </summary>
          formation,
        /// <summary>
        /// member property
        /// </summary>
          member,
        /// <summary>
        /// bed property
        /// </summary>
          bed
        }
        /// <summary>
        /// This class represents the MatrixCementKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MatrixCementKind xsd enumeration.")]
        public enum MatrixCementKind 
        {
        /// <summary>
        /// ankerite property
        /// </summary>
          ankerite,
        /// <summary>
        /// calcite property
        /// </summary>
          calcite,
        /// <summary>
        /// chlorite property
        /// </summary>
          chlorite,
        /// <summary>
        /// dolomite property
        /// </summary>
          dolomite,
        /// <summary>
        /// illite property
        /// </summary>
          illite,
        /// <summary>
        /// kaolinite property
        /// </summary>
          kaolinite,
        /// <summary>
        /// quartz property
        /// </summary>
          quartz,
        /// <summary>
        /// siderite property
        /// </summary>
          siderite,
        /// <summary>
        /// smectite property
        /// </summary>
          smectite
        }
        /// <summary>
        /// This class represents the QuantityClassKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the QuantityClassKind xsd enumeration.")]
        public enum QuantityClassKind 
        {
        /// <summary>
        /// absorbeddose property
        /// </summary>
          [XmlEnum("absorbed dose")]
          absorbeddose,
        /// <summary>
        /// activityofradioactivity property
        /// </summary>
          [XmlEnum("activity of radioactivity")]
          activityofradioactivity,
        /// <summary>
        /// amountofsubstance property
        /// </summary>
          [XmlEnum("amount of substance")]
          amountofsubstance,
        /// <summary>
        /// amountofsubstanceperamountofsubstance property
        /// </summary>
          [XmlEnum("amount of substance per amount of substance")]
          amountofsubstanceperamountofsubstance,
        /// <summary>
        /// amountofsubstanceperarea property
        /// </summary>
          [XmlEnum("amount of substance per area")]
          amountofsubstanceperarea,
        /// <summary>
        /// amountofsubstancepertime property
        /// </summary>
          [XmlEnum("amount of substance per time")]
          amountofsubstancepertime,
        /// <summary>
        /// amountofsubstancepertimeperarea property
        /// </summary>
          [XmlEnum("amount of substance per time per area")]
          amountofsubstancepertimeperarea,
        /// <summary>
        /// amountofsubstancepervolume property
        /// </summary>
          [XmlEnum("amount of substance per volume")]
          amountofsubstancepervolume,
        /// <summary>
        /// angleperlength property
        /// </summary>
          [XmlEnum("angle per length")]
          angleperlength,
        /// <summary>
        /// anglepervolume property
        /// </summary>
          [XmlEnum("angle per volume")]
          anglepervolume,
        /// <summary>
        /// angularacceleration property
        /// </summary>
          [XmlEnum("angular acceleration")]
          angularacceleration,
        /// <summary>
        /// angularvelocity property
        /// </summary>
          [XmlEnum("angular velocity")]
          angularvelocity,
        /// <summary>
        /// apigammaray property
        /// </summary>
          [XmlEnum("api gamma ray")]
          apigammaray,
        /// <summary>
        /// apigravity property
        /// </summary>
          [XmlEnum("api gravity")]
          apigravity,
        /// <summary>
        /// apineutron property
        /// </summary>
          [XmlEnum("api neutron")]
          apineutron,
        /// <summary>
        /// area property
        /// </summary>
          area,
        /// <summary>
        /// areaperamountofsubstance property
        /// </summary>
          [XmlEnum("area per amount of substance")]
          areaperamountofsubstance,
        /// <summary>
        /// areaperarea property
        /// </summary>
          [XmlEnum("area per area")]
          areaperarea,
        /// <summary>
        /// areapercount property
        /// </summary>
          [XmlEnum("area per count")]
          areapercount,
        /// <summary>
        /// areapermass property
        /// </summary>
          [XmlEnum("area per mass")]
          areapermass,
        /// <summary>
        /// areapertime property
        /// </summary>
          [XmlEnum("area per time")]
          areapertime,
        /// <summary>
        /// areapervolume property
        /// </summary>
          [XmlEnum("area per volume")]
          areapervolume,
        /// <summary>
        /// attenuationperfrequencyinterval property
        /// </summary>
          [XmlEnum("attenuation per frequency interval")]
          attenuationperfrequencyinterval,
        /// <summary>
        /// capacitance property
        /// </summary>
          capacitance,
        /// <summary>
        /// cationexchangecapacity property
        /// </summary>
          [XmlEnum("cation exchange capacity")]
          cationexchangecapacity,
        /// <summary>
        /// datatransferspeed property
        /// </summary>
          [XmlEnum("data transfer speed")]
          datatransferspeed,
        /// <summary>
        /// diffusioncoefficient property
        /// </summary>
          [XmlEnum("diffusion coefficient")]
          diffusioncoefficient,
        /// <summary>
        /// diffusivetimeofflight property
        /// </summary>
          [XmlEnum("diffusive time of flight")]
          diffusivetimeofflight,
        /// <summary>
        /// digitalstorage property
        /// </summary>
          [XmlEnum("digital storage")]
          digitalstorage,
        /// <summary>
        /// dimensionless property
        /// </summary>
          dimensionless,
        /// <summary>
        /// dipolemoment property
        /// </summary>
          [XmlEnum("dipole moment")]
          dipolemoment,
        /// <summary>
        /// doseequivalent property
        /// </summary>
          [XmlEnum("dose equivalent")]
          doseequivalent,
        /// <summary>
        /// dynamicviscosity property
        /// </summary>
          [XmlEnum("dynamic viscosity")]
          dynamicviscosity,
        /// <summary>
        /// electriccharge property
        /// </summary>
          [XmlEnum("electric charge")]
          electriccharge,
        /// <summary>
        /// electricchargeperarea property
        /// </summary>
          [XmlEnum("electric charge per area")]
          electricchargeperarea,
        /// <summary>
        /// electricchargepermass property
        /// </summary>
          [XmlEnum("electric charge per mass")]
          electricchargepermass,
        /// <summary>
        /// electricchargepervolume property
        /// </summary>
          [XmlEnum("electric charge per volume")]
          electricchargepervolume,
        /// <summary>
        /// electricconductance property
        /// </summary>
          [XmlEnum("electric conductance")]
          electricconductance,
        /// <summary>
        /// electricconductivity property
        /// </summary>
          [XmlEnum("electric conductivity")]
          electricconductivity,
        /// <summary>
        /// electriccurrent property
        /// </summary>
          [XmlEnum("electric current")]
          electriccurrent,
        /// <summary>
        /// electriccurrentdensity property
        /// </summary>
          [XmlEnum("electric current density")]
          electriccurrentdensity,
        /// <summary>
        /// electricfieldstrength property
        /// </summary>
          [XmlEnum("electric field strength")]
          electricfieldstrength,
        /// <summary>
        /// electricpotentialdifference property
        /// </summary>
          [XmlEnum("electric potential difference")]
          electricpotentialdifference,
        /// <summary>
        /// electricresistance property
        /// </summary>
          [XmlEnum("electric resistance")]
          electricresistance,
        /// <summary>
        /// electricresistanceperlength property
        /// </summary>
          [XmlEnum("electric resistance per length")]
          electricresistanceperlength,
        /// <summary>
        /// electricalresistivity property
        /// </summary>
          [XmlEnum("electrical resistivity")]
          electricalresistivity,
        /// <summary>
        /// electromagneticmoment property
        /// </summary>
          [XmlEnum("electromagnetic moment")]
          electromagneticmoment,
        /// <summary>
        /// energy property
        /// </summary>
          energy,
        /// <summary>
        /// energylengthperarea property
        /// </summary>
          [XmlEnum("energy length per area")]
          energylengthperarea,
        /// <summary>
        /// energylengthpertimeareatemperature property
        /// </summary>
          [XmlEnum("energy length per time area temperature")]
          energylengthpertimeareatemperature,
        /// <summary>
        /// energyperarea property
        /// </summary>
          [XmlEnum("energy per area")]
          energyperarea,
        /// <summary>
        /// energyperlength property
        /// </summary>
          [XmlEnum("energy per length")]
          energyperlength,
        /// <summary>
        /// energypermass property
        /// </summary>
          [XmlEnum("energy per mass")]
          energypermass,
        /// <summary>
        /// energypermasspertime property
        /// </summary>
          [XmlEnum("energy per mass per time")]
          energypermasspertime,
        /// <summary>
        /// energypervolume property
        /// </summary>
          [XmlEnum("energy per volume")]
          energypervolume,
        /// <summary>
        /// force property
        /// </summary>
          force,
        /// <summary>
        /// forcearea property
        /// </summary>
          [XmlEnum("force area")]
          forcearea,
        /// <summary>
        /// forcelengthperlength property
        /// </summary>
          [XmlEnum("force length per length")]
          forcelengthperlength,
        /// <summary>
        /// forceperforce property
        /// </summary>
          [XmlEnum("force per force")]
          forceperforce,
        /// <summary>
        /// forceperlength property
        /// </summary>
          [XmlEnum("force per length")]
          forceperlength,
        /// <summary>
        /// forcepervolume property
        /// </summary>
          [XmlEnum("force per volume")]
          forcepervolume,
        /// <summary>
        /// frequency property
        /// </summary>
          frequency,
        /// <summary>
        /// frequencyinterval property
        /// </summary>
          [XmlEnum("frequency interval")]
          frequencyinterval,
        /// <summary>
        /// heatcapacity property
        /// </summary>
          [XmlEnum("heat capacity")]
          heatcapacity,
        /// <summary>
        /// heatflowrate property
        /// </summary>
          [XmlEnum("heat flow rate")]
          heatflowrate,
        /// <summary>
        /// heattransfercoefficient property
        /// </summary>
          [XmlEnum("heat transfer coefficient")]
          heattransfercoefficient,
        /// <summary>
        /// illuminance property
        /// </summary>
          illuminance,
        /// <summary>
        /// inductance property
        /// </summary>
          inductance,
        /// <summary>
        /// isothermalcompressibility property
        /// </summary>
          [XmlEnum("isothermal compressibility")]
          isothermalcompressibility,
        /// <summary>
        /// kinematicviscosity property
        /// </summary>
          [XmlEnum("kinematic viscosity")]
          kinematicviscosity,
        /// <summary>
        /// length property
        /// </summary>
          length,
        /// <summary>
        /// lengthperlength property
        /// </summary>
          [XmlEnum("length per length")]
          lengthperlength,
        /// <summary>
        /// lengthpermass property
        /// </summary>
          [XmlEnum("length per mass")]
          lengthpermass,
        /// <summary>
        /// lengthperpressure property
        /// </summary>
          [XmlEnum("length per pressure")]
          lengthperpressure,
        /// <summary>
        /// lengthpertemperature property
        /// </summary>
          [XmlEnum("length per temperature")]
          lengthpertemperature,
        /// <summary>
        /// lengthpertime property
        /// </summary>
          [XmlEnum("length per time")]
          lengthpertime,
        /// <summary>
        /// lengthpervolume property
        /// </summary>
          [XmlEnum("length per volume")]
          lengthpervolume,
        /// <summary>
        /// lightexposure property
        /// </summary>
          [XmlEnum("light exposure")]
          lightexposure,
        /// <summary>
        /// linearacceleration property
        /// </summary>
          [XmlEnum("linear acceleration")]
          linearacceleration,
        /// <summary>
        /// linearthermalexpansion property
        /// </summary>
          [XmlEnum("linear thermal expansion")]
          linearthermalexpansion,
        /// <summary>
        /// logarithmicpowerratio property
        /// </summary>
          [XmlEnum("logarithmic power ratio")]
          logarithmicpowerratio,
        /// <summary>
        /// logarithmicpowerratioperlength property
        /// </summary>
          [XmlEnum("logarithmic power ratio per length")]
          logarithmicpowerratioperlength,
        /// <summary>
        /// luminance property
        /// </summary>
          luminance,
        /// <summary>
        /// luminousefficacy property
        /// </summary>
          [XmlEnum("luminous efficacy")]
          luminousefficacy,
        /// <summary>
        /// luminousflux property
        /// </summary>
          [XmlEnum("luminous flux")]
          luminousflux,
        /// <summary>
        /// luminousintensity property
        /// </summary>
          [XmlEnum("luminous intensity")]
          luminousintensity,
        /// <summary>
        /// magneticdipolemoment property
        /// </summary>
          [XmlEnum("magnetic dipole moment")]
          magneticdipolemoment,
        /// <summary>
        /// magneticfieldstrength property
        /// </summary>
          [XmlEnum("magnetic field strength")]
          magneticfieldstrength,
        /// <summary>
        /// magneticflux property
        /// </summary>
          [XmlEnum("magnetic flux")]
          magneticflux,
        /// <summary>
        /// magneticfluxdensity property
        /// </summary>
          [XmlEnum("magnetic flux density")]
          magneticfluxdensity,
        /// <summary>
        /// magneticfluxdensityperlength property
        /// </summary>
          [XmlEnum("magnetic flux density per length")]
          magneticfluxdensityperlength,
        /// <summary>
        /// magneticpermeability property
        /// </summary>
          [XmlEnum("magnetic permeability")]
          magneticpermeability,
        /// <summary>
        /// magneticvectorpotential property
        /// </summary>
          [XmlEnum("magnetic vector potential")]
          magneticvectorpotential,
        /// <summary>
        /// mass property
        /// </summary>
          mass,
        /// <summary>
        /// masslength property
        /// </summary>
          [XmlEnum("mass length")]
          masslength,
        /// <summary>
        /// massperarea property
        /// </summary>
          [XmlEnum("mass per area")]
          massperarea,
        /// <summary>
        /// massperenergy property
        /// </summary>
          [XmlEnum("mass per energy")]
          massperenergy,
        /// <summary>
        /// massperlength property
        /// </summary>
          [XmlEnum("mass per length")]
          massperlength,
        /// <summary>
        /// masspermass property
        /// </summary>
          [XmlEnum("mass per mass")]
          masspermass,
        /// <summary>
        /// masspertime property
        /// </summary>
          [XmlEnum("mass per time")]
          masspertime,
        /// <summary>
        /// masspertimeperarea property
        /// </summary>
          [XmlEnum("mass per time per area")]
          masspertimeperarea,
        /// <summary>
        /// masspertimeperlength property
        /// </summary>
          [XmlEnum("mass per time per length")]
          masspertimeperlength,
        /// <summary>
        /// masspervolume property
        /// </summary>
          [XmlEnum("mass per volume")]
          masspervolume,
        /// <summary>
        /// masspervolumeperlength property
        /// </summary>
          [XmlEnum("mass per volume per length")]
          masspervolumeperlength,
        /// <summary>
        /// masspervolumeperpressure property
        /// </summary>
          [XmlEnum("mass per volume per pressure")]
          masspervolumeperpressure,
        /// <summary>
        /// masspervolumepertemperature property
        /// </summary>
          [XmlEnum("mass per volume per temperature")]
          masspervolumepertemperature,
        /// <summary>
        /// mobility property
        /// </summary>
          mobility,
        /// <summary>
        /// molarenergy property
        /// </summary>
          [XmlEnum("molar energy")]
          molarenergy,
        /// <summary>
        /// molarheatcapacity property
        /// </summary>
          [XmlEnum("molar heat capacity")]
          molarheatcapacity,
        /// <summary>
        /// molarvolume property
        /// </summary>
          [XmlEnum("molar volume")]
          molarvolume,
        /// <summary>
        /// molecularweight property
        /// </summary>
          [XmlEnum("molecular weight")]
          molecularweight,
        /// <summary>
        /// momentofforce property
        /// </summary>
          [XmlEnum("moment of force")]
          momentofforce,
        /// <summary>
        /// momentofinertia property
        /// </summary>
          [XmlEnum("moment of inertia")]
          momentofinertia,
        /// <summary>
        /// momentum property
        /// </summary>
          momentum,
        /// <summary>
        /// normalizedpower property
        /// </summary>
          [XmlEnum("normalized power")]
          normalizedpower,
        /// <summary>
        /// permeabilitylength property
        /// </summary>
          [XmlEnum("permeability length")]
          permeabilitylength,
        /// <summary>
        /// permeabilityrock property
        /// </summary>
          [XmlEnum("permeability rock")]
          permeabilityrock,
        /// <summary>
        /// permittivity property
        /// </summary>
          permittivity,
        /// <summary>
        /// planeangle property
        /// </summary>
          [XmlEnum("plane angle")]
          planeangle,
        /// <summary>
        /// potentialdifferenceperpowerdrop property
        /// </summary>
          [XmlEnum("potential difference per power drop")]
          potentialdifferenceperpowerdrop,
        /// <summary>
        /// power property
        /// </summary>
          power,
        /// <summary>
        /// powerperarea property
        /// </summary>
          [XmlEnum("power per area")]
          powerperarea,
        /// <summary>
        /// powerperpower property
        /// </summary>
          [XmlEnum("power per power")]
          powerperpower,
        /// <summary>
        /// powerpervolume property
        /// </summary>
          [XmlEnum("power per volume")]
          powerpervolume,
        /// <summary>
        /// pressure property
        /// </summary>
          pressure,
        /// <summary>
        /// pressureperpressure property
        /// </summary>
          [XmlEnum("pressure per pressure")]
          pressureperpressure,
        /// <summary>
        /// pressurepertime property
        /// </summary>
          [XmlEnum("pressure per time")]
          pressurepertime,
        /// <summary>
        /// pressurepervolume property
        /// </summary>
          [XmlEnum("pressure per volume")]
          pressurepervolume,
        /// <summary>
        /// pressuresquared property
        /// </summary>
          [XmlEnum("pressure squared")]
          pressuresquared,
        /// <summary>
        /// pressuresquaredperforcetimeperarea property
        /// </summary>
          [XmlEnum("pressure squared per force time per area")]
          pressuresquaredperforcetimeperarea,
        /// <summary>
        /// pressuretimepervolume property
        /// </summary>
          [XmlEnum("pressure time per volume")]
          pressuretimepervolume,
        /// <summary>
        /// quantityoflight property
        /// </summary>
          [XmlEnum("quantity of light")]
          quantityoflight,
        /// <summary>
        /// radiance property
        /// </summary>
          radiance,
        /// <summary>
        /// radiantintensity property
        /// </summary>
          [XmlEnum("radiant intensity")]
          radiantintensity,
        /// <summary>
        /// reciprocalarea property
        /// </summary>
          [XmlEnum("reciprocal area")]
          reciprocalarea,
        /// <summary>
        /// reciprocalelectricpotentialdifference property
        /// </summary>
          [XmlEnum("reciprocal electric potential difference")]
          reciprocalelectricpotentialdifference,
        /// <summary>
        /// reciprocalforce property
        /// </summary>
          [XmlEnum("reciprocal force")]
          reciprocalforce,
        /// <summary>
        /// reciprocallength property
        /// </summary>
          [XmlEnum("reciprocal length")]
          reciprocallength,
        /// <summary>
        /// reciprocalmass property
        /// </summary>
          [XmlEnum("reciprocal mass")]
          reciprocalmass,
        /// <summary>
        /// reciprocalmasstime property
        /// </summary>
          [XmlEnum("reciprocal mass time")]
          reciprocalmasstime,
        /// <summary>
        /// reciprocalpressure property
        /// </summary>
          [XmlEnum("reciprocal pressure")]
          reciprocalpressure,
        /// <summary>
        /// reciprocaltime property
        /// </summary>
          [XmlEnum("reciprocal time")]
          reciprocaltime,
        /// <summary>
        /// reciprocalvolume property
        /// </summary>
          [XmlEnum("reciprocal volume")]
          reciprocalvolume,
        /// <summary>
        /// reluctance property
        /// </summary>
          reluctance,
        /// <summary>
        /// secondmomentofarea property
        /// </summary>
          [XmlEnum("second moment of area")]
          secondmomentofarea,
        /// <summary>
        /// signalingeventpertime property
        /// </summary>
          [XmlEnum("signaling event per time")]
          signalingeventpertime,
        /// <summary>
        /// solidangle property
        /// </summary>
          [XmlEnum("solid angle")]
          solidangle,
        /// <summary>
        /// specificheatcapacity property
        /// </summary>
          [XmlEnum("specific heat capacity")]
          specificheatcapacity,
        /// <summary>
        /// temperatureinterval property
        /// </summary>
          [XmlEnum("temperature interval")]
          temperatureinterval,
        /// <summary>
        /// temperatureintervalperlength property
        /// </summary>
          [XmlEnum("temperature interval per length")]
          temperatureintervalperlength,
        /// <summary>
        /// temperatureintervalperpressure property
        /// </summary>
          [XmlEnum("temperature interval per pressure")]
          temperatureintervalperpressure,
        /// <summary>
        /// temperatureintervalpertime property
        /// </summary>
          [XmlEnum("temperature interval per time")]
          temperatureintervalpertime,
        /// <summary>
        /// thermalconductance property
        /// </summary>
          [XmlEnum("thermal conductance")]
          thermalconductance,
        /// <summary>
        /// thermalconductivity property
        /// </summary>
          [XmlEnum("thermal conductivity")]
          thermalconductivity,
        /// <summary>
        /// thermaldiffusivity property
        /// </summary>
          [XmlEnum("thermal diffusivity")]
          thermaldiffusivity,
        /// <summary>
        /// thermalinsulance property
        /// </summary>
          [XmlEnum("thermal insulance")]
          thermalinsulance,
        /// <summary>
        /// thermalresistance property
        /// </summary>
          [XmlEnum("thermal resistance")]
          thermalresistance,
        /// <summary>
        /// thermodynamictemperature property
        /// </summary>
          [XmlEnum("thermodynamic temperature")]
          thermodynamictemperature,
        /// <summary>
        /// thermodynamictemperatureperthermodynamictemperature property
        /// </summary>
          [XmlEnum("thermodynamic temperature per thermodynamic temperature")]
          thermodynamictemperatureperthermodynamictemperature,
        /// <summary>
        /// time property
        /// </summary>
          time,
        /// <summary>
        /// timeperlength property
        /// </summary>
          [XmlEnum("time per length")]
          timeperlength,
        /// <summary>
        /// timepermass property
        /// </summary>
          [XmlEnum("time per mass")]
          timepermass,
        /// <summary>
        /// timepertime property
        /// </summary>
          [XmlEnum("time per time")]
          timepertime,
        /// <summary>
        /// timepervolume property
        /// </summary>
          [XmlEnum("time per volume")]
          timepervolume,
        /// <summary>
        /// verticalcoordinate property
        /// </summary>
          [XmlEnum("vertical coordinate")]
          verticalcoordinate,
        /// <summary>
        /// volume property
        /// </summary>
          volume,
        /// <summary>
        /// volumeflowratepervolumeflowrate property
        /// </summary>
          [XmlEnum("volume flow rate per volume flow rate")]
          volumeflowratepervolumeflowrate,
        /// <summary>
        /// volumeperarea property
        /// </summary>
          [XmlEnum("volume per area")]
          volumeperarea,
        /// <summary>
        /// volumeperlength property
        /// </summary>
          [XmlEnum("volume per length")]
          volumeperlength,
        /// <summary>
        /// volumepermass property
        /// </summary>
          [XmlEnum("volume per mass")]
          volumepermass,
        /// <summary>
        /// volumeperpressure property
        /// </summary>
          [XmlEnum("volume per pressure")]
          volumeperpressure,
        /// <summary>
        /// volumeperrotation property
        /// </summary>
          [XmlEnum("volume per rotation")]
          volumeperrotation,
        /// <summary>
        /// volumepertime property
        /// </summary>
          [XmlEnum("volume per time")]
          volumepertime,
        /// <summary>
        /// volumepertimelength property
        /// </summary>
          [XmlEnum("volume per time length")]
          volumepertimelength,
        /// <summary>
        /// volumepertimeperarea property
        /// </summary>
          [XmlEnum("volume per time per area")]
          volumepertimeperarea,
        /// <summary>
        /// volumepertimeperlength property
        /// </summary>
          [XmlEnum("volume per time per length")]
          volumepertimeperlength,
        /// <summary>
        /// volumepertimeperpressure property
        /// </summary>
          [XmlEnum("volume per time per pressure")]
          volumepertimeperpressure,
        /// <summary>
        /// volumepertimeperpressurelength property
        /// </summary>
          [XmlEnum("volume per time per pressure length")]
          volumepertimeperpressurelength,
        /// <summary>
        /// volumepertimepertime property
        /// </summary>
          [XmlEnum("volume per time per time")]
          volumepertimepertime,
        /// <summary>
        /// volumepertimepervolume property
        /// </summary>
          [XmlEnum("volume per time per volume")]
          volumepertimepervolume,
        /// <summary>
        /// volumepervolume property
        /// </summary>
          [XmlEnum("volume per volume")]
          volumepervolume,
        /// <summary>
        /// volumetricheattransfercoefficient property
        /// </summary>
          [XmlEnum("volumetric heat transfer coefficient")]
          volumetricheattransfercoefficient,
        /// <summary>
        /// volumetricthermalexpansion property
        /// </summary>
          [XmlEnum("volumetric thermal expansion")]
          volumetricthermalexpansion,
        /// <summary>
        /// unitless property
        /// </summary>
          unitless,
        /// <summary>
        /// notameasure property
        /// </summary>
          [XmlEnum("not a measure")]
          notameasure
        }
        /// <summary>
        /// This class represents the UnitOfMeasure xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the UnitOfMeasure xsd enumeration.")]
        public enum UnitOfMeasure 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// area property
        /// </summary>
          [XmlEnum("%[area]")]
          area,
        /// <summary>
        /// mass property
        /// </summary>
          [XmlEnum("%[mass]")]
          mass,
        /// <summary>
        /// molar property
        /// </summary>
          [XmlEnum("%[molar]")]
          molar,
        /// <summary>
        /// vol property
        /// </summary>
          [XmlEnum("%[vol]")]
          vol,
        /// <summary>
        /// bbldbbld property
        /// </summary>
          [XmlEnum("(bbl/d)/(bbl/d)")]
          bbldbbld,
        /// <summary>
        /// m3dm3d property
        /// </summary>
          [XmlEnum("(m3/d)/(m3/d)")]
          m3dm3d,
        /// <summary>
        /// m3sm3s property
        /// </summary>
          [XmlEnum("(m3/s)/(m3/s)")]
          m3sm3s,
        /// <summary>
        /// Item0001bblft3 property
        /// </summary>
          [XmlEnum("0.001 bbl/ft3")]
          Item0001bblft3,
        /// <summary>
        /// Item0001bblm3 property
        /// </summary>
          [XmlEnum("0.001 bbl/m3")]
          Item0001bblm3,
        /// <summary>
        /// Item0001dft3 property
        /// </summary>
          [XmlEnum("0.001 d/ft3")]
          Item0001dft3,
        /// <summary>
        /// Item0001galUKbbl property
        /// </summary>
          [XmlEnum("0.001 gal[UK]/bbl")]
          Item0001galUKbbl,
        /// <summary>
        /// Item0001galUKgalUK property
        /// </summary>
          [XmlEnum("0.001 gal[UK]/gal[UK]")]
          Item0001galUKgalUK,
        /// <summary>
        /// Item0001galUSbbl property
        /// </summary>
          [XmlEnum("0.001 gal[US]/bbl")]
          Item0001galUSbbl,
        /// <summary>
        /// Item0001galUSft3 property
        /// </summary>
          [XmlEnum("0.001 gal[US]/ft3")]
          Item0001galUSft3,
        /// <summary>
        /// Item0001galUSgalUS property
        /// </summary>
          [XmlEnum("0.001 gal[US]/gal[US]")]
          Item0001galUSgalUS,
        /// <summary>
        /// Item0001hft property
        /// </summary>
          [XmlEnum("0.001 h/ft")]
          Item0001hft,
        /// <summary>
        /// Item0001kPa2cP property
        /// </summary>
          [XmlEnum("0.001 kPa2/cP")]
          Item0001kPa2cP,
        /// <summary>
        /// Item0001lbmbbl property
        /// </summary>
          [XmlEnum("0.001 lbm/bbl")]
          Item0001lbmbbl,
        /// <summary>
        /// Item0001lbmgalUK property
        /// </summary>
          [XmlEnum("0.001 lbm/gal[UK]")]
          Item0001lbmgalUK,
        /// <summary>
        /// Item0001lbmgalUS property
        /// </summary>
          [XmlEnum("0.001 lbm/gal[US]")]
          Item0001lbmgalUS,
        /// <summary>
        /// Item0001psift property
        /// </summary>
          [XmlEnum("0.001 psi/ft")]
          Item0001psift,
        /// <summary>
        /// Item0001ptUKbbl property
        /// </summary>
          [XmlEnum("0.001 pt[UK]/bbl")]
          Item0001ptUKbbl,
        /// <summary>
        /// Item0001seca property
        /// </summary>
          [XmlEnum("0.001 seca")]
          Item0001seca,
        /// <summary>
        /// Item001bblbbl property
        /// </summary>
          [XmlEnum("0.01 bbl/bbl")]
          Item001bblbbl,
        /// <summary>
        /// Item001degaft property
        /// </summary>
          [XmlEnum("0.01 dega/ft")]
          Item001degaft,
        /// <summary>
        /// Item001degFft property
        /// </summary>
          [XmlEnum("0.01 degF/ft")]
          Item001degFft,
        /// <summary>
        /// Item001dm3km property
        /// </summary>
          [XmlEnum("0.01 dm3/km")]
          Item001dm3km,
        /// <summary>
        /// Item001ftft property
        /// </summary>
          [XmlEnum("0.01 ft/ft")]
          Item001ftft,
        /// <summary>
        /// Item001grainft3 property
        /// </summary>
          [XmlEnum("0.01 grain/ft3")]
          Item001grainft3,
        /// <summary>
        /// Item001Lkg property
        /// </summary>
          [XmlEnum("0.01 L/kg")]
          Item001Lkg,
        /// <summary>
        /// Item001Lkm property
        /// </summary>
          [XmlEnum("0.01 L/km")]
          Item001Lkm,
        /// <summary>
        /// Item001lbfft property
        /// </summary>
          [XmlEnum("0.01 lbf/ft")]
          Item001lbfft,
        /// <summary>
        /// Item001lbfft2 property
        /// </summary>
          [XmlEnum("0.01 lbf/ft2")]
          Item001lbfft2,
        /// <summary>
        /// Item001lbmft2 property
        /// </summary>
          [XmlEnum("0.01 lbm/ft2")]
          Item001lbmft2,
        /// <summary>
        /// Item001psift property
        /// </summary>
          [XmlEnum("0.01 psi/ft")]
          Item001psift,
        /// <summary>
        /// Item01ft property
        /// </summary>
          [XmlEnum("0.1 ft")]
          Item01ft,
        /// <summary>
        /// Item01ftUS property
        /// </summary>
          [XmlEnum("0.1 ft[US]")]
          Item01ftUS,
        /// <summary>
        /// Item01galUSbbl property
        /// </summary>
          [XmlEnum("0.1 gal[US]/bbl")]
          Item01galUSbbl,
        /// <summary>
        /// Item01in property
        /// </summary>
          [XmlEnum("0.1 in")]
          Item01in,
        /// <summary>
        /// Item01Lbbl property
        /// </summary>
          [XmlEnum("0.1 L/bbl")]
          Item01Lbbl,
        /// <summary>
        /// Item01lbmbbl property
        /// </summary>
          [XmlEnum("0.1 lbm/bbl")]
          Item01lbmbbl,
        /// <summary>
        /// Item01ptUSbbl property
        /// </summary>
          [XmlEnum("0.1 pt[US]/bbl")]
          Item01ptUSbbl,
        /// <summary>
        /// Item01yd property
        /// </summary>
          [XmlEnum("0.1 yd")]
          Item01yd,
        /// <summary>
        /// Item1kgs property
        /// </summary>
          [XmlEnum("1/(kg.s)")]
          Item1kgs,
        /// <summary>
        /// Item116in property
        /// </summary>
          [XmlEnum("1/16 in")]
          Item116in,
        /// <summary>
        /// Item12ft property
        /// </summary>
          [XmlEnum("1/2 ft")]
          Item12ft,
        /// <summary>
        /// Item12ms property
        /// </summary>
          [XmlEnum("1/2 ms")]
          Item12ms,
        /// <summary>
        /// Item130cm3min property
        /// </summary>
          [XmlEnum("1/30 cm3/min")]
          Item130cm3min,
        /// <summary>
        /// Item130degaft property
        /// </summary>
          [XmlEnum("1/30 dega/ft")]
          Item130degaft,
        /// <summary>
        /// Item130degam property
        /// </summary>
          [XmlEnum("1/30 dega/m")]
          Item130degam,
        /// <summary>
        /// Item130lbfm property
        /// </summary>
          [XmlEnum("1/30 lbf/m")]
          Item130lbfm,
        /// <summary>
        /// Item130mm property
        /// </summary>
          [XmlEnum("1/30 m/m")]
          Item130mm,
        /// <summary>
        /// Item130Nm property
        /// </summary>
          [XmlEnum("1/30 N/m")]
          Item130Nm,
        /// <summary>
        /// Item132in property
        /// </summary>
          [XmlEnum("1/32 in")]
          Item132in,
        /// <summary>
        /// Item164in property
        /// </summary>
          [XmlEnum("1/64 in")]
          Item164in,
        /// <summary>
        /// Item1a property
        /// </summary>
          [XmlEnum("1/a")]
          Item1a,
        /// <summary>
        /// Item1angstrom property
        /// </summary>
          [XmlEnum("1/angstrom")]
          Item1angstrom,
        /// <summary>
        /// Item1bar property
        /// </summary>
          [XmlEnum("1/bar")]
          Item1bar,
        /// <summary>
        /// Item1bbl property
        /// </summary>
          [XmlEnum("1/bbl")]
          Item1bbl,
        /// <summary>
        /// Item1cm property
        /// </summary>
          [XmlEnum("1/cm")]
          Item1cm,
        /// <summary>
        /// Item1d property
        /// </summary>
          [XmlEnum("1/d")]
          Item1d,
        /// <summary>
        /// Item1degC property
        /// </summary>
          [XmlEnum("1/degC")]
          Item1degC,
        /// <summary>
        /// Item1degF property
        /// </summary>
          [XmlEnum("1/degF")]
          Item1degF,
        /// <summary>
        /// Item1degR property
        /// </summary>
          [XmlEnum("1/degR")]
          Item1degR,
        /// <summary>
        /// Item1ft property
        /// </summary>
          [XmlEnum("1/ft")]
          Item1ft,
        /// <summary>
        /// Item1ft2 property
        /// </summary>
          [XmlEnum("1/ft2")]
          Item1ft2,
        /// <summary>
        /// Item1ft3 property
        /// </summary>
          [XmlEnum("1/ft3")]
          Item1ft3,
        /// <summary>
        /// Item1g property
        /// </summary>
          [XmlEnum("1/g")]
          Item1g,
        /// <summary>
        /// Item1galUK property
        /// </summary>
          [XmlEnum("1/gal[UK]")]
          Item1galUK,
        /// <summary>
        /// Item1galUS property
        /// </summary>
          [XmlEnum("1/gal[US]")]
          Item1galUS,
        /// <summary>
        /// Item1H property
        /// </summary>
          [XmlEnum("1/H")]
          Item1H,
        /// <summary>
        /// Item1h property
        /// </summary>
          [XmlEnum("1/h")]
          Item1h,
        /// <summary>
        /// Item1in property
        /// </summary>
          [XmlEnum("1/in")]
          Item1in,
        /// <summary>
        /// Item1K property
        /// </summary>
          [XmlEnum("1/K")]
          Item1K,
        /// <summary>
        /// Item1kg property
        /// </summary>
          [XmlEnum("1/kg")]
          Item1kg,
        /// <summary>
        /// Item1km2 property
        /// </summary>
          [XmlEnum("1/km2")]
          Item1km2,
        /// <summary>
        /// Item1kPa property
        /// </summary>
          [XmlEnum("1/kPa")]
          Item1kPa,
        /// <summary>
        /// Item1L property
        /// </summary>
          [XmlEnum("1/L")]
          Item1L,
        /// <summary>
        /// Item1lbf property
        /// </summary>
          [XmlEnum("1/lbf")]
          Item1lbf,
        /// <summary>
        /// Item1lbm property
        /// </summary>
          [XmlEnum("1/lbm")]
          Item1lbm,
        /// <summary>
        /// Item1m property
        /// </summary>
          [XmlEnum("1/m")]
          Item1m,
        /// <summary>
        /// Item1m2 property
        /// </summary>
          [XmlEnum("1/m2")]
          Item1m2,
        /// <summary>
        /// Item1m3 property
        /// </summary>
          [XmlEnum("1/m3")]
          Item1m3,
        /// <summary>
        /// Item1mi property
        /// </summary>
          [XmlEnum("1/mi")]
          Item1mi,
        /// <summary>
        /// Item1mi2 property
        /// </summary>
          [XmlEnum("1/mi2")]
          Item1mi2,
        /// <summary>
        /// Item1min property
        /// </summary>
          [XmlEnum("1/min")]
          Item1min,
        /// <summary>
        /// Item1mm property
        /// </summary>
          [XmlEnum("1/mm")]
          Item1mm,
        /// <summary>
        /// Item1ms property
        /// </summary>
          [XmlEnum("1/ms")]
          Item1ms,
        /// <summary>
        /// Item1N property
        /// </summary>
          [XmlEnum("1/N")]
          Item1N,
        /// <summary>
        /// Item1nm property
        /// </summary>
          [XmlEnum("1/nm")]
          Item1nm,
        /// <summary>
        /// Item1Pa property
        /// </summary>
          [XmlEnum("1/Pa")]
          Item1Pa,
        /// <summary>
        /// Item1pPa property
        /// </summary>
          [XmlEnum("1/pPa")]
          Item1pPa,
        /// <summary>
        /// Item1psi property
        /// </summary>
          [XmlEnum("1/psi")]
          Item1psi,
        /// <summary>
        /// Item1s property
        /// </summary>
          [XmlEnum("1/s")]
          Item1s,
        /// <summary>
        /// Item1upsi property
        /// </summary>
          [XmlEnum("1/upsi")]
          Item1upsi,
        /// <summary>
        /// Item1us property
        /// </summary>
          [XmlEnum("1/us")]
          Item1us,
        /// <summary>
        /// Item1uV property
        /// </summary>
          [XmlEnum("1/uV")]
          Item1uV,
        /// <summary>
        /// Item1V property
        /// </summary>
          [XmlEnum("1/V")]
          Item1V,
        /// <summary>
        /// Item1wk property
        /// </summary>
          [XmlEnum("1/wk")]
          Item1wk,
        /// <summary>
        /// Item1yd property
        /// </summary>
          [XmlEnum("1/yd")]
          Item1yd,
        /// <summary>
        /// Item10ft property
        /// </summary>
          [XmlEnum("10 ft")]
          Item10ft,
        /// <summary>
        /// Item10in property
        /// </summary>
          [XmlEnum("10 in")]
          Item10in,
        /// <summary>
        /// Item10km property
        /// </summary>
          [XmlEnum("10 km")]
          Item10km,
        /// <summary>
        /// Item10kN property
        /// </summary>
          [XmlEnum("10 kN")]
          Item10kN,
        /// <summary>
        /// Item10Mgm3 property
        /// </summary>
          [XmlEnum("10 Mg/m3")]
          Item10Mgm3,
        /// <summary>
        /// Item100ft property
        /// </summary>
          [XmlEnum("100 ft")]
          Item100ft,
        /// <summary>
        /// Item100kat property
        /// </summary>
          [XmlEnum("100 ka[t]")]
          Item100kat,
        /// <summary>
        /// Item100km property
        /// </summary>
          [XmlEnum("100 km")]
          Item100km,
        /// <summary>
        /// Item1000bbl property
        /// </summary>
          [XmlEnum("1000 bbl")]
          Item1000bbl,
        /// <summary>
        /// Item1000bblftd property
        /// </summary>
          [XmlEnum("1000 bbl.ft/d")]
          Item1000bblftd,
        /// <summary>
        /// Item1000bbld property
        /// </summary>
          [XmlEnum("1000 bbl/d")]
          Item1000bbld,
        /// <summary>
        /// Item1000ft property
        /// </summary>
          [XmlEnum("1000 ft")]
          Item1000ft,
        /// <summary>
        /// Item1000fth property
        /// </summary>
          [XmlEnum("1000 ft/h")]
          Item1000fth,
        /// <summary>
        /// Item1000fts property
        /// </summary>
          [XmlEnum("1000 ft/s")]
          Item1000fts,
        /// <summary>
        /// Item1000ft3 property
        /// </summary>
          [XmlEnum("1000 ft3")]
          Item1000ft3,
        /// <summary>
        /// Item1000ft3dft property
        /// </summary>
          [XmlEnum("1000 ft3/(d.ft)")]
          Item1000ft3dft,
        /// <summary>
        /// Item1000ft3psid property
        /// </summary>
          [XmlEnum("1000 ft3/(psi.d)")]
          Item1000ft3psid,
        /// <summary>
        /// Item1000ft3bbl property
        /// </summary>
          [XmlEnum("1000 ft3/bbl")]
          Item1000ft3bbl,
        /// <summary>
        /// Item1000ft3d property
        /// </summary>
          [XmlEnum("1000 ft3/d")]
          Item1000ft3d,
        /// <summary>
        /// Item1000galUK property
        /// </summary>
          [XmlEnum("1000 gal[UK]")]
          Item1000galUK,
        /// <summary>
        /// Item1000galUS property
        /// </summary>
          [XmlEnum("1000 gal[US]")]
          Item1000galUS,
        /// <summary>
        /// Item1000lbfft property
        /// </summary>
          [XmlEnum("1000 lbf.ft")]
          Item1000lbfft,
        /// <summary>
        /// Item1000m3 property
        /// </summary>
          [XmlEnum("1000 m3")]
          Item1000m3,
        /// <summary>
        /// Item1000m3dm property
        /// </summary>
          [XmlEnum("1000 m3/(d.m)")]
          Item1000m3dm,
        /// <summary>
        /// Item1000m3hm property
        /// </summary>
          [XmlEnum("1000 m3/(h.m)")]
          Item1000m3hm,
        /// <summary>
        /// Item1000m3d property
        /// </summary>
          [XmlEnum("1000 m3/d")]
          Item1000m3d,
        /// <summary>
        /// Item1000m3h property
        /// </summary>
          [XmlEnum("1000 m3/h")]
          Item1000m3h,
        /// <summary>
        /// Item1000m3m3 property
        /// </summary>
          [XmlEnum("1000 m3/m3")]
          Item1000m3m3,
        /// <summary>
        /// Item1000m4d property
        /// </summary>
          [XmlEnum("1000 m4/d")]
          Item1000m4d,
        /// <summary>
        /// Item1E12ft3 property
        /// </summary>
          [XmlEnum("1E12 ft3")]
          Item1E12ft3,
        /// <summary>
        /// Item1E6ft3dbbld property
        /// </summary>
          [XmlEnum("1E6 (ft3/d)/(bbl/d)")]
          Item1E6ft3dbbld,
        /// <summary>
        /// Item1E6acreftbbl property
        /// </summary>
          [XmlEnum("1E-6 acre.ft/bbl")]
          Item1E6acreftbbl,
        /// <summary>
        /// Item1E6bbl property
        /// </summary>
          [XmlEnum("1E6 bbl")]
          Item1E6bbl,
        /// <summary>
        /// Item1E6bblacreft property
        /// </summary>
          [XmlEnum("1E6 bbl/(acre.ft)")]
          Item1E6bblacreft,
        /// <summary>
        /// Item1E6bblacre property
        /// </summary>
          [XmlEnum("1E6 bbl/acre")]
          Item1E6bblacre,
        /// <summary>
        /// Item1E6bbld property
        /// </summary>
          [XmlEnum("1E6 bbl/d")]
          Item1E6bbld,
        /// <summary>
        /// Item1E6bblft3 property
        /// </summary>
          [XmlEnum("1E-6 bbl/ft3")]
          Item1E6bblft3,
        /// <summary>
        /// Item1E6bblm3 property
        /// </summary>
          [XmlEnum("1E-6 bbl/m3")]
          Item1E6bblm3,
        /// <summary>
        /// Item1E6BtuIT property
        /// </summary>
          [XmlEnum("1E6 Btu[IT]")]
          Item1E6BtuIT,
        /// <summary>
        /// Item1E6BtuITh property
        /// </summary>
          [XmlEnum("1E6 Btu[IT]/h")]
          Item1E6BtuITh,
        /// <summary>
        /// Item1E6ft3 property
        /// </summary>
          [XmlEnum("1E6 ft3")]
          Item1E6ft3,
        /// <summary>
        /// Item1E6ft3acreft property
        /// </summary>
          [XmlEnum("1E6 ft3/(acre.ft)")]
          Item1E6ft3acreft,
        /// <summary>
        /// Item1E6ft3bbl property
        /// </summary>
          [XmlEnum("1E6 ft3/bbl")]
          Item1E6ft3bbl,
        /// <summary>
        /// Item1E6ft3d property
        /// </summary>
          [XmlEnum("1E6 ft3/d")]
          Item1E6ft3d,
        /// <summary>
        /// Item1E6galUS property
        /// </summary>
          [XmlEnum("1E-6 gal[US]")]
          Item1E6galUS,
        /// <summary>
        /// Item1E6lbma property
        /// </summary>
          [XmlEnum("1E6 lbm/a")]
          Item1E6lbma,
        /// <summary>
        /// Item1E6m3 property
        /// </summary>
          [XmlEnum("1E6 m3")]
          Item1E6m3,
        /// <summary>
        /// Item1E6m3m3degC property
        /// </summary>
          [XmlEnum("1E-6 m3/(m3.degC)")]
          Item1E6m3m3degC,
        /// <summary>
        /// Item1E6m3m3degF property
        /// </summary>
          [XmlEnum("1E-6 m3/(m3.degF)")]
          Item1E6m3m3degF,
        /// <summary>
        /// Item1E6m3d property
        /// </summary>
          [XmlEnum("1E6 m3/d")]
          Item1E6m3d,
        /// <summary>
        /// Item1E91ft property
        /// </summary>
          [XmlEnum("1E-9 1/ft")]
          Item1E91ft,
        /// <summary>
        /// Item1E9bbl property
        /// </summary>
          [XmlEnum("1E9 bbl")]
          Item1E9bbl,
        /// <summary>
        /// Item1E9ft3 property
        /// </summary>
          [XmlEnum("1E9 ft3")]
          Item1E9ft3,
        /// <summary>
        /// Item30ft property
        /// </summary>
          [XmlEnum("30 ft")]
          Item30ft,
        /// <summary>
        /// Item30m property
        /// </summary>
          [XmlEnum("30 m")]
          Item30m,
        /// <summary>
        /// A property
        /// </summary>
          A,
        /// <summary>
        /// a property
        /// </summary>
          a,
        /// <summary>
        /// Ah property
        /// </summary>
          [XmlEnum("A.h")]
          Ah,
        /// <summary>
        /// Am2 property
        /// </summary>
          [XmlEnum("A.m2")]
          Am2,
        /// <summary>
        /// As property
        /// </summary>
          [XmlEnum("A.s")]
          As,
        /// <summary>
        /// Askg property
        /// </summary>
          [XmlEnum("A.s/kg")]
          Askg,
        /// <summary>
        /// Asm3 property
        /// </summary>
          [XmlEnum("A.s/m3")]
          Asm3,
        /// <summary>
        /// Acm2 property
        /// </summary>
          [XmlEnum("A/cm2")]
          Acm2,
        /// <summary>
        /// Aft2 property
        /// </summary>
          [XmlEnum("A/ft2")]
          Aft2,
        /// <summary>
        /// Am property
        /// </summary>
          [XmlEnum("A/m")]
          Am,
        /// <summary>
        /// Am21 property
        /// </summary>
          [XmlEnum("A/m2")]
          Am21,
        /// <summary>
        /// Amm property
        /// </summary>
          [XmlEnum("A/mm")]
          Amm,
        /// <summary>
        /// Amm2 property
        /// </summary>
          [XmlEnum("A/mm2")]
          Amm2,
        /// <summary>
        /// at property
        /// </summary>
          [XmlEnum("a[t]")]
          at,
        /// <summary>
        /// acre property
        /// </summary>
          acre,
        /// <summary>
        /// acreft property
        /// </summary>
          [XmlEnum("acre.ft")]
          acreft,
        /// <summary>
        /// ag property
        /// </summary>
          ag,
        /// <summary>
        /// aJ property
        /// </summary>
          aJ,
        /// <summary>
        /// angstrom property
        /// </summary>
          angstrom,
        /// <summary>
        /// at1 property
        /// </summary>
          [XmlEnum("at")]
          at1,
        /// <summary>
        /// atm property
        /// </summary>
          atm,
        /// <summary>
        /// atmft property
        /// </summary>
          [XmlEnum("atm/ft")]
          atmft,
        /// <summary>
        /// atmh property
        /// </summary>
          [XmlEnum("atm/h")]
          atmh,
        /// <summary>
        /// atmhm property
        /// </summary>
          [XmlEnum("atm/hm")]
          atmhm,
        /// <summary>
        /// atmm property
        /// </summary>
          [XmlEnum("atm/m")]
          atmm,
        /// <summary>
        /// B property
        /// </summary>
          B,
        /// <summary>
        /// b property
        /// </summary>
          b,
        /// <summary>
        /// BW property
        /// </summary>
          [XmlEnum("B.W")]
          BW,
        /// <summary>
        /// bcm3 property
        /// </summary>
          [XmlEnum("b/cm3")]
          bcm3,
        /// <summary>
        /// Bm property
        /// </summary>
          [XmlEnum("B/m")]
          Bm,
        /// <summary>
        /// BO property
        /// </summary>
          [XmlEnum("B/O")]
          BO,
        /// <summary>
        /// bar property
        /// </summary>
          bar,
        /// <summary>
        /// barh property
        /// </summary>
          [XmlEnum("bar/h")]
          barh,
        /// <summary>
        /// barkm property
        /// </summary>
          [XmlEnum("bar/km")]
          barkm,
        /// <summary>
        /// barm property
        /// </summary>
          [XmlEnum("bar/m")]
          barm,
        /// <summary>
        /// bar2 property
        /// </summary>
          bar2,
        /// <summary>
        /// bar2cP property
        /// </summary>
          [XmlEnum("bar2/cP")]
          bar2cP,
        /// <summary>
        /// bbl property
        /// </summary>
          bbl,
        /// <summary>
        /// bblacreft property
        /// </summary>
          [XmlEnum("bbl/(acre.ft)")]
          bblacreft,
        /// <summary>
        /// bbldacreft property
        /// </summary>
          [XmlEnum("bbl/(d.acre.ft)")]
          bbldacreft,
        /// <summary>
        /// bbldft property
        /// </summary>
          [XmlEnum("bbl/(d.ft)")]
          bbldft,
        /// <summary>
        /// bblftpsid property
        /// </summary>
          [XmlEnum("bbl/(ft.psi.d)")]
          bblftpsid,
        /// <summary>
        /// bblkPad property
        /// </summary>
          [XmlEnum("bbl/(kPa.d)")]
          bblkPad,
        /// <summary>
        /// bblpsid property
        /// </summary>
          [XmlEnum("bbl/(psi.d)")]
          bblpsid,
        /// <summary>
        /// bblacre property
        /// </summary>
          [XmlEnum("bbl/acre")]
          bblacre,
        /// <summary>
        /// bblbbl property
        /// </summary>
          [XmlEnum("bbl/bbl")]
          bblbbl,
        /// <summary>
        /// bbld property
        /// </summary>
          [XmlEnum("bbl/d")]
          bbld,
        /// <summary>
        /// bbld2 property
        /// </summary>
          [XmlEnum("bbl/d2")]
          bbld2,
        /// <summary>
        /// bblft property
        /// </summary>
          [XmlEnum("bbl/ft")]
          bblft,
        /// <summary>
        /// bblft3 property
        /// </summary>
          [XmlEnum("bbl/ft3")]
          bblft3,
        /// <summary>
        /// bblh property
        /// </summary>
          [XmlEnum("bbl/h")]
          bblh,
        /// <summary>
        /// bblh2 property
        /// </summary>
          [XmlEnum("bbl/h2")]
          bblh2,
        /// <summary>
        /// bblin property
        /// </summary>
          [XmlEnum("bbl/in")]
          bblin,
        /// <summary>
        /// bblm3 property
        /// </summary>
          [XmlEnum("bbl/m3")]
          bblm3,
        /// <summary>
        /// bblmi property
        /// </summary>
          [XmlEnum("bbl/mi")]
          bblmi,
        /// <summary>
        /// bblmin property
        /// </summary>
          [XmlEnum("bbl/min")]
          bblmin,
        /// <summary>
        /// bblpsi property
        /// </summary>
          [XmlEnum("bbl/psi")]
          bblpsi,
        /// <summary>
        /// bbltonUK property
        /// </summary>
          [XmlEnum("bbl/ton[UK]")]
          bbltonUK,
        /// <summary>
        /// bbltonUS property
        /// </summary>
          [XmlEnum("bbl/ton[US]")]
          bbltonUS,
        /// <summary>
        /// Bd property
        /// </summary>
          Bd,
        /// <summary>
        /// bit property
        /// </summary>
          bit,
        /// <summary>
        /// bits property
        /// </summary>
          [XmlEnum("bit/s")]
          bits,
        /// <summary>
        /// Bq property
        /// </summary>
          Bq,
        /// <summary>
        /// Bqkg property
        /// </summary>
          [XmlEnum("Bq/kg")]
          Bqkg,
        /// <summary>
        /// BtuIT property
        /// </summary>
          [XmlEnum("Btu[IT]")]
          BtuIT,
        /// <summary>
        /// BtuITinhft2degF property
        /// </summary>
          [XmlEnum("Btu[IT].in/(h.ft2.degF)")]
          BtuITinhft2degF,
        /// <summary>
        /// BtuIThftdegF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft.degF)")]
          BtuIThftdegF,
        /// <summary>
        /// BtuIThft2 property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2)")]
          BtuIThft2,
        /// <summary>
        /// BtuIThft2degF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2.degF)")]
          BtuIThft2degF,
        /// <summary>
        /// BtuIThft2degR property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2.degR)")]
          BtuIThft2degR,
        /// <summary>
        /// BtuIThft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft3)")]
          BtuIThft3,
        /// <summary>
        /// BtuIThft3degF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft3.degF)")]
          BtuIThft3degF,
        /// <summary>
        /// BtuIThm2degC property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.m2.degC)")]
          BtuIThm2degC,
        /// <summary>
        /// BtuIThph property
        /// </summary>
          [XmlEnum("Btu[IT]/(hp.h)")]
          BtuIThph,
        /// <summary>
        /// BtuITlbmdegF property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbm.degF)")]
          BtuITlbmdegF,
        /// <summary>
        /// BtuITlbmdegR property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbm.degR)")]
          BtuITlbmdegR,
        /// <summary>
        /// BtuITlbmoldegF property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbmol.degF)")]
          BtuITlbmoldegF,
        /// <summary>
        /// BtuITsft2 property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft2)")]
          BtuITsft2,
        /// <summary>
        /// BtuITsft2degF property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft2.degF)")]
          BtuITsft2degF,
        /// <summary>
        /// BtuITsft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft3)")]
          BtuITsft3,
        /// <summary>
        /// BtuITsft3degF property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft3.degF)")]
          BtuITsft3degF,
        /// <summary>
        /// BtuITbbl property
        /// </summary>
          [XmlEnum("Btu[IT]/bbl")]
          BtuITbbl,
        /// <summary>
        /// BtuITft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/ft3")]
          BtuITft3,
        /// <summary>
        /// BtuITgalUK property
        /// </summary>
          [XmlEnum("Btu[IT]/gal[UK]")]
          BtuITgalUK,
        /// <summary>
        /// BtuITgalUS property
        /// </summary>
          [XmlEnum("Btu[IT]/gal[US]")]
          BtuITgalUS,
        /// <summary>
        /// BtuITh property
        /// </summary>
          [XmlEnum("Btu[IT]/h")]
          BtuITh,
        /// <summary>
        /// BtuITlbm property
        /// </summary>
          [XmlEnum("Btu[IT]/lbm")]
          BtuITlbm,
        /// <summary>
        /// BtuITlbmol property
        /// </summary>
          [XmlEnum("Btu[IT]/lbmol")]
          BtuITlbmol,
        /// <summary>
        /// BtuITmin property
        /// </summary>
          [XmlEnum("Btu[IT]/min")]
          BtuITmin,
        /// <summary>
        /// BtuITs property
        /// </summary>
          [XmlEnum("Btu[IT]/s")]
          BtuITs,
        /// <summary>
        /// Btuth property
        /// </summary>
          [XmlEnum("Btu[th]")]
          Btuth,
        /// <summary>
        /// BtuUK property
        /// </summary>
          [XmlEnum("Btu[UK]")]
          BtuUK,
        /// <summary>
        /// byte property
        /// </summary>
          @byte,
        /// <summary>
        /// bytes property
        /// </summary>
          [XmlEnum("byte/s")]
          bytes,
        /// <summary>
        /// C property
        /// </summary>
          C,
        /// <summary>
        /// Cm property
        /// </summary>
          [XmlEnum("C.m")]
          Cm,
        /// <summary>
        /// Ccm2 property
        /// </summary>
          [XmlEnum("C/cm2")]
          Ccm2,
        /// <summary>
        /// Ccm3 property
        /// </summary>
          [XmlEnum("C/cm3")]
          Ccm3,
        /// <summary>
        /// Cg property
        /// </summary>
          [XmlEnum("C/g")]
          Cg,
        /// <summary>
        /// Ckg property
        /// </summary>
          [XmlEnum("C/kg")]
          Ckg,
        /// <summary>
        /// Cm2 property
        /// </summary>
          [XmlEnum("C/m2")]
          Cm2,
        /// <summary>
        /// Cm3 property
        /// </summary>
          [XmlEnum("C/m3")]
          Cm3,
        /// <summary>
        /// Cmm2 property
        /// </summary>
          [XmlEnum("C/mm2")]
          Cmm2,
        /// <summary>
        /// Cmm3 property
        /// </summary>
          [XmlEnum("C/mm3")]
          Cmm3,
        /// <summary>
        /// ca property
        /// </summary>
          ca,
        /// <summary>
        /// cA property
        /// </summary>
          cA,
        /// <summary>
        /// calIT property
        /// </summary>
          [XmlEnum("cal[IT]")]
          calIT,
        /// <summary>
        /// calth property
        /// </summary>
          [XmlEnum("cal[th]")]
          calth,
        /// <summary>
        /// calthgK property
        /// </summary>
          [XmlEnum("cal[th]/(g.K)")]
          calthgK,
        /// <summary>
        /// calthhcmdegC property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm.degC)")]
          calthhcmdegC,
        /// <summary>
        /// calthhcm2 property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm2)")]
          calthhcm2,
        /// <summary>
        /// calthhcm2degC property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm2.degC)")]
          calthhcm2degC,
        /// <summary>
        /// calthhcm3 property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm3)")]
          calthhcm3,
        /// <summary>
        /// calthmoldegC property
        /// </summary>
          [XmlEnum("cal[th]/(mol.degC)")]
          calthmoldegC,
        /// <summary>
        /// calthscmdegC property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm.degC)")]
          calthscmdegC,
        /// <summary>
        /// calthscm2degC property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm2.degC)")]
          calthscm2degC,
        /// <summary>
        /// calthscm3 property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm3)")]
          calthscm3,
        /// <summary>
        /// calthcm3 property
        /// </summary>
          [XmlEnum("cal[th]/cm3")]
          calthcm3,
        /// <summary>
        /// calthg property
        /// </summary>
          [XmlEnum("cal[th]/g")]
          calthg,
        /// <summary>
        /// calthh property
        /// </summary>
          [XmlEnum("cal[th]/h")]
          calthh,
        /// <summary>
        /// calthkg property
        /// </summary>
          [XmlEnum("cal[th]/kg")]
          calthkg,
        /// <summary>
        /// calthlbm property
        /// </summary>
          [XmlEnum("cal[th]/lbm")]
          calthlbm,
        /// <summary>
        /// calthmL property
        /// </summary>
          [XmlEnum("cal[th]/mL")]
          calthmL,
        /// <summary>
        /// calthmm3 property
        /// </summary>
          [XmlEnum("cal[th]/mm3")]
          calthmm3,
        /// <summary>
        /// cC property
        /// </summary>
          cC,
        /// <summary>
        /// ccalth property
        /// </summary>
          [XmlEnum("ccal[th]")]
          ccalth,
        /// <summary>
        /// ccgr property
        /// </summary>
          ccgr,
        /// <summary>
        /// cd property
        /// </summary>
          cd,
        /// <summary>
        /// cdm2 property
        /// </summary>
          [XmlEnum("cd/m2")]
          cdm2,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// ceV property
        /// </summary>
          ceV,
        /// <summary>
        /// cF property
        /// </summary>
          cF,
        /// <summary>
        /// cg property
        /// </summary>
          cg,
        /// <summary>
        /// cgauss property
        /// </summary>
          cgauss,
        /// <summary>
        /// cgr property
        /// </summary>
          cgr,
        /// <summary>
        /// cGy property
        /// </summary>
          cGy,
        /// <summary>
        /// cH property
        /// </summary>
          cH,
        /// <summary>
        /// chain property
        /// </summary>
          chain,
        /// <summary>
        /// chainBnA property
        /// </summary>
          [XmlEnum("chain[BnA]")]
          chainBnA,
        /// <summary>
        /// chainBnB property
        /// </summary>
          [XmlEnum("chain[BnB]")]
          chainBnB,
        /// <summary>
        /// chainCla property
        /// </summary>
          [XmlEnum("chain[Cla]")]
          chainCla,
        /// <summary>
        /// chainInd37 property
        /// </summary>
          [XmlEnum("chain[Ind37]")]
          chainInd37,
        /// <summary>
        /// chainSe property
        /// </summary>
          [XmlEnum("chain[Se]")]
          chainSe,
        /// <summary>
        /// chainSeT property
        /// </summary>
          [XmlEnum("chain[SeT]")]
          chainSeT,
        /// <summary>
        /// chainUS property
        /// </summary>
          [XmlEnum("chain[US]")]
          chainUS,
        /// <summary>
        /// cHz property
        /// </summary>
          cHz,
        /// <summary>
        /// Ci property
        /// </summary>
          Ci,
        /// <summary>
        /// cJ property
        /// </summary>
          cJ,
        /// <summary>
        /// cm property
        /// </summary>
          cm,
        /// <summary>
        /// cma property
        /// </summary>
          [XmlEnum("cm/a")]
          cma,
        /// <summary>
        /// cms property
        /// </summary>
          [XmlEnum("cm/s")]
          cms,
        /// <summary>
        /// cms2 property
        /// </summary>
          [XmlEnum("cm/s2")]
          cms2,
        /// <summary>
        /// cm2 property
        /// </summary>
          cm2,
        /// <summary>
        /// cm2g property
        /// </summary>
          [XmlEnum("cm2/g")]
          cm2g,
        /// <summary>
        /// cm2s property
        /// </summary>
          [XmlEnum("cm2/s")]
          cm2s,
        /// <summary>
        /// cm3 property
        /// </summary>
          cm3,
        /// <summary>
        /// cm3cm3 property
        /// </summary>
          [XmlEnum("cm3/cm3")]
          cm3cm3,
        /// <summary>
        /// cm3g property
        /// </summary>
          [XmlEnum("cm3/g")]
          cm3g,
        /// <summary>
        /// cm3h property
        /// </summary>
          [XmlEnum("cm3/h")]
          cm3h,
        /// <summary>
        /// cm3L property
        /// </summary>
          [XmlEnum("cm3/L")]
          cm3L,
        /// <summary>
        /// cm3m3 property
        /// </summary>
          [XmlEnum("cm3/m3")]
          cm3m3,
        /// <summary>
        /// cm3min property
        /// </summary>
          [XmlEnum("cm3/min")]
          cm3min,
        /// <summary>
        /// cm3s property
        /// </summary>
          [XmlEnum("cm3/s")]
          cm3s,
        /// <summary>
        /// cm4 property
        /// </summary>
          cm4,
        /// <summary>
        /// cmH2O4degC property
        /// </summary>
          [XmlEnum("cmH2O[4degC]")]
          cmH2O4degC,
        /// <summary>
        /// cN property
        /// </summary>
          cN,
        /// <summary>
        /// cohm property
        /// </summary>
          cohm,
        /// <summary>
        /// cP property
        /// </summary>
          cP,
        /// <summary>
        /// cPa property
        /// </summary>
          cPa,
        /// <summary>
        /// crd property
        /// </summary>
          crd,
        /// <summary>
        /// cS property
        /// </summary>
          cS,
        /// <summary>
        /// cs property
        /// </summary>
          cs,
        /// <summary>
        /// cSt property
        /// </summary>
          cSt,
        /// <summary>
        /// cT property
        /// </summary>
          cT,
        /// <summary>
        /// ct property
        /// </summary>
          ct,
        /// <summary>
        /// cu property
        /// </summary>
          cu,
        /// <summary>
        /// cV property
        /// </summary>
          cV,
        /// <summary>
        /// cW property
        /// </summary>
          cW,
        /// <summary>
        /// cWb property
        /// </summary>
          cWb,
        /// <summary>
        /// cwtUK property
        /// </summary>
          [XmlEnum("cwt[UK]")]
          cwtUK,
        /// <summary>
        /// cwtUS property
        /// </summary>
          [XmlEnum("cwt[US]")]
          cwtUS,
        /// <summary>
        /// d property
        /// </summary>
          d,
        /// <summary>
        /// D property
        /// </summary>
          D,
        /// <summary>
        /// Dft property
        /// </summary>
          [XmlEnum("D.ft")]
          Dft,
        /// <summary>
        /// Dm property
        /// </summary>
          [XmlEnum("D.m")]
          Dm,
        /// <summary>
        /// DPas property
        /// </summary>
          [XmlEnum("D/(Pa.s)")]
          DPas,
        /// <summary>
        /// dbbl property
        /// </summary>
          [XmlEnum("d/bbl")]
          dbbl,
        /// <summary>
        /// DcP property
        /// </summary>
          [XmlEnum("D/cP")]
          DcP,
        /// <summary>
        /// dft3 property
        /// </summary>
          [XmlEnum("d/ft3")]
          dft3,
        /// <summary>
        /// dm3 property
        /// </summary>
          [XmlEnum("d/m3")]
          dm3,
        /// <summary>
        /// DAPI property
        /// </summary>
          [XmlEnum("D[API]")]
          DAPI,
        /// <summary>
        /// dA property
        /// </summary>
          dA,
        /// <summary>
        /// dam property
        /// </summary>
          dam,
        /// <summary>
        /// daN property
        /// </summary>
          daN,
        /// <summary>
        /// daNm property
        /// </summary>
          [XmlEnum("daN.m")]
          daNm,
        /// <summary>
        /// dAPI property
        /// </summary>
          dAPI,
        /// <summary>
        /// dB property
        /// </summary>
          dB,
        /// <summary>
        /// dBmW property
        /// </summary>
          [XmlEnum("dB.mW")]
          dBmW,
        /// <summary>
        /// dBMW property
        /// </summary>
          [XmlEnum("dB.MW")]
          dBMW,
        /// <summary>
        /// dBW property
        /// </summary>
          [XmlEnum("dB.W")]
          dBW,
        /// <summary>
        /// dBft property
        /// </summary>
          [XmlEnum("dB/ft")]
          dBft,
        /// <summary>
        /// dBkm property
        /// </summary>
          [XmlEnum("dB/km")]
          dBkm,
        /// <summary>
        /// dBm property
        /// </summary>
          [XmlEnum("dB/m")]
          dBm,
        /// <summary>
        /// dBO property
        /// </summary>
          [XmlEnum("dB/O")]
          dBO,
        /// <summary>
        /// dC property
        /// </summary>
          dC,
        /// <summary>
        /// dcalth property
        /// </summary>
          [XmlEnum("dcal[th]")]
          dcalth,
        /// <summary>
        /// dega property
        /// </summary>
          dega,
        /// <summary>
        /// degaft property
        /// </summary>
          [XmlEnum("dega/ft")]
          degaft,
        /// <summary>
        /// degah property
        /// </summary>
          [XmlEnum("dega/h")]
          degah,
        /// <summary>
        /// degam property
        /// </summary>
          [XmlEnum("dega/m")]
          degam,
        /// <summary>
        /// degamin property
        /// </summary>
          [XmlEnum("dega/min")]
          degamin,
        /// <summary>
        /// degas property
        /// </summary>
          [XmlEnum("dega/s")]
          degas,
        /// <summary>
        /// degC property
        /// </summary>
          degC,
        /// <summary>
        /// degCm2hkcalth property
        /// </summary>
          [XmlEnum("degC.m2.h/kcal[th]")]
          degCm2hkcalth,
        /// <summary>
        /// degCft property
        /// </summary>
          [XmlEnum("degC/ft")]
          degCft,
        /// <summary>
        /// degCh property
        /// </summary>
          [XmlEnum("degC/h")]
          degCh,
        /// <summary>
        /// degChm property
        /// </summary>
          [XmlEnum("degC/hm")]
          degChm,
        /// <summary>
        /// degCkm property
        /// </summary>
          [XmlEnum("degC/km")]
          degCkm,
        /// <summary>
        /// degCkPa property
        /// </summary>
          [XmlEnum("degC/kPa")]
          degCkPa,
        /// <summary>
        /// degCm property
        /// </summary>
          [XmlEnum("degC/m")]
          degCm,
        /// <summary>
        /// degCmin property
        /// </summary>
          [XmlEnum("degC/min")]
          degCmin,
        /// <summary>
        /// degCs property
        /// </summary>
          [XmlEnum("degC/s")]
          degCs,
        /// <summary>
        /// degF property
        /// </summary>
          degF,
        /// <summary>
        /// degFft2hBtuIT property
        /// </summary>
          [XmlEnum("degF.ft2.h/Btu[IT]")]
          degFft2hBtuIT,
        /// <summary>
        /// degFft property
        /// </summary>
          [XmlEnum("degF/ft")]
          degFft,
        /// <summary>
        /// degFh property
        /// </summary>
          [XmlEnum("degF/h")]
          degFh,
        /// <summary>
        /// degFm property
        /// </summary>
          [XmlEnum("degF/m")]
          degFm,
        /// <summary>
        /// degFmin property
        /// </summary>
          [XmlEnum("degF/min")]
          degFmin,
        /// <summary>
        /// degFpsi property
        /// </summary>
          [XmlEnum("degF/psi")]
          degFpsi,
        /// <summary>
        /// degFs property
        /// </summary>
          [XmlEnum("degF/s")]
          degFs,
        /// <summary>
        /// degR property
        /// </summary>
          degR,
        /// <summary>
        /// dEuc property
        /// </summary>
          dEuc,
        /// <summary>
        /// deV property
        /// </summary>
          deV,
        /// <summary>
        /// dF property
        /// </summary>
          dF,
        /// <summary>
        /// dgauss property
        /// </summary>
          dgauss,
        /// <summary>
        /// dGy property
        /// </summary>
          dGy,
        /// <summary>
        /// dH property
        /// </summary>
          dH,
        /// <summary>
        /// dHz property
        /// </summary>
          dHz,
        /// <summary>
        /// dJ property
        /// </summary>
          dJ,
        /// <summary>
        /// dm property
        /// </summary>
          dm,
        /// <summary>
        /// dms property
        /// </summary>
          [XmlEnum("dm/s")]
          dms,
        /// <summary>
        /// dm31 property
        /// </summary>
          [XmlEnum("dm3")]
          dm31,
        /// <summary>
        /// dm3kWh property
        /// </summary>
          [XmlEnum("dm3/(kW.h)")]
          dm3kWh,
        /// <summary>
        /// dm3kg property
        /// </summary>
          [XmlEnum("dm3/kg")]
          dm3kg,
        /// <summary>
        /// dm3kmol property
        /// </summary>
          [XmlEnum("dm3/kmol")]
          dm3kmol,
        /// <summary>
        /// dm3m property
        /// </summary>
          [XmlEnum("dm3/m")]
          dm3m,
        /// <summary>
        /// dm3m3 property
        /// </summary>
          [XmlEnum("dm3/m3")]
          dm3m3,
        /// <summary>
        /// dm3MJ property
        /// </summary>
          [XmlEnum("dm3/MJ")]
          dm3MJ,
        /// <summary>
        /// dm3s property
        /// </summary>
          [XmlEnum("dm3/s")]
          dm3s,
        /// <summary>
        /// dm3s2 property
        /// </summary>
          [XmlEnum("dm3/s2")]
          dm3s2,
        /// <summary>
        /// dm3t property
        /// </summary>
          [XmlEnum("dm3/t")]
          dm3t,
        /// <summary>
        /// dN property
        /// </summary>
          dN,
        /// <summary>
        /// dNm property
        /// </summary>
          [XmlEnum("dN.m")]
          dNm,
        /// <summary>
        /// dohm property
        /// </summary>
          dohm,
        /// <summary>
        /// dP property
        /// </summary>
          dP,
        /// <summary>
        /// dPa property
        /// </summary>
          dPa,
        /// <summary>
        /// drd property
        /// </summary>
          drd,
        /// <summary>
        /// dS property
        /// </summary>
          dS,
        /// <summary>
        /// ds property
        /// </summary>
          ds,
        /// <summary>
        /// dT property
        /// </summary>
          dT,
        /// <summary>
        /// dV property
        /// </summary>
          dV,
        /// <summary>
        /// dW property
        /// </summary>
          dW,
        /// <summary>
        /// dWb property
        /// </summary>
          dWb,
        /// <summary>
        /// dyne property
        /// </summary>
          dyne,
        /// <summary>
        /// dynecm2 property
        /// </summary>
          [XmlEnum("dyne.cm2")]
          dynecm2,
        /// <summary>
        /// dynescm2 property
        /// </summary>
          [XmlEnum("dyne.s/cm2")]
          dynescm2,
        /// <summary>
        /// dynecm property
        /// </summary>
          [XmlEnum("dyne/cm")]
          dynecm,
        /// <summary>
        /// dynecm21 property
        /// </summary>
          [XmlEnum("dyne/cm2")]
          dynecm21,
        /// <summary>
        /// EA property
        /// </summary>
          EA,
        /// <summary>
        /// Eat property
        /// </summary>
          [XmlEnum("Ea[t]")]
          Eat,
        /// <summary>
        /// EC property
        /// </summary>
          EC,
        /// <summary>
        /// Ecalth property
        /// </summary>
          [XmlEnum("Ecal[th]")]
          Ecalth,
        /// <summary>
        /// EEuc property
        /// </summary>
          EEuc,
        /// <summary>
        /// EeV property
        /// </summary>
          EeV,
        /// <summary>
        /// EF property
        /// </summary>
          EF,
        /// <summary>
        /// Eg property
        /// </summary>
          Eg,
        /// <summary>
        /// Egauss property
        /// </summary>
          Egauss,
        /// <summary>
        /// EGy property
        /// </summary>
          EGy,
        /// <summary>
        /// EH property
        /// </summary>
          EH,
        /// <summary>
        /// EHz property
        /// </summary>
          EHz,
        /// <summary>
        /// EJ property
        /// </summary>
          EJ,
        /// <summary>
        /// EJa property
        /// </summary>
          [XmlEnum("EJ/a")]
          EJa,
        /// <summary>
        /// Em property
        /// </summary>
          Em,
        /// <summary>
        /// EN property
        /// </summary>
          EN,
        /// <summary>
        /// Eohm property
        /// </summary>
          Eohm,
        /// <summary>
        /// EP property
        /// </summary>
          EP,
        /// <summary>
        /// EPa property
        /// </summary>
          EPa,
        /// <summary>
        /// Erd property
        /// </summary>
          Erd,
        /// <summary>
        /// erg property
        /// </summary>
          erg,
        /// <summary>
        /// erga property
        /// </summary>
          [XmlEnum("erg/a")]
          erga,
        /// <summary>
        /// ergcm2 property
        /// </summary>
          [XmlEnum("erg/cm2")]
          ergcm2,
        /// <summary>
        /// ergcm3 property
        /// </summary>
          [XmlEnum("erg/cm3")]
          ergcm3,
        /// <summary>
        /// ergg property
        /// </summary>
          [XmlEnum("erg/g")]
          ergg,
        /// <summary>
        /// ergkg property
        /// </summary>
          [XmlEnum("erg/kg")]
          ergkg,
        /// <summary>
        /// ergm3 property
        /// </summary>
          [XmlEnum("erg/m3")]
          ergm3,
        /// <summary>
        /// ES property
        /// </summary>
          ES,
        /// <summary>
        /// ET property
        /// </summary>
          ET,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// eV property
        /// </summary>
          eV,
        /// <summary>
        /// EW property
        /// </summary>
          EW,
        /// <summary>
        /// EWb property
        /// </summary>
          EWb,
        /// <summary>
        /// F property
        /// </summary>
          F,
        /// <summary>
        /// Fm property
        /// </summary>
          [XmlEnum("F/m")]
          Fm,
        /// <summary>
        /// fa property
        /// </summary>
          fa,
        /// <summary>
        /// fA property
        /// </summary>
          fA,
        /// <summary>
        /// fathom property
        /// </summary>
          fathom,
        /// <summary>
        /// fC property
        /// </summary>
          fC,
        /// <summary>
        /// fcalth property
        /// </summary>
          [XmlEnum("fcal[th]")]
          fcalth,
        /// <summary>
        /// fEuc property
        /// </summary>
          fEuc,
        /// <summary>
        /// feV property
        /// </summary>
          feV,
        /// <summary>
        /// fF property
        /// </summary>
          fF,
        /// <summary>
        /// fg property
        /// </summary>
          fg,
        /// <summary>
        /// fgauss property
        /// </summary>
          fgauss,
        /// <summary>
        /// fGy property
        /// </summary>
          fGy,
        /// <summary>
        /// fH property
        /// </summary>
          fH,
        /// <summary>
        /// fHz property
        /// </summary>
          fHz,
        /// <summary>
        /// fJ property
        /// </summary>
          fJ,
        /// <summary>
        /// flozUK property
        /// </summary>
          [XmlEnum("floz[UK]")]
          flozUK,
        /// <summary>
        /// flozUS property
        /// </summary>
          [XmlEnum("floz[US]")]
          flozUS,
        /// <summary>
        /// fm property
        /// </summary>
          fm,
        /// <summary>
        /// fN property
        /// </summary>
          fN,
        /// <summary>
        /// fohm property
        /// </summary>
          fohm,
        /// <summary>
        /// footcandle property
        /// </summary>
          footcandle,
        /// <summary>
        /// footcandles property
        /// </summary>
          [XmlEnum("footcandle.s")]
          footcandles,
        /// <summary>
        /// fP property
        /// </summary>
          fP,
        /// <summary>
        /// fPa property
        /// </summary>
          fPa,
        /// <summary>
        /// frd property
        /// </summary>
          frd,
        /// <summary>
        /// fS property
        /// </summary>
          fS,
        /// <summary>
        /// ft property
        /// </summary>
          ft,
        /// <summary>
        /// fT property
        /// </summary>
          fT,
        /// <summary>
        /// ftbbl property
        /// </summary>
          [XmlEnum("ft/bbl")]
          ftbbl,
        /// <summary>
        /// ftd property
        /// </summary>
          [XmlEnum("ft/d")]
          ftd,
        /// <summary>
        /// ftdegF property
        /// </summary>
          [XmlEnum("ft/degF")]
          ftdegF,
        /// <summary>
        /// ftft property
        /// </summary>
          [XmlEnum("ft/ft")]
          ftft,
        /// <summary>
        /// ftft3 property
        /// </summary>
          [XmlEnum("ft/ft3")]
          ftft3,
        /// <summary>
        /// ftgalUS property
        /// </summary>
          [XmlEnum("ft/gal[US]")]
          ftgalUS,
        /// <summary>
        /// fth property
        /// </summary>
          [XmlEnum("ft/h")]
          fth,
        /// <summary>
        /// ftin property
        /// </summary>
          [XmlEnum("ft/in")]
          ftin,
        /// <summary>
        /// ftlbm property
        /// </summary>
          [XmlEnum("ft/lbm")]
          ftlbm,
        /// <summary>
        /// ftm property
        /// </summary>
          [XmlEnum("ft/m")]
          ftm,
        /// <summary>
        /// ftmi property
        /// </summary>
          [XmlEnum("ft/mi")]
          ftmi,
        /// <summary>
        /// ftmin property
        /// </summary>
          [XmlEnum("ft/min")]
          ftmin,
        /// <summary>
        /// ftms property
        /// </summary>
          [XmlEnum("ft/ms")]
          ftms,
        /// <summary>
        /// ftpsi property
        /// </summary>
          [XmlEnum("ft/psi")]
          ftpsi,
        /// <summary>
        /// fts property
        /// </summary>
          [XmlEnum("ft/s")]
          fts,
        /// <summary>
        /// fts2 property
        /// </summary>
          [XmlEnum("ft/s2")]
          fts2,
        /// <summary>
        /// ftus property
        /// </summary>
          [XmlEnum("ft/us")]
          ftus,
        /// <summary>
        /// ftBnA property
        /// </summary>
          [XmlEnum("ft[BnA]")]
          ftBnA,
        /// <summary>
        /// ftBnB property
        /// </summary>
          [XmlEnum("ft[BnB]")]
          ftBnB,
        /// <summary>
        /// ftBr36 property
        /// </summary>
          [XmlEnum("ft[Br36]")]
          ftBr36,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ft[Br65]")]
          ftBr65,
        /// <summary>
        /// ftCla property
        /// </summary>
          [XmlEnum("ft[Cla]")]
          ftCla,
        /// <summary>
        /// ftGC property
        /// </summary>
          [XmlEnum("ft[GC]")]
          ftGC,
        /// <summary>
        /// ftInd property
        /// </summary>
          [XmlEnum("ft[Ind]")]
          ftInd,
        /// <summary>
        /// ftInd37 property
        /// </summary>
          [XmlEnum("ft[Ind37]")]
          ftInd37,
        /// <summary>
        /// ftInd62 property
        /// </summary>
          [XmlEnum("ft[Ind62]")]
          ftInd62,
        /// <summary>
        /// ftInd75 property
        /// </summary>
          [XmlEnum("ft[Ind75]")]
          ftInd75,
        /// <summary>
        /// ftSe property
        /// </summary>
          [XmlEnum("ft[Se]")]
          ftSe,
        /// <summary>
        /// ftSeT property
        /// </summary>
          [XmlEnum("ft[SeT]")]
          ftSeT,
        /// <summary>
        /// ftUS property
        /// </summary>
          [XmlEnum("ft[US]")]
          ftUS,
        /// <summary>
        /// ft2 property
        /// </summary>
          ft2,
        /// <summary>
        /// ft2h property
        /// </summary>
          [XmlEnum("ft2/h")]
          ft2h,
        /// <summary>
        /// ft2in3 property
        /// </summary>
          [XmlEnum("ft2/in3")]
          ft2in3,
        /// <summary>
        /// ft2lbm property
        /// </summary>
          [XmlEnum("ft2/lbm")]
          ft2lbm,
        /// <summary>
        /// ft2s property
        /// </summary>
          [XmlEnum("ft2/s")]
          ft2s,
        /// <summary>
        /// ft3 property
        /// </summary>
          ft3,
        /// <summary>
        /// ft3dft property
        /// </summary>
          [XmlEnum("ft3/(d.ft)")]
          ft3dft,
        /// <summary>
        /// ft3ftpsid property
        /// </summary>
          [XmlEnum("ft3/(ft.psi.d)")]
          ft3ftpsid,
        /// <summary>
        /// ft3minft2 property
        /// </summary>
          [XmlEnum("ft3/(min.ft2)")]
          ft3minft2,
        /// <summary>
        /// ft3sft2 property
        /// </summary>
          [XmlEnum("ft3/(s.ft2)")]
          ft3sft2,
        /// <summary>
        /// ft3bbl property
        /// </summary>
          [XmlEnum("ft3/bbl")]
          ft3bbl,
        /// <summary>
        /// ft3d property
        /// </summary>
          [XmlEnum("ft3/d")]
          ft3d,
        /// <summary>
        /// ft3d2 property
        /// </summary>
          [XmlEnum("ft3/d2")]
          ft3d2,
        /// <summary>
        /// ft3ft property
        /// </summary>
          [XmlEnum("ft3/ft")]
          ft3ft,
        /// <summary>
        /// ft3ft2 property
        /// </summary>
          [XmlEnum("ft3/ft2")]
          ft3ft2,
        /// <summary>
        /// ft3ft3 property
        /// </summary>
          [XmlEnum("ft3/ft3")]
          ft3ft3,
        /// <summary>
        /// ft3h property
        /// </summary>
          [XmlEnum("ft3/h")]
          ft3h,
        /// <summary>
        /// ft3h2 property
        /// </summary>
          [XmlEnum("ft3/h2")]
          ft3h2,
        /// <summary>
        /// ft3kg property
        /// </summary>
          [XmlEnum("ft3/kg")]
          ft3kg,
        /// <summary>
        /// ft3lbm property
        /// </summary>
          [XmlEnum("ft3/lbm")]
          ft3lbm,
        /// <summary>
        /// ft3lbmol property
        /// </summary>
          [XmlEnum("ft3/lbmol")]
          ft3lbmol,
        /// <summary>
        /// ft3min property
        /// </summary>
          [XmlEnum("ft3/min")]
          ft3min,
        /// <summary>
        /// ft3min2 property
        /// </summary>
          [XmlEnum("ft3/min2")]
          ft3min2,
        /// <summary>
        /// ft3rad property
        /// </summary>
          [XmlEnum("ft3/rad")]
          ft3rad,
        /// <summary>
        /// ft3s property
        /// </summary>
          [XmlEnum("ft3/s")]
          ft3s,
        /// <summary>
        /// ft3s2 property
        /// </summary>
          [XmlEnum("ft3/s2")]
          ft3s2,
        /// <summary>
        /// ft3sack94lbm property
        /// </summary>
          [XmlEnum("ft3/sack[94lbm]")]
          ft3sack94lbm,
        /// <summary>
        /// furUS property
        /// </summary>
          [XmlEnum("fur[US]")]
          furUS,
        /// <summary>
        /// fV property
        /// </summary>
          fV,
        /// <summary>
        /// fW property
        /// </summary>
          fW,
        /// <summary>
        /// fWb property
        /// </summary>
          fWb,
        /// <summary>
        /// g property
        /// </summary>
          g,
        /// <summary>
        /// gftcm3s property
        /// </summary>
          [XmlEnum("g.ft/(cm3.s)")]
          gftcm3s,
        /// <summary>
        /// gmcm3s property
        /// </summary>
          [XmlEnum("g.m/(cm3.s)")]
          gmcm3s,
        /// <summary>
        /// gcm3 property
        /// </summary>
          [XmlEnum("g/cm3")]
          gcm3,
        /// <summary>
        /// gcm4 property
        /// </summary>
          [XmlEnum("g/cm4")]
          gcm4,
        /// <summary>
        /// gdm3 property
        /// </summary>
          [XmlEnum("g/dm3")]
          gdm3,
        /// <summary>
        /// ggalUK property
        /// </summary>
          [XmlEnum("g/gal[UK]")]
          ggalUK,
        /// <summary>
        /// ggalUS property
        /// </summary>
          [XmlEnum("g/gal[US]")]
          ggalUS,
        /// <summary>
        /// gkg property
        /// </summary>
          [XmlEnum("g/kg")]
          gkg,
        /// <summary>
        /// gL property
        /// </summary>
          [XmlEnum("g/L")]
          gL,
        /// <summary>
        /// gm3 property
        /// </summary>
          [XmlEnum("g/m3")]
          gm3,
        /// <summary>
        /// gmol property
        /// </summary>
          [XmlEnum("g/mol")]
          gmol,
        /// <summary>
        /// gs property
        /// </summary>
          [XmlEnum("g/s")]
          gs,
        /// <summary>
        /// gt property
        /// </summary>
          [XmlEnum("g/t")]
          gt,
        /// <summary>
        /// GA property
        /// </summary>
          GA,
        /// <summary>
        /// Gat property
        /// </summary>
          [XmlEnum("Ga[t]")]
          Gat,
        /// <summary>
        /// Gal property
        /// </summary>
          Gal,
        /// <summary>
        /// galUK property
        /// </summary>
          [XmlEnum("gal[UK]")]
          galUK,
        /// <summary>
        /// galUKhft property
        /// </summary>
          [XmlEnum("gal[UK]/(h.ft)")]
          galUKhft,
        /// <summary>
        /// galUKhft2 property
        /// </summary>
          [XmlEnum("gal[UK]/(h.ft2)")]
          galUKhft2,
        /// <summary>
        /// galUKhin property
        /// </summary>
          [XmlEnum("gal[UK]/(h.in)")]
          galUKhin,
        /// <summary>
        /// galUKhin2 property
        /// </summary>
          [XmlEnum("gal[UK]/(h.in2)")]
          galUKhin2,
        /// <summary>
        /// galUKminft property
        /// </summary>
          [XmlEnum("gal[UK]/(min.ft)")]
          galUKminft,
        /// <summary>
        /// galUKminft2 property
        /// </summary>
          [XmlEnum("gal[UK]/(min.ft2)")]
          galUKminft2,
        /// <summary>
        /// galUKd property
        /// </summary>
          [XmlEnum("gal[UK]/d")]
          galUKd,
        /// <summary>
        /// galUKft3 property
        /// </summary>
          [XmlEnum("gal[UK]/ft3")]
          galUKft3,
        /// <summary>
        /// galUKh property
        /// </summary>
          [XmlEnum("gal[UK]/h")]
          galUKh,
        /// <summary>
        /// galUKh2 property
        /// </summary>
          [XmlEnum("gal[UK]/h2")]
          galUKh2,
        /// <summary>
        /// galUKlbm property
        /// </summary>
          [XmlEnum("gal[UK]/lbm")]
          galUKlbm,
        /// <summary>
        /// galUKmi property
        /// </summary>
          [XmlEnum("gal[UK]/mi")]
          galUKmi,
        /// <summary>
        /// galUKmin property
        /// </summary>
          [XmlEnum("gal[UK]/min")]
          galUKmin,
        /// <summary>
        /// galUKmin2 property
        /// </summary>
          [XmlEnum("gal[UK]/min2")]
          galUKmin2,
        /// <summary>
        /// galUS property
        /// </summary>
          [XmlEnum("gal[US]")]
          galUS,
        /// <summary>
        /// galUShft property
        /// </summary>
          [XmlEnum("gal[US]/(h.ft)")]
          galUShft,
        /// <summary>
        /// galUShft2 property
        /// </summary>
          [XmlEnum("gal[US]/(h.ft2)")]
          galUShft2,
        /// <summary>
        /// galUShin property
        /// </summary>
          [XmlEnum("gal[US]/(h.in)")]
          galUShin,
        /// <summary>
        /// galUShin2 property
        /// </summary>
          [XmlEnum("gal[US]/(h.in2)")]
          galUShin2,
        /// <summary>
        /// galUSminft property
        /// </summary>
          [XmlEnum("gal[US]/(min.ft)")]
          galUSminft,
        /// <summary>
        /// galUSminft2 property
        /// </summary>
          [XmlEnum("gal[US]/(min.ft2)")]
          galUSminft2,
        /// <summary>
        /// galUSbbl property
        /// </summary>
          [XmlEnum("gal[US]/bbl")]
          galUSbbl,
        /// <summary>
        /// galUSd property
        /// </summary>
          [XmlEnum("gal[US]/d")]
          galUSd,
        /// <summary>
        /// galUSft property
        /// </summary>
          [XmlEnum("gal[US]/ft")]
          galUSft,
        /// <summary>
        /// galUSft3 property
        /// </summary>
          [XmlEnum("gal[US]/ft3")]
          galUSft3,
        /// <summary>
        /// galUSh property
        /// </summary>
          [XmlEnum("gal[US]/h")]
          galUSh,
        /// <summary>
        /// galUSh2 property
        /// </summary>
          [XmlEnum("gal[US]/h2")]
          galUSh2,
        /// <summary>
        /// galUSlbm property
        /// </summary>
          [XmlEnum("gal[US]/lbm")]
          galUSlbm,
        /// <summary>
        /// galUSmi property
        /// </summary>
          [XmlEnum("gal[US]/mi")]
          galUSmi,
        /// <summary>
        /// galUSmin property
        /// </summary>
          [XmlEnum("gal[US]/min")]
          galUSmin,
        /// <summary>
        /// galUSmin2 property
        /// </summary>
          [XmlEnum("gal[US]/min2")]
          galUSmin2,
        /// <summary>
        /// galUSsack94lbm property
        /// </summary>
          [XmlEnum("gal[US]/sack[94lbm]")]
          galUSsack94lbm,
        /// <summary>
        /// galUStonUK property
        /// </summary>
          [XmlEnum("gal[US]/ton[UK]")]
          galUStonUK,
        /// <summary>
        /// galUStonUS property
        /// </summary>
          [XmlEnum("gal[US]/ton[US]")]
          galUStonUS,
        /// <summary>
        /// gAPI property
        /// </summary>
          gAPI,
        /// <summary>
        /// gauss property
        /// </summary>
          gauss,
        /// <summary>
        /// gausscm property
        /// </summary>
          [XmlEnum("gauss/cm")]
          gausscm,
        /// <summary>
        /// GBq property
        /// </summary>
          GBq,
        /// <summary>
        /// GC property
        /// </summary>
          GC,
        /// <summary>
        /// Gcalth property
        /// </summary>
          [XmlEnum("Gcal[th]")]
          Gcalth,
        /// <summary>
        /// GEuc property
        /// </summary>
          GEuc,
        /// <summary>
        /// GeV property
        /// </summary>
          GeV,
        /// <summary>
        /// gf property
        /// </summary>
          gf,
        /// <summary>
        /// GF property
        /// </summary>
          GF,
        /// <summary>
        /// Gg property
        /// </summary>
          Gg,
        /// <summary>
        /// Ggauss property
        /// </summary>
          Ggauss,
        /// <summary>
        /// GGy property
        /// </summary>
          GGy,
        /// <summary>
        /// GH property
        /// </summary>
          GH,
        /// <summary>
        /// GHz property
        /// </summary>
          GHz,
        /// <summary>
        /// GJ property
        /// </summary>
          GJ,
        /// <summary>
        /// Gm property
        /// </summary>
          Gm,
        /// <summary>
        /// GN property
        /// </summary>
          GN,
        /// <summary>
        /// gn property
        /// </summary>
          gn,
        /// <summary>
        /// Gohm property
        /// </summary>
          Gohm,
        /// <summary>
        /// gon property
        /// </summary>
          gon,
        /// <summary>
        /// GP property
        /// </summary>
          GP,
        /// <summary>
        /// GPa property
        /// </summary>
          GPa,
        /// <summary>
        /// GPacm property
        /// </summary>
          [XmlEnum("GPa/cm")]
          GPacm,
        /// <summary>
        /// GPa2 property
        /// </summary>
          GPa2,
        /// <summary>
        /// grain property
        /// </summary>
          grain,
        /// <summary>
        /// grainft3 property
        /// </summary>
          [XmlEnum("grain/ft3")]
          grainft3,
        /// <summary>
        /// graingalUS property
        /// </summary>
          [XmlEnum("grain/gal[US]")]
          graingalUS,
        /// <summary>
        /// Grd property
        /// </summary>
          Grd,
        /// <summary>
        /// GS property
        /// </summary>
          GS,
        /// <summary>
        /// GT property
        /// </summary>
          GT,
        /// <summary>
        /// GV property
        /// </summary>
          GV,
        /// <summary>
        /// GW property
        /// </summary>
          GW,
        /// <summary>
        /// GWh property
        /// </summary>
          [XmlEnum("GW.h")]
          GWh,
        /// <summary>
        /// GWb property
        /// </summary>
          GWb,
        /// <summary>
        /// Gy property
        /// </summary>
          Gy,
        /// <summary>
        /// H property
        /// </summary>
          H,
        /// <summary>
        /// h property
        /// </summary>
          h,
        /// <summary>
        /// hft3 property
        /// </summary>
          [XmlEnum("h/ft3")]
          hft3,
        /// <summary>
        /// hkm property
        /// </summary>
          [XmlEnum("h/km")]
          hkm,
        /// <summary>
        /// Hm property
        /// </summary>
          [XmlEnum("H/m")]
          Hm,
        /// <summary>
        /// hm3 property
        /// </summary>
          [XmlEnum("h/m3")]
          hm3,
        /// <summary>
        /// ha property
        /// </summary>
          ha,
        /// <summary>
        /// ham property
        /// </summary>
          [XmlEnum("ha.m")]
          ham,
        /// <summary>
        /// hbar property
        /// </summary>
          hbar,
        /// <summary>
        /// hg property
        /// </summary>
          hg,
        /// <summary>
        /// hL property
        /// </summary>
          hL,
        /// <summary>
        /// hm property
        /// </summary>
          hm,
        /// <summary>
        /// hN property
        /// </summary>
          hN,
        /// <summary>
        /// hp property
        /// </summary>
          hp,
        /// <summary>
        /// hph property
        /// </summary>
          [XmlEnum("hp.h")]
          hph,
        /// <summary>
        /// hphbbl property
        /// </summary>
          [XmlEnum("hp.h/bbl")]
          hphbbl,
        /// <summary>
        /// hphlbm property
        /// </summary>
          [XmlEnum("hp.h/lbm")]
          hphlbm,
        /// <summary>
        /// hpft3 property
        /// </summary>
          [XmlEnum("hp/ft3")]
          hpft3,
        /// <summary>
        /// hpin2 property
        /// </summary>
          [XmlEnum("hp/in2")]
          hpin2,
        /// <summary>
        /// hpelec property
        /// </summary>
          [XmlEnum("hp[elec]")]
          hpelec,
        /// <summary>
        /// hphyd property
        /// </summary>
          [XmlEnum("hp[hyd]")]
          hphyd,
        /// <summary>
        /// hphydin2 property
        /// </summary>
          [XmlEnum("hp[hyd]/in2")]
          hphydin2,
        /// <summary>
        /// hpmetric property
        /// </summary>
          [XmlEnum("hp[metric]")]
          hpmetric,
        /// <summary>
        /// hpmetrich property
        /// </summary>
          [XmlEnum("hp[metric].h")]
          hpmetrich,
        /// <summary>
        /// hs property
        /// </summary>
          hs,
        /// <summary>
        /// Hz property
        /// </summary>
          Hz,
        /// <summary>
        /// in property
        /// </summary>
          @in,
        /// <summary>
        /// inindegF property
        /// </summary>
          [XmlEnum("in/(in.degF)")]
          inindegF,
        /// <summary>
        /// ina property
        /// </summary>
          [XmlEnum("in/a")]
          ina,
        /// <summary>
        /// inmin property
        /// </summary>
          [XmlEnum("in/min")]
          inmin,
        /// <summary>
        /// ins property
        /// </summary>
          [XmlEnum("in/s")]
          ins,
        /// <summary>
        /// ins2 property
        /// </summary>
          [XmlEnum("in/s2")]
          ins2,
        /// <summary>
        /// inUS property
        /// </summary>
          [XmlEnum("in[US]")]
          inUS,
        /// <summary>
        /// in2 property
        /// </summary>
          in2,
        /// <summary>
        /// in2ft2 property
        /// </summary>
          [XmlEnum("in2/ft2")]
          in2ft2,
        /// <summary>
        /// in2in2 property
        /// </summary>
          [XmlEnum("in2/in2")]
          in2in2,
        /// <summary>
        /// in2s property
        /// </summary>
          [XmlEnum("in2/s")]
          in2s,
        /// <summary>
        /// in3 property
        /// </summary>
          in3,
        /// <summary>
        /// in3ft property
        /// </summary>
          [XmlEnum("in3/ft")]
          in3ft,
        /// <summary>
        /// in4 property
        /// </summary>
          in4,
        /// <summary>
        /// inH2O39degF property
        /// </summary>
          [XmlEnum("inH2O[39degF]")]
          inH2O39degF,
        /// <summary>
        /// inH2O60degF property
        /// </summary>
          [XmlEnum("inH2O[60degF]")]
          inH2O60degF,
        /// <summary>
        /// inHg32degF property
        /// </summary>
          [XmlEnum("inHg[32degF]")]
          inHg32degF,
        /// <summary>
        /// inHg60degF property
        /// </summary>
          [XmlEnum("inHg[60degF]")]
          inHg60degF,
        /// <summary>
        /// J property
        /// </summary>
          J,
        /// <summary>
        /// Jmsm2K property
        /// </summary>
          [XmlEnum("J.m/(s.m2.K)")]
          Jmsm2K,
        /// <summary>
        /// Jmm2 property
        /// </summary>
          [XmlEnum("J.m/m2")]
          Jmm2,
        /// <summary>
        /// JgK property
        /// </summary>
          [XmlEnum("J/(g.K)")]
          JgK,
        /// <summary>
        /// JkgK property
        /// </summary>
          [XmlEnum("J/(kg.K)")]
          JkgK,
        /// <summary>
        /// JmolK property
        /// </summary>
          [XmlEnum("J/(mol.K)")]
          JmolK,
        /// <summary>
        /// Jsm2degC property
        /// </summary>
          [XmlEnum("J/(s.m2.degC)")]
          Jsm2degC,
        /// <summary>
        /// Jcm2 property
        /// </summary>
          [XmlEnum("J/cm2")]
          Jcm2,
        /// <summary>
        /// Jdm3 property
        /// </summary>
          [XmlEnum("J/dm3")]
          Jdm3,
        /// <summary>
        /// Jg property
        /// </summary>
          [XmlEnum("J/g")]
          Jg,
        /// <summary>
        /// JK property
        /// </summary>
          [XmlEnum("J/K")]
          JK,
        /// <summary>
        /// Jkg property
        /// </summary>
          [XmlEnum("J/kg")]
          Jkg,
        /// <summary>
        /// Jm property
        /// </summary>
          [XmlEnum("J/m")]
          Jm,
        /// <summary>
        /// Jm2 property
        /// </summary>
          [XmlEnum("J/m2")]
          Jm2,
        /// <summary>
        /// Jm3 property
        /// </summary>
          [XmlEnum("J/m3")]
          Jm3,
        /// <summary>
        /// Jmol property
        /// </summary>
          [XmlEnum("J/mol")]
          Jmol,
        /// <summary>
        /// Js property
        /// </summary>
          [XmlEnum("J/s")]
          Js,
        /// <summary>
        /// K property
        /// </summary>
          K,
        /// <summary>
        /// Km2kW property
        /// </summary>
          [XmlEnum("K.m2/kW")]
          Km2kW,
        /// <summary>
        /// Km2W property
        /// </summary>
          [XmlEnum("K.m2/W")]
          Km2W,
        /// <summary>
        /// Kkm property
        /// </summary>
          [XmlEnum("K/km")]
          Kkm,
        /// <summary>
        /// Km property
        /// </summary>
          [XmlEnum("K/m")]
          Km,
        /// <summary>
        /// KPa property
        /// </summary>
          [XmlEnum("K/Pa")]
          KPa,
        /// <summary>
        /// Ks property
        /// </summary>
          [XmlEnum("K/s")]
          Ks,
        /// <summary>
        /// KW property
        /// </summary>
          [XmlEnum("K/W")]
          KW,
        /// <summary>
        /// kA property
        /// </summary>
          kA,
        /// <summary>
        /// kat property
        /// </summary>
          [XmlEnum("ka[t]")]
          kat,
        /// <summary>
        /// kC property
        /// </summary>
          kC,
        /// <summary>
        /// kcalth property
        /// </summary>
          [XmlEnum("kcal[th]")]
          kcalth,
        /// <summary>
        /// kcalthmcm2 property
        /// </summary>
          [XmlEnum("kcal[th].m/cm2")]
          kcalthmcm2,
        /// <summary>
        /// kcalthhmdegC property
        /// </summary>
          [XmlEnum("kcal[th]/(h.m.degC)")]
          kcalthhmdegC,
        /// <summary>
        /// kcalthhm2degC property
        /// </summary>
          [XmlEnum("kcal[th]/(h.m2.degC)")]
          kcalthhm2degC,
        /// <summary>
        /// kcalthkgdegC property
        /// </summary>
          [XmlEnum("kcal[th]/(kg.degC)")]
          kcalthkgdegC,
        /// <summary>
        /// kcalthcm3 property
        /// </summary>
          [XmlEnum("kcal[th]/cm3")]
          kcalthcm3,
        /// <summary>
        /// kcalthg property
        /// </summary>
          [XmlEnum("kcal[th]/g")]
          kcalthg,
        /// <summary>
        /// kcalthh property
        /// </summary>
          [XmlEnum("kcal[th]/h")]
          kcalthh,
        /// <summary>
        /// kcalthkg property
        /// </summary>
          [XmlEnum("kcal[th]/kg")]
          kcalthkg,
        /// <summary>
        /// kcalthm3 property
        /// </summary>
          [XmlEnum("kcal[th]/m3")]
          kcalthm3,
        /// <summary>
        /// kcalthmol property
        /// </summary>
          [XmlEnum("kcal[th]/mol")]
          kcalthmol,
        /// <summary>
        /// kcd property
        /// </summary>
          kcd,
        /// <summary>
        /// kdyne property
        /// </summary>
          kdyne,
        /// <summary>
        /// kEuc property
        /// </summary>
          kEuc,
        /// <summary>
        /// keV property
        /// </summary>
          keV,
        /// <summary>
        /// kF property
        /// </summary>
          kF,
        /// <summary>
        /// kg property
        /// </summary>
          kg,
        /// <summary>
        /// kgm property
        /// </summary>
          [XmlEnum("kg.m")]
          kgm,
        /// <summary>
        /// kgmcm2 property
        /// </summary>
          [XmlEnum("kg.m/cm2")]
          kgmcm2,
        /// <summary>
        /// kgms property
        /// </summary>
          [XmlEnum("kg.m/s")]
          kgms,
        /// <summary>
        /// kgm2 property
        /// </summary>
          [XmlEnum("kg.m2")]
          kgm2,
        /// <summary>
        /// kgkWh property
        /// </summary>
          [XmlEnum("kg/(kW.h)")]
          kgkWh,
        /// <summary>
        /// kgms1 property
        /// </summary>
          [XmlEnum("kg/(m.s)")]
          kgms1,
        /// <summary>
        /// kgm2s property
        /// </summary>
          [XmlEnum("kg/(m2.s)")]
          kgm2s,
        /// <summary>
        /// kgd property
        /// </summary>
          [XmlEnum("kg/d")]
          kgd,
        /// <summary>
        /// kgdm3 property
        /// </summary>
          [XmlEnum("kg/dm3")]
          kgdm3,
        /// <summary>
        /// kgdm4 property
        /// </summary>
          [XmlEnum("kg/dm4")]
          kgdm4,
        /// <summary>
        /// kgh property
        /// </summary>
          [XmlEnum("kg/h")]
          kgh,
        /// <summary>
        /// kgJ property
        /// </summary>
          [XmlEnum("kg/J")]
          kgJ,
        /// <summary>
        /// kgkg property
        /// </summary>
          [XmlEnum("kg/kg")]
          kgkg,
        /// <summary>
        /// kgL property
        /// </summary>
          [XmlEnum("kg/L")]
          kgL,
        /// <summary>
        /// kgm1 property
        /// </summary>
          [XmlEnum("kg/m")]
          kgm1,
        /// <summary>
        /// kgm21 property
        /// </summary>
          [XmlEnum("kg/m2")]
          kgm21,
        /// <summary>
        /// kgm3 property
        /// </summary>
          [XmlEnum("kg/m3")]
          kgm3,
        /// <summary>
        /// kgm4 property
        /// </summary>
          [XmlEnum("kg/m4")]
          kgm4,
        /// <summary>
        /// kgmin property
        /// </summary>
          [XmlEnum("kg/min")]
          kgmin,
        /// <summary>
        /// kgMJ property
        /// </summary>
          [XmlEnum("kg/MJ")]
          kgMJ,
        /// <summary>
        /// kgmol property
        /// </summary>
          [XmlEnum("kg/mol")]
          kgmol,
        /// <summary>
        /// kgs property
        /// </summary>
          [XmlEnum("kg/s")]
          kgs,
        /// <summary>
        /// kgsack94lbm property
        /// </summary>
          [XmlEnum("kg/sack[94lbm]")]
          kgsack94lbm,
        /// <summary>
        /// kgt property
        /// </summary>
          [XmlEnum("kg/t")]
          kgt,
        /// <summary>
        /// kgauss property
        /// </summary>
          kgauss,
        /// <summary>
        /// kgf property
        /// </summary>
          kgf,
        /// <summary>
        /// kgfm property
        /// </summary>
          [XmlEnum("kgf.m")]
          kgfm,
        /// <summary>
        /// kgfmcm2 property
        /// </summary>
          [XmlEnum("kgf.m/cm2")]
          kgfmcm2,
        /// <summary>
        /// kgfmm property
        /// </summary>
          [XmlEnum("kgf.m/m")]
          kgfmm,
        /// <summary>
        /// kgfm2 property
        /// </summary>
          [XmlEnum("kgf.m2")]
          kgfm2,
        /// <summary>
        /// kgfsm2 property
        /// </summary>
          [XmlEnum("kgf.s/m2")]
          kgfsm2,
        /// <summary>
        /// kgfcm property
        /// </summary>
          [XmlEnum("kgf/cm")]
          kgfcm,
        /// <summary>
        /// kgfcm2 property
        /// </summary>
          [XmlEnum("kgf/cm2")]
          kgfcm2,
        /// <summary>
        /// kgfkgf property
        /// </summary>
          [XmlEnum("kgf/kgf")]
          kgfkgf,
        /// <summary>
        /// kgfm21 property
        /// </summary>
          [XmlEnum("kgf/m2")]
          kgfm21,
        /// <summary>
        /// kgfmm2 property
        /// </summary>
          [XmlEnum("kgf/mm2")]
          kgfmm2,
        /// <summary>
        /// kGy property
        /// </summary>
          kGy,
        /// <summary>
        /// kH property
        /// </summary>
          kH,
        /// <summary>
        /// kHz property
        /// </summary>
          kHz,
        /// <summary>
        /// Kibyte property
        /// </summary>
          Kibyte,
        /// <summary>
        /// kJ property
        /// </summary>
          kJ,
        /// <summary>
        /// kJmhm2K property
        /// </summary>
          [XmlEnum("kJ.m/(h.m2.K)")]
          kJmhm2K,
        /// <summary>
        /// kJhm2K property
        /// </summary>
          [XmlEnum("kJ/(h.m2.K)")]
          kJhm2K,
        /// <summary>
        /// kJkgK property
        /// </summary>
          [XmlEnum("kJ/(kg.K)")]
          kJkgK,
        /// <summary>
        /// kJkmolK property
        /// </summary>
          [XmlEnum("kJ/(kmol.K)")]
          kJkmolK,
        /// <summary>
        /// kJdm3 property
        /// </summary>
          [XmlEnum("kJ/dm3")]
          kJdm3,
        /// <summary>
        /// kJkg property
        /// </summary>
          [XmlEnum("kJ/kg")]
          kJkg,
        /// <summary>
        /// kJkmol property
        /// </summary>
          [XmlEnum("kJ/kmol")]
          kJkmol,
        /// <summary>
        /// kJm3 property
        /// </summary>
          [XmlEnum("kJ/m3")]
          kJm3,
        /// <summary>
        /// klbf property
        /// </summary>
          klbf,
        /// <summary>
        /// klbm property
        /// </summary>
          klbm,
        /// <summary>
        /// klbmin property
        /// </summary>
          [XmlEnum("klbm/in")]
          klbmin,
        /// <summary>
        /// klx property
        /// </summary>
          klx,
        /// <summary>
        /// km property
        /// </summary>
          km,
        /// <summary>
        /// kmcm property
        /// </summary>
          [XmlEnum("km/cm")]
          kmcm,
        /// <summary>
        /// kmdm3 property
        /// </summary>
          [XmlEnum("km/dm3")]
          kmdm3,
        /// <summary>
        /// kmh property
        /// </summary>
          [XmlEnum("km/h")]
          kmh,
        /// <summary>
        /// kmL property
        /// </summary>
          [XmlEnum("km/L")]
          kmL,
        /// <summary>
        /// kms property
        /// </summary>
          [XmlEnum("km/s")]
          kms,
        /// <summary>
        /// km2 property
        /// </summary>
          km2,
        /// <summary>
        /// km3 property
        /// </summary>
          km3,
        /// <summary>
        /// kmol property
        /// </summary>
          kmol,
        /// <summary>
        /// kmolh property
        /// </summary>
          [XmlEnum("kmol/h")]
          kmolh,
        /// <summary>
        /// kmolm3 property
        /// </summary>
          [XmlEnum("kmol/m3")]
          kmolm3,
        /// <summary>
        /// kmols property
        /// </summary>
          [XmlEnum("kmol/s")]
          kmols,
        /// <summary>
        /// kN property
        /// </summary>
          kN,
        /// <summary>
        /// kNm property
        /// </summary>
          [XmlEnum("kN.m")]
          kNm,
        /// <summary>
        /// kNm2 property
        /// </summary>
          [XmlEnum("kN.m2")]
          kNm2,
        /// <summary>
        /// kNm1 property
        /// </summary>
          [XmlEnum("kN/m")]
          kNm1,
        /// <summary>
        /// kNm21 property
        /// </summary>
          [XmlEnum("kN/m2")]
          kNm21,
        /// <summary>
        /// knot property
        /// </summary>
          knot,
        /// <summary>
        /// kohm property
        /// </summary>
          kohm,
        /// <summary>
        /// kohmm property
        /// </summary>
          [XmlEnum("kohm.m")]
          kohmm,
        /// <summary>
        /// kP property
        /// </summary>
          kP,
        /// <summary>
        /// kPa property
        /// </summary>
          kPa,
        /// <summary>
        /// kPasm property
        /// </summary>
          [XmlEnum("kPa.s/m")]
          kPasm,
        /// <summary>
        /// kPah property
        /// </summary>
          [XmlEnum("kPa/h")]
          kPah,
        /// <summary>
        /// kPahm property
        /// </summary>
          [XmlEnum("kPa/hm")]
          kPahm,
        /// <summary>
        /// kPam property
        /// </summary>
          [XmlEnum("kPa/m")]
          kPam,
        /// <summary>
        /// kPamin property
        /// </summary>
          [XmlEnum("kPa/min")]
          kPamin,
        /// <summary>
        /// kPa2 property
        /// </summary>
          kPa2,
        /// <summary>
        /// kPa2cP property
        /// </summary>
          [XmlEnum("kPa2/cP")]
          kPa2cP,
        /// <summary>
        /// kpsi property
        /// </summary>
          kpsi,
        /// <summary>
        /// kpsi2 property
        /// </summary>
          kpsi2,
        /// <summary>
        /// krad property
        /// </summary>
          krad,
        /// <summary>
        /// krd property
        /// </summary>
          krd,
        /// <summary>
        /// kS property
        /// </summary>
          kS,
        /// <summary>
        /// kSm property
        /// </summary>
          [XmlEnum("kS/m")]
          kSm,
        /// <summary>
        /// kT property
        /// </summary>
          kT,
        /// <summary>
        /// kV property
        /// </summary>
          kV,
        /// <summary>
        /// kW property
        /// </summary>
          kW,
        /// <summary>
        /// kWh property
        /// </summary>
          [XmlEnum("kW.h")]
          kWh,
        /// <summary>
        /// kWhkgdegC property
        /// </summary>
          [XmlEnum("kW.h/(kg.degC)")]
          kWhkgdegC,
        /// <summary>
        /// kWhdm3 property
        /// </summary>
          [XmlEnum("kW.h/dm3")]
          kWhdm3,
        /// <summary>
        /// kWhkg property
        /// </summary>
          [XmlEnum("kW.h/kg")]
          kWhkg,
        /// <summary>
        /// kWhm3 property
        /// </summary>
          [XmlEnum("kW.h/m3")]
          kWhm3,
        /// <summary>
        /// kWm2K property
        /// </summary>
          [XmlEnum("kW/(m2.K)")]
          kWm2K,
        /// <summary>
        /// kWm3K property
        /// </summary>
          [XmlEnum("kW/(m3.K)")]
          kWm3K,
        /// <summary>
        /// kWcm2 property
        /// </summary>
          [XmlEnum("kW/cm2")]
          kWcm2,
        /// <summary>
        /// kWm2 property
        /// </summary>
          [XmlEnum("kW/m2")]
          kWm2,
        /// <summary>
        /// kWm3 property
        /// </summary>
          [XmlEnum("kW/m3")]
          kWm3,
        /// <summary>
        /// kWb property
        /// </summary>
          kWb,
        /// <summary>
        /// L property
        /// </summary>
          L,
        /// <summary>
        /// Lbarmin property
        /// </summary>
          [XmlEnum("L/(bar.min)")]
          Lbarmin,
        /// <summary>
        /// Lh property
        /// </summary>
          [XmlEnum("L/h")]
          Lh,
        /// <summary>
        /// Lkg property
        /// </summary>
          [XmlEnum("L/kg")]
          Lkg,
        /// <summary>
        /// Lkmol property
        /// </summary>
          [XmlEnum("L/kmol")]
          Lkmol,
        /// <summary>
        /// Lm property
        /// </summary>
          [XmlEnum("L/m")]
          Lm,
        /// <summary>
        /// Lm3 property
        /// </summary>
          [XmlEnum("L/m3")]
          Lm3,
        /// <summary>
        /// Lmin property
        /// </summary>
          [XmlEnum("L/min")]
          Lmin,
        /// <summary>
        /// Lmol property
        /// </summary>
          [XmlEnum("L/mol")]
          Lmol,
        /// <summary>
        /// Ls property
        /// </summary>
          [XmlEnum("L/s")]
          Ls,
        /// <summary>
        /// Ls2 property
        /// </summary>
          [XmlEnum("L/s2")]
          Ls2,
        /// <summary>
        /// Lt property
        /// </summary>
          [XmlEnum("L/t")]
          Lt,
        /// <summary>
        /// LtonUK property
        /// </summary>
          [XmlEnum("L/ton[UK]")]
          LtonUK,
        /// <summary>
        /// lbf property
        /// </summary>
          lbf,
        /// <summary>
        /// lbfft property
        /// </summary>
          [XmlEnum("lbf.ft")]
          lbfft,
        /// <summary>
        /// lbfftbbl property
        /// </summary>
          [XmlEnum("lbf.ft/bbl")]
          lbfftbbl,
        /// <summary>
        /// lbfftgalUS property
        /// </summary>
          [XmlEnum("lbf.ft/gal[US]")]
          lbfftgalUS,
        /// <summary>
        /// lbfftin property
        /// </summary>
          [XmlEnum("lbf.ft/in")]
          lbfftin,
        /// <summary>
        /// lbfftin2 property
        /// </summary>
          [XmlEnum("lbf.ft/in2")]
          lbfftin2,
        /// <summary>
        /// lbfftlbm property
        /// </summary>
          [XmlEnum("lbf.ft/lbm")]
          lbfftlbm,
        /// <summary>
        /// lbfftmin property
        /// </summary>
          [XmlEnum("lbf.ft/min")]
          lbfftmin,
        /// <summary>
        /// lbffts property
        /// </summary>
          [XmlEnum("lbf.ft/s")]
          lbffts,
        /// <summary>
        /// lbfin property
        /// </summary>
          [XmlEnum("lbf.in")]
          lbfin,
        /// <summary>
        /// lbfinin property
        /// </summary>
          [XmlEnum("lbf.in/in")]
          lbfinin,
        /// <summary>
        /// lbfin2 property
        /// </summary>
          [XmlEnum("lbf.in2")]
          lbfin2,
        /// <summary>
        /// lbfsft2 property
        /// </summary>
          [XmlEnum("lbf.s/ft2")]
          lbfsft2,
        /// <summary>
        /// lbfsin2 property
        /// </summary>
          [XmlEnum("lbf.s/in2")]
          lbfsin2,
        /// <summary>
        /// lbfft1 property
        /// </summary>
          [XmlEnum("lbf/ft")]
          lbfft1,
        /// <summary>
        /// lbfft2 property
        /// </summary>
          [XmlEnum("lbf/ft2")]
          lbfft2,
        /// <summary>
        /// lbfft3 property
        /// </summary>
          [XmlEnum("lbf/ft3")]
          lbfft3,
        /// <summary>
        /// lbfgalUS property
        /// </summary>
          [XmlEnum("lbf/gal[US]")]
          lbfgalUS,
        /// <summary>
        /// lbfin1 property
        /// </summary>
          [XmlEnum("lbf/in")]
          lbfin1,
        /// <summary>
        /// lbflbf property
        /// </summary>
          [XmlEnum("lbf/lbf")]
          lbflbf,
        /// <summary>
        /// lbm property
        /// </summary>
          lbm,
        /// <summary>
        /// lbmft property
        /// </summary>
          [XmlEnum("lbm.ft")]
          lbmft,
        /// <summary>
        /// lbmfts property
        /// </summary>
          [XmlEnum("lbm.ft/s")]
          lbmfts,
        /// <summary>
        /// lbmft2 property
        /// </summary>
          [XmlEnum("lbm.ft2")]
          lbmft2,
        /// <summary>
        /// lbmft2s2 property
        /// </summary>
          [XmlEnum("lbm.ft2/s2")]
          lbmft2s2,
        /// <summary>
        /// lbmfth property
        /// </summary>
          [XmlEnum("lbm/(ft.h)")]
          lbmfth,
        /// <summary>
        /// lbmfts1 property
        /// </summary>
          [XmlEnum("lbm/(ft.s)")]
          lbmfts1,
        /// <summary>
        /// lbmft2h property
        /// </summary>
          [XmlEnum("lbm/(ft2.h)")]
          lbmft2h,
        /// <summary>
        /// lbmft2s property
        /// </summary>
          [XmlEnum("lbm/(ft2.s)")]
          lbmft2s,
        /// <summary>
        /// lbmgalUKft property
        /// </summary>
          [XmlEnum("lbm/(gal[UK].ft)")]
          lbmgalUKft,
        /// <summary>
        /// lbmgalUSft property
        /// </summary>
          [XmlEnum("lbm/(gal[US].ft)")]
          lbmgalUSft,
        /// <summary>
        /// lbmhph property
        /// </summary>
          [XmlEnum("lbm/(hp.h)")]
          lbmhph,
        /// <summary>
        /// lbmbbl property
        /// </summary>
          [XmlEnum("lbm/bbl")]
          lbmbbl,
        /// <summary>
        /// lbmd property
        /// </summary>
          [XmlEnum("lbm/d")]
          lbmd,
        /// <summary>
        /// lbmft1 property
        /// </summary>
          [XmlEnum("lbm/ft")]
          lbmft1,
        /// <summary>
        /// lbmft21 property
        /// </summary>
          [XmlEnum("lbm/ft2")]
          lbmft21,
        /// <summary>
        /// lbmft3 property
        /// </summary>
          [XmlEnum("lbm/ft3")]
          lbmft3,
        /// <summary>
        /// lbmft4 property
        /// </summary>
          [XmlEnum("lbm/ft4")]
          lbmft4,
        /// <summary>
        /// lbmgalUK property
        /// </summary>
          [XmlEnum("lbm/gal[UK]")]
          lbmgalUK,
        /// <summary>
        /// lbmgalUS property
        /// </summary>
          [XmlEnum("lbm/gal[US]")]
          lbmgalUS,
        /// <summary>
        /// lbmh property
        /// </summary>
          [XmlEnum("lbm/h")]
          lbmh,
        /// <summary>
        /// lbmin3 property
        /// </summary>
          [XmlEnum("lbm/in3")]
          lbmin3,
        /// <summary>
        /// lbmlbmol property
        /// </summary>
          [XmlEnum("lbm/lbmol")]
          lbmlbmol,
        /// <summary>
        /// lbmmin property
        /// </summary>
          [XmlEnum("lbm/min")]
          lbmmin,
        /// <summary>
        /// lbms property
        /// </summary>
          [XmlEnum("lbm/s")]
          lbms,
        /// <summary>
        /// lbmol property
        /// </summary>
          lbmol,
        /// <summary>
        /// lbmolhft2 property
        /// </summary>
          [XmlEnum("lbmol/(h.ft2)")]
          lbmolhft2,
        /// <summary>
        /// lbmolsft2 property
        /// </summary>
          [XmlEnum("lbmol/(s.ft2)")]
          lbmolsft2,
        /// <summary>
        /// lbmolft3 property
        /// </summary>
          [XmlEnum("lbmol/ft3")]
          lbmolft3,
        /// <summary>
        /// lbmolgalUK property
        /// </summary>
          [XmlEnum("lbmol/gal[UK]")]
          lbmolgalUK,
        /// <summary>
        /// lbmolgalUS property
        /// </summary>
          [XmlEnum("lbmol/gal[US]")]
          lbmolgalUS,
        /// <summary>
        /// lbmolh property
        /// </summary>
          [XmlEnum("lbmol/h")]
          lbmolh,
        /// <summary>
        /// lbmols property
        /// </summary>
          [XmlEnum("lbmol/s")]
          lbmols,
        /// <summary>
        /// link property
        /// </summary>
          link,
        /// <summary>
        /// linkBnA property
        /// </summary>
          [XmlEnum("link[BnA]")]
          linkBnA,
        /// <summary>
        /// linkBnB property
        /// </summary>
          [XmlEnum("link[BnB]")]
          linkBnB,
        /// <summary>
        /// linkCla property
        /// </summary>
          [XmlEnum("link[Cla]")]
          linkCla,
        /// <summary>
        /// linkSe property
        /// </summary>
          [XmlEnum("link[Se]")]
          linkSe,
        /// <summary>
        /// linkSeT property
        /// </summary>
          [XmlEnum("link[SeT]")]
          linkSeT,
        /// <summary>
        /// linkUS property
        /// </summary>
          [XmlEnum("link[US]")]
          linkUS,
        /// <summary>
        /// lm property
        /// </summary>
          lm,
        /// <summary>
        /// lms property
        /// </summary>
          [XmlEnum("lm.s")]
          lms,
        /// <summary>
        /// lmm2 property
        /// </summary>
          [XmlEnum("lm/m2")]
          lmm2,
        /// <summary>
        /// lmW property
        /// </summary>
          [XmlEnum("lm/W")]
          lmW,
        /// <summary>
        /// lx property
        /// </summary>
          lx,
        /// <summary>
        /// lxs property
        /// </summary>
          [XmlEnum("lx.s")]
          lxs,
        /// <summary>
        /// m property
        /// </summary>
          m,
        /// <summary>
        /// mmK property
        /// </summary>
          [XmlEnum("m/(m.K)")]
          mmK,
        /// <summary>
        /// mcm property
        /// </summary>
          [XmlEnum("m/cm")]
          mcm,
        /// <summary>
        /// md property
        /// </summary>
          [XmlEnum("m/d")]
          md,
        /// <summary>
        /// mh property
        /// </summary>
          [XmlEnum("m/h")]
          mh,
        /// <summary>
        /// mK property
        /// </summary>
          [XmlEnum("m/K")]
          mK,
        /// <summary>
        /// mkg property
        /// </summary>
          [XmlEnum("m/kg")]
          mkg,
        /// <summary>
        /// mkm property
        /// </summary>
          [XmlEnum("m/km")]
          mkm,
        /// <summary>
        /// mkPa property
        /// </summary>
          [XmlEnum("m/kPa")]
          mkPa,
        /// <summary>
        /// mm property
        /// </summary>
          [XmlEnum("m/m")]
          mm,
        /// <summary>
        /// mm3 property
        /// </summary>
          [XmlEnum("m/m3")]
          mm3,
        /// <summary>
        /// mmin property
        /// </summary>
          [XmlEnum("m/min")]
          mmin,
        /// <summary>
        /// mms property
        /// </summary>
          [XmlEnum("m/ms")]
          mms,
        /// <summary>
        /// mPa property
        /// </summary>
          [XmlEnum("m/Pa")]
          mPa,
        /// <summary>
        /// ms property
        /// </summary>
          [XmlEnum("m/s")]
          ms,
        /// <summary>
        /// ms2 property
        /// </summary>
          [XmlEnum("m/s2")]
          ms2,
        /// <summary>
        /// mGer property
        /// </summary>
          [XmlEnum("m[Ger]")]
          mGer,
        /// <summary>
        /// m2 property
        /// </summary>
          m2,
        /// <summary>
        /// m2kPad property
        /// </summary>
          [XmlEnum("m2/(kPa.d)")]
          m2kPad,
        /// <summary>
        /// m2Pas property
        /// </summary>
          [XmlEnum("m2/(Pa.s)")]
          m2Pas,
        /// <summary>
        /// m2cm3 property
        /// </summary>
          [XmlEnum("m2/cm3")]
          m2cm3,
        /// <summary>
        /// m2d property
        /// </summary>
          [XmlEnum("m2/d")]
          m2d,
        /// <summary>
        /// m2g property
        /// </summary>
          [XmlEnum("m2/g")]
          m2g,
        /// <summary>
        /// m2h property
        /// </summary>
          [XmlEnum("m2/h")]
          m2h,
        /// <summary>
        /// m2kg property
        /// </summary>
          [XmlEnum("m2/kg")]
          m2kg,
        /// <summary>
        /// m2m2 property
        /// </summary>
          [XmlEnum("m2/m2")]
          m2m2,
        /// <summary>
        /// m2m3 property
        /// </summary>
          [XmlEnum("m2/m3")]
          m2m3,
        /// <summary>
        /// m2mol property
        /// </summary>
          [XmlEnum("m2/mol")]
          m2mol,
        /// <summary>
        /// m2s property
        /// </summary>
          [XmlEnum("m2/s")]
          m2s,
        /// <summary>
        /// m3 property
        /// </summary>
          m3,
        /// <summary>
        /// m3bard property
        /// </summary>
          [XmlEnum("m3/(bar.d)")]
          m3bard,
        /// <summary>
        /// m3barh property
        /// </summary>
          [XmlEnum("m3/(bar.h)")]
          m3barh,
        /// <summary>
        /// m3barmin property
        /// </summary>
          [XmlEnum("m3/(bar.min)")]
          m3barmin,
        /// <summary>
        /// m3dm property
        /// </summary>
          [XmlEnum("m3/(d.m)")]
          m3dm,
        /// <summary>
        /// m3hm property
        /// </summary>
          [XmlEnum("m3/(h.m)")]
          m3hm,
        /// <summary>
        /// m3ham property
        /// </summary>
          [XmlEnum("m3/(ha.m)")]
          m3ham,
        /// <summary>
        /// m3kPad property
        /// </summary>
          [XmlEnum("m3/(kPa.d)")]
          m3kPad,
        /// <summary>
        /// m3kPah property
        /// </summary>
          [XmlEnum("m3/(kPa.h)")]
          m3kPah,
        /// <summary>
        /// m3kWh property
        /// </summary>
          [XmlEnum("m3/(kW.h)")]
          m3kWh,
        /// <summary>
        /// m3m3K property
        /// </summary>
          [XmlEnum("m3/(m3.K)")]
          m3m3K,
        /// <summary>
        /// m3Pas property
        /// </summary>
          [XmlEnum("m3/(Pa.s)")]
          m3Pas,
        /// <summary>
        /// m3psid property
        /// </summary>
          [XmlEnum("m3/(psi.d)")]
          m3psid,
        /// <summary>
        /// m3sft property
        /// </summary>
          [XmlEnum("m3/(s.ft)")]
          m3sft,
        /// <summary>
        /// m3sm property
        /// </summary>
          [XmlEnum("m3/(s.m)")]
          m3sm,
        /// <summary>
        /// m3sm2 property
        /// </summary>
          [XmlEnum("m3/(s.m2)")]
          m3sm2,
        /// <summary>
        /// m3sm3 property
        /// </summary>
          [XmlEnum("m3/(s.m3)")]
          m3sm3,
        /// <summary>
        /// m3bbl property
        /// </summary>
          [XmlEnum("m3/bbl")]
          m3bbl,
        /// <summary>
        /// m3d property
        /// </summary>
          [XmlEnum("m3/d")]
          m3d,
        /// <summary>
        /// m3d2 property
        /// </summary>
          [XmlEnum("m3/d2")]
          m3d2,
        /// <summary>
        /// m3g property
        /// </summary>
          [XmlEnum("m3/g")]
          m3g,
        /// <summary>
        /// m3h property
        /// </summary>
          [XmlEnum("m3/h")]
          m3h,
        /// <summary>
        /// m3J property
        /// </summary>
          [XmlEnum("m3/J")]
          m3J,
        /// <summary>
        /// m3kg property
        /// </summary>
          [XmlEnum("m3/kg")]
          m3kg,
        /// <summary>
        /// m3km property
        /// </summary>
          [XmlEnum("m3/km")]
          m3km,
        /// <summary>
        /// m3kmol property
        /// </summary>
          [XmlEnum("m3/kmol")]
          m3kmol,
        /// <summary>
        /// m3kPa property
        /// </summary>
          [XmlEnum("m3/kPa")]
          m3kPa,
        /// <summary>
        /// m3m property
        /// </summary>
          [XmlEnum("m3/m")]
          m3m,
        /// <summary>
        /// m3m2 property
        /// </summary>
          [XmlEnum("m3/m2")]
          m3m2,
        /// <summary>
        /// m3m3 property
        /// </summary>
          [XmlEnum("m3/m3")]
          m3m3,
        /// <summary>
        /// m3min property
        /// </summary>
          [XmlEnum("m3/min")]
          m3min,
        /// <summary>
        /// m3mol property
        /// </summary>
          [XmlEnum("m3/mol")]
          m3mol,
        /// <summary>
        /// m3Pa property
        /// </summary>
          [XmlEnum("m3/Pa")]
          m3Pa,
        /// <summary>
        /// m3rad property
        /// </summary>
          [XmlEnum("m3/rad")]
          m3rad,
        /// <summary>
        /// m3rev property
        /// </summary>
          [XmlEnum("m3/rev")]
          m3rev,
        /// <summary>
        /// m3s property
        /// </summary>
          [XmlEnum("m3/s")]
          m3s,
        /// <summary>
        /// m3s2 property
        /// </summary>
          [XmlEnum("m3/s2")]
          m3s2,
        /// <summary>
        /// m3t property
        /// </summary>
          [XmlEnum("m3/t")]
          m3t,
        /// <summary>
        /// m3tonUK property
        /// </summary>
          [XmlEnum("m3/ton[UK]")]
          m3tonUK,
        /// <summary>
        /// m3tonUS property
        /// </summary>
          [XmlEnum("m3/ton[US]")]
          m3tonUS,
        /// <summary>
        /// m4 property
        /// </summary>
          m4,
        /// <summary>
        /// m4s property
        /// </summary>
          [XmlEnum("m4/s")]
          m4s,
        /// <summary>
        /// MA property
        /// </summary>
          MA,
        /// <summary>
        /// mA property
        /// </summary>
          mA,
        /// <summary>
        /// mAcm2 property
        /// </summary>
          [XmlEnum("mA/cm2")]
          mAcm2,
        /// <summary>
        /// mAft2 property
        /// </summary>
          [XmlEnum("mA/ft2")]
          mAft2,
        /// <summary>
        /// Mat property
        /// </summary>
          [XmlEnum("Ma[t]")]
          Mat,
        /// <summary>
        /// mbar property
        /// </summary>
          mbar,
        /// <summary>
        /// MBq property
        /// </summary>
          MBq,
        /// <summary>
        /// MC property
        /// </summary>
          MC,
        /// <summary>
        /// mC property
        /// </summary>
          mC,
        /// <summary>
        /// mCm2 property
        /// </summary>
          [XmlEnum("mC/m2")]
          mCm2,
        /// <summary>
        /// Mcalth property
        /// </summary>
          [XmlEnum("Mcal[th]")]
          Mcalth,
        /// <summary>
        /// mcalth property
        /// </summary>
          [XmlEnum("mcal[th]")]
          mcalth,
        /// <summary>
        /// mCi property
        /// </summary>
          mCi,
        /// <summary>
        /// mD property
        /// </summary>
          mD,
        /// <summary>
        /// mDft property
        /// </summary>
          [XmlEnum("mD.ft")]
          mDft,
        /// <summary>
        /// mDft2lbfs property
        /// </summary>
          [XmlEnum("mD.ft2/(lbf.s)")]
          mDft2lbfs,
        /// <summary>
        /// mDin2lbfs property
        /// </summary>
          [XmlEnum("mD.in2/(lbf.s)")]
          mDin2lbfs,
        /// <summary>
        /// mDm property
        /// </summary>
          [XmlEnum("mD.m")]
          mDm,
        /// <summary>
        /// mDPas property
        /// </summary>
          [XmlEnum("mD/(Pa.s)")]
          mDPas,
        /// <summary>
        /// mDcP property
        /// </summary>
          [XmlEnum("mD/cP")]
          mDcP,
        /// <summary>
        /// mEuc property
        /// </summary>
          mEuc,
        /// <summary>
        /// MEuc property
        /// </summary>
          MEuc,
        /// <summary>
        /// MeV property
        /// </summary>
          MeV,
        /// <summary>
        /// meV property
        /// </summary>
          meV,
        /// <summary>
        /// MF property
        /// </summary>
          MF,
        /// <summary>
        /// mF property
        /// </summary>
          mF,
        /// <summary>
        /// mg property
        /// </summary>
          mg,
        /// <summary>
        /// Mg property
        /// </summary>
          Mg,
        /// <summary>
        /// Mga property
        /// </summary>
          [XmlEnum("Mg/a")]
          Mga,
        /// <summary>
        /// Mgd property
        /// </summary>
          [XmlEnum("Mg/d")]
          Mgd,
        /// <summary>
        /// mgdm3 property
        /// </summary>
          [XmlEnum("mg/dm3")]
          mgdm3,
        /// <summary>
        /// mgg property
        /// </summary>
          [XmlEnum("mg/g")]
          mgg,
        /// <summary>
        /// mggalUS property
        /// </summary>
          [XmlEnum("mg/gal[US]")]
          mggalUS,
        /// <summary>
        /// Mgh property
        /// </summary>
          [XmlEnum("Mg/h")]
          Mgh,
        /// <summary>
        /// Mgin property
        /// </summary>
          [XmlEnum("Mg/in")]
          Mgin,
        /// <summary>
        /// mgJ property
        /// </summary>
          [XmlEnum("mg/J")]
          mgJ,
        /// <summary>
        /// mgkg property
        /// </summary>
          [XmlEnum("mg/kg")]
          mgkg,
        /// <summary>
        /// mgL property
        /// </summary>
          [XmlEnum("mg/L")]
          mgL,
        /// <summary>
        /// Mgm2 property
        /// </summary>
          [XmlEnum("Mg/m2")]
          Mgm2,
        /// <summary>
        /// mgm3 property
        /// </summary>
          [XmlEnum("mg/m3")]
          mgm3,
        /// <summary>
        /// Mgm3 property
        /// </summary>
          [XmlEnum("Mg/m3")]
          Mgm3,
        /// <summary>
        /// Mgmin property
        /// </summary>
          [XmlEnum("Mg/min")]
          Mgmin,
        /// <summary>
        /// mGal property
        /// </summary>
          mGal,
        /// <summary>
        /// mgauss property
        /// </summary>
          mgauss,
        /// <summary>
        /// Mgauss property
        /// </summary>
          Mgauss,
        /// <summary>
        /// Mgf property
        /// </summary>
          Mgf,
        /// <summary>
        /// mgn property
        /// </summary>
          mgn,
        /// <summary>
        /// MGy property
        /// </summary>
          MGy,
        /// <summary>
        /// mGy property
        /// </summary>
          mGy,
        /// <summary>
        /// MH property
        /// </summary>
          MH,
        /// <summary>
        /// mH property
        /// </summary>
          mH,
        /// <summary>
        /// MHz property
        /// </summary>
          MHz,
        /// <summary>
        /// mHz property
        /// </summary>
          mHz,
        /// <summary>
        /// mi property
        /// </summary>
          mi,
        /// <summary>
        /// migalUK property
        /// </summary>
          [XmlEnum("mi/gal[UK]")]
          migalUK,
        /// <summary>
        /// migalUS property
        /// </summary>
          [XmlEnum("mi/gal[US]")]
          migalUS,
        /// <summary>
        /// mih property
        /// </summary>
          [XmlEnum("mi/h")]
          mih,
        /// <summary>
        /// miin property
        /// </summary>
          [XmlEnum("mi/in")]
          miin,
        /// <summary>
        /// minaut property
        /// </summary>
          [XmlEnum("mi[naut]")]
          minaut,
        /// <summary>
        /// minautUK property
        /// </summary>
          [XmlEnum("mi[nautUK]")]
          minautUK,
        /// <summary>
        /// miUS property
        /// </summary>
          [XmlEnum("mi[US]")]
          miUS,
        /// <summary>
        /// miUS2 property
        /// </summary>
          [XmlEnum("mi[US]2")]
          miUS2,
        /// <summary>
        /// mi2 property
        /// </summary>
          mi2,
        /// <summary>
        /// mi3 property
        /// </summary>
          mi3,
        /// <summary>
        /// Mibyte property
        /// </summary>
          Mibyte,
        /// <summary>
        /// mil property
        /// </summary>
          mil,
        /// <summary>
        /// mila property
        /// </summary>
          [XmlEnum("mil/a")]
          mila,
        /// <summary>
        /// mila1 property
        /// </summary>
          [XmlEnum("mila")]
          mila1,
        /// <summary>
        /// min property
        /// </summary>
          min,
        /// <summary>
        /// minft property
        /// </summary>
          [XmlEnum("min/ft")]
          minft,
        /// <summary>
        /// minm property
        /// </summary>
          [XmlEnum("min/m")]
          minm,
        /// <summary>
        /// mina property
        /// </summary>
          mina,
        /// <summary>
        /// MJ property
        /// </summary>
          MJ,
        /// <summary>
        /// mJ property
        /// </summary>
          mJ,
        /// <summary>
        /// MJa property
        /// </summary>
          [XmlEnum("MJ/a")]
          MJa,
        /// <summary>
        /// mJcm2 property
        /// </summary>
          [XmlEnum("mJ/cm2")]
          mJcm2,
        /// <summary>
        /// MJkg property
        /// </summary>
          [XmlEnum("MJ/kg")]
          MJkg,
        /// <summary>
        /// MJkmol property
        /// </summary>
          [XmlEnum("MJ/kmol")]
          MJkmol,
        /// <summary>
        /// MJm property
        /// </summary>
          [XmlEnum("MJ/m")]
          MJm,
        /// <summary>
        /// mJm2 property
        /// </summary>
          [XmlEnum("mJ/m2")]
          mJm2,
        /// <summary>
        /// MJm3 property
        /// </summary>
          [XmlEnum("MJ/m3")]
          MJm3,
        /// <summary>
        /// mL property
        /// </summary>
          mL,
        /// <summary>
        /// mLgalUK property
        /// </summary>
          [XmlEnum("mL/gal[UK]")]
          mLgalUK,
        /// <summary>
        /// mLgalUS property
        /// </summary>
          [XmlEnum("mL/gal[US]")]
          mLgalUS,
        /// <summary>
        /// mLmL property
        /// </summary>
          [XmlEnum("mL/mL")]
          mLmL,
        /// <summary>
        /// mm1 property
        /// </summary>
          [XmlEnum("mm")]
          mm1,
        /// <summary>
        /// Mm property
        /// </summary>
          Mm,
        /// <summary>
        /// mmmmK property
        /// </summary>
          [XmlEnum("mm/(mm.K)")]
          mmmmK,
        /// <summary>
        /// mma property
        /// </summary>
          [XmlEnum("mm/a")]
          mma,
        /// <summary>
        /// mms1 property
        /// </summary>
          [XmlEnum("mm/s")]
          mms1,
        /// <summary>
        /// mm2 property
        /// </summary>
          mm2,
        /// <summary>
        /// mm2mm2 property
        /// </summary>
          [XmlEnum("mm2/mm2")]
          mm2mm2,
        /// <summary>
        /// mm2s property
        /// </summary>
          [XmlEnum("mm2/s")]
          mm2s,
        /// <summary>
        /// mm31 property
        /// </summary>
          [XmlEnum("mm3")]
          mm31,
        /// <summary>
        /// mm3J property
        /// </summary>
          [XmlEnum("mm3/J")]
          mm3J,
        /// <summary>
        /// mmHg0degC property
        /// </summary>
          [XmlEnum("mmHg[0degC]")]
          mmHg0degC,
        /// <summary>
        /// mmol property
        /// </summary>
          mmol,
        /// <summary>
        /// MN property
        /// </summary>
          MN,
        /// <summary>
        /// mN property
        /// </summary>
          mN,
        /// <summary>
        /// mNm2 property
        /// </summary>
          [XmlEnum("mN.m2")]
          mNm2,
        /// <summary>
        /// mNkm property
        /// </summary>
          [XmlEnum("mN/km")]
          mNkm,
        /// <summary>
        /// mNm property
        /// </summary>
          [XmlEnum("mN/m")]
          mNm,
        /// <summary>
        /// Mohm property
        /// </summary>
          Mohm,
        /// <summary>
        /// mohm property
        /// </summary>
          mohm,
        /// <summary>
        /// mol property
        /// </summary>
          mol,
        /// <summary>
        /// molm2mols property
        /// </summary>
          [XmlEnum("mol.m2/(mol.s)")]
          molm2mols,
        /// <summary>
        /// molsm2 property
        /// </summary>
          [XmlEnum("mol/(s.m2)")]
          molsm2,
        /// <summary>
        /// molm2 property
        /// </summary>
          [XmlEnum("mol/m2")]
          molm2,
        /// <summary>
        /// molm3 property
        /// </summary>
          [XmlEnum("mol/m3")]
          molm3,
        /// <summary>
        /// molmol property
        /// </summary>
          [XmlEnum("mol/mol")]
          molmol,
        /// <summary>
        /// mols property
        /// </summary>
          [XmlEnum("mol/s")]
          mols,
        /// <summary>
        /// MP property
        /// </summary>
          MP,
        /// <summary>
        /// mP property
        /// </summary>
          mP,
        /// <summary>
        /// MPa property
        /// </summary>
          MPa,
        /// <summary>
        /// mPa1 property
        /// </summary>
          [XmlEnum("mPa")]
          mPa1,
        /// <summary>
        /// mPas property
        /// </summary>
          [XmlEnum("mPa.s")]
          mPas,
        /// <summary>
        /// MPasm property
        /// </summary>
          [XmlEnum("MPa.s/m")]
          MPasm,
        /// <summary>
        /// MPah property
        /// </summary>
          [XmlEnum("MPa/h")]
          MPah,
        /// <summary>
        /// MPam property
        /// </summary>
          [XmlEnum("MPa/m")]
          MPam,
        /// <summary>
        /// Mpsi property
        /// </summary>
          Mpsi,
        /// <summary>
        /// mrad property
        /// </summary>
          mrad,
        /// <summary>
        /// Mrad property
        /// </summary>
          Mrad,
        /// <summary>
        /// Mrd property
        /// </summary>
          Mrd,
        /// <summary>
        /// mrd property
        /// </summary>
          mrd,
        /// <summary>
        /// mrem property
        /// </summary>
          mrem,
        /// <summary>
        /// mremh property
        /// </summary>
          [XmlEnum("mrem/h")]
          mremh,
        /// <summary>
        /// ms1 property
        /// </summary>
          [XmlEnum("ms")]
          ms1,
        /// <summary>
        /// MS property
        /// </summary>
          MS,
        /// <summary>
        /// mS property
        /// </summary>
          mS,
        /// <summary>
        /// mscm property
        /// </summary>
          [XmlEnum("ms/cm")]
          mscm,
        /// <summary>
        /// mScm property
        /// </summary>
          [XmlEnum("mS/cm")]
          mScm,
        /// <summary>
        /// msft property
        /// </summary>
          [XmlEnum("ms/ft")]
          msft,
        /// <summary>
        /// msin property
        /// </summary>
          [XmlEnum("ms/in")]
          msin,
        /// <summary>
        /// mSm property
        /// </summary>
          [XmlEnum("mS/m")]
          mSm,
        /// <summary>
        /// msm property
        /// </summary>
          [XmlEnum("ms/m")]
          msm,
        /// <summary>
        /// mss property
        /// </summary>
          [XmlEnum("ms/s")]
          mss,
        /// <summary>
        /// mSv property
        /// </summary>
          mSv,
        /// <summary>
        /// mSvh property
        /// </summary>
          [XmlEnum("mSv/h")]
          mSvh,
        /// <summary>
        /// mT property
        /// </summary>
          mT,
        /// <summary>
        /// mTdm property
        /// </summary>
          [XmlEnum("mT/dm")]
          mTdm,
        /// <summary>
        /// mV property
        /// </summary>
          mV,
        /// <summary>
        /// MV property
        /// </summary>
          MV,
        /// <summary>
        /// mVft property
        /// </summary>
          [XmlEnum("mV/ft")]
          mVft,
        /// <summary>
        /// mVm property
        /// </summary>
          [XmlEnum("mV/m")]
          mVm,
        /// <summary>
        /// mW property
        /// </summary>
          mW,
        /// <summary>
        /// MW property
        /// </summary>
          MW,
        /// <summary>
        /// MWh property
        /// </summary>
          [XmlEnum("MW.h")]
          MWh,
        /// <summary>
        /// MWhkg property
        /// </summary>
          [XmlEnum("MW.h/kg")]
          MWhkg,
        /// <summary>
        /// MWhm3 property
        /// </summary>
          [XmlEnum("MW.h/m3")]
          MWhm3,
        /// <summary>
        /// mWm2 property
        /// </summary>
          [XmlEnum("mW/m2")]
          mWm2,
        /// <summary>
        /// mWb property
        /// </summary>
          mWb,
        /// <summary>
        /// MWb property
        /// </summary>
          MWb,
        /// <summary>
        /// N property
        /// </summary>
          N,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N.m")]
          Nm,
        /// <summary>
        /// Nmm property
        /// </summary>
          [XmlEnum("N.m/m")]
          Nmm,
        /// <summary>
        /// Nm2 property
        /// </summary>
          [XmlEnum("N.m2")]
          Nm2,
        /// <summary>
        /// Nsm2 property
        /// </summary>
          [XmlEnum("N.s/m2")]
          Nsm2,
        /// <summary>
        /// Nm1 property
        /// </summary>
          [XmlEnum("N/m")]
          Nm1,
        /// <summary>
        /// Nm21 property
        /// </summary>
          [XmlEnum("N/m2")]
          Nm21,
        /// <summary>
        /// Nm3 property
        /// </summary>
          [XmlEnum("N/m3")]
          Nm3,
        /// <summary>
        /// Nmm2 property
        /// </summary>
          [XmlEnum("N/mm2")]
          Nmm2,
        /// <summary>
        /// NN property
        /// </summary>
          [XmlEnum("N/N")]
          NN,
        /// <summary>
        /// nA property
        /// </summary>
          nA,
        /// <summary>
        /// na property
        /// </summary>
          na,
        /// <summary>
        /// nAPI property
        /// </summary>
          nAPI,
        /// <summary>
        /// nC property
        /// </summary>
          nC,
        /// <summary>
        /// ncalth property
        /// </summary>
          [XmlEnum("ncal[th]")]
          ncalth,
        /// <summary>
        /// nCi property
        /// </summary>
          nCi,
        /// <summary>
        /// nEuc property
        /// </summary>
          nEuc,
        /// <summary>
        /// neV property
        /// </summary>
          neV,
        /// <summary>
        /// nF property
        /// </summary>
          nF,
        /// <summary>
        /// ng property
        /// </summary>
          ng,
        /// <summary>
        /// ngg property
        /// </summary>
          [XmlEnum("ng/g")]
          ngg,
        /// <summary>
        /// ngmg property
        /// </summary>
          [XmlEnum("ng/mg")]
          ngmg,
        /// <summary>
        /// ngauss property
        /// </summary>
          ngauss,
        /// <summary>
        /// nGy property
        /// </summary>
          nGy,
        /// <summary>
        /// nH property
        /// </summary>
          nH,
        /// <summary>
        /// nHz property
        /// </summary>
          nHz,
        /// <summary>
        /// nJ property
        /// </summary>
          nJ,
        /// <summary>
        /// nm property
        /// </summary>
          nm,
        /// <summary>
        /// nms property
        /// </summary>
          [XmlEnum("nm/s")]
          nms,
        /// <summary>
        /// nN property
        /// </summary>
          nN,
        /// <summary>
        /// nohm property
        /// </summary>
          nohm,
        /// <summary>
        /// nohmmil2ft property
        /// </summary>
          [XmlEnum("nohm.mil2/ft")]
          nohmmil2ft,
        /// <summary>
        /// nohmmm2m property
        /// </summary>
          [XmlEnum("nohm.mm2/m")]
          nohmmm2m,
        /// <summary>
        /// nP property
        /// </summary>
          nP,
        /// <summary>
        /// nPa property
        /// </summary>
          nPa,
        /// <summary>
        /// nrd property
        /// </summary>
          nrd,
        /// <summary>
        /// nS property
        /// </summary>
          nS,
        /// <summary>
        /// ns property
        /// </summary>
          ns,
        /// <summary>
        /// nsft property
        /// </summary>
          [XmlEnum("ns/ft")]
          nsft,
        /// <summary>
        /// nsm property
        /// </summary>
          [XmlEnum("ns/m")]
          nsm,
        /// <summary>
        /// nT property
        /// </summary>
          nT,
        /// <summary>
        /// nV property
        /// </summary>
          nV,
        /// <summary>
        /// nW property
        /// </summary>
          nW,
        /// <summary>
        /// nWb property
        /// </summary>
          nWb,
        /// <summary>
        /// O property
        /// </summary>
          O,
        /// <summary>
        /// Oe property
        /// </summary>
          Oe,
        /// <summary>
        /// ohm property
        /// </summary>
          ohm,
        /// <summary>
        /// ohmcm property
        /// </summary>
          [XmlEnum("ohm.cm")]
          ohmcm,
        /// <summary>
        /// ohmm property
        /// </summary>
          [XmlEnum("ohm.m")]
          ohmm,
        /// <summary>
        /// ohmm2m property
        /// </summary>
          [XmlEnum("ohm.m2/m")]
          ohmm2m,
        /// <summary>
        /// ohmm1 property
        /// </summary>
          [XmlEnum("ohm/m")]
          ohmm1,
        /// <summary>
        /// ozf property
        /// </summary>
          ozf,
        /// <summary>
        /// ozm property
        /// </summary>
          ozm,
        /// <summary>
        /// ozmtroy property
        /// </summary>
          [XmlEnum("ozm[troy]")]
          ozmtroy,
        /// <summary>
        /// P property
        /// </summary>
          P,
        /// <summary>
        /// pA property
        /// </summary>
          pA,
        /// <summary>
        /// Pa property
        /// </summary>
          Pa,
        /// <summary>
        /// Pas property
        /// </summary>
          [XmlEnum("Pa.s")]
          Pas,
        /// <summary>
        /// Pasm3kg property
        /// </summary>
          [XmlEnum("Pa.s.m3/kg")]
          Pasm3kg,
        /// <summary>
        /// Pasm3 property
        /// </summary>
          [XmlEnum("Pa.s/m3")]
          Pasm3,
        /// <summary>
        /// Pas2m3 property
        /// </summary>
          [XmlEnum("Pa.s2/m3")]
          Pas2m3,
        /// <summary>
        /// Pah property
        /// </summary>
          [XmlEnum("Pa/h")]
          Pah,
        /// <summary>
        /// Pam property
        /// </summary>
          [XmlEnum("Pa/m")]
          Pam,
        /// <summary>
        /// Pam3 property
        /// </summary>
          [XmlEnum("Pa/m3")]
          Pam3,
        /// <summary>
        /// Pas1 property
        /// </summary>
          [XmlEnum("Pa/s")]
          Pas1,
        /// <summary>
        /// Pa2 property
        /// </summary>
          Pa2,
        /// <summary>
        /// Pa2Pas property
        /// </summary>
          [XmlEnum("Pa2/(Pa.s)")]
          Pa2Pas,
        /// <summary>
        /// pC property
        /// </summary>
          pC,
        /// <summary>
        /// pcalth property
        /// </summary>
          [XmlEnum("pcal[th]")]
          pcalth,
        /// <summary>
        /// pCi property
        /// </summary>
          pCi,
        /// <summary>
        /// pCig property
        /// </summary>
          [XmlEnum("pCi/g")]
          pCig,
        /// <summary>
        /// pdl property
        /// </summary>
          pdl,
        /// <summary>
        /// pdlcm2 property
        /// </summary>
          [XmlEnum("pdl.cm2")]
          pdlcm2,
        /// <summary>
        /// pdlft property
        /// </summary>
          [XmlEnum("pdl.ft")]
          pdlft,
        /// <summary>
        /// pdlcm property
        /// </summary>
          [XmlEnum("pdl/cm")]
          pdlcm,
        /// <summary>
        /// pEuc property
        /// </summary>
          pEuc,
        /// <summary>
        /// peV property
        /// </summary>
          peV,
        /// <summary>
        /// pF property
        /// </summary>
          pF,
        /// <summary>
        /// pg property
        /// </summary>
          pg,
        /// <summary>
        /// pgauss property
        /// </summary>
          pgauss,
        /// <summary>
        /// pGy property
        /// </summary>
          pGy,
        /// <summary>
        /// pHz property
        /// </summary>
          pHz,
        /// <summary>
        /// pJ property
        /// </summary>
          pJ,
        /// <summary>
        /// pm property
        /// </summary>
          pm,
        /// <summary>
        /// pN property
        /// </summary>
          pN,
        /// <summary>
        /// pohm property
        /// </summary>
          pohm,
        /// <summary>
        /// pP property
        /// </summary>
          pP,
        /// <summary>
        /// pPa property
        /// </summary>
          pPa,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// ppmmass property
        /// </summary>
          [XmlEnum("ppm[mass]")]
          ppmmass,
        /// <summary>
        /// ppmvol property
        /// </summary>
          [XmlEnum("ppm[vol]")]
          ppmvol,
        /// <summary>
        /// ppmvoldegC property
        /// </summary>
          [XmlEnum("ppm[vol]/degC")]
          ppmvoldegC,
        /// <summary>
        /// ppmvoldegF property
        /// </summary>
          [XmlEnum("ppm[vol]/degF")]
          ppmvoldegF,
        /// <summary>
        /// prd property
        /// </summary>
          prd,
        /// <summary>
        /// pS property
        /// </summary>
          pS,
        /// <summary>
        /// ps property
        /// </summary>
          ps,
        /// <summary>
        /// psi property
        /// </summary>
          psi,
        /// <summary>
        /// psidbbl property
        /// </summary>
          [XmlEnum("psi.d/bbl")]
          psidbbl,
        /// <summary>
        /// psis property
        /// </summary>
          [XmlEnum("psi.s")]
          psis,
        /// <summary>
        /// psift property
        /// </summary>
          [XmlEnum("psi/ft")]
          psift,
        /// <summary>
        /// psih property
        /// </summary>
          [XmlEnum("psi/h")]
          psih,
        /// <summary>
        /// psim property
        /// </summary>
          [XmlEnum("psi/m")]
          psim,
        /// <summary>
        /// psimin property
        /// </summary>
          [XmlEnum("psi/min")]
          psimin,
        /// <summary>
        /// psi2 property
        /// </summary>
          psi2,
        /// <summary>
        /// psi2dcPft3 property
        /// </summary>
          [XmlEnum("psi2.d/(cP.ft3)")]
          psi2dcPft3,
        /// <summary>
        /// psi2cP property
        /// </summary>
          [XmlEnum("psi2/cP")]
          psi2cP,
        /// <summary>
        /// pT property
        /// </summary>
          pT,
        /// <summary>
        /// ptUK property
        /// </summary>
          [XmlEnum("pt[UK]")]
          ptUK,
        /// <summary>
        /// ptUKhph property
        /// </summary>
          [XmlEnum("pt[UK]/(hp.h)")]
          ptUKhph,
        /// <summary>
        /// ptUS property
        /// </summary>
          [XmlEnum("pt[US]")]
          ptUS,
        /// <summary>
        /// pV property
        /// </summary>
          pV,
        /// <summary>
        /// pW property
        /// </summary>
          pW,
        /// <summary>
        /// pWb property
        /// </summary>
          pWb,
        /// <summary>
        /// qtUK property
        /// </summary>
          [XmlEnum("qt[UK]")]
          qtUK,
        /// <summary>
        /// qtUS property
        /// </summary>
          [XmlEnum("qt[US]")]
          qtUS,
        /// <summary>
        /// quad property
        /// </summary>
          quad,
        /// <summary>
        /// quada property
        /// </summary>
          [XmlEnum("quad/a")]
          quada,
        /// <summary>
        /// rad property
        /// </summary>
          rad,
        /// <summary>
        /// radft property
        /// </summary>
          [XmlEnum("rad/ft")]
          radft,
        /// <summary>
        /// radft3 property
        /// </summary>
          [XmlEnum("rad/ft3")]
          radft3,
        /// <summary>
        /// radm property
        /// </summary>
          [XmlEnum("rad/m")]
          radm,
        /// <summary>
        /// radm3 property
        /// </summary>
          [XmlEnum("rad/m3")]
          radm3,
        /// <summary>
        /// rads property
        /// </summary>
          [XmlEnum("rad/s")]
          rads,
        /// <summary>
        /// rads2 property
        /// </summary>
          [XmlEnum("rad/s2")]
          rads2,
        /// <summary>
        /// rd property
        /// </summary>
          rd,
        /// <summary>
        /// rem property
        /// </summary>
          rem,
        /// <summary>
        /// remh property
        /// </summary>
          [XmlEnum("rem/h")]
          remh,
        /// <summary>
        /// rev property
        /// </summary>
          rev,
        /// <summary>
        /// revft property
        /// </summary>
          [XmlEnum("rev/ft")]
          revft,
        /// <summary>
        /// revm property
        /// </summary>
          [XmlEnum("rev/m")]
          revm,
        /// <summary>
        /// revs property
        /// </summary>
          [XmlEnum("rev/s")]
          revs,
        /// <summary>
        /// rodUS property
        /// </summary>
          [XmlEnum("rod[US]")]
          rodUS,
        /// <summary>
        /// rpm property
        /// </summary>
          rpm,
        /// <summary>
        /// rpms property
        /// </summary>
          [XmlEnum("rpm/s")]
          rpms,
        /// <summary>
        /// S property
        /// </summary>
          S,
        /// <summary>
        /// s property
        /// </summary>
          s,
        /// <summary>
        /// scm property
        /// </summary>
          [XmlEnum("s/cm")]
          scm,
        /// <summary>
        /// sft property
        /// </summary>
          [XmlEnum("s/ft")]
          sft,
        /// <summary>
        /// sft3 property
        /// </summary>
          [XmlEnum("s/ft3")]
          sft3,
        /// <summary>
        /// sin property
        /// </summary>
          [XmlEnum("s/in")]
          sin,
        /// <summary>
        /// skg property
        /// </summary>
          [XmlEnum("s/kg")]
          skg,
        /// <summary>
        /// sL property
        /// </summary>
          [XmlEnum("s/L")]
          sL,
        /// <summary>
        /// Sm property
        /// </summary>
          [XmlEnum("S/m")]
          Sm,
        /// <summary>
        /// sm property
        /// </summary>
          [XmlEnum("s/m")]
          sm,
        /// <summary>
        /// sm3 property
        /// </summary>
          [XmlEnum("s/m3")]
          sm3,
        /// <summary>
        /// sqtUK property
        /// </summary>
          [XmlEnum("s/qt[UK]")]
          sqtUK,
        /// <summary>
        /// sqtUS property
        /// </summary>
          [XmlEnum("s/qt[US]")]
          sqtUS,
        /// <summary>
        /// ss property
        /// </summary>
          [XmlEnum("s/s")]
          ss,
        /// <summary>
        /// sack94lbm property
        /// </summary>
          [XmlEnum("sack[94lbm]")]
          sack94lbm,
        /// <summary>
        /// seca property
        /// </summary>
          seca,
        /// <summary>
        /// section property
        /// </summary>
          section,
        /// <summary>
        /// sr property
        /// </summary>
          sr,
        /// <summary>
        /// St property
        /// </summary>
          St,
        /// <summary>
        /// Sv property
        /// </summary>
          Sv,
        /// <summary>
        /// Svh property
        /// </summary>
          [XmlEnum("Sv/h")]
          Svh,
        /// <summary>
        /// Svs property
        /// </summary>
          [XmlEnum("Sv/s")]
          Svs,
        /// <summary>
        /// t property
        /// </summary>
          t,
        /// <summary>
        /// T property
        /// </summary>
          T,
        /// <summary>
        /// ta property
        /// </summary>
          [XmlEnum("t/a")]
          ta,
        /// <summary>
        /// td property
        /// </summary>
          [XmlEnum("t/d")]
          td,
        /// <summary>
        /// th property
        /// </summary>
          [XmlEnum("t/h")]
          th,
        /// <summary>
        /// Tm property
        /// </summary>
          [XmlEnum("T/m")]
          Tm,
        /// <summary>
        /// tm3 property
        /// </summary>
          [XmlEnum("t/m3")]
          tm3,
        /// <summary>
        /// tmin property
        /// </summary>
          [XmlEnum("t/min")]
          tmin,
        /// <summary>
        /// TA property
        /// </summary>
          TA,
        /// <summary>
        /// Tat property
        /// </summary>
          [XmlEnum("Ta[t]")]
          Tat,
        /// <summary>
        /// TBq property
        /// </summary>
          TBq,
        /// <summary>
        /// TC property
        /// </summary>
          TC,
        /// <summary>
        /// Tcalth property
        /// </summary>
          [XmlEnum("Tcal[th]")]
          Tcalth,
        /// <summary>
        /// TDAPI property
        /// </summary>
          [XmlEnum("TD[API]")]
          TDAPI,
        /// <summary>
        /// TDAPIm property
        /// </summary>
          [XmlEnum("TD[API].m")]
          TDAPIm,
        /// <summary>
        /// TDAPIPas property
        /// </summary>
          [XmlEnum("TD[API]/(Pa.s)")]
          TDAPIPas,
        /// <summary>
        /// TEuc property
        /// </summary>
          TEuc,
        /// <summary>
        /// TeV property
        /// </summary>
          TeV,
        /// <summary>
        /// TF property
        /// </summary>
          TF,
        /// <summary>
        /// Tg property
        /// </summary>
          Tg,
        /// <summary>
        /// Tgauss property
        /// </summary>
          Tgauss,
        /// <summary>
        /// TGy property
        /// </summary>
          TGy,
        /// <summary>
        /// TH property
        /// </summary>
          TH,
        /// <summary>
        /// thermEC property
        /// </summary>
          [XmlEnum("therm[EC]")]
          thermEC,
        /// <summary>
        /// thermUK property
        /// </summary>
          [XmlEnum("therm[UK]")]
          thermUK,
        /// <summary>
        /// thermUS property
        /// </summary>
          [XmlEnum("therm[US]")]
          thermUS,
        /// <summary>
        /// THz property
        /// </summary>
          THz,
        /// <summary>
        /// TJ property
        /// </summary>
          TJ,
        /// <summary>
        /// TJa property
        /// </summary>
          [XmlEnum("TJ/a")]
          TJa,
        /// <summary>
        /// Tm1 property
        /// </summary>
          [XmlEnum("Tm")]
          Tm1,
        /// <summary>
        /// TN property
        /// </summary>
          TN,
        /// <summary>
        /// Tohm property
        /// </summary>
          Tohm,
        /// <summary>
        /// tonUK property
        /// </summary>
          [XmlEnum("ton[UK]")]
          tonUK,
        /// <summary>
        /// tonUKa property
        /// </summary>
          [XmlEnum("ton[UK]/a")]
          tonUKa,
        /// <summary>
        /// tonUKd property
        /// </summary>
          [XmlEnum("ton[UK]/d")]
          tonUKd,
        /// <summary>
        /// tonUKh property
        /// </summary>
          [XmlEnum("ton[UK]/h")]
          tonUKh,
        /// <summary>
        /// tonUKmin property
        /// </summary>
          [XmlEnum("ton[UK]/min")]
          tonUKmin,
        /// <summary>
        /// tonUS property
        /// </summary>
          [XmlEnum("ton[US]")]
          tonUS,
        /// <summary>
        /// tonUSa property
        /// </summary>
          [XmlEnum("ton[US]/a")]
          tonUSa,
        /// <summary>
        /// tonUSd property
        /// </summary>
          [XmlEnum("ton[US]/d")]
          tonUSd,
        /// <summary>
        /// tonUSft2 property
        /// </summary>
          [XmlEnum("ton[US]/ft2")]
          tonUSft2,
        /// <summary>
        /// tonUSh property
        /// </summary>
          [XmlEnum("ton[US]/h")]
          tonUSh,
        /// <summary>
        /// tonUSmin property
        /// </summary>
          [XmlEnum("ton[US]/min")]
          tonUSmin,
        /// <summary>
        /// tonfUK property
        /// </summary>
          [XmlEnum("tonf[UK]")]
          tonfUK,
        /// <summary>
        /// tonfUKft2 property
        /// </summary>
          [XmlEnum("tonf[UK].ft2")]
          tonfUKft2,
        /// <summary>
        /// tonfUKft property
        /// </summary>
          [XmlEnum("tonf[UK]/ft")]
          tonfUKft,
        /// <summary>
        /// tonfUKft21 property
        /// </summary>
          [XmlEnum("tonf[UK]/ft2")]
          tonfUKft21,
        /// <summary>
        /// tonfUS property
        /// </summary>
          [XmlEnum("tonf[US]")]
          tonfUS,
        /// <summary>
        /// tonfUSft property
        /// </summary>
          [XmlEnum("tonf[US].ft")]
          tonfUSft,
        /// <summary>
        /// tonfUSft2 property
        /// </summary>
          [XmlEnum("tonf[US].ft2")]
          tonfUSft2,
        /// <summary>
        /// tonfUSmi property
        /// </summary>
          [XmlEnum("tonf[US].mi")]
          tonfUSmi,
        /// <summary>
        /// tonfUSmibbl property
        /// </summary>
          [XmlEnum("tonf[US].mi/bbl")]
          tonfUSmibbl,
        /// <summary>
        /// tonfUSmift property
        /// </summary>
          [XmlEnum("tonf[US].mi/ft")]
          tonfUSmift,
        /// <summary>
        /// tonfUSft1 property
        /// </summary>
          [XmlEnum("tonf[US]/ft")]
          tonfUSft1,
        /// <summary>
        /// tonfUSft21 property
        /// </summary>
          [XmlEnum("tonf[US]/ft2")]
          tonfUSft21,
        /// <summary>
        /// tonfUSin2 property
        /// </summary>
          [XmlEnum("tonf[US]/in2")]
          tonfUSin2,
        /// <summary>
        /// tonRefrig property
        /// </summary>
          tonRefrig,
        /// <summary>
        /// torr property
        /// </summary>
          torr,
        /// <summary>
        /// TP property
        /// </summary>
          TP,
        /// <summary>
        /// TPa property
        /// </summary>
          TPa,
        /// <summary>
        /// Trd property
        /// </summary>
          Trd,
        /// <summary>
        /// TS property
        /// </summary>
          TS,
        /// <summary>
        /// TT property
        /// </summary>
          TT,
        /// <summary>
        /// TV property
        /// </summary>
          TV,
        /// <summary>
        /// TW property
        /// </summary>
          TW,
        /// <summary>
        /// TWh property
        /// </summary>
          [XmlEnum("TW.h")]
          TWh,
        /// <summary>
        /// TWb property
        /// </summary>
          TWb,
        /// <summary>
        /// uA property
        /// </summary>
          uA,
        /// <summary>
        /// uAcm2 property
        /// </summary>
          [XmlEnum("uA/cm2")]
          uAcm2,
        /// <summary>
        /// uAin2 property
        /// </summary>
          [XmlEnum("uA/in2")]
          uAin2,
        /// <summary>
        /// ubar property
        /// </summary>
          ubar,
        /// <summary>
        /// uC property
        /// </summary>
          uC,
        /// <summary>
        /// ucalth property
        /// </summary>
          [XmlEnum("ucal[th]")]
          ucalth,
        /// <summary>
        /// ucalthscm2 property
        /// </summary>
          [XmlEnum("ucal[th]/(s.cm2)")]
          ucalthscm2,
        /// <summary>
        /// ucalths property
        /// </summary>
          [XmlEnum("ucal[th]/s")]
          ucalths,
        /// <summary>
        /// uCi property
        /// </summary>
          uCi,
        /// <summary>
        /// uEuc property
        /// </summary>
          uEuc,
        /// <summary>
        /// ueV property
        /// </summary>
          ueV,
        /// <summary>
        /// uF property
        /// </summary>
          uF,
        /// <summary>
        /// uFm property
        /// </summary>
          [XmlEnum("uF/m")]
          uFm,
        /// <summary>
        /// ug property
        /// </summary>
          ug,
        /// <summary>
        /// ugcm3 property
        /// </summary>
          [XmlEnum("ug/cm3")]
          ugcm3,
        /// <summary>
        /// ugg property
        /// </summary>
          [XmlEnum("ug/g")]
          ugg,
        /// <summary>
        /// ugmg property
        /// </summary>
          [XmlEnum("ug/mg")]
          ugmg,
        /// <summary>
        /// ugauss property
        /// </summary>
          ugauss,
        /// <summary>
        /// uGy property
        /// </summary>
          uGy,
        /// <summary>
        /// uH property
        /// </summary>
          uH,
        /// <summary>
        /// uHm property
        /// </summary>
          [XmlEnum("uH/m")]
          uHm,
        /// <summary>
        /// uHz property
        /// </summary>
          uHz,
        /// <summary>
        /// uJ property
        /// </summary>
          uJ,
        /// <summary>
        /// um property
        /// </summary>
          um,
        /// <summary>
        /// ums property
        /// </summary>
          [XmlEnum("um/s")]
          ums,
        /// <summary>
        /// um2 property
        /// </summary>
          um2,
        /// <summary>
        /// um2m property
        /// </summary>
          [XmlEnum("um2.m")]
          um2m,
        /// <summary>
        /// umHg0degC property
        /// </summary>
          [XmlEnum("umHg[0degC]")]
          umHg0degC,
        /// <summary>
        /// umol property
        /// </summary>
          umol,
        /// <summary>
        /// uN property
        /// </summary>
          uN,
        /// <summary>
        /// uohm property
        /// </summary>
          uohm,
        /// <summary>
        /// uohmft property
        /// </summary>
          [XmlEnum("uohm/ft")]
          uohmft,
        /// <summary>
        /// uohmm property
        /// </summary>
          [XmlEnum("uohm/m")]
          uohmm,
        /// <summary>
        /// uP property
        /// </summary>
          uP,
        /// <summary>
        /// uPa property
        /// </summary>
          uPa,
        /// <summary>
        /// upsi property
        /// </summary>
          upsi,
        /// <summary>
        /// urad property
        /// </summary>
          urad,
        /// <summary>
        /// urd property
        /// </summary>
          urd,
        /// <summary>
        /// us property
        /// </summary>
          us,
        /// <summary>
        /// uS property
        /// </summary>
          uS,
        /// <summary>
        /// usft property
        /// </summary>
          [XmlEnum("us/ft")]
          usft,
        /// <summary>
        /// usin property
        /// </summary>
          [XmlEnum("us/in")]
          usin,
        /// <summary>
        /// usm property
        /// </summary>
          [XmlEnum("us/m")]
          usm,
        /// <summary>
        /// uT property
        /// </summary>
          uT,
        /// <summary>
        /// uV property
        /// </summary>
          uV,
        /// <summary>
        /// uVft property
        /// </summary>
          [XmlEnum("uV/ft")]
          uVft,
        /// <summary>
        /// uVm property
        /// </summary>
          [XmlEnum("uV/m")]
          uVm,
        /// <summary>
        /// uW property
        /// </summary>
          uW,
        /// <summary>
        /// uWm3 property
        /// </summary>
          [XmlEnum("uW/m3")]
          uWm3,
        /// <summary>
        /// uWb property
        /// </summary>
          uWb,
        /// <summary>
        /// V property
        /// </summary>
          V,
        /// <summary>
        /// VB property
        /// </summary>
          [XmlEnum("V/B")]
          VB,
        /// <summary>
        /// VdB property
        /// </summary>
          [XmlEnum("V/dB")]
          VdB,
        /// <summary>
        /// Vm property
        /// </summary>
          [XmlEnum("V/m")]
          Vm,
        /// <summary>
        /// W property
        /// </summary>
          W,
        /// <summary>
        /// Wm2KJK property
        /// </summary>
          [XmlEnum("W.m2.K/(J.K)")]
          Wm2KJK,
        /// <summary>
        /// WmK property
        /// </summary>
          [XmlEnum("W/(m.K)")]
          WmK,
        /// <summary>
        /// Wm2K property
        /// </summary>
          [XmlEnum("W/(m2.K)")]
          Wm2K,
        /// <summary>
        /// Wm2sr property
        /// </summary>
          [XmlEnum("W/(m2.sr)")]
          Wm2sr,
        /// <summary>
        /// Wm3K property
        /// </summary>
          [XmlEnum("W/(m3.K)")]
          Wm3K,
        /// <summary>
        /// Wcm2 property
        /// </summary>
          [XmlEnum("W/cm2")]
          Wcm2,
        /// <summary>
        /// WK property
        /// </summary>
          [XmlEnum("W/K")]
          WK,
        /// <summary>
        /// WkW property
        /// </summary>
          [XmlEnum("W/kW")]
          WkW,
        /// <summary>
        /// Wm2 property
        /// </summary>
          [XmlEnum("W/m2")]
          Wm2,
        /// <summary>
        /// Wm3 property
        /// </summary>
          [XmlEnum("W/m3")]
          Wm3,
        /// <summary>
        /// Wmm2 property
        /// </summary>
          [XmlEnum("W/mm2")]
          Wmm2,
        /// <summary>
        /// Wsr property
        /// </summary>
          [XmlEnum("W/sr")]
          Wsr,
        /// <summary>
        /// WW property
        /// </summary>
          [XmlEnum("W/W")]
          WW,
        /// <summary>
        /// Wb property
        /// </summary>
          Wb,
        /// <summary>
        /// Wbm property
        /// </summary>
          [XmlEnum("Wb.m")]
          Wbm,
        /// <summary>
        /// Wbm1 property
        /// </summary>
          [XmlEnum("Wb/m")]
          Wbm1,
        /// <summary>
        /// Wbmm property
        /// </summary>
          [XmlEnum("Wb/mm")]
          Wbmm,
        /// <summary>
        /// wk property
        /// </summary>
          wk,
        /// <summary>
        /// yd property
        /// </summary>
          yd,
        /// <summary>
        /// ydBnA property
        /// </summary>
          [XmlEnum("yd[BnA]")]
          ydBnA,
        /// <summary>
        /// ydBnB property
        /// </summary>
          [XmlEnum("yd[BnB]")]
          ydBnB,
        /// <summary>
        /// ydCla property
        /// </summary>
          [XmlEnum("yd[Cla]")]
          ydCla,
        /// <summary>
        /// ydInd property
        /// </summary>
          [XmlEnum("yd[Ind]")]
          ydInd,
        /// <summary>
        /// ydInd37 property
        /// </summary>
          [XmlEnum("yd[Ind37]")]
          ydInd37,
        /// <summary>
        /// ydInd62 property
        /// </summary>
          [XmlEnum("yd[Ind62]")]
          ydInd62,
        /// <summary>
        /// ydInd75 property
        /// </summary>
          [XmlEnum("yd[Ind75]")]
          ydInd75,
        /// <summary>
        /// ydSe property
        /// </summary>
          [XmlEnum("yd[Se]")]
          ydSe,
        /// <summary>
        /// ydSeT property
        /// </summary>
          [XmlEnum("yd[SeT]")]
          ydSeT,
        /// <summary>
        /// ydUS property
        /// </summary>
          [XmlEnum("yd[US]")]
          ydUS,
        /// <summary>
        /// yd2 property
        /// </summary>
          yd2,
        /// <summary>
        /// yd3 property
        /// </summary>
          yd3
        }
        /// <summary>
        /// This class represents the EastOrWest xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EastOrWest xsd enumeration.")]
        public enum EastOrWest 
        {
        /// <summary>
        /// east property
        /// </summary>
          east,
        /// <summary>
        /// west property
        /// </summary>
          west
        }
        /// <summary>
        /// This class represents the NorthOrSouth xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the NorthOrSouth xsd enumeration.")]
        public enum NorthOrSouth 
        {
        /// <summary>
        /// north property
        /// </summary>
          north,
        /// <summary>
        /// south property
        /// </summary>
          south
        }
        /// <summary>
        /// This class represents the PrincipalMeridian xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PrincipalMeridian xsd enumeration.")]
        public enum PrincipalMeridian 
        {
        /// <summary>
        /// Item1stPrincipalMeridian property
        /// </summary>
          [XmlEnum("1st Principal Meridian")]
          Item1stPrincipalMeridian,
        /// <summary>
        /// Item2ndPrincipalMeridian property
        /// </summary>
          [XmlEnum("2nd Principal Meridian")]
          Item2ndPrincipalMeridian,
        /// <summary>
        /// Item3rdPrincipalMeridian property
        /// </summary>
          [XmlEnum("3rd Principal Meridian")]
          Item3rdPrincipalMeridian,
        /// <summary>
        /// Item4thPrincipalMeridian property
        /// </summary>
          [XmlEnum("4th Principal Meridian")]
          Item4thPrincipalMeridian,
        /// <summary>
        /// Item5thPrincipalMeridian property
        /// </summary>
          [XmlEnum("5th Principal Meridian")]
          Item5thPrincipalMeridian,
        /// <summary>
        /// Item6thPrincipalMeridian property
        /// </summary>
          [XmlEnum("6th Principal Meridian")]
          Item6thPrincipalMeridian,
        /// <summary>
        /// BlackHillsMeridian property
        /// </summary>
          [XmlEnum("Black Hills Meridian")]
          BlackHillsMeridian,
        /// <summary>
        /// BoiseMeridian property
        /// </summary>
          [XmlEnum("Boise Meridian")]
          BoiseMeridian,
        /// <summary>
        /// ChickasawMeridian property
        /// </summary>
          [XmlEnum("Chickasaw Meridian")]
          ChickasawMeridian,
        /// <summary>
        /// ChoctawMeridian property
        /// </summary>
          [XmlEnum("Choctaw Meridian")]
          ChoctawMeridian,
        /// <summary>
        /// CimarronMeridian property
        /// </summary>
          [XmlEnum("Cimarron Meridian")]
          CimarronMeridian,
        /// <summary>
        /// CopperRiverMeridian property
        /// </summary>
          [XmlEnum("Copper River Meridian")]
          CopperRiverMeridian,
        /// <summary>
        /// FairbanksMeridian property
        /// </summary>
          [XmlEnum("Fairbanks Meridian")]
          FairbanksMeridian,
        /// <summary>
        /// GilaandSaltRiverMeridian property
        /// </summary>
          [XmlEnum("Gila and Salt River Meridian")]
          GilaandSaltRiverMeridian,
        /// <summary>
        /// HumboldtMeridian property
        /// </summary>
          [XmlEnum("Humboldt Meridian")]
          HumboldtMeridian,
        /// <summary>
        /// HuntsvilleMeridian property
        /// </summary>
          [XmlEnum("Huntsville Meridian")]
          HuntsvilleMeridian,
        /// <summary>
        /// IndianMeridian property
        /// </summary>
          [XmlEnum("Indian Meridian")]
          IndianMeridian,
        /// <summary>
        /// KateelRiverMeridian property
        /// </summary>
          [XmlEnum("Kateel River Meridian")]
          KateelRiverMeridian,
        /// <summary>
        /// LousianaMeridian property
        /// </summary>
          [XmlEnum("Lousiana Meridian")]
          LousianaMeridian,
        /// <summary>
        /// MichiganMeridian property
        /// </summary>
          [XmlEnum("Michigan Meridian")]
          MichiganMeridian,
        /// <summary>
        /// MontanaMeridian property
        /// </summary>
          [XmlEnum("Montana Meridian")]
          MontanaMeridian,
        /// <summary>
        /// MountDiabloMeridian property
        /// </summary>
          [XmlEnum("Mount Diablo Meridian")]
          MountDiabloMeridian,
        /// <summary>
        /// NavajoMeridian property
        /// </summary>
          [XmlEnum("Navajo Meridian")]
          NavajoMeridian,
        /// <summary>
        /// NewMexicoMeridian property
        /// </summary>
          [XmlEnum("New Mexico Meridian")]
          NewMexicoMeridian,
        /// <summary>
        /// SaintHelenaMeridian property
        /// </summary>
          [XmlEnum("Saint Helena Meridian")]
          SaintHelenaMeridian,
        /// <summary>
        /// SaintStephensMeridian property
        /// </summary>
          [XmlEnum("Saint Stephens Meridian")]
          SaintStephensMeridian,
        /// <summary>
        /// SaltLakeMeridian property
        /// </summary>
          [XmlEnum("Salt Lake Meridian")]
          SaltLakeMeridian,
        /// <summary>
        /// SanBernardoMeridian property
        /// </summary>
          [XmlEnum("San Bernardo Meridian")]
          SanBernardoMeridian,
        /// <summary>
        /// SewardMeridian property
        /// </summary>
          [XmlEnum("Seward Meridian")]
          SewardMeridian,
        /// <summary>
        /// TallahasseeMeridian property
        /// </summary>
          [XmlEnum("Tallahassee Meridian")]
          TallahasseeMeridian,
        /// <summary>
        /// UintahMeridian property
        /// </summary>
          [XmlEnum("Uintah Meridian")]
          UintahMeridian,
        /// <summary>
        /// UmiatMeridian property
        /// </summary>
          [XmlEnum("Umiat Meridian")]
          UmiatMeridian,
        /// <summary>
        /// UteMeridian property
        /// </summary>
          [XmlEnum("Ute Meridian")]
          UteMeridian,
        /// <summary>
        /// WashingtonMeridian property
        /// </summary>
          [XmlEnum("Washington Meridian")]
          WashingtonMeridian,
        /// <summary>
        /// WilliametteMeridian property
        /// </summary>
          [XmlEnum("Williamette Meridian")]
          WilliametteMeridian,
        /// <summary>
        /// WindRiverMeridian property
        /// </summary>
          [XmlEnum("Wind River Meridian")]
          WindRiverMeridian
        }
        /// <summary>
        /// This class represents the FluidComponentBasis xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the FluidComponentBasis xsd enumeration.")]
        public enum FluidComponentBasis 
        {
        /// <summary>
        /// Item1 property
        /// </summary>
          [XmlEnum("1")]
          Item1,
        /// <summary>
        /// Item1dimethylcyclopentane property
        /// </summary>
          [XmlEnum("1-dimethylcyclopentane")]
          Item1dimethylcyclopentane,
        /// <summary>
        /// Item2 property
        /// </summary>
          [XmlEnum("2")]
          Item2,
        /// <summary>
        /// Item2dimethylbenzene property
        /// </summary>
          [XmlEnum("2 dimethylbenzene")]
          Item2dimethylbenzene,
        /// <summary>
        /// Item2dimethylpropane property
        /// </summary>
          [XmlEnum("2 dimethylpropane")]
          Item2dimethylpropane,
        /// <summary>
        /// Item2dimethylbutane property
        /// </summary>
          [XmlEnum("2-dimethylbutane")]
          Item2dimethylbutane,
        /// <summary>
        /// Item2dimethylcyclopentane property
        /// </summary>
          [XmlEnum("2-dimethylcyclopentane")]
          Item2dimethylcyclopentane,
        /// <summary>
        /// Item2dimethylhexane property
        /// </summary>
          [XmlEnum("2-dimethylhexane")]
          Item2dimethylhexane,
        /// <summary>
        /// Item2dimethylpentane property
        /// </summary>
          [XmlEnum("2-dimethylpentane")]
          Item2dimethylpentane,
        /// <summary>
        /// Item2methylbutane property
        /// </summary>
          [XmlEnum("2-methylbutane")]
          Item2methylbutane,
        /// <summary>
        /// Item2methylhexane property
        /// </summary>
          [XmlEnum("2-methylhexane")]
          Item2methylhexane,
        /// <summary>
        /// Item2methylpentane property
        /// </summary>
          [XmlEnum("2-methylpentane")]
          Item2methylpentane,
        /// <summary>
        /// Item2methylpropane property
        /// </summary>
          [XmlEnum("2-methylpropane")]
          Item2methylpropane,
        /// <summary>
        /// Item3 property
        /// </summary>
          [XmlEnum("3")]
          Item3,
        /// <summary>
        /// Item3dimethylbenzene property
        /// </summary>
          [XmlEnum("3 dimethylbenzene")]
          Item3dimethylbenzene,
        /// <summary>
        /// Item3dimethylbutane property
        /// </summary>
          [XmlEnum("3-dimethylbutane")]
          Item3dimethylbutane,
        /// <summary>
        /// Item3dimethylcyclopentane property
        /// </summary>
          [XmlEnum("3-dimethylcyclopentane")]
          Item3dimethylcyclopentane,
        /// <summary>
        /// Item3dimethylpentane property
        /// </summary>
          [XmlEnum("3-dimethylpentane")]
          Item3dimethylpentane,
        /// <summary>
        /// Item3ethylpentane property
        /// </summary>
          [XmlEnum("3-ethylpentane")]
          Item3ethylpentane,
        /// <summary>
        /// Item3methylhexane property
        /// </summary>
          [XmlEnum("3-methylhexane")]
          Item3methylhexane,
        /// <summary>
        /// Item3methylpentane property
        /// </summary>
          [XmlEnum("3-methylpentane")]
          Item3methylpentane,
        /// <summary>
        /// Item3trimethylbutane property
        /// </summary>
          [XmlEnum("3-trimethylbutane")]
          Item3trimethylbutane,
        /// <summary>
        /// Item3trimethylpentane property
        /// </summary>
          [XmlEnum("3-trimethylpentane")]
          Item3trimethylpentane,
        /// <summary>
        /// Item4dimethylbenzene property
        /// </summary>
          [XmlEnum("4-dimethylbenzene")]
          Item4dimethylbenzene,
        /// <summary>
        /// Item4dimethylhexane property
        /// </summary>
          [XmlEnum("4-dimethylhexane")]
          Item4dimethylhexane,
        /// <summary>
        /// Item4Dimethylpentane property
        /// </summary>
          [XmlEnum("4-Dimethylpentane")]
          Item4Dimethylpentane,
        /// <summary>
        /// Item4trimethylbenzene property
        /// </summary>
          [XmlEnum("4-trimethylbenzene")]
          Item4trimethylbenzene,
        /// <summary>
        /// Item5dimethylhexane property
        /// </summary>
          [XmlEnum("5-dimethylhexane")]
          Item5dimethylhexane,
        /// <summary>
        /// argon
        /// </summary>
          argon,
        /// <summary>
        /// benzene
        /// </summary>
          benzene,
        /// <summary>
        /// butane
        /// </summary>
          butane,
        /// <summary>
        /// c11fraction property
        /// </summary>
          [XmlEnum("c11 fraction")]
          c11fraction,
        /// <summary>
        /// c12fraction property
        /// </summary>
          [XmlEnum("c12 fraction")]
          c12fraction,
        /// <summary>
        /// c13fraction property
        /// </summary>
          [XmlEnum("c13 fraction")]
          c13fraction,
        /// <summary>
        /// c14fraction property
        /// </summary>
          [XmlEnum("c14 fraction")]
          c14fraction,
        /// <summary>
        /// c15fraction property
        /// </summary>
          [XmlEnum("c15 fraction")]
          c15fraction,
        /// <summary>
        /// c16fraction property
        /// </summary>
          [XmlEnum("c16 fraction")]
          c16fraction,
        /// <summary>
        /// c17fraction property
        /// </summary>
          [XmlEnum("c17 fraction")]
          c17fraction,
        /// <summary>
        /// c18fraction property
        /// </summary>
          [XmlEnum("c18 fraction")]
          c18fraction,
        /// <summary>
        /// c19fraction property
        /// </summary>
          [XmlEnum("c19 fraction")]
          c19fraction,
        /// <summary>
        /// c20fraction property
        /// </summary>
          [XmlEnum("c20 fraction")]
          c20fraction,
        /// <summary>
        /// c21fraction property
        /// </summary>
          [XmlEnum("c21 fraction")]
          c21fraction,
        /// <summary>
        /// c22fraction property
        /// </summary>
          [XmlEnum("c22 fraction")]
          c22fraction,
        /// <summary>
        /// c23fraction property
        /// </summary>
          [XmlEnum("c23 fraction")]
          c23fraction,
        /// <summary>
        /// c24fraction property
        /// </summary>
          [XmlEnum("c24 fraction")]
          c24fraction,
        /// <summary>
        /// c25fraction property
        /// </summary>
          [XmlEnum("c25 fraction")]
          c25fraction,
        /// <summary>
        /// c26fraction property
        /// </summary>
          [XmlEnum("c26 fraction")]
          c26fraction,
        /// <summary>
        /// c27fraction property
        /// </summary>
          [XmlEnum("c27 fraction")]
          c27fraction,
        /// <summary>
        /// c28fraction property
        /// </summary>
          [XmlEnum("c28 fraction")]
          c28fraction,
        /// <summary>
        /// c29fraction property
        /// </summary>
          [XmlEnum("c29 fraction")]
          c29fraction,
        /// <summary>
        /// c30fraction property
        /// </summary>
          [XmlEnum("c30 fraction")]
          c30fraction,
        /// <summary>
        /// c31fraction property
        /// </summary>
          [XmlEnum("c31 fraction")]
          c31fraction,
        /// <summary>
        /// c32fraction property
        /// </summary>
          [XmlEnum("c32 fraction")]
          c32fraction,
        /// <summary>
        /// c33fraction property
        /// </summary>
          [XmlEnum("c33 fraction")]
          c33fraction,
        /// <summary>
        /// c34fraction property
        /// </summary>
          [XmlEnum("c34 fraction")]
          c34fraction,
        /// <summary>
        /// c35fraction property
        /// </summary>
          [XmlEnum("c35 fraction")]
          c35fraction,
        /// <summary>
        /// c36fraction property
        /// </summary>
          [XmlEnum("c36 fraction")]
          c36fraction,
        /// <summary>
        /// c37fraction property
        /// </summary>
          [XmlEnum("c37 fraction")]
          c37fraction,
        /// <summary>
        /// c38fraction property
        /// </summary>
          [XmlEnum("c38 fraction")]
          c38fraction,
        /// <summary>
        /// c39fraction property
        /// </summary>
          [XmlEnum("c39 fraction")]
          c39fraction,
        /// <summary>
        /// c40fraction property
        /// </summary>
          [XmlEnum("c40 fraction")]
          c40fraction,
        /// <summary>
        /// c41fraction property
        /// </summary>
          [XmlEnum("c41 fraction")]
          c41fraction,
        /// <summary>
        /// c42fraction property
        /// </summary>
          [XmlEnum("c42 fraction")]
          c42fraction,
        /// <summary>
        /// c43fraction property
        /// </summary>
          [XmlEnum("c43 fraction")]
          c43fraction,
        /// <summary>
        /// c44fraction property
        /// </summary>
          [XmlEnum("c44 fraction")]
          c44fraction,
        /// <summary>
        /// c45fraction property
        /// </summary>
          [XmlEnum("c45 fraction")]
          c45fraction,
        /// <summary>
        /// c46fraction property
        /// </summary>
          [XmlEnum("c46 fraction")]
          c46fraction,
        /// <summary>
        /// c47fraction property
        /// </summary>
          [XmlEnum("c47 fraction")]
          c47fraction,
        /// <summary>
        /// c48fraction property
        /// </summary>
          [XmlEnum("c48 fraction")]
          c48fraction,
        /// <summary>
        /// c49fraction property
        /// </summary>
          [XmlEnum("c49 fraction")]
          c49fraction,
        /// <summary>
        /// carbondioxide property
        /// </summary>
          [XmlEnum("carbon dioxide")]
          carbondioxide,
        /// <summary>
        /// cis1 property
        /// </summary>
          [XmlEnum("cis-1")]
          cis1,
        /// <summary>
        /// cyclohexane
        /// </summary>
          cyclohexane,
        /// <summary>
        /// cyclopentane
        /// </summary>
          cyclopentane,
        /// <summary>
        /// decanes
        /// </summary>
          decanes,
        /// <summary>
        /// ethane
        /// </summary>
          ethane,
        /// <summary>
        /// ethylbenzene
        /// </summary>
          ethylbenzene,
        /// <summary>
        /// ethylcyclopentane
        /// </summary>
          ethylcyclopentane,
        /// <summary>
        /// heptanes
        /// </summary>
          heptanes,
        /// <summary>
        /// hexane
        /// </summary>
          hexane,
        /// <summary>
        /// hexanes
        /// </summary>
          hexanes,
        /// <summary>
        /// hydrogen
        /// </summary>
          hydrogen,
        /// <summary>
        /// hydrogensulfide property
        /// </summary>
          [XmlEnum("hydrogen sulfide")]
          hydrogensulfide,
        /// <summary>
        /// methane
        /// </summary>
          methane,
        /// <summary>
        /// methylbenzene
        /// </summary>
          methylbenzene,
        /// <summary>
        /// methylcyclohexane
        /// </summary>
          methylcyclohexane,
        /// <summary>
        /// methylcyclopentane
        /// </summary>
          methylcyclopentane,
        /// <summary>
        /// nitrogen
        /// </summary>
          nitrogen,
        /// <summary>
        /// nonanes
        /// </summary>
          nonanes,
        /// <summary>
        /// octanes
        /// </summary>
          octanes,
        /// <summary>
        /// oxygen
        /// </summary>
          oxygen,
        /// <summary>
        /// pentane
        /// </summary>
          pentane,
        /// <summary>
        /// propane
        /// </summary>
          propane,
        /// <summary>
        /// trans1 property
        /// </summary>
          [XmlEnum("trans-1")]
          trans1,
        /// <summary>
        /// unknown
        /// </summary>
          unknown,
        /// <summary>
        /// water
        /// </summary>
          water
        }
        /// <summary>
        /// This class represents the GeologyType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the GeologyType xsd enumeration.")]
        public enum GeologyType 
        {
        /// <summary>
        /// aquifer
        /// </summary>
          aquifer,
        /// <summary>
        /// reservoir
        /// </summary>
          reservoir
        }
        /// <summary>
        /// This class represents the PlusComponentEnum xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the PlusComponentEnum xsd enumeration.")]
        public enum PlusComponentEnum 
        {
        /// <summary>
        /// c10 property
        /// </summary>
          [XmlEnum("c10+")]
          c10,
        /// <summary>
        /// c11 property
        /// </summary>
          [XmlEnum("c11+")]
          c11,
        /// <summary>
        /// c12 property
        /// </summary>
          [XmlEnum("c12+")]
          c12,
        /// <summary>
        /// c20 property
        /// </summary>
          [XmlEnum("c20+")]
          c20,
        /// <summary>
        /// c25 property
        /// </summary>
          [XmlEnum("c25+")]
          c25,
        /// <summary>
        /// c30 property
        /// </summary>
          [XmlEnum("c30+")]
          c30,
        /// <summary>
        /// c36 property
        /// </summary>
          [XmlEnum("c36+")]
          c36,
        /// <summary>
        /// c5 property
        /// </summary>
          [XmlEnum("c5+")]
          c5,
        /// <summary>
        /// c6 property
        /// </summary>
          [XmlEnum("c6+")]
          c6,
        /// <summary>
        /// c7 property
        /// </summary>
          [XmlEnum("c7+")]
          c7,
        /// <summary>
        /// c8 property
        /// </summary>
          [XmlEnum("c8+")]
          c8,
        /// <summary>
        /// c9 property
        /// </summary>
          [XmlEnum("c9+")]
          c9
        }
        /// <summary>
        /// This class represents the ProductFluidKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ProductFluidKind xsd enumeration.")]
        public enum ProductFluidKind 
        {
        /// <summary>
        /// condensate property
        /// </summary>
          condensate,
        /// <summary>
        /// condensategross property
        /// </summary>
          [XmlEnum("condensate - gross")]
          condensategross,
        /// <summary>
        /// condensatenet property
        /// </summary>
          [XmlEnum("condensate - net")]
          condensatenet,
        /// <summary>
        /// crudestabilized property
        /// </summary>
          [XmlEnum("crude - stabilized")]
          crudestabilized,
        /// <summary>
        /// gascomponentinoil property
        /// </summary>
          [XmlEnum("gas - component in oil")]
          gascomponentinoil,
        /// <summary>
        /// gasdry property
        /// </summary>
          [XmlEnum("gas - dry")]
          gasdry,
        /// <summary>
        /// gasrich property
        /// </summary>
          [XmlEnum("gas - rich")]
          gasrich,
        /// <summary>
        /// gaswet property
        /// </summary>
          [XmlEnum("gas - wet")]
          gaswet,
        /// <summary>
        /// liquefiednaturalgas property
        /// </summary>
          [XmlEnum("liquefied natural gas")]
          liquefiednaturalgas,
        /// <summary>
        /// liquefiedpetroleumgas property
        /// </summary>
          [XmlEnum("liquefied petroleum gas")]
          liquefiedpetroleumgas,
        /// <summary>
        /// liquid property
        /// </summary>
          liquid,
        /// <summary>
        /// naphtha property
        /// </summary>
          naphtha,
        /// <summary>
        /// naturalgasliquid property
        /// </summary>
          [XmlEnum("natural gas liquid")]
          naturalgasliquid,
        /// <summary>
        /// NGLcomponentingas property
        /// </summary>
          [XmlEnum("NGL - component in gas")]
          NGLcomponentingas,
        /// <summary>
        /// oilcomponentinwater property
        /// </summary>
          [XmlEnum("oil - component in water")]
          oilcomponentinwater,
        /// <summary>
        /// oilgross property
        /// </summary>
          [XmlEnum("oil - gross")]
          oilgross,
        /// <summary>
        /// oilnet property
        /// </summary>
          [XmlEnum("oil - net")]
          oilnet,
        /// <summary>
        /// oilandgas property
        /// </summary>
          [XmlEnum("oil and gas")]
          oilandgas,
        /// <summary>
        /// petroleumgasliquid property
        /// </summary>
          [XmlEnum("petroleum gas liquid")]
          petroleumgasliquid,
        /// <summary>
        /// vapor property
        /// </summary>
          vapor,
        /// <summary>
        /// sand property
        /// </summary>
          sand,
        /// <summary>
        /// waterdischarge property
        /// </summary>
          [XmlEnum("water - discharge")]
          waterdischarge,
        /// <summary>
        /// waterprocessed property
        /// </summary>
          [XmlEnum("water - processed")]
          waterprocessed
        }
        /// <summary>
        /// This class represents the PseudoComponentEnum xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the PseudoComponentEnum xsd enumeration.")]
        public enum PseudoComponentEnum 
        {
        /// <summary>
        /// c10 property
        /// </summary>
          c10,
        /// <summary>
        /// c11 property
        /// </summary>
          c11,
        /// <summary>
        /// c12 property
        /// </summary>
          c12,
        /// <summary>
        /// c13 property
        /// </summary>
          c13,
        /// <summary>
        /// c14 property
        /// </summary>
          c14,
        /// <summary>
        /// c15 property
        /// </summary>
          c15,
        /// <summary>
        /// c16 property
        /// </summary>
          c16,
        /// <summary>
        /// c17 property
        /// </summary>
          c17,
        /// <summary>
        /// c18 property
        /// </summary>
          c18,
        /// <summary>
        /// c19 property
        /// </summary>
          c19,
        /// <summary>
        /// c20 property
        /// </summary>
          c20,
        /// <summary>
        /// c21 property
        /// </summary>
          c21,
        /// <summary>
        /// c22 property
        /// </summary>
          c22,
        /// <summary>
        /// c23 property
        /// </summary>
          c23,
        /// <summary>
        /// c24 property
        /// </summary>
          c24,
        /// <summary>
        /// c25 property
        /// </summary>
          c25,
        /// <summary>
        /// c26 property
        /// </summary>
          c26,
        /// <summary>
        /// c27 property
        /// </summary>
          c27,
        /// <summary>
        /// c28 property
        /// </summary>
          c28,
        /// <summary>
        /// c29 property
        /// </summary>
          c29,
        /// <summary>
        /// c2c4n2 property
        /// </summary>
          [XmlEnum("c2-c4+n2")]
          c2c4n2,
        /// <summary>
        /// c30 property
        /// </summary>
          c30,
        /// <summary>
        /// c31 property
        /// </summary>
          c31,
        /// <summary>
        /// c32 property
        /// </summary>
          c32,
        /// <summary>
        /// c33 property
        /// </summary>
          c33,
        /// <summary>
        /// c34 property
        /// </summary>
          c34,
        /// <summary>
        /// c35 property
        /// </summary>
          c35,
        /// <summary>
        /// c4 property
        /// </summary>
          c4,
        /// <summary>
        /// c5 property
        /// </summary>
          c5,
        /// <summary>
        /// c6 property
        /// </summary>
          c6,
        /// <summary>
        /// c7 property
        /// </summary>
          c7,
        /// <summary>
        /// c8 property
        /// </summary>
          c8,
        /// <summary>
        /// c9 property
        /// </summary>
          c9
        }
        /// <summary>
        /// This class represents the PureComponentEnum xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the PureComponentEnum xsd enumeration.")]
        public enum PureComponentEnum 
        {
        /// <summary>
        /// Item124trimethylbenzene property
        /// </summary>
          [XmlEnum("1-2-4-trimethylbenzene")]
          Item124trimethylbenzene,
        /// <summary>
        /// Item2dimethylbutane property
        /// </summary>
          [XmlEnum("2-dimethylbutane")]
          Item2dimethylbutane,
        /// <summary>
        /// Item3dimethylbutane property
        /// </summary>
          [XmlEnum("3-dimethylbutane")]
          Item3dimethylbutane,
        /// <summary>
        /// ar property
        /// </summary>
          ar,
        /// <summary>
        /// c1 property
        /// </summary>
          c1,
        /// <summary>
        /// c2 property
        /// </summary>
          c2,
        /// <summary>
        /// c3 property
        /// </summary>
          c3,
        /// <summary>
        /// co2 property
        /// </summary>
          co2,
        /// <summary>
        /// h2 property
        /// </summary>
          h2,
        /// <summary>
        /// h2o property
        /// </summary>
          h2o,
        /// <summary>
        /// h2s property
        /// </summary>
          h2s,
        /// <summary>
        /// he property
        /// </summary>
          he,
        /// <summary>
        /// hg property
        /// </summary>
          hg,
        /// <summary>
        /// ic4 property
        /// </summary>
          [XmlEnum("i-c4")]
          ic4,
        /// <summary>
        /// ic5 property
        /// </summary>
          [XmlEnum("i-c5")]
          ic5,
        /// <summary>
        /// n2 property
        /// </summary>
          n2,
        /// <summary>
        /// nc10 property
        /// </summary>
          [XmlEnum("n-c10")]
          nc10,
        /// <summary>
        /// nc4 property
        /// </summary>
          [XmlEnum("n-c4")]
          nc4,
        /// <summary>
        /// nc5 property
        /// </summary>
          [XmlEnum("n-c5")]
          nc5,
        /// <summary>
        /// nc6 property
        /// </summary>
          [XmlEnum("n-c6")]
          nc6,
        /// <summary>
        /// nc7 property
        /// </summary>
          [XmlEnum("n-c7")]
          nc7,
        /// <summary>
        /// nc8 property
        /// </summary>
          [XmlEnum("n-c8")]
          nc8,
        /// <summary>
        /// nc9 property
        /// </summary>
          [XmlEnum("n-c9")]
          nc9,
        /// <summary>
        /// neoc5 property
        /// </summary>
          [XmlEnum("neo-c5")]
          neoc5,
        /// <summary>
        /// benzene property
        /// </summary>
          benzene,
        /// <summary>
        /// Item2methylpentane property
        /// </summary>
          [XmlEnum("2-methylpentane")]
          Item2methylpentane,
        /// <summary>
        /// Item3methylpentane property
        /// </summary>
          [XmlEnum("3-methylpentane")]
          Item3methylpentane,
        /// <summary>
        /// Item2methylhexane property
        /// </summary>
          [XmlEnum("2-methylhexane")]
          Item2methylhexane,
        /// <summary>
        /// Item3methylhexane property
        /// </summary>
          [XmlEnum("3-methylhexane")]
          Item3methylhexane,
        /// <summary>
        /// Item2methylheptane property
        /// </summary>
          [XmlEnum("2-methylheptane")]
          Item2methylheptane,
        /// <summary>
        /// Item3methylheptane property
        /// </summary>
          [XmlEnum("3-methylheptane")]
          Item3methylheptane,
        /// <summary>
        /// cyclohexane property
        /// </summary>
          cyclohexane,
        /// <summary>
        /// ethylbenzene property
        /// </summary>
          ethylbenzene,
        /// <summary>
        /// ethylcyclohexane property
        /// </summary>
          ethylcyclohexane,
        /// <summary>
        /// methylcyclohexane property
        /// </summary>
          methylcyclohexane,
        /// <summary>
        /// methylcyclopentane property
        /// </summary>
          methylcyclopentane,
        /// <summary>
        /// toluene property
        /// </summary>
          toluene,
        /// <summary>
        /// mxylene property
        /// </summary>
          [XmlEnum("m-xylene")]
          mxylene,
        /// <summary>
        /// oxylene property
        /// </summary>
          [XmlEnum("o-xylene")]
          oxylene,
        /// <summary>
        /// pxylene property
        /// </summary>
          [XmlEnum("p-xylene")]
          pxylene
        }
        /// <summary>
        /// This class represents the ServiceFluidKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the ServiceFluidKind xsd enumeration.")]
        public enum ServiceFluidKind 
        {
        /// <summary>
        /// alkalinesolutions property
        /// </summary>
          [XmlEnum("alkaline solutions")]
          alkalinesolutions,
        /// <summary>
        /// biocide
        /// </summary>
          biocide,
        /// <summary>
        /// carbondioxide property
        /// </summary>
          [XmlEnum("carbon dioxide")]
          carbondioxide,
        /// <summary>
        /// carbonmonoxide property
        /// </summary>
          [XmlEnum("carbon monoxide")]
          carbonmonoxide,
        /// <summary>
        /// corrosioninhibitor property
        /// </summary>
          [XmlEnum("corrosion inhibitor")]
          corrosioninhibitor,
        /// <summary>
        /// demulsifier
        /// </summary>
          demulsifier,
        /// <summary>
        /// diesel
        /// </summary>
          diesel,
        /// <summary>
        /// diethyleneglycol property
        /// </summary>
          [XmlEnum("diethylene glycol")]
          diethyleneglycol,
        /// <summary>
        /// dispersant
        /// </summary>
          dispersant,
        /// <summary>
        /// dragreducingagent property
        /// </summary>
          [XmlEnum("drag reducing agent")]
          dragreducingagent,
        /// <summary>
        /// emulsifier
        /// </summary>
          emulsifier,
        /// <summary>
        /// flocculant
        /// </summary>
          flocculant,
        /// <summary>
        /// hydrauliccontrolfluid property
        /// </summary>
          [XmlEnum("hydraulic control fluid")]
          hydrauliccontrolfluid,
        /// <summary>
        /// isopropanol
        /// </summary>
          isopropanol,
        /// <summary>
        /// lubricant
        /// </summary>
          lubricant,
        /// <summary>
        /// methanol
        /// </summary>
          methanol,
        /// <summary>
        /// monoethyleneglycol property
        /// </summary>
          [XmlEnum("monoethylene glycol")]
          monoethyleneglycol,
        /// <summary>
        /// oil
        /// </summary>
          oil,
        /// <summary>
        /// otherchemical property
        /// </summary>
          [XmlEnum("other chemical")]
          otherchemical,
        /// <summary>
        /// otherhydrateinhibitor property
        /// </summary>
          [XmlEnum("other hydrate inhibitor")]
          otherhydrateinhibitor,
        /// <summary>
        /// polymer
        /// </summary>
          polymer,
        /// <summary>
        /// scaleinhibitor property
        /// </summary>
          [XmlEnum("scale inhibitor")]
          scaleinhibitor,
        /// <summary>
        /// solvent
        /// </summary>
          solvent,
        /// <summary>
        /// stabilizingagent property
        /// </summary>
          [XmlEnum("stabilizing agent")]
          stabilizingagent,
        /// <summary>
        /// surfactant
        /// </summary>
          surfactant,
        /// <summary>
        /// thinner
        /// </summary>
          thinner,
        /// <summary>
        /// triethyleneglycol property
        /// </summary>
          [XmlEnum("triethylene glycol")]
          triethyleneglycol
        }
        /// <summary>
        /// This class represents the WellDirection xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the WellDirection xsd enumeration.")]
        public enum WellDirection 
        {
        /// <summary>
        /// huffnpuff property
        /// </summary>
          [XmlEnum("huff-n-puff")]
          huffnpuff,
        /// <summary>
        /// The well facility is injecting fluids into the subsurface.
        /// </summary>
          injector,
        /// <summary>
        /// The well facility is producing fluids from the subsurface.
        /// </summary>
          producer,
        /// <summary>
        /// The flow direction of the fluids is variable, but not on a regular basis as is the case with the huff-n-puff flow.
        /// </summary>
          uncertain
        }
        /// <summary>
        /// This class represents the DasCalibrationType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the DasCalibrationType xsd enumeration.")]
        public enum DasCalibrationType 
        {
        /// <summary>
        /// lastlocustoendoffiber property
        /// </summary>
          [XmlEnum("last locus to end of fiber")]
          lastlocustoendoffiber,
        /// <summary>
        /// locuscalibration property
        /// </summary>
          [XmlEnum("locus calibration")]
          locuscalibration,
        /// <summary>
        /// taptest property
        /// </summary>
          [XmlEnum("tap test")]
          taptest
        }
        /// <summary>
        /// This class represents the OutputFluidProperty xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the OutputFluidProperty xsd enumeration.")]
        public enum OutputFluidProperty 
        {
        /// <summary>
        /// Compressibility (expected to be defined for a phase). UoM: 1/pressure.
        /// </summary>
          Compressibility,
        /// <summary>
        /// Density (expected to be defined for a phase). UoM: mass/volume.
        /// </summary>
          Density,
        /// <summary>
        /// DerivativeofDensitywrtPressure property
        /// </summary>
          [XmlEnum("Derivative of Density w.r.t Pressure")]
          DerivativeofDensitywrtPressure,
        /// <summary>
        /// DerivativeofDensitywrtTemperature property
        /// </summary>
          [XmlEnum("Derivative of Density w.r.t Temperature")]
          DerivativeofDensitywrtTemperature,
        /// <summary>
        /// Enthalpy (expected to be defined for a phase). UoM: energy/mass.
        /// </summary>
          Enthalpy,
        /// <summary>
        /// Entropy (expected to be defined for a phase). UoM: energy/temperature.
        /// </summary>
          Entropy,
        /// <summary>
        /// ExpansionFactor property
        /// </summary>
          [XmlEnum("Expansion Factor")]
          ExpansionFactor,
        /// <summary>
        /// FormationVolumeFactor property
        /// </summary>
          [XmlEnum("Formation Volume Factor")]
          FormationVolumeFactor,
        /// <summary>
        /// GasOilInterfacialTension property
        /// </summary>
          [XmlEnum("Gas-Oil Interfacial Tension")]
          GasOilInterfacialTension,
        /// <summary>
        /// GasWaterInterfacialTension property
        /// </summary>
          [XmlEnum("Gas-Water Interfacial Tension")]
          GasWaterInterfacialTension,
        /// <summary>
        /// Index number (which will be the index of a row in the table). UoM: integer.
        /// </summary>
          Index,
        /// <summary>
        /// Kvalue property
        /// </summary>
          [XmlEnum("K value")]
          Kvalue,
        /// <summary>
        /// MiscBankCriticalSolventSaturation property
        /// </summary>
          [XmlEnum("Misc Bank Critical Solvent Saturation")]
          MiscBankCriticalSolventSaturation,
        /// <summary>
        /// MiscBankPhaseDensity property
        /// </summary>
          [XmlEnum("Misc Bank Phase Density")]
          MiscBankPhaseDensity,
        /// <summary>
        /// MiscBankPhaseViscosity property
        /// </summary>
          [XmlEnum("Misc Bank Phase Viscosity")]
          MiscBankPhaseViscosity,
        /// <summary>
        /// MiscibilityParameterAlpha property
        /// </summary>
          [XmlEnum("Miscibility Parameter (Alpha)")]
          MiscibilityParameterAlpha,
        /// <summary>
        /// MixingParameterOilGas property
        /// </summary>
          [XmlEnum("Mixing Parameter Oil-Gas")]
          MixingParameterOilGas,
        /// <summary>
        /// OilGasRatio property
        /// </summary>
          [XmlEnum("Oil-Gas Ratio")]
          OilGasRatio,
        /// <summary>
        /// OilWaterInterfacialTension property
        /// </summary>
          [XmlEnum("Oil-Water Interfacial Tension")]
          OilWaterInterfacialTension,
        /// <summary>
        /// Parachor is the quantity defined according to the formula: P = γ1/4 M / D. Where γ1/4 is the fourth root of surface tension.
        /// </summary>
          Parachor,
        /// <summary>
        /// Pressure. UoM: pressure.
        /// </summary>
          Pressure,
        /// <summary>
        /// PTCrossTerm property
        /// </summary>
          [XmlEnum("P-T Cross Term")]
          PTCrossTerm,
        /// <summary>
        /// SaturationPressure property
        /// </summary>
          [XmlEnum("Saturation Pressure")]
          SaturationPressure,
        /// <summary>
        /// SolutionGOR property
        /// </summary>
          [XmlEnum("Solution GOR")]
          SolutionGOR,
        /// <summary>
        /// SolventDensity property
        /// </summary>
          [XmlEnum("Solvent Density")]
          SolventDensity,
        /// <summary>
        /// SpecificHeat property
        /// </summary>
          [XmlEnum("Specific Heat")]
          SpecificHeat,
        /// <summary>
        /// Temperature. UoM: temperature.
        /// </summary>
          Temperature,
        /// <summary>
        /// ThermalConductivity property
        /// </summary>
          [XmlEnum("Thermal Conductivity")]
          ThermalConductivity,
        /// <summary>
        /// Viscosity (expected to be defined for a phase). UoM: viscosity.
        /// </summary>
          Viscosity,
        /// <summary>
        /// ViscosityCompressibility property
        /// </summary>
          [XmlEnum("Viscosity Compressibility")]
          ViscosityCompressibility,
        /// <summary>
        /// Watervapormassfractioningasphase property
        /// </summary>
          [XmlEnum("Water vapor mass fraction in gas phase")]
          Watervapormassfractioningasphase,
        /// <summary>
        /// ZFactor property
        /// </summary>
          [XmlEnum("Z Factor")]
          ZFactor
        }
        /// <summary>
        /// This class represents the PvtModelParameterKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the PvtModelParameterKind xsd enumeration.")]
        public enum PvtModelParameterKind 
        {
        /// <summary>
        /// The value represents the parameter b0.
        /// </summary>
          b0,
        /// <summary>
        /// The value represents the parameter b1.
        /// </summary>
          b1,
        /// <summary>
        /// The value represents the parameter b2.
        /// </summary>
          b2,
        /// <summary>
        /// The value represents the parameter c1.
        /// </summary>
          c1,
        /// <summary>
        /// The value represents the parameter c2.
        /// </summary>
          c2,
        /// <summary>
        /// The value represents the parameter d1.
        /// </summary>
          d1,
        /// <summary>
        /// The value represents the parameter d2.
        /// </summary>
          d2,
        /// <summary>
        /// The value represents the parameter e1.
        /// </summary>
          e1,
        /// <summary>
        /// The value represents the parameter e2.
        /// </summary>
          e2,
        /// <summary>
        /// The value represents the parameter f1.
        /// </summary>
          f1,
        /// <summary>
        /// The value represents the parameter f2.
        /// </summary>
          f2,
        /// <summary>
        /// The value represents the parameter g1.
        /// </summary>
          g1,
        /// <summary>
        /// The value represents the parameter g2.
        /// </summary>
          g2,
        /// <summary>
        /// The value represents the parameter h1.
        /// </summary>
          h1,
        /// <summary>
        /// The value represents the parameter h2.
        /// </summary>
          h2,
        /// <summary>
        /// The value represents the parameter a0.
        /// </summary>
          a0,
        /// <summary>
        /// The value represents the parameter a1.
        /// </summary>
          a1,
        /// <summary>
        /// The value represents the parameter a2.
        /// </summary>
          a2,
        /// <summary>
        /// The value represents the parameter a3.
        /// </summary>
          a3,
        /// <summary>
        /// The value represents the parameter a4.
        /// </summary>
          a4,
        /// <summary>
        /// The value represents the parameter a5.
        /// </summary>
          a5,
        /// <summary>
        /// The value represents the parameter a6.
        /// </summary>
          a6,
        /// <summary>
        /// The value represents the parameter a7.
        /// </summary>
          a7,
        /// <summary>
        /// The value represents the parameter a8.
        /// </summary>
          a8,
        /// <summary>
        /// The value represents the parameter a9.
        /// </summary>
          a9,
        /// <summary>
        /// The value represents the parameter a10.
        /// </summary>
          a10,
        /// <summary>
        /// The value represents the parameter c0.
        /// </summary>
          c0,
        /// <summary>
        /// The value represents the parameter d0.
        /// </summary>
          d0,
        /// <summary>
        /// The value represents the parameter e0.
        /// </summary>
          e0,
        /// <summary>
        /// The value represents the parameter f0.
        /// </summary>
          f0,
        /// <summary>
        /// The value represents the parameter g0.
        /// </summary>
          g0,
        /// <summary>
        /// The value represents the parameter h0.
        /// </summary>
          h0
        }
        /// <summary>
        /// This class represents the DispositionKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the DispositionKind xsd enumeration.")]
        public enum DispositionKind 
        {
        /// <summary>
        /// Burned in a flare.
        /// </summary>
          flared,
        /// <summary>
        /// Sold and transported to a buyer by pipeline.
        /// </summary>
          sold,
        /// <summary>
        /// usedonsite property
        /// </summary>
          [XmlEnum("used on-site")]
          usedonsite,
        /// <summary>
        /// Consumed by processing equipment.
        /// </summary>
          fuel,
        /// <summary>
        /// Released into the atmosphere.
        /// </summary>
          vented,
        /// <summary>
        /// Disposed of. 
        /// </summary>
          disposal,
        /// <summary>
        /// gaslift property
        /// </summary>
          [XmlEnum("gas lift")]
          gaslift,
        /// <summary>
        /// lostorstolen property
        /// </summary>
          [XmlEnum("lost or stolen")]
          lostorstolen,
        /// <summary>
        /// Physically removed from the entity location.
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the EstimationMethod xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the EstimationMethod xsd enumeration.")]
        public enum EstimationMethod 
        {
        /// <summary>
        /// analyticsmodel property
        /// </summary>
          [XmlEnum("analytics model")]
          analyticsmodel,
        /// <summary>
        /// declinecurve property
        /// </summary>
          [XmlEnum("decline curve")]
          declinecurve,
        /// <summary>
        /// expertrecommendation property
        /// </summary>
          [XmlEnum("expert recommendation")]
          expertrecommendation,
        /// <summary>
        /// flowingmaterialbalance property
        /// </summary>
          [XmlEnum("flowing material balance")]
          flowingmaterialbalance,
        /// <summary>
        /// fromlastallocatedvolume property
        /// </summary>
          [XmlEnum("from last allocated volume")]
          fromlastallocatedvolume,
        /// <summary>
        /// numericalreservoirsimulation property
        /// </summary>
          [XmlEnum("numerical reservoir simulation")]
          numericalreservoirsimulation,
        /// <summary>
        /// productionprofile property
        /// </summary>
          [XmlEnum("production profile")]
          productionprofile,
        /// <summary>
        /// ratetransientanalysis property
        /// </summary>
          [XmlEnum("rate transient analysis")]
          ratetransientanalysis,
        /// <summary>
        /// ratioanalysis property
        /// </summary>
          [XmlEnum("ratio analysis")]
          ratioanalysis,
        /// <summary>
        /// reservoirmodel property
        /// </summary>
          [XmlEnum("reservoir model")]
          reservoirmodel,
        /// <summary>
        /// wellmodel property
        /// </summary>
          [XmlEnum("well model")]
          wellmodel
        }
        /// <summary>
        /// This class represents the QuantityMethod xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/prodmlv2")]
        [Description("This class represents the QuantityMethod xsd enumeration.")]
        public enum QuantityMethod 
        {
        /// <summary>
        /// allocated
        /// </summary>
          allocated,
        /// <summary>
        /// allowed
        /// </summary>
          allowed,
        /// <summary>
        /// estimated
        /// </summary>
          estimated,
        /// <summary>
        /// target
        /// </summary>
          target,
        /// <summary>
        /// measured
        /// </summary>
          measured,
        /// <summary>
        /// budget
        /// </summary>
          budget,
        /// <summary>
        /// constraint
        /// </summary>
          constraint,
        /// <summary>
        /// forecast
        /// </summary>
          forecast
        }
    }
    #endregion
}